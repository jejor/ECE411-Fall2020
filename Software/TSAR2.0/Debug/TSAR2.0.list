
TSAR2.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f54  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e0  08007014  08007014  00017014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080071f4  080071f4  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  080071f4  080071f4  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  080071f4  080071f4  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080071f4  080071f4  000171f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080071f8  080071f8  000171f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080071fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005a8  20000084  08007280  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000062c  08007280  0002062c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d14b  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000220a  00000000  00000000  0002d1f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bf0  00000000  00000000  0002f408  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000af8  00000000  00000000  0002fff8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001abef  00000000  00000000  00030af0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b67d  00000000  00000000  0004b6df  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008ecf1  00000000  00000000  00056d5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e5a4d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003310  00000000  00000000  000e5ac8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000084 	.word	0x20000084
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006ffc 	.word	0x08006ffc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000088 	.word	0x20000088
 8000104:	08006ffc 	.word	0x08006ffc

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000230:	b590      	push	{r4, r7, lr}
 8000232:	4c64      	ldr	r4, [pc, #400]	; (80003c4 <main+0x194>)
 8000234:	44a5      	add	sp, r4
 8000236:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000238:	f000 fed8 	bl	8000fec <HAL_Init>

	/* USER CODE BEGIN Init */

	int safetyState[] = {0, 0, 1, 1, 1, 1, 1, 1, 1};
 800023c:	4b62      	ldr	r3, [pc, #392]	; (80003c8 <main+0x198>)
 800023e:	18fb      	adds	r3, r7, r3
 8000240:	4a62      	ldr	r2, [pc, #392]	; (80003cc <main+0x19c>)
 8000242:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000244:	c313      	stmia	r3!, {r0, r1, r4}
 8000246:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000248:	c313      	stmia	r3!, {r0, r1, r4}
 800024a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800024c:	c313      	stmia	r3!, {r0, r1, r4}

	char *file = "valveStateData.txt";
 800024e:	4b60      	ldr	r3, [pc, #384]	; (80003d0 <main+0x1a0>)
 8000250:	2297      	movs	r2, #151	; 0x97
 8000252:	00d2      	lsls	r2, r2, #3
 8000254:	18ba      	adds	r2, r7, r2
 8000256:	6013      	str	r3, [r2, #0]

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000258:	f000 f8c6 	bl	80003e8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800025c:	f000 f98c 	bl	8000578 <MX_GPIO_Init>
	MX_SPI1_Init();
 8000260:	f000 f91a 	bl	8000498 <MX_SPI1_Init>
	MX_USART1_UART_Init();
 8000264:	f000 f956 	bl	8000514 <MX_USART1_UART_Init>
	MX_FATFS_Init();
 8000268:	f002 fb4e 	bl	8002908 <MX_FATFS_Init>

	/* USER CODE BEGIN 2 */

	HAL_Delay(1000); //a short delay is important to let the SD card settle
 800026c:	23fa      	movs	r3, #250	; 0xfa
 800026e:	009b      	lsls	r3, r3, #2
 8000270:	0018      	movs	r0, r3
 8000272:	f000 ff1f 	bl	80010b4 <HAL_Delay>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		// Begin Tiffani's main program

		sensorState[0] = HAL_GPIO_ReadPin(GPIOA, Hall_Effect_Sensor_One_Pin);
 8000276:	2390      	movs	r3, #144	; 0x90
 8000278:	05db      	lsls	r3, r3, #23
 800027a:	2102      	movs	r1, #2
 800027c:	0018      	movs	r0, r3
 800027e:	f001 f957 	bl	8001530 <HAL_GPIO_ReadPin>
 8000282:	0003      	movs	r3, r0
 8000284:	001a      	movs	r2, r3
 8000286:	4c53      	ldr	r4, [pc, #332]	; (80003d4 <main+0x1a4>)
 8000288:	193b      	adds	r3, r7, r4
 800028a:	601a      	str	r2, [r3, #0]

		sensorState[1] = HAL_GPIO_ReadPin(GPIOA, Hall_Effect_Sensor_Two_Pin);
 800028c:	2390      	movs	r3, #144	; 0x90
 800028e:	05db      	lsls	r3, r3, #23
 8000290:	2104      	movs	r1, #4
 8000292:	0018      	movs	r0, r3
 8000294:	f001 f94c 	bl	8001530 <HAL_GPIO_ReadPin>
 8000298:	0003      	movs	r3, r0
 800029a:	001a      	movs	r2, r3
 800029c:	193b      	adds	r3, r7, r4
 800029e:	605a      	str	r2, [r3, #4]

		sensorState[2] = HAL_GPIO_ReadPin(GPIOA, Hall_Effect_Sensor_Three_Pin);
 80002a0:	2390      	movs	r3, #144	; 0x90
 80002a2:	05db      	lsls	r3, r3, #23
 80002a4:	2108      	movs	r1, #8
 80002a6:	0018      	movs	r0, r3
 80002a8:	f001 f942 	bl	8001530 <HAL_GPIO_ReadPin>
 80002ac:	0003      	movs	r3, r0
 80002ae:	001a      	movs	r2, r3
 80002b0:	193b      	adds	r3, r7, r4
 80002b2:	609a      	str	r2, [r3, #8]

		sensorState[3] = HAL_GPIO_ReadPin(GPIOA, Hall_Effect_Sensor_Four_Pin);
 80002b4:	2390      	movs	r3, #144	; 0x90
 80002b6:	05db      	lsls	r3, r3, #23
 80002b8:	2110      	movs	r1, #16
 80002ba:	0018      	movs	r0, r3
 80002bc:	f001 f938 	bl	8001530 <HAL_GPIO_ReadPin>
 80002c0:	0003      	movs	r3, r0
 80002c2:	001a      	movs	r2, r3
 80002c4:	193b      	adds	r3, r7, r4
 80002c6:	60da      	str	r2, [r3, #12]

		sensorState[4] = HAL_GPIO_ReadPin(GPIOB, Hall_Effect_Sensor_Five_Pin);
 80002c8:	4b43      	ldr	r3, [pc, #268]	; (80003d8 <main+0x1a8>)
 80002ca:	2180      	movs	r1, #128	; 0x80
 80002cc:	0018      	movs	r0, r3
 80002ce:	f001 f92f 	bl	8001530 <HAL_GPIO_ReadPin>
 80002d2:	0003      	movs	r3, r0
 80002d4:	001a      	movs	r2, r3
 80002d6:	193b      	adds	r3, r7, r4
 80002d8:	611a      	str	r2, [r3, #16]

		sensorState[5] = HAL_GPIO_ReadPin(GPIOB, Hall_Effect_Sensor_Six_Pin);
 80002da:	4b3f      	ldr	r3, [pc, #252]	; (80003d8 <main+0x1a8>)
 80002dc:	2140      	movs	r1, #64	; 0x40
 80002de:	0018      	movs	r0, r3
 80002e0:	f001 f926 	bl	8001530 <HAL_GPIO_ReadPin>
 80002e4:	0003      	movs	r3, r0
 80002e6:	001a      	movs	r2, r3
 80002e8:	193b      	adds	r3, r7, r4
 80002ea:	615a      	str	r2, [r3, #20]

		sensorState[6] = HAL_GPIO_ReadPin(GPIOA, Hall_Effect_Sensor_Seven_Pin);
 80002ec:	2380      	movs	r3, #128	; 0x80
 80002ee:	021a      	lsls	r2, r3, #8
 80002f0:	2390      	movs	r3, #144	; 0x90
 80002f2:	05db      	lsls	r3, r3, #23
 80002f4:	0011      	movs	r1, r2
 80002f6:	0018      	movs	r0, r3
 80002f8:	f001 f91a 	bl	8001530 <HAL_GPIO_ReadPin>
 80002fc:	0003      	movs	r3, r0
 80002fe:	001a      	movs	r2, r3
 8000300:	193b      	adds	r3, r7, r4
 8000302:	619a      	str	r2, [r3, #24]

		sensorState[7] = HAL_GPIO_ReadPin(GPIOA, Hall_Effect_Sensor_Eight_Pin);
 8000304:	2380      	movs	r3, #128	; 0x80
 8000306:	005a      	lsls	r2, r3, #1
 8000308:	2390      	movs	r3, #144	; 0x90
 800030a:	05db      	lsls	r3, r3, #23
 800030c:	0011      	movs	r1, r2
 800030e:	0018      	movs	r0, r3
 8000310:	f001 f90e 	bl	8001530 <HAL_GPIO_ReadPin>
 8000314:	0003      	movs	r3, r0
 8000316:	001a      	movs	r2, r3
 8000318:	193b      	adds	r3, r7, r4
 800031a:	61da      	str	r2, [r3, #28]

		sensorState[8] = HAL_GPIO_ReadPin(GPIOA, Hall_Effect_Sensor_Nine_Pin);
 800031c:	2390      	movs	r3, #144	; 0x90
 800031e:	05db      	lsls	r3, r3, #23
 8000320:	2101      	movs	r1, #1
 8000322:	0018      	movs	r0, r3
 8000324:	f001 f904 	bl	8001530 <HAL_GPIO_ReadPin>
 8000328:	0003      	movs	r3, r0
 800032a:	001a      	movs	r2, r3
 800032c:	193b      	adds	r3, r7, r4
 800032e:	621a      	str	r2, [r3, #32]

		sensorState[9] = 0;
 8000330:	193b      	adds	r3, r7, r4
 8000332:	2200      	movs	r2, #0
 8000334:	625a      	str	r2, [r3, #36]	; 0x24

		errorStatus = mainCheck(sensorState, safetyState, 0);
 8000336:	4b24      	ldr	r3, [pc, #144]	; (80003c8 <main+0x198>)
 8000338:	18f9      	adds	r1, r7, r3
 800033a:	193b      	adds	r3, r7, r4
 800033c:	2200      	movs	r2, #0
 800033e:	0018      	movs	r0, r3
 8000340:	f000 f99a 	bl	8000678 <mainCheck>
 8000344:	0003      	movs	r3, r0
 8000346:	4a25      	ldr	r2, [pc, #148]	; (80003dc <main+0x1ac>)
 8000348:	18ba      	adds	r2, r7, r2
 800034a:	6013      	str	r3, [r2, #0]

		for (int i = 0; i <= 9; i++)
 800034c:	2300      	movs	r3, #0
 800034e:	4a24      	ldr	r2, [pc, #144]	; (80003e0 <main+0x1b0>)
 8000350:	18ba      	adds	r2, r7, r2
 8000352:	6013      	str	r3, [r2, #0]
 8000354:	e016      	b.n	8000384 <main+0x154>
		{
			writeBuffer[i] = (char)(sensorState[i] + 48);
 8000356:	4b1f      	ldr	r3, [pc, #124]	; (80003d4 <main+0x1a4>)
 8000358:	18fb      	adds	r3, r7, r3
 800035a:	4821      	ldr	r0, [pc, #132]	; (80003e0 <main+0x1b0>)
 800035c:	183a      	adds	r2, r7, r0
 800035e:	6812      	ldr	r2, [r2, #0]
 8000360:	0092      	lsls	r2, r2, #2
 8000362:	58d3      	ldr	r3, [r2, r3]
 8000364:	b2db      	uxtb	r3, r3
 8000366:	3330      	adds	r3, #48	; 0x30
 8000368:	b2d9      	uxtb	r1, r3
 800036a:	2390      	movs	r3, #144	; 0x90
 800036c:	00db      	lsls	r3, r3, #3
 800036e:	18fa      	adds	r2, r7, r3
 8000370:	183b      	adds	r3, r7, r0
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	18d3      	adds	r3, r2, r3
 8000376:	1c0a      	adds	r2, r1, #0
 8000378:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i <= 9; i++)
 800037a:	183b      	adds	r3, r7, r0
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	3301      	adds	r3, #1
 8000380:	183a      	adds	r2, r7, r0
 8000382:	6013      	str	r3, [r2, #0]
 8000384:	4b16      	ldr	r3, [pc, #88]	; (80003e0 <main+0x1b0>)
 8000386:	18fb      	adds	r3, r7, r3
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	2b09      	cmp	r3, #9
 800038c:	dde3      	ble.n	8000356 <main+0x126>
		}

		//Open the file system
		f_mount(&FatFs, "", 1); // 1=mount now
 800038e:	4915      	ldr	r1, [pc, #84]	; (80003e4 <main+0x1b4>)
 8000390:	238b      	movs	r3, #139	; 0x8b
 8000392:	009b      	lsls	r3, r3, #2
 8000394:	18fb      	adds	r3, r7, r3
 8000396:	2201      	movs	r2, #1
 8000398:	0018      	movs	r0, r3
 800039a:	f004 fbb3 	bl	8004b04 <f_mount>

		WriteFile(file, writeBuffer, sizeof(writeBuffer));
 800039e:	2390      	movs	r3, #144	; 0x90
 80003a0:	00db      	lsls	r3, r3, #3
 80003a2:	18f9      	adds	r1, r7, r3
 80003a4:	2397      	movs	r3, #151	; 0x97
 80003a6:	00db      	lsls	r3, r3, #3
 80003a8:	18fb      	adds	r3, r7, r3
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	220b      	movs	r2, #11
 80003ae:	0018      	movs	r0, r3
 80003b0:	f000 fbca 	bl	8000b48 <WriteFile>
		//Be a tidy kiwi - don't forget to close your file!
		f_close(&fil);

		//We're done, so de-mount the drive
		*/
		f_mount(NULL, "", 0);
 80003b4:	4b0b      	ldr	r3, [pc, #44]	; (80003e4 <main+0x1b4>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	0019      	movs	r1, r3
 80003ba:	2000      	movs	r0, #0
 80003bc:	f004 fba2 	bl	8004b04 <f_mount>
		sensorState[0] = HAL_GPIO_ReadPin(GPIOA, Hall_Effect_Sensor_One_Pin);
 80003c0:	e759      	b.n	8000276 <main+0x46>
 80003c2:	46c0      	nop			; (mov r8, r8)
 80003c4:	fffffb3c 	.word	0xfffffb3c
 80003c8:	0000045c 	.word	0x0000045c
 80003cc:	0800702c 	.word	0x0800702c
 80003d0:	08007014 	.word	0x08007014
 80003d4:	0000048c 	.word	0x0000048c
 80003d8:	48000400 	.word	0x48000400
 80003dc:	000004b4 	.word	0x000004b4
 80003e0:	000004bc 	.word	0x000004bc
 80003e4:	08007028 	.word	0x08007028

080003e8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80003e8:	b590      	push	{r4, r7, lr}
 80003ea:	b099      	sub	sp, #100	; 0x64
 80003ec:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80003ee:	242c      	movs	r4, #44	; 0x2c
 80003f0:	193b      	adds	r3, r7, r4
 80003f2:	0018      	movs	r0, r3
 80003f4:	2334      	movs	r3, #52	; 0x34
 80003f6:	001a      	movs	r2, r3
 80003f8:	2100      	movs	r1, #0
 80003fa:	f006 f880 	bl	80064fe <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80003fe:	231c      	movs	r3, #28
 8000400:	18fb      	adds	r3, r7, r3
 8000402:	0018      	movs	r0, r3
 8000404:	2310      	movs	r3, #16
 8000406:	001a      	movs	r2, r3
 8000408:	2100      	movs	r1, #0
 800040a:	f006 f878 	bl	80064fe <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 800040e:	1d3b      	adds	r3, r7, #4
 8000410:	0018      	movs	r0, r3
 8000412:	2318      	movs	r3, #24
 8000414:	001a      	movs	r2, r3
 8000416:	2100      	movs	r1, #0
 8000418:	f006 f871 	bl	80064fe <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800041c:	0021      	movs	r1, r4
 800041e:	187b      	adds	r3, r7, r1
 8000420:	2202      	movs	r2, #2
 8000422:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000424:	187b      	adds	r3, r7, r1
 8000426:	2201      	movs	r2, #1
 8000428:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800042a:	187b      	adds	r3, r7, r1
 800042c:	2210      	movs	r2, #16
 800042e:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000430:	187b      	adds	r3, r7, r1
 8000432:	2200      	movs	r2, #0
 8000434:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000436:	187b      	adds	r3, r7, r1
 8000438:	0018      	movs	r0, r3
 800043a:	f001 f8b3 	bl	80015a4 <HAL_RCC_OscConfig>
 800043e:	1e03      	subs	r3, r0, #0
 8000440:	d001      	beq.n	8000446 <SystemClock_Config+0x5e>
		Error_Handler();
 8000442:	f000 fc05 	bl	8000c50 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000446:	211c      	movs	r1, #28
 8000448:	187b      	adds	r3, r7, r1
 800044a:	2207      	movs	r2, #7
 800044c:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800044e:	187b      	adds	r3, r7, r1
 8000450:	2200      	movs	r2, #0
 8000452:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000454:	187b      	adds	r3, r7, r1
 8000456:	2200      	movs	r2, #0
 8000458:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800045a:	187b      	adds	r3, r7, r1
 800045c:	2200      	movs	r2, #0
 800045e:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000460:	187b      	adds	r3, r7, r1
 8000462:	2100      	movs	r1, #0
 8000464:	0018      	movs	r0, r3
 8000466:	f001 fc23 	bl	8001cb0 <HAL_RCC_ClockConfig>
 800046a:	1e03      	subs	r3, r0, #0
 800046c:	d001      	beq.n	8000472 <SystemClock_Config+0x8a>
		Error_Handler();
 800046e:	f000 fbef 	bl	8000c50 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000472:	1d3b      	adds	r3, r7, #4
 8000474:	2201      	movs	r2, #1
 8000476:	601a      	str	r2, [r3, #0]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000478:	1d3b      	adds	r3, r7, #4
 800047a:	2200      	movs	r2, #0
 800047c:	609a      	str	r2, [r3, #8]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 800047e:	1d3b      	adds	r3, r7, #4
 8000480:	0018      	movs	r0, r3
 8000482:	f001 fd8d 	bl	8001fa0 <HAL_RCCEx_PeriphCLKConfig>
 8000486:	1e03      	subs	r3, r0, #0
 8000488:	d001      	beq.n	800048e <SystemClock_Config+0xa6>
		Error_Handler();
 800048a:	f000 fbe1 	bl	8000c50 <Error_Handler>
	}
}
 800048e:	46c0      	nop			; (mov r8, r8)
 8000490:	46bd      	mov	sp, r7
 8000492:	b019      	add	sp, #100	; 0x64
 8000494:	bd90      	pop	{r4, r7, pc}
	...

08000498 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 800049c:	4b1b      	ldr	r3, [pc, #108]	; (800050c <MX_SPI1_Init+0x74>)
 800049e:	4a1c      	ldr	r2, [pc, #112]	; (8000510 <MX_SPI1_Init+0x78>)
 80004a0:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80004a2:	4b1a      	ldr	r3, [pc, #104]	; (800050c <MX_SPI1_Init+0x74>)
 80004a4:	2282      	movs	r2, #130	; 0x82
 80004a6:	0052      	lsls	r2, r2, #1
 80004a8:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80004aa:	4b18      	ldr	r3, [pc, #96]	; (800050c <MX_SPI1_Init+0x74>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80004b0:	4b16      	ldr	r3, [pc, #88]	; (800050c <MX_SPI1_Init+0x74>)
 80004b2:	22e0      	movs	r2, #224	; 0xe0
 80004b4:	00d2      	lsls	r2, r2, #3
 80004b6:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80004b8:	4b14      	ldr	r3, [pc, #80]	; (800050c <MX_SPI1_Init+0x74>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80004be:	4b13      	ldr	r3, [pc, #76]	; (800050c <MX_SPI1_Init+0x74>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80004c4:	4b11      	ldr	r3, [pc, #68]	; (800050c <MX_SPI1_Init+0x74>)
 80004c6:	2280      	movs	r2, #128	; 0x80
 80004c8:	0092      	lsls	r2, r2, #2
 80004ca:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80004cc:	4b0f      	ldr	r3, [pc, #60]	; (800050c <MX_SPI1_Init+0x74>)
 80004ce:	2230      	movs	r2, #48	; 0x30
 80004d0:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80004d2:	4b0e      	ldr	r3, [pc, #56]	; (800050c <MX_SPI1_Init+0x74>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80004d8:	4b0c      	ldr	r3, [pc, #48]	; (800050c <MX_SPI1_Init+0x74>)
 80004da:	2200      	movs	r2, #0
 80004dc:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80004de:	4b0b      	ldr	r3, [pc, #44]	; (800050c <MX_SPI1_Init+0x74>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 80004e4:	4b09      	ldr	r3, [pc, #36]	; (800050c <MX_SPI1_Init+0x74>)
 80004e6:	2207      	movs	r2, #7
 80004e8:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80004ea:	4b08      	ldr	r3, [pc, #32]	; (800050c <MX_SPI1_Init+0x74>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80004f0:	4b06      	ldr	r3, [pc, #24]	; (800050c <MX_SPI1_Init+0x74>)
 80004f2:	2208      	movs	r2, #8
 80004f4:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80004f6:	4b05      	ldr	r3, [pc, #20]	; (800050c <MX_SPI1_Init+0x74>)
 80004f8:	0018      	movs	r0, r3
 80004fa:	f001 fe3f 	bl	800217c <HAL_SPI_Init>
 80004fe:	1e03      	subs	r3, r0, #0
 8000500:	d001      	beq.n	8000506 <MX_SPI1_Init+0x6e>
		Error_Handler();
 8000502:	f000 fba5 	bl	8000c50 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000506:	46c0      	nop			; (mov r8, r8)
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	2000015c 	.word	0x2000015c
 8000510:	40013000 	.word	0x40013000

08000514 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000518:	4b15      	ldr	r3, [pc, #84]	; (8000570 <MX_USART1_UART_Init+0x5c>)
 800051a:	4a16      	ldr	r2, [pc, #88]	; (8000574 <MX_USART1_UART_Init+0x60>)
 800051c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 38400;
 800051e:	4b14      	ldr	r3, [pc, #80]	; (8000570 <MX_USART1_UART_Init+0x5c>)
 8000520:	2296      	movs	r2, #150	; 0x96
 8000522:	0212      	lsls	r2, r2, #8
 8000524:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000526:	4b12      	ldr	r3, [pc, #72]	; (8000570 <MX_USART1_UART_Init+0x5c>)
 8000528:	2200      	movs	r2, #0
 800052a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800052c:	4b10      	ldr	r3, [pc, #64]	; (8000570 <MX_USART1_UART_Init+0x5c>)
 800052e:	2200      	movs	r2, #0
 8000530:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000532:	4b0f      	ldr	r3, [pc, #60]	; (8000570 <MX_USART1_UART_Init+0x5c>)
 8000534:	2200      	movs	r2, #0
 8000536:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000538:	4b0d      	ldr	r3, [pc, #52]	; (8000570 <MX_USART1_UART_Init+0x5c>)
 800053a:	220c      	movs	r2, #12
 800053c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800053e:	4b0c      	ldr	r3, [pc, #48]	; (8000570 <MX_USART1_UART_Init+0x5c>)
 8000540:	22c0      	movs	r2, #192	; 0xc0
 8000542:	0092      	lsls	r2, r2, #2
 8000544:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000546:	4b0a      	ldr	r3, [pc, #40]	; (8000570 <MX_USART1_UART_Init+0x5c>)
 8000548:	2200      	movs	r2, #0
 800054a:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800054c:	4b08      	ldr	r3, [pc, #32]	; (8000570 <MX_USART1_UART_Init+0x5c>)
 800054e:	2200      	movs	r2, #0
 8000550:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000552:	4b07      	ldr	r3, [pc, #28]	; (8000570 <MX_USART1_UART_Init+0x5c>)
 8000554:	2200      	movs	r2, #0
 8000556:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000558:	4b05      	ldr	r3, [pc, #20]	; (8000570 <MX_USART1_UART_Init+0x5c>)
 800055a:	0018      	movs	r0, r3
 800055c:	f001 fec6 	bl	80022ec <HAL_UART_Init>
 8000560:	1e03      	subs	r3, r0, #0
 8000562:	d001      	beq.n	8000568 <MX_USART1_UART_Init+0x54>
		Error_Handler();
 8000564:	f000 fb74 	bl	8000c50 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000568:	46c0      	nop			; (mov r8, r8)
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	46c0      	nop			; (mov r8, r8)
 8000570:	200000d8 	.word	0x200000d8
 8000574:	40013800 	.word	0x40013800

08000578 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000578:	b590      	push	{r4, r7, lr}
 800057a:	b089      	sub	sp, #36	; 0x24
 800057c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800057e:	240c      	movs	r4, #12
 8000580:	193b      	adds	r3, r7, r4
 8000582:	0018      	movs	r0, r3
 8000584:	2314      	movs	r3, #20
 8000586:	001a      	movs	r2, r3
 8000588:	2100      	movs	r1, #0
 800058a:	f005 ffb8 	bl	80064fe <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800058e:	4b37      	ldr	r3, [pc, #220]	; (800066c <MX_GPIO_Init+0xf4>)
 8000590:	695a      	ldr	r2, [r3, #20]
 8000592:	4b36      	ldr	r3, [pc, #216]	; (800066c <MX_GPIO_Init+0xf4>)
 8000594:	2180      	movs	r1, #128	; 0x80
 8000596:	0289      	lsls	r1, r1, #10
 8000598:	430a      	orrs	r2, r1
 800059a:	615a      	str	r2, [r3, #20]
 800059c:	4b33      	ldr	r3, [pc, #204]	; (800066c <MX_GPIO_Init+0xf4>)
 800059e:	695a      	ldr	r2, [r3, #20]
 80005a0:	2380      	movs	r3, #128	; 0x80
 80005a2:	029b      	lsls	r3, r3, #10
 80005a4:	4013      	ands	r3, r2
 80005a6:	60bb      	str	r3, [r7, #8]
 80005a8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80005aa:	4b30      	ldr	r3, [pc, #192]	; (800066c <MX_GPIO_Init+0xf4>)
 80005ac:	695a      	ldr	r2, [r3, #20]
 80005ae:	4b2f      	ldr	r3, [pc, #188]	; (800066c <MX_GPIO_Init+0xf4>)
 80005b0:	2180      	movs	r1, #128	; 0x80
 80005b2:	02c9      	lsls	r1, r1, #11
 80005b4:	430a      	orrs	r2, r1
 80005b6:	615a      	str	r2, [r3, #20]
 80005b8:	4b2c      	ldr	r3, [pc, #176]	; (800066c <MX_GPIO_Init+0xf4>)
 80005ba:	695a      	ldr	r2, [r3, #20]
 80005bc:	2380      	movs	r3, #128	; 0x80
 80005be:	02db      	lsls	r3, r3, #11
 80005c0:	4013      	ands	r3, r2
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 80005c6:	4b2a      	ldr	r3, [pc, #168]	; (8000670 <MX_GPIO_Init+0xf8>)
 80005c8:	2201      	movs	r2, #1
 80005ca:	213b      	movs	r1, #59	; 0x3b
 80005cc:	0018      	movs	r0, r3
 80005ce:	f000 ffcc 	bl	800156a <HAL_GPIO_WritePin>
			Buzzer_Pin | SD_CS_Pin | LED_Three_Pin | LED_Two_Pin | LED_One_Pin,
			GPIO_PIN_SET);

	/*Configure GPIO pins : Hall_Effect_Sensor_Nine_Pin Hall_Effect_Sensor_One_Pin Hall_Effect_Sensor_Two_Pin Hall_Effect_Sensor_Three_Pin
	 Hall_Effect_Sensor_Four_Pin Hall_Effect_Sensor_Eight_Pin Hall_Effect_Sensor_Seven_Pin */
	GPIO_InitStruct.Pin = Hall_Effect_Sensor_Nine_Pin
 80005d2:	193b      	adds	r3, r7, r4
 80005d4:	4a27      	ldr	r2, [pc, #156]	; (8000674 <MX_GPIO_Init+0xfc>)
 80005d6:	601a      	str	r2, [r3, #0]
			| Hall_Effect_Sensor_One_Pin | Hall_Effect_Sensor_Two_Pin
			| Hall_Effect_Sensor_Three_Pin | Hall_Effect_Sensor_Four_Pin
			| Hall_Effect_Sensor_Eight_Pin | Hall_Effect_Sensor_Seven_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005d8:	193b      	adds	r3, r7, r4
 80005da:	2200      	movs	r2, #0
 80005dc:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005de:	193b      	adds	r3, r7, r4
 80005e0:	2201      	movs	r2, #1
 80005e2:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e4:	193a      	adds	r2, r7, r4
 80005e6:	2390      	movs	r3, #144	; 0x90
 80005e8:	05db      	lsls	r3, r3, #23
 80005ea:	0011      	movs	r1, r2
 80005ec:	0018      	movs	r0, r3
 80005ee:	f000 fe37 	bl	8001260 <HAL_GPIO_Init>

	/*Configure GPIO pins : Buzzer_Pin LED_Three_Pin LED_Two_Pin LED_One_Pin */
	GPIO_InitStruct.Pin =
 80005f2:	0021      	movs	r1, r4
 80005f4:	187b      	adds	r3, r7, r1
 80005f6:	2239      	movs	r2, #57	; 0x39
 80005f8:	601a      	str	r2, [r3, #0]
			Buzzer_Pin | LED_Three_Pin | LED_Two_Pin | LED_One_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005fa:	187b      	adds	r3, r7, r1
 80005fc:	2201      	movs	r2, #1
 80005fe:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000600:	187b      	adds	r3, r7, r1
 8000602:	2202      	movs	r2, #2
 8000604:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000606:	187b      	adds	r3, r7, r1
 8000608:	2200      	movs	r2, #0
 800060a:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800060c:	000c      	movs	r4, r1
 800060e:	187b      	adds	r3, r7, r1
 8000610:	4a17      	ldr	r2, [pc, #92]	; (8000670 <MX_GPIO_Init+0xf8>)
 8000612:	0019      	movs	r1, r3
 8000614:	0010      	movs	r0, r2
 8000616:	f000 fe23 	bl	8001260 <HAL_GPIO_Init>

	/*Configure GPIO pin : SD_CS_Pin */
	GPIO_InitStruct.Pin = SD_CS_Pin;
 800061a:	0021      	movs	r1, r4
 800061c:	187b      	adds	r3, r7, r1
 800061e:	2202      	movs	r2, #2
 8000620:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000622:	187b      	adds	r3, r7, r1
 8000624:	2201      	movs	r2, #1
 8000626:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000628:	187b      	adds	r3, r7, r1
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800062e:	187b      	adds	r3, r7, r1
 8000630:	2200      	movs	r2, #0
 8000632:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8000634:	000c      	movs	r4, r1
 8000636:	187b      	adds	r3, r7, r1
 8000638:	4a0d      	ldr	r2, [pc, #52]	; (8000670 <MX_GPIO_Init+0xf8>)
 800063a:	0019      	movs	r1, r3
 800063c:	0010      	movs	r0, r2
 800063e:	f000 fe0f 	bl	8001260 <HAL_GPIO_Init>

	/*Configure GPIO pins : Hall_Effect_Sensor_Six_Pin Hall_Effect_Sensor_Five_Pin */
	GPIO_InitStruct.Pin = Hall_Effect_Sensor_Six_Pin
 8000642:	0021      	movs	r1, r4
 8000644:	187b      	adds	r3, r7, r1
 8000646:	22c0      	movs	r2, #192	; 0xc0
 8000648:	601a      	str	r2, [r3, #0]
			| Hall_Effect_Sensor_Five_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800064a:	187b      	adds	r3, r7, r1
 800064c:	2200      	movs	r2, #0
 800064e:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000650:	187b      	adds	r3, r7, r1
 8000652:	2201      	movs	r2, #1
 8000654:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000656:	187b      	adds	r3, r7, r1
 8000658:	4a05      	ldr	r2, [pc, #20]	; (8000670 <MX_GPIO_Init+0xf8>)
 800065a:	0019      	movs	r1, r3
 800065c:	0010      	movs	r0, r2
 800065e:	f000 fdff 	bl	8001260 <HAL_GPIO_Init>

}
 8000662:	46c0      	nop			; (mov r8, r8)
 8000664:	46bd      	mov	sp, r7
 8000666:	b009      	add	sp, #36	; 0x24
 8000668:	bd90      	pop	{r4, r7, pc}
 800066a:	46c0      	nop			; (mov r8, r8)
 800066c:	40021000 	.word	0x40021000
 8000670:	48000400 	.word	0x48000400
 8000674:	0000811f 	.word	0x0000811f

08000678 <mainCheck>:
/* USER CODE BEGIN 4 */

// Begin Katie's PF's

int mainCheck(int valveCState[], int valveExState[], int batteryState)
{
 8000678:	b590      	push	{r4, r7, lr}
 800067a:	b093      	sub	sp, #76	; 0x4c
 800067c:	af00      	add	r7, sp, #0
 800067e:	60f8      	str	r0, [r7, #12]
 8000680:	60b9      	str	r1, [r7, #8]
 8000682:	607a      	str	r2, [r7, #4]
	//For tracking error status, only says that we have an error
	int errorButton = 0;
 8000684:	2300      	movs	r3, #0
 8000686:	63fb      	str	r3, [r7, #60]	; 0x3c

	//Keeps track of which state of error that we are in
	//0 = all good, 1 = minor error, 2 = bigger error, 3 = major error, 4 = power failure
	int errorState = 0;
 8000688:	2300      	movs	r3, #0
 800068a:	647b      	str	r3, [r7, #68]	; 0x44
	//array keeps track of which valves are in error
	int valvesInError[10]; //0 = good, 1 = error

	//initializing error array
	//10th index is for power
	int i = 0;
 800068c:	2300      	movs	r3, #0
 800068e:	643b      	str	r3, [r7, #64]	; 0x40
	for (i=0; i<9; ++i)
 8000690:	2300      	movs	r3, #0
 8000692:	643b      	str	r3, [r7, #64]	; 0x40
 8000694:	e008      	b.n	80006a8 <mainCheck+0x30>
	{
		valvesInError[i] = 0;
 8000696:	2314      	movs	r3, #20
 8000698:	18fb      	adds	r3, r7, r3
 800069a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800069c:	0092      	lsls	r2, r2, #2
 800069e:	2100      	movs	r1, #0
 80006a0:	50d1      	str	r1, [r2, r3]
	for (i=0; i<9; ++i)
 80006a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80006a4:	3301      	adds	r3, #1
 80006a6:	643b      	str	r3, [r7, #64]	; 0x40
 80006a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80006aa:	2b08      	cmp	r3, #8
 80006ac:	ddf3      	ble.n	8000696 <mainCheck+0x1e>
	}
	valvesInError[9] = batteryState;
 80006ae:	2114      	movs	r1, #20
 80006b0:	187b      	adds	r3, r7, r1
 80006b2:	687a      	ldr	r2, [r7, #4]
 80006b4:	625a      	str	r2, [r3, #36]	; 0x24

	errorButton = checkState(valveCState, valveExState, valvesInError);
 80006b6:	187a      	adds	r2, r7, r1
 80006b8:	68b9      	ldr	r1, [r7, #8]
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	0018      	movs	r0, r3
 80006be:	f000 f820 	bl	8000702 <checkState>
 80006c2:	0003      	movs	r3, r0
 80006c4:	63fb      	str	r3, [r7, #60]	; 0x3c

	if(errorButton == 1)
 80006c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006c8:	2b01      	cmp	r3, #1
 80006ca:	d10c      	bne.n	80006e6 <mainCheck+0x6e>
		{
			errorState = errorFound(valvesInError);
 80006cc:	2414      	movs	r4, #20
 80006ce:	193b      	adds	r3, r7, r4
 80006d0:	0018      	movs	r0, r3
 80006d2:	f000 f8a5 	bl	8000820 <errorFound>
 80006d6:	0003      	movs	r3, r0
 80006d8:	647b      	str	r3, [r7, #68]	; 0x44
			isError(valvesInError, errorState);
 80006da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80006dc:	193b      	adds	r3, r7, r4
 80006de:	0011      	movs	r1, r2
 80006e0:	0018      	movs	r0, r3
 80006e2:	f000 f8ed 	bl	80008c0 <isError>
		}
		//clear any errors that may have been occurring
		if(errorButton == 0)
 80006e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d105      	bne.n	80006f8 <mainCheck+0x80>
		{
			buzzOff();
 80006ec:	f000 f944 	bl	8000978 <buzzOff>
			ledOff();
 80006f0:	f000 f9ca 	bl	8000a88 <ledOff>
			errorState = 0;
 80006f4:	2300      	movs	r3, #0
 80006f6:	647b      	str	r3, [r7, #68]	; 0x44
		}

		return errorState;
 80006f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
	}
 80006fa:	0018      	movs	r0, r3
 80006fc:	46bd      	mov	sp, r7
 80006fe:	b013      	add	sp, #76	; 0x4c
 8000700:	bd90      	pop	{r4, r7, pc}

08000702 <checkState>:

//returns error level (0-4)
int checkState(int valveCState[], int valveExState[], int valvesInError[]) {
 8000702:	b580      	push	{r7, lr}
 8000704:	b086      	sub	sp, #24
 8000706:	af00      	add	r7, sp, #0
 8000708:	60f8      	str	r0, [r7, #12]
 800070a:	60b9      	str	r1, [r7, #8]
 800070c:	607a      	str	r2, [r7, #4]
	//If 1, then an error has occured
	int errorButton = 0;
 800070e:	2300      	movs	r3, #0
 8000710:	617b      	str	r3, [r7, #20]

	//checking each valve for an error
	if (valveCState[0] != valveExState[0]) {
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	681a      	ldr	r2, [r3, #0]
 8000716:	68bb      	ldr	r3, [r7, #8]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	429a      	cmp	r2, r3
 800071c:	d004      	beq.n	8000728 <checkState+0x26>
		errorButton = 1;
 800071e:	2301      	movs	r3, #1
 8000720:	617b      	str	r3, [r7, #20]
		valvesInError[0] = 1;
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	2201      	movs	r2, #1
 8000726:	601a      	str	r2, [r3, #0]
	}
	if (valveCState[1] != valveExState[1]) {
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	3304      	adds	r3, #4
 800072c:	681a      	ldr	r2, [r3, #0]
 800072e:	68bb      	ldr	r3, [r7, #8]
 8000730:	3304      	adds	r3, #4
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	429a      	cmp	r2, r3
 8000736:	d005      	beq.n	8000744 <checkState+0x42>
		errorButton = 1;
 8000738:	2301      	movs	r3, #1
 800073a:	617b      	str	r3, [r7, #20]
		valvesInError[1] = 1;
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	3304      	adds	r3, #4
 8000740:	2201      	movs	r2, #1
 8000742:	601a      	str	r2, [r3, #0]
	}
	if (valveCState[2] != valveExState[2]) {
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	3308      	adds	r3, #8
 8000748:	681a      	ldr	r2, [r3, #0]
 800074a:	68bb      	ldr	r3, [r7, #8]
 800074c:	3308      	adds	r3, #8
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	429a      	cmp	r2, r3
 8000752:	d005      	beq.n	8000760 <checkState+0x5e>
		errorButton = 1;
 8000754:	2301      	movs	r3, #1
 8000756:	617b      	str	r3, [r7, #20]
		valvesInError[2] = 1;
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	3308      	adds	r3, #8
 800075c:	2201      	movs	r2, #1
 800075e:	601a      	str	r2, [r3, #0]
	}
	if (valveCState[3] != valveExState[3]) {
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	330c      	adds	r3, #12
 8000764:	681a      	ldr	r2, [r3, #0]
 8000766:	68bb      	ldr	r3, [r7, #8]
 8000768:	330c      	adds	r3, #12
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	429a      	cmp	r2, r3
 800076e:	d005      	beq.n	800077c <checkState+0x7a>
		errorButton = 1;
 8000770:	2301      	movs	r3, #1
 8000772:	617b      	str	r3, [r7, #20]
		valvesInError[3] = 1;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	330c      	adds	r3, #12
 8000778:	2201      	movs	r2, #1
 800077a:	601a      	str	r2, [r3, #0]
	}
	if (valveCState[4] != valveExState[4]) {
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	3310      	adds	r3, #16
 8000780:	681a      	ldr	r2, [r3, #0]
 8000782:	68bb      	ldr	r3, [r7, #8]
 8000784:	3310      	adds	r3, #16
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	429a      	cmp	r2, r3
 800078a:	d005      	beq.n	8000798 <checkState+0x96>
		errorButton = 1;
 800078c:	2301      	movs	r3, #1
 800078e:	617b      	str	r3, [r7, #20]
		valvesInError[4] = 1;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	3310      	adds	r3, #16
 8000794:	2201      	movs	r2, #1
 8000796:	601a      	str	r2, [r3, #0]
	}
	if (valveCState[5] != valveExState[5]) {
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	3314      	adds	r3, #20
 800079c:	681a      	ldr	r2, [r3, #0]
 800079e:	68bb      	ldr	r3, [r7, #8]
 80007a0:	3314      	adds	r3, #20
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	429a      	cmp	r2, r3
 80007a6:	d005      	beq.n	80007b4 <checkState+0xb2>
		errorButton = 1;
 80007a8:	2301      	movs	r3, #1
 80007aa:	617b      	str	r3, [r7, #20]
		valvesInError[5] = 1;
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	3314      	adds	r3, #20
 80007b0:	2201      	movs	r2, #1
 80007b2:	601a      	str	r2, [r3, #0]
	}
	if (valveCState[6] != valveExState[6]) {
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	3318      	adds	r3, #24
 80007b8:	681a      	ldr	r2, [r3, #0]
 80007ba:	68bb      	ldr	r3, [r7, #8]
 80007bc:	3318      	adds	r3, #24
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	429a      	cmp	r2, r3
 80007c2:	d005      	beq.n	80007d0 <checkState+0xce>
		errorButton = 1;
 80007c4:	2301      	movs	r3, #1
 80007c6:	617b      	str	r3, [r7, #20]
		valvesInError[6] = 1;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	3318      	adds	r3, #24
 80007cc:	2201      	movs	r2, #1
 80007ce:	601a      	str	r2, [r3, #0]
	}
	if (valveCState[7] != valveExState[7]) {
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	331c      	adds	r3, #28
 80007d4:	681a      	ldr	r2, [r3, #0]
 80007d6:	68bb      	ldr	r3, [r7, #8]
 80007d8:	331c      	adds	r3, #28
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	429a      	cmp	r2, r3
 80007de:	d005      	beq.n	80007ec <checkState+0xea>
		errorButton = 1;
 80007e0:	2301      	movs	r3, #1
 80007e2:	617b      	str	r3, [r7, #20]
		valvesInError[7] = 1;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	331c      	adds	r3, #28
 80007e8:	2201      	movs	r2, #1
 80007ea:	601a      	str	r2, [r3, #0]
	}
	if (valveCState[8] != valveExState[8]) {
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	3320      	adds	r3, #32
 80007f0:	681a      	ldr	r2, [r3, #0]
 80007f2:	68bb      	ldr	r3, [r7, #8]
 80007f4:	3320      	adds	r3, #32
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	429a      	cmp	r2, r3
 80007fa:	d005      	beq.n	8000808 <checkState+0x106>
		errorButton = 1;
 80007fc:	2301      	movs	r3, #1
 80007fe:	617b      	str	r3, [r7, #20]
		valvesInError[8] = 1;
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	3320      	adds	r3, #32
 8000804:	2201      	movs	r2, #1
 8000806:	601a      	str	r2, [r3, #0]
	}
	if (valvesInError[9] == 1) {
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	3324      	adds	r3, #36	; 0x24
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	2b01      	cmp	r3, #1
 8000810:	d101      	bne.n	8000816 <checkState+0x114>
		errorButton = 1;
 8000812:	2301      	movs	r3, #1
 8000814:	617b      	str	r3, [r7, #20]
	}

	return errorButton;
 8000816:	697b      	ldr	r3, [r7, #20]
}
 8000818:	0018      	movs	r0, r3
 800081a:	46bd      	mov	sp, r7
 800081c:	b006      	add	sp, #24
 800081e:	bd80      	pop	{r7, pc}

08000820 <errorFound>:

//when in doubt, error out
//returns a value depending on which level of error is found
int errorFound(int valvesInError[]) {
 8000820:	b580      	push	{r7, lr}
 8000822:	b084      	sub	sp, #16
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
	int errorLevel = 0;
 8000828:	2300      	movs	r3, #0
 800082a:	60fb      	str	r3, [r7, #12]
// SOV_F01		//0 - 6
// PV_LF01		//8 - 7
// PV_P01		//6 - 8
// PV_P02		//7 - 9
//Error level is set to highest prior valve
	if (valvesInError[7])
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	331c      	adds	r3, #28
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <errorFound+0x1a>
		errorLevel = 1;
 8000836:	2301      	movs	r3, #1
 8000838:	60fb      	str	r3, [r7, #12]
	if (valvesInError[6])
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	3318      	adds	r3, #24
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <errorFound+0x28>
		errorLevel = 1;
 8000844:	2301      	movs	r3, #1
 8000846:	60fb      	str	r3, [r7, #12]
	if (valvesInError[8])
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	3320      	adds	r3, #32
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <errorFound+0x36>
		errorLevel = 1;
 8000852:	2301      	movs	r3, #1
 8000854:	60fb      	str	r3, [r7, #12]
	if (valvesInError[0])
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <errorFound+0x42>
		errorLevel = 1;
 800085e:	2301      	movs	r3, #1
 8000860:	60fb      	str	r3, [r7, #12]
	if (valvesInError[1])
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	3304      	adds	r3, #4
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <errorFound+0x50>
		errorLevel = 2;
 800086c:	2302      	movs	r3, #2
 800086e:	60fb      	str	r3, [r7, #12]
	if (valvesInError[3])
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	330c      	adds	r3, #12
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <errorFound+0x5e>
		errorLevel = 2;
 800087a:	2302      	movs	r3, #2
 800087c:	60fb      	str	r3, [r7, #12]
	if (valvesInError[2])
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	3308      	adds	r3, #8
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <errorFound+0x6c>
		errorLevel = 2;
 8000888:	2302      	movs	r3, #2
 800088a:	60fb      	str	r3, [r7, #12]
	if (valvesInError[5])
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	3314      	adds	r3, #20
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <errorFound+0x7a>
		errorLevel = 3;
 8000896:	2303      	movs	r3, #3
 8000898:	60fb      	str	r3, [r7, #12]
	if (valvesInError[4])
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	3310      	adds	r3, #16
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <errorFound+0x88>
		errorLevel = 3;
 80008a4:	2303      	movs	r3, #3
 80008a6:	60fb      	str	r3, [r7, #12]
	if (valvesInError[9]) //power failure on battery, nothing else matters
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	3324      	adds	r3, #36	; 0x24
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <errorFound+0x96>
		errorLevel = 4;
 80008b2:	2304      	movs	r3, #4
 80008b4:	60fb      	str	r3, [r7, #12]

	return errorLevel;
 80008b6:	68fb      	ldr	r3, [r7, #12]
}
 80008b8:	0018      	movs	r0, r3
 80008ba:	46bd      	mov	sp, r7
 80008bc:	b004      	add	sp, #16
 80008be:	bd80      	pop	{r7, pc}

080008c0 <isError>:

int isError(int valvesInError[], int errorLevel) {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
 80008c8:	6039      	str	r1, [r7, #0]
	//The buzzer doesn't get turned off until error is cleared
	buzzOn();
 80008ca:	f000 f847 	bl	800095c <buzzOn>

	if (errorLevel == 4) {
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	2b04      	cmp	r3, #4
 80008d2:	d103      	bne.n	80008dc <isError+0x1c>
		powerFailureState(); //It is currently not expected that we can return from this state without a restart
 80008d4:	f000 f8f2 	bl	8000abc <powerFailureState>
		return 1;
 80008d8:	2301      	movs	r3, #1
 80008da:	e03a      	b.n	8000952 <isError+0x92>
	}

	int i = 0;
 80008dc:	2300      	movs	r3, #0
 80008de:	60fb      	str	r3, [r7, #12]
	for (i = 0; i < 6; ++i) {
 80008e0:	2300      	movs	r3, #0
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	e012      	b.n	800090c <isError+0x4c>
		ledOn(errorLevel);
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	0018      	movs	r0, r3
 80008ea:	f000 f853 	bl	8000994 <ledOn>
		HAL_Delay(1000);
 80008ee:	23fa      	movs	r3, #250	; 0xfa
 80008f0:	009b      	lsls	r3, r3, #2
 80008f2:	0018      	movs	r0, r3
 80008f4:	f000 fbde 	bl	80010b4 <HAL_Delay>
		ledOff();
 80008f8:	f000 f8c6 	bl	8000a88 <ledOff>
		HAL_Delay(1000);
 80008fc:	23fa      	movs	r3, #250	; 0xfa
 80008fe:	009b      	lsls	r3, r3, #2
 8000900:	0018      	movs	r0, r3
 8000902:	f000 fbd7 	bl	80010b4 <HAL_Delay>
	for (i = 0; i < 6; ++i) {
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	3301      	adds	r3, #1
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	2b05      	cmp	r3, #5
 8000910:	dde9      	ble.n	80008e6 <isError+0x26>
	}

	for (i = 0; i < 9; ++i) {
 8000912:	2300      	movs	r3, #0
 8000914:	60fb      	str	r3, [r7, #12]
 8000916:	e014      	b.n	8000942 <isError+0x82>
		if (valvesInError[i] == 1) {
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	009b      	lsls	r3, r3, #2
 800091c:	687a      	ldr	r2, [r7, #4]
 800091e:	18d3      	adds	r3, r2, r3
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	2b01      	cmp	r3, #1
 8000924:	d10a      	bne.n	800093c <isError+0x7c>
			ledOn(i);
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	0018      	movs	r0, r3
 800092a:	f000 f833 	bl	8000994 <ledOn>
			HAL_Delay(1000);
 800092e:	23fa      	movs	r3, #250	; 0xfa
 8000930:	009b      	lsls	r3, r3, #2
 8000932:	0018      	movs	r0, r3
 8000934:	f000 fbbe 	bl	80010b4 <HAL_Delay>
			ledOff();
 8000938:	f000 f8a6 	bl	8000a88 <ledOff>
	for (i = 0; i < 9; ++i) {
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	3301      	adds	r3, #1
 8000940:	60fb      	str	r3, [r7, #12]
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	2b08      	cmp	r3, #8
 8000946:	dde7      	ble.n	8000918 <isError+0x58>
		}
	}
	ledOn(errorLevel);
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	0018      	movs	r0, r3
 800094c:	f000 f822 	bl	8000994 <ledOn>
	return 0;
 8000950:	2300      	movs	r3, #0
}
 8000952:	0018      	movs	r0, r3
 8000954:	46bd      	mov	sp, r7
 8000956:	b004      	add	sp, #16
 8000958:	bd80      	pop	{r7, pc}
	...

0800095c <buzzOn>:

void buzzOn() {
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, Buzzer_Pin, GPIO_PIN_SET);
 8000960:	4b04      	ldr	r3, [pc, #16]	; (8000974 <buzzOn+0x18>)
 8000962:	2201      	movs	r2, #1
 8000964:	2101      	movs	r1, #1
 8000966:	0018      	movs	r0, r3
 8000968:	f000 fdff 	bl	800156a <HAL_GPIO_WritePin>
}
 800096c:	46c0      	nop			; (mov r8, r8)
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	46c0      	nop			; (mov r8, r8)
 8000974:	48000400 	.word	0x48000400

08000978 <buzzOff>:

void buzzOff() {
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, Buzzer_Pin, GPIO_PIN_RESET);
 800097c:	4b04      	ldr	r3, [pc, #16]	; (8000990 <buzzOff+0x18>)
 800097e:	2200      	movs	r2, #0
 8000980:	2101      	movs	r1, #1
 8000982:	0018      	movs	r0, r3
 8000984:	f000 fdf1 	bl	800156a <HAL_GPIO_WritePin>
}
 8000988:	46c0      	nop			; (mov r8, r8)
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	46c0      	nop			; (mov r8, r8)
 8000990:	48000400 	.word	0x48000400

08000994 <ledOn>:

void ledOn(int whichOn) {
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
	//6,7,8 all have same light error
	if ((whichOn == 7) || (whichOn == 8))
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	2b07      	cmp	r3, #7
 80009a0:	d002      	beq.n	80009a8 <ledOn+0x14>
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	2b08      	cmp	r3, #8
 80009a6:	d101      	bne.n	80009ac <ledOn+0x18>
		whichOn = 6;
 80009a8:	2306      	movs	r3, #6
 80009aa:	607b      	str	r3, [r7, #4]
	++whichOn; //change from index to actual number displayed in binary on LEDs
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	3301      	adds	r3, #1
 80009b0:	607b      	str	r3, [r7, #4]

	//add a check for bottom 3 prio as they all get same code
	//printf for debugging outside of board
	//will comment out in board testing
	printf("LED %d ON\n", whichOn);
 80009b2:	687a      	ldr	r2, [r7, #4]
 80009b4:	4b32      	ldr	r3, [pc, #200]	; (8000a80 <ledOn+0xec>)
 80009b6:	0011      	movs	r1, r2
 80009b8:	0018      	movs	r0, r3
 80009ba:	f005 fe65 	bl	8006688 <iprintf>
	if (whichOn == 7) {
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	2b07      	cmp	r3, #7
 80009c2:	d111      	bne.n	80009e8 <ledOn+0x54>
		HAL_GPIO_WritePin(GPIOB, LED_Three_Pin, GPIO_PIN_SET);
 80009c4:	4b2f      	ldr	r3, [pc, #188]	; (8000a84 <ledOn+0xf0>)
 80009c6:	2201      	movs	r2, #1
 80009c8:	2108      	movs	r1, #8
 80009ca:	0018      	movs	r0, r3
 80009cc:	f000 fdcd 	bl	800156a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, LED_Two_Pin, GPIO_PIN_SET);
 80009d0:	4b2c      	ldr	r3, [pc, #176]	; (8000a84 <ledOn+0xf0>)
 80009d2:	2201      	movs	r2, #1
 80009d4:	2110      	movs	r1, #16
 80009d6:	0018      	movs	r0, r3
 80009d8:	f000 fdc7 	bl	800156a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, LED_One_Pin, GPIO_PIN_SET);
 80009dc:	4b29      	ldr	r3, [pc, #164]	; (8000a84 <ledOn+0xf0>)
 80009de:	2201      	movs	r2, #1
 80009e0:	2120      	movs	r1, #32
 80009e2:	0018      	movs	r0, r3
 80009e4:	f000 fdc1 	bl	800156a <HAL_GPIO_WritePin>
	}
	if (whichOn == 6) {
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	2b06      	cmp	r3, #6
 80009ec:	d10b      	bne.n	8000a06 <ledOn+0x72>
		HAL_GPIO_WritePin(GPIOB, LED_Three_Pin, GPIO_PIN_SET);
 80009ee:	4b25      	ldr	r3, [pc, #148]	; (8000a84 <ledOn+0xf0>)
 80009f0:	2201      	movs	r2, #1
 80009f2:	2108      	movs	r1, #8
 80009f4:	0018      	movs	r0, r3
 80009f6:	f000 fdb8 	bl	800156a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, LED_Two_Pin, GPIO_PIN_SET);
 80009fa:	4b22      	ldr	r3, [pc, #136]	; (8000a84 <ledOn+0xf0>)
 80009fc:	2201      	movs	r2, #1
 80009fe:	2110      	movs	r1, #16
 8000a00:	0018      	movs	r0, r3
 8000a02:	f000 fdb2 	bl	800156a <HAL_GPIO_WritePin>
	}
	if (whichOn == 5) {
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	2b05      	cmp	r3, #5
 8000a0a:	d10b      	bne.n	8000a24 <ledOn+0x90>
		HAL_GPIO_WritePin(GPIOB, LED_Three_Pin, GPIO_PIN_SET);
 8000a0c:	4b1d      	ldr	r3, [pc, #116]	; (8000a84 <ledOn+0xf0>)
 8000a0e:	2201      	movs	r2, #1
 8000a10:	2108      	movs	r1, #8
 8000a12:	0018      	movs	r0, r3
 8000a14:	f000 fda9 	bl	800156a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, LED_One_Pin, GPIO_PIN_SET);
 8000a18:	4b1a      	ldr	r3, [pc, #104]	; (8000a84 <ledOn+0xf0>)
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	2120      	movs	r1, #32
 8000a1e:	0018      	movs	r0, r3
 8000a20:	f000 fda3 	bl	800156a <HAL_GPIO_WritePin>
	}
	if (whichOn == 4) {
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2b04      	cmp	r3, #4
 8000a28:	d105      	bne.n	8000a36 <ledOn+0xa2>
		HAL_GPIO_WritePin(GPIOB, LED_Three_Pin, GPIO_PIN_SET);
 8000a2a:	4b16      	ldr	r3, [pc, #88]	; (8000a84 <ledOn+0xf0>)
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	2108      	movs	r1, #8
 8000a30:	0018      	movs	r0, r3
 8000a32:	f000 fd9a 	bl	800156a <HAL_GPIO_WritePin>
	}
	if (whichOn == 3) {
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	2b03      	cmp	r3, #3
 8000a3a:	d10b      	bne.n	8000a54 <ledOn+0xc0>
		HAL_GPIO_WritePin(GPIOB, LED_Two_Pin, GPIO_PIN_SET);
 8000a3c:	4b11      	ldr	r3, [pc, #68]	; (8000a84 <ledOn+0xf0>)
 8000a3e:	2201      	movs	r2, #1
 8000a40:	2110      	movs	r1, #16
 8000a42:	0018      	movs	r0, r3
 8000a44:	f000 fd91 	bl	800156a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, LED_One_Pin, GPIO_PIN_SET);
 8000a48:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <ledOn+0xf0>)
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	2120      	movs	r1, #32
 8000a4e:	0018      	movs	r0, r3
 8000a50:	f000 fd8b 	bl	800156a <HAL_GPIO_WritePin>
	}
	if (whichOn == 2) {
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	2b02      	cmp	r3, #2
 8000a58:	d105      	bne.n	8000a66 <ledOn+0xd2>
		HAL_GPIO_WritePin(GPIOB, LED_Two_Pin, GPIO_PIN_SET);
 8000a5a:	4b0a      	ldr	r3, [pc, #40]	; (8000a84 <ledOn+0xf0>)
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	2110      	movs	r1, #16
 8000a60:	0018      	movs	r0, r3
 8000a62:	f000 fd82 	bl	800156a <HAL_GPIO_WritePin>
	}
	if (whichOn == 1) {
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d105      	bne.n	8000a78 <ledOn+0xe4>
		HAL_GPIO_WritePin(GPIOB, LED_One_Pin, GPIO_PIN_SET);
 8000a6c:	4b05      	ldr	r3, [pc, #20]	; (8000a84 <ledOn+0xf0>)
 8000a6e:	2201      	movs	r2, #1
 8000a70:	2120      	movs	r1, #32
 8000a72:	0018      	movs	r0, r3
 8000a74:	f000 fd79 	bl	800156a <HAL_GPIO_WritePin>
	}
}
 8000a78:	46c0      	nop			; (mov r8, r8)
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	b002      	add	sp, #8
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	08007050 	.word	0x08007050
 8000a84:	48000400 	.word	0x48000400

08000a88 <ledOff>:

void ledOff() {
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, LED_One_Pin, GPIO_PIN_RESET);
 8000a8c:	4b0a      	ldr	r3, [pc, #40]	; (8000ab8 <ledOff+0x30>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	2120      	movs	r1, #32
 8000a92:	0018      	movs	r0, r3
 8000a94:	f000 fd69 	bl	800156a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LED_Two_Pin, GPIO_PIN_RESET);
 8000a98:	4b07      	ldr	r3, [pc, #28]	; (8000ab8 <ledOff+0x30>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2110      	movs	r1, #16
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	f000 fd63 	bl	800156a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LED_Three_Pin, GPIO_PIN_RESET);
 8000aa4:	4b04      	ldr	r3, [pc, #16]	; (8000ab8 <ledOff+0x30>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2108      	movs	r1, #8
 8000aaa:	0018      	movs	r0, r3
 8000aac:	f000 fd5d 	bl	800156a <HAL_GPIO_WritePin>

}
 8000ab0:	46c0      	nop			; (mov r8, r8)
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	46c0      	nop			; (mov r8, r8)
 8000ab8:	48000400 	.word	0x48000400

08000abc <powerFailureState>:

//goes down 3-2-1 continually
void powerFailureState() {
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
	while (1) {
		ledOn(2);
 8000ac0:	2002      	movs	r0, #2
 8000ac2:	f7ff ff67 	bl	8000994 <ledOn>
		HAL_Delay(1000);
 8000ac6:	23fa      	movs	r3, #250	; 0xfa
 8000ac8:	009b      	lsls	r3, r3, #2
 8000aca:	0018      	movs	r0, r3
 8000acc:	f000 faf2 	bl	80010b4 <HAL_Delay>
		ledOff();
 8000ad0:	f7ff ffda 	bl	8000a88 <ledOff>

		ledOn(1);
 8000ad4:	2001      	movs	r0, #1
 8000ad6:	f7ff ff5d 	bl	8000994 <ledOn>
		HAL_Delay(1000);
 8000ada:	23fa      	movs	r3, #250	; 0xfa
 8000adc:	009b      	lsls	r3, r3, #2
 8000ade:	0018      	movs	r0, r3
 8000ae0:	f000 fae8 	bl	80010b4 <HAL_Delay>
		ledOff();
 8000ae4:	f7ff ffd0 	bl	8000a88 <ledOff>

		ledOn(0);
 8000ae8:	2000      	movs	r0, #0
 8000aea:	f7ff ff53 	bl	8000994 <ledOn>
		HAL_Delay(1000);
 8000aee:	23fa      	movs	r3, #250	; 0xfa
 8000af0:	009b      	lsls	r3, r3, #2
 8000af2:	0018      	movs	r0, r3
 8000af4:	f000 fade 	bl	80010b4 <HAL_Delay>
		ledOff();
 8000af8:	f7ff ffc6 	bl	8000a88 <ledOff>
		ledOn(2);
 8000afc:	e7e0      	b.n	8000ac0 <powerFailureState+0x4>
	...

08000b00 <SizeOfFile>:
// End Katie's PF's

// Begin Tiffani's PF's

size_t SizeOfFile(char const *path)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
    FILE *fp = fopen(path, "r");
 8000b08:	4a0e      	ldr	r2, [pc, #56]	; (8000b44 <SizeOfFile+0x44>)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	0011      	movs	r1, r2
 8000b0e:	0018      	movs	r0, r3
 8000b10:	f005 fb1e 	bl	8006150 <fopen>
 8000b14:	0003      	movs	r3, r0
 8000b16:	60fb      	str	r3, [r7, #12]
    fseek(fp, 0, SEEK_END);
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	2202      	movs	r2, #2
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	0018      	movs	r0, r3
 8000b20:	f005 fb24 	bl	800616c <fseek>
    size_t fsize = (size_t) ftell(fp);
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	0018      	movs	r0, r3
 8000b28:	f005 fbc2 	bl	80062b0 <ftell>
 8000b2c:	0003      	movs	r3, r0
 8000b2e:	60bb      	str	r3, [r7, #8]
    fclose(fp);
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	0018      	movs	r0, r3
 8000b34:	f005 f958 	bl	8005de8 <fclose>
    return fsize;
 8000b38:	68bb      	ldr	r3, [r7, #8]
}
 8000b3a:	0018      	movs	r0, r3
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	b004      	add	sp, #16
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	46c0      	nop			; (mov r8, r8)
 8000b44:	0800705c 	.word	0x0800705c

08000b48 <WriteFile>:

void WriteFile(char const* fileName, char* buffer, size_t size)
{
 8000b48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b4a:	4c40      	ldr	r4, [pc, #256]	; (8000c4c <WriteFile+0x104>)
 8000b4c:	44a5      	add	sp, r4
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	60f8      	str	r0, [r7, #12]
 8000b52:	60b9      	str	r1, [r7, #8]
 8000b54:	607a      	str	r2, [r7, #4]

    //size_t alignment = (size + 32 - 1) & ~ (32 - 1);  // We must align by 32
    char* Buffer_logger;
    //memset(Buffer_logger, 0, alignment);
    memcpy(Buffer_logger, buffer, size);
 8000b56:	687a      	ldr	r2, [r7, #4]
 8000b58:	68b9      	ldr	r1, [r7, #8]
 8000b5a:	2492      	movs	r4, #146	; 0x92
 8000b5c:	00a4      	lsls	r4, r4, #2
 8000b5e:	193b      	adds	r3, r7, r4
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	0018      	movs	r0, r3
 8000b64:	f005 fcc2 	bl	80064ec <memcpy>

    unsigned int BytesWr;
    int result;
    FIL file; 		//File handle
    size_t accum = 0;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	2293      	movs	r2, #147	; 0x93
 8000b6c:	0092      	lsls	r2, r2, #2
 8000b6e:	18ba      	adds	r2, r7, r2
 8000b70:	6013      	str	r3, [r2, #0]
    result = f_open(&file, fileName, FA_CREATE_ALWAYS | FA_WRITE | FA_CREATE_ALWAYS);
 8000b72:	68f9      	ldr	r1, [r7, #12]
 8000b74:	2314      	movs	r3, #20
 8000b76:	18fb      	adds	r3, r7, r3
 8000b78:	220a      	movs	r2, #10
 8000b7a:	0018      	movs	r0, r3
 8000b7c:	f004 f812 	bl	8004ba4 <f_open>
 8000b80:	0003      	movs	r3, r0
 8000b82:	2291      	movs	r2, #145	; 0x91
 8000b84:	0092      	lsls	r2, r2, #2
 8000b86:	18ba      	adds	r2, r7, r2
 8000b88:	6013      	str	r3, [r2, #0]

    sprintf(Buffer_logger, "%s", buffer);
 8000b8a:	68ba      	ldr	r2, [r7, #8]
 8000b8c:	193b      	adds	r3, r7, r4
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	0011      	movs	r1, r2
 8000b92:	0018      	movs	r0, r3
 8000b94:	f005 fdf0 	bl	8006778 <strcpy>

    while (SizeOfFile(fileName) == 0)
 8000b98:	e045      	b.n	8000c26 <WriteFile+0xde>
    {
        // Open log for writing
        result = f_open(&file, fileName, FA_WRITE);
 8000b9a:	68f9      	ldr	r1, [r7, #12]
 8000b9c:	2414      	movs	r4, #20
 8000b9e:	193b      	adds	r3, r7, r4
 8000ba0:	2202      	movs	r2, #2
 8000ba2:	0018      	movs	r0, r3
 8000ba4:	f003 fffe 	bl	8004ba4 <f_open>
 8000ba8:	0003      	movs	r3, r0
 8000baa:	2591      	movs	r5, #145	; 0x91
 8000bac:	00ad      	lsls	r5, r5, #2
 8000bae:	197a      	adds	r2, r7, r5
 8000bb0:	6013      	str	r3, [r2, #0]

        // Point to the EOF
        result = f_lseek(&file, accum);
 8000bb2:	2693      	movs	r6, #147	; 0x93
 8000bb4:	00b6      	lsls	r6, r6, #2
 8000bb6:	19bb      	adds	r3, r7, r6
 8000bb8:	681a      	ldr	r2, [r3, #0]
 8000bba:	193b      	adds	r3, r7, r4
 8000bbc:	0011      	movs	r1, r2
 8000bbe:	0018      	movs	r0, r3
 8000bc0:	f004 fda2 	bl	8005708 <f_lseek>
 8000bc4:	0003      	movs	r3, r0
 8000bc6:	197a      	adds	r2, r7, r5
 8000bc8:	6013      	str	r3, [r2, #0]

        // Write to log
        result = f_write(&file, (const void*) Buffer_logger, size, &BytesWr);
 8000bca:	2390      	movs	r3, #144	; 0x90
 8000bcc:	009b      	lsls	r3, r3, #2
 8000bce:	18fb      	adds	r3, r7, r3
 8000bd0:	687a      	ldr	r2, [r7, #4]
 8000bd2:	2192      	movs	r1, #146	; 0x92
 8000bd4:	0089      	lsls	r1, r1, #2
 8000bd6:	1878      	adds	r0, r7, r1
 8000bd8:	6801      	ldr	r1, [r0, #0]
 8000bda:	1938      	adds	r0, r7, r4
 8000bdc:	f004 fa9a 	bl	8005114 <f_write>
 8000be0:	0003      	movs	r3, r0
 8000be2:	197a      	adds	r2, r7, r5
 8000be4:	6013      	str	r3, [r2, #0]

        accum += accum + strlen(Buffer_logger);
 8000be6:	2192      	movs	r1, #146	; 0x92
 8000be8:	0089      	lsls	r1, r1, #2
 8000bea:	187b      	adds	r3, r7, r1
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	0018      	movs	r0, r3
 8000bf0:	f7ff fa8a 	bl	8000108 <strlen>
 8000bf4:	0002      	movs	r2, r0
 8000bf6:	19bb      	adds	r3, r7, r6
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	18d3      	adds	r3, r2, r3
 8000bfc:	19ba      	adds	r2, r7, r6
 8000bfe:	6812      	ldr	r2, [r2, #0]
 8000c00:	18d3      	adds	r3, r2, r3
 8000c02:	19ba      	adds	r2, r7, r6
 8000c04:	6013      	str	r3, [r2, #0]

        //Close file.
        result = f_close(&file);
 8000c06:	193b      	adds	r3, r7, r4
 8000c08:	0018      	movs	r0, r3
 8000c0a:	f004 fd45 	bl	8005698 <f_close>
 8000c0e:	0003      	movs	r3, r0
 8000c10:	197a      	adds	r2, r7, r5
 8000c12:	6013      	str	r3, [r2, #0]

        //memset(Buffer_logger, 0, alignment);

        //size = 32;
        memset(Buffer_logger, 0, size);
 8000c14:	687a      	ldr	r2, [r7, #4]
 8000c16:	2192      	movs	r1, #146	; 0x92
 8000c18:	0089      	lsls	r1, r1, #2
 8000c1a:	187b      	adds	r3, r7, r1
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	2100      	movs	r1, #0
 8000c20:	0018      	movs	r0, r3
 8000c22:	f005 fc6c 	bl	80064fe <memset>
    while (SizeOfFile(fileName) == 0)
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	0018      	movs	r0, r3
 8000c2a:	f7ff ff69 	bl	8000b00 <SizeOfFile>
 8000c2e:	1e03      	subs	r3, r0, #0
 8000c30:	d0b3      	beq.n	8000b9a <WriteFile+0x52>
    }
    free(Buffer_logger);
 8000c32:	2392      	movs	r3, #146	; 0x92
 8000c34:	009b      	lsls	r3, r3, #2
 8000c36:	18fb      	adds	r3, r7, r3
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	0018      	movs	r0, r3
 8000c3c:	f005 fc4c 	bl	80064d8 <free>
}
 8000c40:	46c0      	nop			; (mov r8, r8)
 8000c42:	46bd      	mov	sp, r7
 8000c44:	2395      	movs	r3, #149	; 0x95
 8000c46:	009b      	lsls	r3, r3, #2
 8000c48:	449d      	add	sp, r3
 8000c4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c4c:	fffffdac 	.word	0xfffffdac

08000c50 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000c54:	46c0      	nop			; (mov r8, r8)
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
	...

08000c5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c62:	4b0f      	ldr	r3, [pc, #60]	; (8000ca0 <HAL_MspInit+0x44>)
 8000c64:	699a      	ldr	r2, [r3, #24]
 8000c66:	4b0e      	ldr	r3, [pc, #56]	; (8000ca0 <HAL_MspInit+0x44>)
 8000c68:	2101      	movs	r1, #1
 8000c6a:	430a      	orrs	r2, r1
 8000c6c:	619a      	str	r2, [r3, #24]
 8000c6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <HAL_MspInit+0x44>)
 8000c70:	699b      	ldr	r3, [r3, #24]
 8000c72:	2201      	movs	r2, #1
 8000c74:	4013      	ands	r3, r2
 8000c76:	607b      	str	r3, [r7, #4]
 8000c78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c7a:	4b09      	ldr	r3, [pc, #36]	; (8000ca0 <HAL_MspInit+0x44>)
 8000c7c:	69da      	ldr	r2, [r3, #28]
 8000c7e:	4b08      	ldr	r3, [pc, #32]	; (8000ca0 <HAL_MspInit+0x44>)
 8000c80:	2180      	movs	r1, #128	; 0x80
 8000c82:	0549      	lsls	r1, r1, #21
 8000c84:	430a      	orrs	r2, r1
 8000c86:	61da      	str	r2, [r3, #28]
 8000c88:	4b05      	ldr	r3, [pc, #20]	; (8000ca0 <HAL_MspInit+0x44>)
 8000c8a:	69da      	ldr	r2, [r3, #28]
 8000c8c:	2380      	movs	r3, #128	; 0x80
 8000c8e:	055b      	lsls	r3, r3, #21
 8000c90:	4013      	ands	r3, r2
 8000c92:	603b      	str	r3, [r7, #0]
 8000c94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c96:	46c0      	nop			; (mov r8, r8)
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	b002      	add	sp, #8
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	46c0      	nop			; (mov r8, r8)
 8000ca0:	40021000 	.word	0x40021000

08000ca4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b08a      	sub	sp, #40	; 0x28
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cac:	2314      	movs	r3, #20
 8000cae:	18fb      	adds	r3, r7, r3
 8000cb0:	0018      	movs	r0, r3
 8000cb2:	2314      	movs	r3, #20
 8000cb4:	001a      	movs	r2, r3
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	f005 fc21 	bl	80064fe <memset>
  if(hspi->Instance==SPI1)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a1c      	ldr	r2, [pc, #112]	; (8000d34 <HAL_SPI_MspInit+0x90>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d132      	bne.n	8000d2c <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cc6:	4b1c      	ldr	r3, [pc, #112]	; (8000d38 <HAL_SPI_MspInit+0x94>)
 8000cc8:	699a      	ldr	r2, [r3, #24]
 8000cca:	4b1b      	ldr	r3, [pc, #108]	; (8000d38 <HAL_SPI_MspInit+0x94>)
 8000ccc:	2180      	movs	r1, #128	; 0x80
 8000cce:	0149      	lsls	r1, r1, #5
 8000cd0:	430a      	orrs	r2, r1
 8000cd2:	619a      	str	r2, [r3, #24]
 8000cd4:	4b18      	ldr	r3, [pc, #96]	; (8000d38 <HAL_SPI_MspInit+0x94>)
 8000cd6:	699a      	ldr	r2, [r3, #24]
 8000cd8:	2380      	movs	r3, #128	; 0x80
 8000cda:	015b      	lsls	r3, r3, #5
 8000cdc:	4013      	ands	r3, r2
 8000cde:	613b      	str	r3, [r7, #16]
 8000ce0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce2:	4b15      	ldr	r3, [pc, #84]	; (8000d38 <HAL_SPI_MspInit+0x94>)
 8000ce4:	695a      	ldr	r2, [r3, #20]
 8000ce6:	4b14      	ldr	r3, [pc, #80]	; (8000d38 <HAL_SPI_MspInit+0x94>)
 8000ce8:	2180      	movs	r1, #128	; 0x80
 8000cea:	0289      	lsls	r1, r1, #10
 8000cec:	430a      	orrs	r2, r1
 8000cee:	615a      	str	r2, [r3, #20]
 8000cf0:	4b11      	ldr	r3, [pc, #68]	; (8000d38 <HAL_SPI_MspInit+0x94>)
 8000cf2:	695a      	ldr	r2, [r3, #20]
 8000cf4:	2380      	movs	r3, #128	; 0x80
 8000cf6:	029b      	lsls	r3, r3, #10
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000cfe:	2114      	movs	r1, #20
 8000d00:	187b      	adds	r3, r7, r1
 8000d02:	22e0      	movs	r2, #224	; 0xe0
 8000d04:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d06:	187b      	adds	r3, r7, r1
 8000d08:	2202      	movs	r2, #2
 8000d0a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	187b      	adds	r3, r7, r1
 8000d0e:	2200      	movs	r2, #0
 8000d10:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d12:	187b      	adds	r3, r7, r1
 8000d14:	2203      	movs	r2, #3
 8000d16:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000d18:	187b      	adds	r3, r7, r1
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d1e:	187a      	adds	r2, r7, r1
 8000d20:	2390      	movs	r3, #144	; 0x90
 8000d22:	05db      	lsls	r3, r3, #23
 8000d24:	0011      	movs	r1, r2
 8000d26:	0018      	movs	r0, r3
 8000d28:	f000 fa9a 	bl	8001260 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d2c:	46c0      	nop			; (mov r8, r8)
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	b00a      	add	sp, #40	; 0x28
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	40013000 	.word	0x40013000
 8000d38:	40021000 	.word	0x40021000

08000d3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b08a      	sub	sp, #40	; 0x28
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d44:	2314      	movs	r3, #20
 8000d46:	18fb      	adds	r3, r7, r3
 8000d48:	0018      	movs	r0, r3
 8000d4a:	2314      	movs	r3, #20
 8000d4c:	001a      	movs	r2, r3
 8000d4e:	2100      	movs	r1, #0
 8000d50:	f005 fbd5 	bl	80064fe <memset>
  if(huart->Instance==USART1)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a1d      	ldr	r2, [pc, #116]	; (8000dd0 <HAL_UART_MspInit+0x94>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d133      	bne.n	8000dc6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d5e:	4b1d      	ldr	r3, [pc, #116]	; (8000dd4 <HAL_UART_MspInit+0x98>)
 8000d60:	699a      	ldr	r2, [r3, #24]
 8000d62:	4b1c      	ldr	r3, [pc, #112]	; (8000dd4 <HAL_UART_MspInit+0x98>)
 8000d64:	2180      	movs	r1, #128	; 0x80
 8000d66:	01c9      	lsls	r1, r1, #7
 8000d68:	430a      	orrs	r2, r1
 8000d6a:	619a      	str	r2, [r3, #24]
 8000d6c:	4b19      	ldr	r3, [pc, #100]	; (8000dd4 <HAL_UART_MspInit+0x98>)
 8000d6e:	699a      	ldr	r2, [r3, #24]
 8000d70:	2380      	movs	r3, #128	; 0x80
 8000d72:	01db      	lsls	r3, r3, #7
 8000d74:	4013      	ands	r3, r2
 8000d76:	613b      	str	r3, [r7, #16]
 8000d78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7a:	4b16      	ldr	r3, [pc, #88]	; (8000dd4 <HAL_UART_MspInit+0x98>)
 8000d7c:	695a      	ldr	r2, [r3, #20]
 8000d7e:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <HAL_UART_MspInit+0x98>)
 8000d80:	2180      	movs	r1, #128	; 0x80
 8000d82:	0289      	lsls	r1, r1, #10
 8000d84:	430a      	orrs	r2, r1
 8000d86:	615a      	str	r2, [r3, #20]
 8000d88:	4b12      	ldr	r3, [pc, #72]	; (8000dd4 <HAL_UART_MspInit+0x98>)
 8000d8a:	695a      	ldr	r2, [r3, #20]
 8000d8c:	2380      	movs	r3, #128	; 0x80
 8000d8e:	029b      	lsls	r3, r3, #10
 8000d90:	4013      	ands	r3, r2
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA11     ------> USART1_CTS
    PA12     ------> USART1_RTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000d96:	2114      	movs	r1, #20
 8000d98:	187b      	adds	r3, r7, r1
 8000d9a:	22f0      	movs	r2, #240	; 0xf0
 8000d9c:	0152      	lsls	r2, r2, #5
 8000d9e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da0:	187b      	adds	r3, r7, r1
 8000da2:	2202      	movs	r2, #2
 8000da4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	187b      	adds	r3, r7, r1
 8000da8:	2200      	movs	r2, #0
 8000daa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dac:	187b      	adds	r3, r7, r1
 8000dae:	2203      	movs	r2, #3
 8000db0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000db2:	187b      	adds	r3, r7, r1
 8000db4:	2201      	movs	r2, #1
 8000db6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db8:	187a      	adds	r2, r7, r1
 8000dba:	2390      	movs	r3, #144	; 0x90
 8000dbc:	05db      	lsls	r3, r3, #23
 8000dbe:	0011      	movs	r1, r2
 8000dc0:	0018      	movs	r0, r3
 8000dc2:	f000 fa4d 	bl	8001260 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000dc6:	46c0      	nop			; (mov r8, r8)
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	b00a      	add	sp, #40	; 0x28
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	46c0      	nop			; (mov r8, r8)
 8000dd0:	40013800 	.word	0x40013800
 8000dd4:	40021000 	.word	0x40021000

08000dd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ddc:	46c0      	nop			; (mov r8, r8)
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000de6:	e7fe      	b.n	8000de6 <HardFault_Handler+0x4>

08000de8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000dec:	46c0      	nop			; (mov r8, r8)
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000df6:	46c0      	nop			; (mov r8, r8)
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e00:	f000 f93c 	bl	800107c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e04:	46c0      	nop			; (mov r8, r8)
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b086      	sub	sp, #24
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	60f8      	str	r0, [r7, #12]
 8000e12:	60b9      	str	r1, [r7, #8]
 8000e14:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e16:	2300      	movs	r3, #0
 8000e18:	617b      	str	r3, [r7, #20]
 8000e1a:	e00a      	b.n	8000e32 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e1c:	e000      	b.n	8000e20 <_read+0x16>
 8000e1e:	bf00      	nop
 8000e20:	0001      	movs	r1, r0
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	1c5a      	adds	r2, r3, #1
 8000e26:	60ba      	str	r2, [r7, #8]
 8000e28:	b2ca      	uxtb	r2, r1
 8000e2a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	3301      	adds	r3, #1
 8000e30:	617b      	str	r3, [r7, #20]
 8000e32:	697a      	ldr	r2, [r7, #20]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	429a      	cmp	r2, r3
 8000e38:	dbf0      	blt.n	8000e1c <_read+0x12>
	}

return len;
 8000e3a:	687b      	ldr	r3, [r7, #4]
}
 8000e3c:	0018      	movs	r0, r3
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	b006      	add	sp, #24
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b086      	sub	sp, #24
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	60f8      	str	r0, [r7, #12]
 8000e4c:	60b9      	str	r1, [r7, #8]
 8000e4e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e50:	2300      	movs	r3, #0
 8000e52:	617b      	str	r3, [r7, #20]
 8000e54:	e009      	b.n	8000e6a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	1c5a      	adds	r2, r3, #1
 8000e5a:	60ba      	str	r2, [r7, #8]
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	0018      	movs	r0, r3
 8000e60:	e000      	b.n	8000e64 <_write+0x20>
 8000e62:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	3301      	adds	r3, #1
 8000e68:	617b      	str	r3, [r7, #20]
 8000e6a:	697a      	ldr	r2, [r7, #20]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	dbf1      	blt.n	8000e56 <_write+0x12>
	}
	return len;
 8000e72:	687b      	ldr	r3, [r7, #4]
}
 8000e74:	0018      	movs	r0, r3
 8000e76:	46bd      	mov	sp, r7
 8000e78:	b006      	add	sp, #24
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <_close>:

int _close(int file)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
	return -1;
 8000e84:	2301      	movs	r3, #1
 8000e86:	425b      	negs	r3, r3
}
 8000e88:	0018      	movs	r0, r3
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	b002      	add	sp, #8
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	2280      	movs	r2, #128	; 0x80
 8000e9e:	0192      	lsls	r2, r2, #6
 8000ea0:	605a      	str	r2, [r3, #4]
	return 0;
 8000ea2:	2300      	movs	r3, #0
}
 8000ea4:	0018      	movs	r0, r3
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	b002      	add	sp, #8
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <_isatty>:

int _isatty(int file)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
	return 1;
 8000eb4:	2301      	movs	r3, #1
}
 8000eb6:	0018      	movs	r0, r3
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	b002      	add	sp, #8
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b084      	sub	sp, #16
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	60f8      	str	r0, [r7, #12]
 8000ec6:	60b9      	str	r1, [r7, #8]
 8000ec8:	607a      	str	r2, [r7, #4]
	return 0;
 8000eca:	2300      	movs	r3, #0
}
 8000ecc:	0018      	movs	r0, r3
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	b004      	add	sp, #16
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <_open>:

int _open(char *path, int flags, ...)
{
 8000ed4:	b40e      	push	{r1, r2, r3}
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b083      	sub	sp, #12
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
	/* Pretend like we always fail */
	return -1;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	425b      	negs	r3, r3
}
 8000ee2:	0018      	movs	r0, r3
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	b003      	add	sp, #12
 8000ee8:	bc80      	pop	{r7}
 8000eea:	bc08      	pop	{r3}
 8000eec:	b003      	add	sp, #12
 8000eee:	4718      	bx	r3

08000ef0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b086      	sub	sp, #24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ef8:	4a14      	ldr	r2, [pc, #80]	; (8000f4c <_sbrk+0x5c>)
 8000efa:	4b15      	ldr	r3, [pc, #84]	; (8000f50 <_sbrk+0x60>)
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f04:	4b13      	ldr	r3, [pc, #76]	; (8000f54 <_sbrk+0x64>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d102      	bne.n	8000f12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f0c:	4b11      	ldr	r3, [pc, #68]	; (8000f54 <_sbrk+0x64>)
 8000f0e:	4a12      	ldr	r2, [pc, #72]	; (8000f58 <_sbrk+0x68>)
 8000f10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f12:	4b10      	ldr	r3, [pc, #64]	; (8000f54 <_sbrk+0x64>)
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	18d3      	adds	r3, r2, r3
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d207      	bcs.n	8000f30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f20:	f004 ff04 	bl	8005d2c <__errno>
 8000f24:	0003      	movs	r3, r0
 8000f26:	220c      	movs	r2, #12
 8000f28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	425b      	negs	r3, r3
 8000f2e:	e009      	b.n	8000f44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f30:	4b08      	ldr	r3, [pc, #32]	; (8000f54 <_sbrk+0x64>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f36:	4b07      	ldr	r3, [pc, #28]	; (8000f54 <_sbrk+0x64>)
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	18d2      	adds	r2, r2, r3
 8000f3e:	4b05      	ldr	r3, [pc, #20]	; (8000f54 <_sbrk+0x64>)
 8000f40:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000f42:	68fb      	ldr	r3, [r7, #12]
}
 8000f44:	0018      	movs	r0, r3
 8000f46:	46bd      	mov	sp, r7
 8000f48:	b006      	add	sp, #24
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	20001800 	.word	0x20001800
 8000f50:	00000400 	.word	0x00000400
 8000f54:	200000a0 	.word	0x200000a0
 8000f58:	20000630 	.word	0x20000630

08000f5c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000f60:	46c0      	nop			; (mov r8, r8)
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
	...

08000f68 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f68:	4813      	ldr	r0, [pc, #76]	; (8000fb8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f6a:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8000f6c:	4813      	ldr	r0, [pc, #76]	; (8000fbc <LoopForever+0x6>)
    LDR R1, [R0]
 8000f6e:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000f70:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000f72:	4a13      	ldr	r2, [pc, #76]	; (8000fc0 <LoopForever+0xa>)
    CMP R1, R2
 8000f74:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000f76:	d105      	bne.n	8000f84 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8000f78:	4812      	ldr	r0, [pc, #72]	; (8000fc4 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000f7a:	4913      	ldr	r1, [pc, #76]	; (8000fc8 <LoopForever+0x12>)
    STR R1, [R0]
 8000f7c:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000f7e:	4813      	ldr	r0, [pc, #76]	; (8000fcc <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000f80:	4913      	ldr	r1, [pc, #76]	; (8000fd0 <LoopForever+0x1a>)
    STR R1, [R0]
 8000f82:	6001      	str	r1, [r0, #0]

08000f84 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f84:	4813      	ldr	r0, [pc, #76]	; (8000fd4 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000f86:	4914      	ldr	r1, [pc, #80]	; (8000fd8 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000f88:	4a14      	ldr	r2, [pc, #80]	; (8000fdc <LoopForever+0x26>)
  movs r3, #0
 8000f8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f8c:	e002      	b.n	8000f94 <LoopCopyDataInit>

08000f8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f92:	3304      	adds	r3, #4

08000f94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f98:	d3f9      	bcc.n	8000f8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f9a:	4a11      	ldr	r2, [pc, #68]	; (8000fe0 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000f9c:	4c11      	ldr	r4, [pc, #68]	; (8000fe4 <LoopForever+0x2e>)
  movs r3, #0
 8000f9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fa0:	e001      	b.n	8000fa6 <LoopFillZerobss>

08000fa2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fa2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fa4:	3204      	adds	r2, #4

08000fa6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fa6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fa8:	d3fb      	bcc.n	8000fa2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000faa:	f7ff ffd7 	bl	8000f5c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000fae:	f005 fa03 	bl	80063b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fb2:	f7ff f93d 	bl	8000230 <main>

08000fb6 <LoopForever>:

LoopForever:
    b LoopForever
 8000fb6:	e7fe      	b.n	8000fb6 <LoopForever>
  ldr   r0, =_estack
 8000fb8:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8000fbc:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000fc0:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8000fc4:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8000fc8:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000fcc:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000fd0:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000fd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fd8:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8000fdc:	080071fc 	.word	0x080071fc
  ldr r2, =_sbss
 8000fe0:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000fe4:	2000062c 	.word	0x2000062c

08000fe8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fe8:	e7fe      	b.n	8000fe8 <ADC1_IRQHandler>
	...

08000fec <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ff0:	4b07      	ldr	r3, [pc, #28]	; (8001010 <HAL_Init+0x24>)
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	4b06      	ldr	r3, [pc, #24]	; (8001010 <HAL_Init+0x24>)
 8000ff6:	2110      	movs	r1, #16
 8000ff8:	430a      	orrs	r2, r1
 8000ffa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000ffc:	2000      	movs	r0, #0
 8000ffe:	f000 f809 	bl	8001014 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001002:	f7ff fe2b 	bl	8000c5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001006:	2300      	movs	r3, #0
}
 8001008:	0018      	movs	r0, r3
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	46c0      	nop			; (mov r8, r8)
 8001010:	40022000 	.word	0x40022000

08001014 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001014:	b590      	push	{r4, r7, lr}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800101c:	4b14      	ldr	r3, [pc, #80]	; (8001070 <HAL_InitTick+0x5c>)
 800101e:	681c      	ldr	r4, [r3, #0]
 8001020:	4b14      	ldr	r3, [pc, #80]	; (8001074 <HAL_InitTick+0x60>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	0019      	movs	r1, r3
 8001026:	23fa      	movs	r3, #250	; 0xfa
 8001028:	0098      	lsls	r0, r3, #2
 800102a:	f7ff f875 	bl	8000118 <__udivsi3>
 800102e:	0003      	movs	r3, r0
 8001030:	0019      	movs	r1, r3
 8001032:	0020      	movs	r0, r4
 8001034:	f7ff f870 	bl	8000118 <__udivsi3>
 8001038:	0003      	movs	r3, r0
 800103a:	0018      	movs	r0, r3
 800103c:	f000 f903 	bl	8001246 <HAL_SYSTICK_Config>
 8001040:	1e03      	subs	r3, r0, #0
 8001042:	d001      	beq.n	8001048 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001044:	2301      	movs	r3, #1
 8001046:	e00f      	b.n	8001068 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2b03      	cmp	r3, #3
 800104c:	d80b      	bhi.n	8001066 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800104e:	6879      	ldr	r1, [r7, #4]
 8001050:	2301      	movs	r3, #1
 8001052:	425b      	negs	r3, r3
 8001054:	2200      	movs	r2, #0
 8001056:	0018      	movs	r0, r3
 8001058:	f000 f8e0 	bl	800121c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800105c:	4b06      	ldr	r3, [pc, #24]	; (8001078 <HAL_InitTick+0x64>)
 800105e:	687a      	ldr	r2, [r7, #4]
 8001060:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001062:	2300      	movs	r3, #0
 8001064:	e000      	b.n	8001068 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
}
 8001068:	0018      	movs	r0, r3
 800106a:	46bd      	mov	sp, r7
 800106c:	b003      	add	sp, #12
 800106e:	bd90      	pop	{r4, r7, pc}
 8001070:	20000000 	.word	0x20000000
 8001074:	20000008 	.word	0x20000008
 8001078:	20000004 	.word	0x20000004

0800107c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001080:	4b05      	ldr	r3, [pc, #20]	; (8001098 <HAL_IncTick+0x1c>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	001a      	movs	r2, r3
 8001086:	4b05      	ldr	r3, [pc, #20]	; (800109c <HAL_IncTick+0x20>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	18d2      	adds	r2, r2, r3
 800108c:	4b03      	ldr	r3, [pc, #12]	; (800109c <HAL_IncTick+0x20>)
 800108e:	601a      	str	r2, [r3, #0]
}
 8001090:	46c0      	nop			; (mov r8, r8)
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	46c0      	nop			; (mov r8, r8)
 8001098:	20000008 	.word	0x20000008
 800109c:	200001c0 	.word	0x200001c0

080010a0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  return uwTick;
 80010a4:	4b02      	ldr	r3, [pc, #8]	; (80010b0 <HAL_GetTick+0x10>)
 80010a6:	681b      	ldr	r3, [r3, #0]
}
 80010a8:	0018      	movs	r0, r3
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	46c0      	nop			; (mov r8, r8)
 80010b0:	200001c0 	.word	0x200001c0

080010b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010bc:	f7ff fff0 	bl	80010a0 <HAL_GetTick>
 80010c0:	0003      	movs	r3, r0
 80010c2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	3301      	adds	r3, #1
 80010cc:	d005      	beq.n	80010da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ce:	4b09      	ldr	r3, [pc, #36]	; (80010f4 <HAL_Delay+0x40>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	001a      	movs	r2, r3
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	189b      	adds	r3, r3, r2
 80010d8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80010da:	46c0      	nop			; (mov r8, r8)
 80010dc:	f7ff ffe0 	bl	80010a0 <HAL_GetTick>
 80010e0:	0002      	movs	r2, r0
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	68fa      	ldr	r2, [r7, #12]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d8f7      	bhi.n	80010dc <HAL_Delay+0x28>
  {
  }
}
 80010ec:	46c0      	nop			; (mov r8, r8)
 80010ee:	46bd      	mov	sp, r7
 80010f0:	b004      	add	sp, #16
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	20000008 	.word	0x20000008

080010f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010f8:	b590      	push	{r4, r7, lr}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	0002      	movs	r2, r0
 8001100:	6039      	str	r1, [r7, #0]
 8001102:	1dfb      	adds	r3, r7, #7
 8001104:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001106:	1dfb      	adds	r3, r7, #7
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	2b7f      	cmp	r3, #127	; 0x7f
 800110c:	d828      	bhi.n	8001160 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800110e:	4a2f      	ldr	r2, [pc, #188]	; (80011cc <__NVIC_SetPriority+0xd4>)
 8001110:	1dfb      	adds	r3, r7, #7
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	b25b      	sxtb	r3, r3
 8001116:	089b      	lsrs	r3, r3, #2
 8001118:	33c0      	adds	r3, #192	; 0xc0
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	589b      	ldr	r3, [r3, r2]
 800111e:	1dfa      	adds	r2, r7, #7
 8001120:	7812      	ldrb	r2, [r2, #0]
 8001122:	0011      	movs	r1, r2
 8001124:	2203      	movs	r2, #3
 8001126:	400a      	ands	r2, r1
 8001128:	00d2      	lsls	r2, r2, #3
 800112a:	21ff      	movs	r1, #255	; 0xff
 800112c:	4091      	lsls	r1, r2
 800112e:	000a      	movs	r2, r1
 8001130:	43d2      	mvns	r2, r2
 8001132:	401a      	ands	r2, r3
 8001134:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	019b      	lsls	r3, r3, #6
 800113a:	22ff      	movs	r2, #255	; 0xff
 800113c:	401a      	ands	r2, r3
 800113e:	1dfb      	adds	r3, r7, #7
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	0018      	movs	r0, r3
 8001144:	2303      	movs	r3, #3
 8001146:	4003      	ands	r3, r0
 8001148:	00db      	lsls	r3, r3, #3
 800114a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800114c:	481f      	ldr	r0, [pc, #124]	; (80011cc <__NVIC_SetPriority+0xd4>)
 800114e:	1dfb      	adds	r3, r7, #7
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	b25b      	sxtb	r3, r3
 8001154:	089b      	lsrs	r3, r3, #2
 8001156:	430a      	orrs	r2, r1
 8001158:	33c0      	adds	r3, #192	; 0xc0
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800115e:	e031      	b.n	80011c4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001160:	4a1b      	ldr	r2, [pc, #108]	; (80011d0 <__NVIC_SetPriority+0xd8>)
 8001162:	1dfb      	adds	r3, r7, #7
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	0019      	movs	r1, r3
 8001168:	230f      	movs	r3, #15
 800116a:	400b      	ands	r3, r1
 800116c:	3b08      	subs	r3, #8
 800116e:	089b      	lsrs	r3, r3, #2
 8001170:	3306      	adds	r3, #6
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	18d3      	adds	r3, r2, r3
 8001176:	3304      	adds	r3, #4
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	1dfa      	adds	r2, r7, #7
 800117c:	7812      	ldrb	r2, [r2, #0]
 800117e:	0011      	movs	r1, r2
 8001180:	2203      	movs	r2, #3
 8001182:	400a      	ands	r2, r1
 8001184:	00d2      	lsls	r2, r2, #3
 8001186:	21ff      	movs	r1, #255	; 0xff
 8001188:	4091      	lsls	r1, r2
 800118a:	000a      	movs	r2, r1
 800118c:	43d2      	mvns	r2, r2
 800118e:	401a      	ands	r2, r3
 8001190:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	019b      	lsls	r3, r3, #6
 8001196:	22ff      	movs	r2, #255	; 0xff
 8001198:	401a      	ands	r2, r3
 800119a:	1dfb      	adds	r3, r7, #7
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	0018      	movs	r0, r3
 80011a0:	2303      	movs	r3, #3
 80011a2:	4003      	ands	r3, r0
 80011a4:	00db      	lsls	r3, r3, #3
 80011a6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011a8:	4809      	ldr	r0, [pc, #36]	; (80011d0 <__NVIC_SetPriority+0xd8>)
 80011aa:	1dfb      	adds	r3, r7, #7
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	001c      	movs	r4, r3
 80011b0:	230f      	movs	r3, #15
 80011b2:	4023      	ands	r3, r4
 80011b4:	3b08      	subs	r3, #8
 80011b6:	089b      	lsrs	r3, r3, #2
 80011b8:	430a      	orrs	r2, r1
 80011ba:	3306      	adds	r3, #6
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	18c3      	adds	r3, r0, r3
 80011c0:	3304      	adds	r3, #4
 80011c2:	601a      	str	r2, [r3, #0]
}
 80011c4:	46c0      	nop			; (mov r8, r8)
 80011c6:	46bd      	mov	sp, r7
 80011c8:	b003      	add	sp, #12
 80011ca:	bd90      	pop	{r4, r7, pc}
 80011cc:	e000e100 	.word	0xe000e100
 80011d0:	e000ed00 	.word	0xe000ed00

080011d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	3b01      	subs	r3, #1
 80011e0:	4a0c      	ldr	r2, [pc, #48]	; (8001214 <SysTick_Config+0x40>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d901      	bls.n	80011ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011e6:	2301      	movs	r3, #1
 80011e8:	e010      	b.n	800120c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ea:	4b0b      	ldr	r3, [pc, #44]	; (8001218 <SysTick_Config+0x44>)
 80011ec:	687a      	ldr	r2, [r7, #4]
 80011ee:	3a01      	subs	r2, #1
 80011f0:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011f2:	2301      	movs	r3, #1
 80011f4:	425b      	negs	r3, r3
 80011f6:	2103      	movs	r1, #3
 80011f8:	0018      	movs	r0, r3
 80011fa:	f7ff ff7d 	bl	80010f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011fe:	4b06      	ldr	r3, [pc, #24]	; (8001218 <SysTick_Config+0x44>)
 8001200:	2200      	movs	r2, #0
 8001202:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001204:	4b04      	ldr	r3, [pc, #16]	; (8001218 <SysTick_Config+0x44>)
 8001206:	2207      	movs	r2, #7
 8001208:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800120a:	2300      	movs	r3, #0
}
 800120c:	0018      	movs	r0, r3
 800120e:	46bd      	mov	sp, r7
 8001210:	b002      	add	sp, #8
 8001212:	bd80      	pop	{r7, pc}
 8001214:	00ffffff 	.word	0x00ffffff
 8001218:	e000e010 	.word	0xe000e010

0800121c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	60b9      	str	r1, [r7, #8]
 8001224:	607a      	str	r2, [r7, #4]
 8001226:	210f      	movs	r1, #15
 8001228:	187b      	adds	r3, r7, r1
 800122a:	1c02      	adds	r2, r0, #0
 800122c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800122e:	68ba      	ldr	r2, [r7, #8]
 8001230:	187b      	adds	r3, r7, r1
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	b25b      	sxtb	r3, r3
 8001236:	0011      	movs	r1, r2
 8001238:	0018      	movs	r0, r3
 800123a:	f7ff ff5d 	bl	80010f8 <__NVIC_SetPriority>
}
 800123e:	46c0      	nop			; (mov r8, r8)
 8001240:	46bd      	mov	sp, r7
 8001242:	b004      	add	sp, #16
 8001244:	bd80      	pop	{r7, pc}

08001246 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	b082      	sub	sp, #8
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	0018      	movs	r0, r3
 8001252:	f7ff ffbf 	bl	80011d4 <SysTick_Config>
 8001256:	0003      	movs	r3, r0
}
 8001258:	0018      	movs	r0, r3
 800125a:	46bd      	mov	sp, r7
 800125c:	b002      	add	sp, #8
 800125e:	bd80      	pop	{r7, pc}

08001260 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800126a:	2300      	movs	r3, #0
 800126c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800126e:	e149      	b.n	8001504 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2101      	movs	r1, #1
 8001276:	697a      	ldr	r2, [r7, #20]
 8001278:	4091      	lsls	r1, r2
 800127a:	000a      	movs	r2, r1
 800127c:	4013      	ands	r3, r2
 800127e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d100      	bne.n	8001288 <HAL_GPIO_Init+0x28>
 8001286:	e13a      	b.n	80014fe <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	2b01      	cmp	r3, #1
 800128e:	d00b      	beq.n	80012a8 <HAL_GPIO_Init+0x48>
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	2b02      	cmp	r3, #2
 8001296:	d007      	beq.n	80012a8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800129c:	2b11      	cmp	r3, #17
 800129e:	d003      	beq.n	80012a8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	2b12      	cmp	r3, #18
 80012a6:	d130      	bne.n	800130a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	2203      	movs	r2, #3
 80012b4:	409a      	lsls	r2, r3
 80012b6:	0013      	movs	r3, r2
 80012b8:	43da      	mvns	r2, r3
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	4013      	ands	r3, r2
 80012be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	68da      	ldr	r2, [r3, #12]
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	409a      	lsls	r2, r3
 80012ca:	0013      	movs	r3, r2
 80012cc:	693a      	ldr	r2, [r7, #16]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	693a      	ldr	r2, [r7, #16]
 80012d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012de:	2201      	movs	r2, #1
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	409a      	lsls	r2, r3
 80012e4:	0013      	movs	r3, r2
 80012e6:	43da      	mvns	r2, r3
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	4013      	ands	r3, r2
 80012ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	091b      	lsrs	r3, r3, #4
 80012f4:	2201      	movs	r2, #1
 80012f6:	401a      	ands	r2, r3
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	409a      	lsls	r2, r3
 80012fc:	0013      	movs	r3, r2
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	4313      	orrs	r3, r2
 8001302:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	68db      	ldr	r3, [r3, #12]
 800130e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	2203      	movs	r2, #3
 8001316:	409a      	lsls	r2, r3
 8001318:	0013      	movs	r3, r2
 800131a:	43da      	mvns	r2, r3
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	4013      	ands	r3, r2
 8001320:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	689a      	ldr	r2, [r3, #8]
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	409a      	lsls	r2, r3
 800132c:	0013      	movs	r3, r2
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	4313      	orrs	r3, r2
 8001332:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	2b02      	cmp	r3, #2
 8001340:	d003      	beq.n	800134a <HAL_GPIO_Init+0xea>
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	2b12      	cmp	r3, #18
 8001348:	d123      	bne.n	8001392 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	08da      	lsrs	r2, r3, #3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	3208      	adds	r2, #8
 8001352:	0092      	lsls	r2, r2, #2
 8001354:	58d3      	ldr	r3, [r2, r3]
 8001356:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	2207      	movs	r2, #7
 800135c:	4013      	ands	r3, r2
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	220f      	movs	r2, #15
 8001362:	409a      	lsls	r2, r3
 8001364:	0013      	movs	r3, r2
 8001366:	43da      	mvns	r2, r3
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	4013      	ands	r3, r2
 800136c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	691a      	ldr	r2, [r3, #16]
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	2107      	movs	r1, #7
 8001376:	400b      	ands	r3, r1
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	409a      	lsls	r2, r3
 800137c:	0013      	movs	r3, r2
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	4313      	orrs	r3, r2
 8001382:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	08da      	lsrs	r2, r3, #3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	3208      	adds	r2, #8
 800138c:	0092      	lsls	r2, r2, #2
 800138e:	6939      	ldr	r1, [r7, #16]
 8001390:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	2203      	movs	r2, #3
 800139e:	409a      	lsls	r2, r3
 80013a0:	0013      	movs	r3, r2
 80013a2:	43da      	mvns	r2, r3
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	4013      	ands	r3, r2
 80013a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	2203      	movs	r2, #3
 80013b0:	401a      	ands	r2, r3
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	409a      	lsls	r2, r3
 80013b8:	0013      	movs	r3, r2
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	4313      	orrs	r3, r2
 80013be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685a      	ldr	r2, [r3, #4]
 80013ca:	2380      	movs	r3, #128	; 0x80
 80013cc:	055b      	lsls	r3, r3, #21
 80013ce:	4013      	ands	r3, r2
 80013d0:	d100      	bne.n	80013d4 <HAL_GPIO_Init+0x174>
 80013d2:	e094      	b.n	80014fe <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013d4:	4b51      	ldr	r3, [pc, #324]	; (800151c <HAL_GPIO_Init+0x2bc>)
 80013d6:	699a      	ldr	r2, [r3, #24]
 80013d8:	4b50      	ldr	r3, [pc, #320]	; (800151c <HAL_GPIO_Init+0x2bc>)
 80013da:	2101      	movs	r1, #1
 80013dc:	430a      	orrs	r2, r1
 80013de:	619a      	str	r2, [r3, #24]
 80013e0:	4b4e      	ldr	r3, [pc, #312]	; (800151c <HAL_GPIO_Init+0x2bc>)
 80013e2:	699b      	ldr	r3, [r3, #24]
 80013e4:	2201      	movs	r2, #1
 80013e6:	4013      	ands	r3, r2
 80013e8:	60bb      	str	r3, [r7, #8]
 80013ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013ec:	4a4c      	ldr	r2, [pc, #304]	; (8001520 <HAL_GPIO_Init+0x2c0>)
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	089b      	lsrs	r3, r3, #2
 80013f2:	3302      	adds	r3, #2
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	589b      	ldr	r3, [r3, r2]
 80013f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	2203      	movs	r2, #3
 80013fe:	4013      	ands	r3, r2
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	220f      	movs	r2, #15
 8001404:	409a      	lsls	r2, r3
 8001406:	0013      	movs	r3, r2
 8001408:	43da      	mvns	r2, r3
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	4013      	ands	r3, r2
 800140e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001410:	687a      	ldr	r2, [r7, #4]
 8001412:	2390      	movs	r3, #144	; 0x90
 8001414:	05db      	lsls	r3, r3, #23
 8001416:	429a      	cmp	r2, r3
 8001418:	d00d      	beq.n	8001436 <HAL_GPIO_Init+0x1d6>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a41      	ldr	r2, [pc, #260]	; (8001524 <HAL_GPIO_Init+0x2c4>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d007      	beq.n	8001432 <HAL_GPIO_Init+0x1d2>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4a40      	ldr	r2, [pc, #256]	; (8001528 <HAL_GPIO_Init+0x2c8>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d101      	bne.n	800142e <HAL_GPIO_Init+0x1ce>
 800142a:	2302      	movs	r3, #2
 800142c:	e004      	b.n	8001438 <HAL_GPIO_Init+0x1d8>
 800142e:	2305      	movs	r3, #5
 8001430:	e002      	b.n	8001438 <HAL_GPIO_Init+0x1d8>
 8001432:	2301      	movs	r3, #1
 8001434:	e000      	b.n	8001438 <HAL_GPIO_Init+0x1d8>
 8001436:	2300      	movs	r3, #0
 8001438:	697a      	ldr	r2, [r7, #20]
 800143a:	2103      	movs	r1, #3
 800143c:	400a      	ands	r2, r1
 800143e:	0092      	lsls	r2, r2, #2
 8001440:	4093      	lsls	r3, r2
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	4313      	orrs	r3, r2
 8001446:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001448:	4935      	ldr	r1, [pc, #212]	; (8001520 <HAL_GPIO_Init+0x2c0>)
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	089b      	lsrs	r3, r3, #2
 800144e:	3302      	adds	r3, #2
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001456:	4b35      	ldr	r3, [pc, #212]	; (800152c <HAL_GPIO_Init+0x2cc>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	43da      	mvns	r2, r3
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	4013      	ands	r3, r2
 8001464:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	685a      	ldr	r2, [r3, #4]
 800146a:	2380      	movs	r3, #128	; 0x80
 800146c:	025b      	lsls	r3, r3, #9
 800146e:	4013      	ands	r3, r2
 8001470:	d003      	beq.n	800147a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001472:	693a      	ldr	r2, [r7, #16]
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	4313      	orrs	r3, r2
 8001478:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800147a:	4b2c      	ldr	r3, [pc, #176]	; (800152c <HAL_GPIO_Init+0x2cc>)
 800147c:	693a      	ldr	r2, [r7, #16]
 800147e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001480:	4b2a      	ldr	r3, [pc, #168]	; (800152c <HAL_GPIO_Init+0x2cc>)
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	43da      	mvns	r2, r3
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	4013      	ands	r3, r2
 800148e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685a      	ldr	r2, [r3, #4]
 8001494:	2380      	movs	r3, #128	; 0x80
 8001496:	029b      	lsls	r3, r3, #10
 8001498:	4013      	ands	r3, r2
 800149a:	d003      	beq.n	80014a4 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 800149c:	693a      	ldr	r2, [r7, #16]
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80014a4:	4b21      	ldr	r3, [pc, #132]	; (800152c <HAL_GPIO_Init+0x2cc>)
 80014a6:	693a      	ldr	r2, [r7, #16]
 80014a8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014aa:	4b20      	ldr	r3, [pc, #128]	; (800152c <HAL_GPIO_Init+0x2cc>)
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	43da      	mvns	r2, r3
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	4013      	ands	r3, r2
 80014b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	685a      	ldr	r2, [r3, #4]
 80014be:	2380      	movs	r3, #128	; 0x80
 80014c0:	035b      	lsls	r3, r3, #13
 80014c2:	4013      	ands	r3, r2
 80014c4:	d003      	beq.n	80014ce <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80014ce:	4b17      	ldr	r3, [pc, #92]	; (800152c <HAL_GPIO_Init+0x2cc>)
 80014d0:	693a      	ldr	r2, [r7, #16]
 80014d2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80014d4:	4b15      	ldr	r3, [pc, #84]	; (800152c <HAL_GPIO_Init+0x2cc>)
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	43da      	mvns	r2, r3
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	4013      	ands	r3, r2
 80014e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685a      	ldr	r2, [r3, #4]
 80014e8:	2380      	movs	r3, #128	; 0x80
 80014ea:	039b      	lsls	r3, r3, #14
 80014ec:	4013      	ands	r3, r2
 80014ee:	d003      	beq.n	80014f8 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80014f8:	4b0c      	ldr	r3, [pc, #48]	; (800152c <HAL_GPIO_Init+0x2cc>)
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	3301      	adds	r3, #1
 8001502:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	40da      	lsrs	r2, r3
 800150c:	1e13      	subs	r3, r2, #0
 800150e:	d000      	beq.n	8001512 <HAL_GPIO_Init+0x2b2>
 8001510:	e6ae      	b.n	8001270 <HAL_GPIO_Init+0x10>
  } 
}
 8001512:	46c0      	nop			; (mov r8, r8)
 8001514:	46bd      	mov	sp, r7
 8001516:	b006      	add	sp, #24
 8001518:	bd80      	pop	{r7, pc}
 800151a:	46c0      	nop			; (mov r8, r8)
 800151c:	40021000 	.word	0x40021000
 8001520:	40010000 	.word	0x40010000
 8001524:	48000400 	.word	0x48000400
 8001528:	48000800 	.word	0x48000800
 800152c:	40010400 	.word	0x40010400

08001530 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	000a      	movs	r2, r1
 800153a:	1cbb      	adds	r3, r7, #2
 800153c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	691b      	ldr	r3, [r3, #16]
 8001542:	1cba      	adds	r2, r7, #2
 8001544:	8812      	ldrh	r2, [r2, #0]
 8001546:	4013      	ands	r3, r2
 8001548:	d004      	beq.n	8001554 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800154a:	230f      	movs	r3, #15
 800154c:	18fb      	adds	r3, r7, r3
 800154e:	2201      	movs	r2, #1
 8001550:	701a      	strb	r2, [r3, #0]
 8001552:	e003      	b.n	800155c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001554:	230f      	movs	r3, #15
 8001556:	18fb      	adds	r3, r7, r3
 8001558:	2200      	movs	r2, #0
 800155a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800155c:	230f      	movs	r3, #15
 800155e:	18fb      	adds	r3, r7, r3
 8001560:	781b      	ldrb	r3, [r3, #0]
  }
 8001562:	0018      	movs	r0, r3
 8001564:	46bd      	mov	sp, r7
 8001566:	b004      	add	sp, #16
 8001568:	bd80      	pop	{r7, pc}

0800156a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800156a:	b580      	push	{r7, lr}
 800156c:	b082      	sub	sp, #8
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
 8001572:	0008      	movs	r0, r1
 8001574:	0011      	movs	r1, r2
 8001576:	1cbb      	adds	r3, r7, #2
 8001578:	1c02      	adds	r2, r0, #0
 800157a:	801a      	strh	r2, [r3, #0]
 800157c:	1c7b      	adds	r3, r7, #1
 800157e:	1c0a      	adds	r2, r1, #0
 8001580:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001582:	1c7b      	adds	r3, r7, #1
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d004      	beq.n	8001594 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800158a:	1cbb      	adds	r3, r7, #2
 800158c:	881a      	ldrh	r2, [r3, #0]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001592:	e003      	b.n	800159c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001594:	1cbb      	adds	r3, r7, #2
 8001596:	881a      	ldrh	r2, [r3, #0]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800159c:	46c0      	nop			; (mov r8, r8)
 800159e:	46bd      	mov	sp, r7
 80015a0:	b002      	add	sp, #8
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b088      	sub	sp, #32
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d102      	bne.n	80015b8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	f000 fb76 	bl	8001ca4 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2201      	movs	r2, #1
 80015be:	4013      	ands	r3, r2
 80015c0:	d100      	bne.n	80015c4 <HAL_RCC_OscConfig+0x20>
 80015c2:	e08e      	b.n	80016e2 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80015c4:	4bc5      	ldr	r3, [pc, #788]	; (80018dc <HAL_RCC_OscConfig+0x338>)
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	220c      	movs	r2, #12
 80015ca:	4013      	ands	r3, r2
 80015cc:	2b04      	cmp	r3, #4
 80015ce:	d00e      	beq.n	80015ee <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015d0:	4bc2      	ldr	r3, [pc, #776]	; (80018dc <HAL_RCC_OscConfig+0x338>)
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	220c      	movs	r2, #12
 80015d6:	4013      	ands	r3, r2
 80015d8:	2b08      	cmp	r3, #8
 80015da:	d117      	bne.n	800160c <HAL_RCC_OscConfig+0x68>
 80015dc:	4bbf      	ldr	r3, [pc, #764]	; (80018dc <HAL_RCC_OscConfig+0x338>)
 80015de:	685a      	ldr	r2, [r3, #4]
 80015e0:	23c0      	movs	r3, #192	; 0xc0
 80015e2:	025b      	lsls	r3, r3, #9
 80015e4:	401a      	ands	r2, r3
 80015e6:	2380      	movs	r3, #128	; 0x80
 80015e8:	025b      	lsls	r3, r3, #9
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d10e      	bne.n	800160c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015ee:	4bbb      	ldr	r3, [pc, #748]	; (80018dc <HAL_RCC_OscConfig+0x338>)
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	2380      	movs	r3, #128	; 0x80
 80015f4:	029b      	lsls	r3, r3, #10
 80015f6:	4013      	ands	r3, r2
 80015f8:	d100      	bne.n	80015fc <HAL_RCC_OscConfig+0x58>
 80015fa:	e071      	b.n	80016e0 <HAL_RCC_OscConfig+0x13c>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d000      	beq.n	8001606 <HAL_RCC_OscConfig+0x62>
 8001604:	e06c      	b.n	80016e0 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	f000 fb4c 	bl	8001ca4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	2b01      	cmp	r3, #1
 8001612:	d107      	bne.n	8001624 <HAL_RCC_OscConfig+0x80>
 8001614:	4bb1      	ldr	r3, [pc, #708]	; (80018dc <HAL_RCC_OscConfig+0x338>)
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	4bb0      	ldr	r3, [pc, #704]	; (80018dc <HAL_RCC_OscConfig+0x338>)
 800161a:	2180      	movs	r1, #128	; 0x80
 800161c:	0249      	lsls	r1, r1, #9
 800161e:	430a      	orrs	r2, r1
 8001620:	601a      	str	r2, [r3, #0]
 8001622:	e02f      	b.n	8001684 <HAL_RCC_OscConfig+0xe0>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d10c      	bne.n	8001646 <HAL_RCC_OscConfig+0xa2>
 800162c:	4bab      	ldr	r3, [pc, #684]	; (80018dc <HAL_RCC_OscConfig+0x338>)
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	4baa      	ldr	r3, [pc, #680]	; (80018dc <HAL_RCC_OscConfig+0x338>)
 8001632:	49ab      	ldr	r1, [pc, #684]	; (80018e0 <HAL_RCC_OscConfig+0x33c>)
 8001634:	400a      	ands	r2, r1
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	4ba8      	ldr	r3, [pc, #672]	; (80018dc <HAL_RCC_OscConfig+0x338>)
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	4ba7      	ldr	r3, [pc, #668]	; (80018dc <HAL_RCC_OscConfig+0x338>)
 800163e:	49a9      	ldr	r1, [pc, #676]	; (80018e4 <HAL_RCC_OscConfig+0x340>)
 8001640:	400a      	ands	r2, r1
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	e01e      	b.n	8001684 <HAL_RCC_OscConfig+0xe0>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	2b05      	cmp	r3, #5
 800164c:	d10e      	bne.n	800166c <HAL_RCC_OscConfig+0xc8>
 800164e:	4ba3      	ldr	r3, [pc, #652]	; (80018dc <HAL_RCC_OscConfig+0x338>)
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	4ba2      	ldr	r3, [pc, #648]	; (80018dc <HAL_RCC_OscConfig+0x338>)
 8001654:	2180      	movs	r1, #128	; 0x80
 8001656:	02c9      	lsls	r1, r1, #11
 8001658:	430a      	orrs	r2, r1
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	4b9f      	ldr	r3, [pc, #636]	; (80018dc <HAL_RCC_OscConfig+0x338>)
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	4b9e      	ldr	r3, [pc, #632]	; (80018dc <HAL_RCC_OscConfig+0x338>)
 8001662:	2180      	movs	r1, #128	; 0x80
 8001664:	0249      	lsls	r1, r1, #9
 8001666:	430a      	orrs	r2, r1
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	e00b      	b.n	8001684 <HAL_RCC_OscConfig+0xe0>
 800166c:	4b9b      	ldr	r3, [pc, #620]	; (80018dc <HAL_RCC_OscConfig+0x338>)
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	4b9a      	ldr	r3, [pc, #616]	; (80018dc <HAL_RCC_OscConfig+0x338>)
 8001672:	499b      	ldr	r1, [pc, #620]	; (80018e0 <HAL_RCC_OscConfig+0x33c>)
 8001674:	400a      	ands	r2, r1
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	4b98      	ldr	r3, [pc, #608]	; (80018dc <HAL_RCC_OscConfig+0x338>)
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	4b97      	ldr	r3, [pc, #604]	; (80018dc <HAL_RCC_OscConfig+0x338>)
 800167e:	4999      	ldr	r1, [pc, #612]	; (80018e4 <HAL_RCC_OscConfig+0x340>)
 8001680:	400a      	ands	r2, r1
 8001682:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d014      	beq.n	80016b6 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800168c:	f7ff fd08 	bl	80010a0 <HAL_GetTick>
 8001690:	0003      	movs	r3, r0
 8001692:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001694:	e008      	b.n	80016a8 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001696:	f7ff fd03 	bl	80010a0 <HAL_GetTick>
 800169a:	0002      	movs	r2, r0
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	2b64      	cmp	r3, #100	; 0x64
 80016a2:	d901      	bls.n	80016a8 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80016a4:	2303      	movs	r3, #3
 80016a6:	e2fd      	b.n	8001ca4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016a8:	4b8c      	ldr	r3, [pc, #560]	; (80018dc <HAL_RCC_OscConfig+0x338>)
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	2380      	movs	r3, #128	; 0x80
 80016ae:	029b      	lsls	r3, r3, #10
 80016b0:	4013      	ands	r3, r2
 80016b2:	d0f0      	beq.n	8001696 <HAL_RCC_OscConfig+0xf2>
 80016b4:	e015      	b.n	80016e2 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b6:	f7ff fcf3 	bl	80010a0 <HAL_GetTick>
 80016ba:	0003      	movs	r3, r0
 80016bc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016be:	e008      	b.n	80016d2 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016c0:	f7ff fcee 	bl	80010a0 <HAL_GetTick>
 80016c4:	0002      	movs	r2, r0
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b64      	cmp	r3, #100	; 0x64
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e2e8      	b.n	8001ca4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016d2:	4b82      	ldr	r3, [pc, #520]	; (80018dc <HAL_RCC_OscConfig+0x338>)
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	2380      	movs	r3, #128	; 0x80
 80016d8:	029b      	lsls	r3, r3, #10
 80016da:	4013      	ands	r3, r2
 80016dc:	d1f0      	bne.n	80016c0 <HAL_RCC_OscConfig+0x11c>
 80016de:	e000      	b.n	80016e2 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016e0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2202      	movs	r2, #2
 80016e8:	4013      	ands	r3, r2
 80016ea:	d100      	bne.n	80016ee <HAL_RCC_OscConfig+0x14a>
 80016ec:	e06c      	b.n	80017c8 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80016ee:	4b7b      	ldr	r3, [pc, #492]	; (80018dc <HAL_RCC_OscConfig+0x338>)
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	220c      	movs	r2, #12
 80016f4:	4013      	ands	r3, r2
 80016f6:	d00e      	beq.n	8001716 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80016f8:	4b78      	ldr	r3, [pc, #480]	; (80018dc <HAL_RCC_OscConfig+0x338>)
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	220c      	movs	r2, #12
 80016fe:	4013      	ands	r3, r2
 8001700:	2b08      	cmp	r3, #8
 8001702:	d11f      	bne.n	8001744 <HAL_RCC_OscConfig+0x1a0>
 8001704:	4b75      	ldr	r3, [pc, #468]	; (80018dc <HAL_RCC_OscConfig+0x338>)
 8001706:	685a      	ldr	r2, [r3, #4]
 8001708:	23c0      	movs	r3, #192	; 0xc0
 800170a:	025b      	lsls	r3, r3, #9
 800170c:	401a      	ands	r2, r3
 800170e:	2380      	movs	r3, #128	; 0x80
 8001710:	021b      	lsls	r3, r3, #8
 8001712:	429a      	cmp	r2, r3
 8001714:	d116      	bne.n	8001744 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001716:	4b71      	ldr	r3, [pc, #452]	; (80018dc <HAL_RCC_OscConfig+0x338>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	2202      	movs	r2, #2
 800171c:	4013      	ands	r3, r2
 800171e:	d005      	beq.n	800172c <HAL_RCC_OscConfig+0x188>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	2b01      	cmp	r3, #1
 8001726:	d001      	beq.n	800172c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e2bb      	b.n	8001ca4 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800172c:	4b6b      	ldr	r3, [pc, #428]	; (80018dc <HAL_RCC_OscConfig+0x338>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	22f8      	movs	r2, #248	; 0xf8
 8001732:	4393      	bics	r3, r2
 8001734:	0019      	movs	r1, r3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	691b      	ldr	r3, [r3, #16]
 800173a:	00da      	lsls	r2, r3, #3
 800173c:	4b67      	ldr	r3, [pc, #412]	; (80018dc <HAL_RCC_OscConfig+0x338>)
 800173e:	430a      	orrs	r2, r1
 8001740:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001742:	e041      	b.n	80017c8 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d024      	beq.n	8001796 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800174c:	4b63      	ldr	r3, [pc, #396]	; (80018dc <HAL_RCC_OscConfig+0x338>)
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	4b62      	ldr	r3, [pc, #392]	; (80018dc <HAL_RCC_OscConfig+0x338>)
 8001752:	2101      	movs	r1, #1
 8001754:	430a      	orrs	r2, r1
 8001756:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001758:	f7ff fca2 	bl	80010a0 <HAL_GetTick>
 800175c:	0003      	movs	r3, r0
 800175e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001760:	e008      	b.n	8001774 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001762:	f7ff fc9d 	bl	80010a0 <HAL_GetTick>
 8001766:	0002      	movs	r2, r0
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	2b02      	cmp	r3, #2
 800176e:	d901      	bls.n	8001774 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001770:	2303      	movs	r3, #3
 8001772:	e297      	b.n	8001ca4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001774:	4b59      	ldr	r3, [pc, #356]	; (80018dc <HAL_RCC_OscConfig+0x338>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2202      	movs	r2, #2
 800177a:	4013      	ands	r3, r2
 800177c:	d0f1      	beq.n	8001762 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800177e:	4b57      	ldr	r3, [pc, #348]	; (80018dc <HAL_RCC_OscConfig+0x338>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	22f8      	movs	r2, #248	; 0xf8
 8001784:	4393      	bics	r3, r2
 8001786:	0019      	movs	r1, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	691b      	ldr	r3, [r3, #16]
 800178c:	00da      	lsls	r2, r3, #3
 800178e:	4b53      	ldr	r3, [pc, #332]	; (80018dc <HAL_RCC_OscConfig+0x338>)
 8001790:	430a      	orrs	r2, r1
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	e018      	b.n	80017c8 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001796:	4b51      	ldr	r3, [pc, #324]	; (80018dc <HAL_RCC_OscConfig+0x338>)
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	4b50      	ldr	r3, [pc, #320]	; (80018dc <HAL_RCC_OscConfig+0x338>)
 800179c:	2101      	movs	r1, #1
 800179e:	438a      	bics	r2, r1
 80017a0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a2:	f7ff fc7d 	bl	80010a0 <HAL_GetTick>
 80017a6:	0003      	movs	r3, r0
 80017a8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017aa:	e008      	b.n	80017be <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017ac:	f7ff fc78 	bl	80010a0 <HAL_GetTick>
 80017b0:	0002      	movs	r2, r0
 80017b2:	69bb      	ldr	r3, [r7, #24]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d901      	bls.n	80017be <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e272      	b.n	8001ca4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017be:	4b47      	ldr	r3, [pc, #284]	; (80018dc <HAL_RCC_OscConfig+0x338>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	2202      	movs	r2, #2
 80017c4:	4013      	ands	r3, r2
 80017c6:	d1f1      	bne.n	80017ac <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2208      	movs	r2, #8
 80017ce:	4013      	ands	r3, r2
 80017d0:	d036      	beq.n	8001840 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	69db      	ldr	r3, [r3, #28]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d019      	beq.n	800180e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017da:	4b40      	ldr	r3, [pc, #256]	; (80018dc <HAL_RCC_OscConfig+0x338>)
 80017dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017de:	4b3f      	ldr	r3, [pc, #252]	; (80018dc <HAL_RCC_OscConfig+0x338>)
 80017e0:	2101      	movs	r1, #1
 80017e2:	430a      	orrs	r2, r1
 80017e4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017e6:	f7ff fc5b 	bl	80010a0 <HAL_GetTick>
 80017ea:	0003      	movs	r3, r0
 80017ec:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ee:	e008      	b.n	8001802 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017f0:	f7ff fc56 	bl	80010a0 <HAL_GetTick>
 80017f4:	0002      	movs	r2, r0
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e250      	b.n	8001ca4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001802:	4b36      	ldr	r3, [pc, #216]	; (80018dc <HAL_RCC_OscConfig+0x338>)
 8001804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001806:	2202      	movs	r2, #2
 8001808:	4013      	ands	r3, r2
 800180a:	d0f1      	beq.n	80017f0 <HAL_RCC_OscConfig+0x24c>
 800180c:	e018      	b.n	8001840 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800180e:	4b33      	ldr	r3, [pc, #204]	; (80018dc <HAL_RCC_OscConfig+0x338>)
 8001810:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001812:	4b32      	ldr	r3, [pc, #200]	; (80018dc <HAL_RCC_OscConfig+0x338>)
 8001814:	2101      	movs	r1, #1
 8001816:	438a      	bics	r2, r1
 8001818:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800181a:	f7ff fc41 	bl	80010a0 <HAL_GetTick>
 800181e:	0003      	movs	r3, r0
 8001820:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001822:	e008      	b.n	8001836 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001824:	f7ff fc3c 	bl	80010a0 <HAL_GetTick>
 8001828:	0002      	movs	r2, r0
 800182a:	69bb      	ldr	r3, [r7, #24]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	2b02      	cmp	r3, #2
 8001830:	d901      	bls.n	8001836 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e236      	b.n	8001ca4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001836:	4b29      	ldr	r3, [pc, #164]	; (80018dc <HAL_RCC_OscConfig+0x338>)
 8001838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183a:	2202      	movs	r2, #2
 800183c:	4013      	ands	r3, r2
 800183e:	d1f1      	bne.n	8001824 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2204      	movs	r2, #4
 8001846:	4013      	ands	r3, r2
 8001848:	d100      	bne.n	800184c <HAL_RCC_OscConfig+0x2a8>
 800184a:	e0b5      	b.n	80019b8 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 800184c:	231f      	movs	r3, #31
 800184e:	18fb      	adds	r3, r7, r3
 8001850:	2200      	movs	r2, #0
 8001852:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001854:	4b21      	ldr	r3, [pc, #132]	; (80018dc <HAL_RCC_OscConfig+0x338>)
 8001856:	69da      	ldr	r2, [r3, #28]
 8001858:	2380      	movs	r3, #128	; 0x80
 800185a:	055b      	lsls	r3, r3, #21
 800185c:	4013      	ands	r3, r2
 800185e:	d111      	bne.n	8001884 <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001860:	4b1e      	ldr	r3, [pc, #120]	; (80018dc <HAL_RCC_OscConfig+0x338>)
 8001862:	69da      	ldr	r2, [r3, #28]
 8001864:	4b1d      	ldr	r3, [pc, #116]	; (80018dc <HAL_RCC_OscConfig+0x338>)
 8001866:	2180      	movs	r1, #128	; 0x80
 8001868:	0549      	lsls	r1, r1, #21
 800186a:	430a      	orrs	r2, r1
 800186c:	61da      	str	r2, [r3, #28]
 800186e:	4b1b      	ldr	r3, [pc, #108]	; (80018dc <HAL_RCC_OscConfig+0x338>)
 8001870:	69da      	ldr	r2, [r3, #28]
 8001872:	2380      	movs	r3, #128	; 0x80
 8001874:	055b      	lsls	r3, r3, #21
 8001876:	4013      	ands	r3, r2
 8001878:	60fb      	str	r3, [r7, #12]
 800187a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800187c:	231f      	movs	r3, #31
 800187e:	18fb      	adds	r3, r7, r3
 8001880:	2201      	movs	r2, #1
 8001882:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001884:	4b18      	ldr	r3, [pc, #96]	; (80018e8 <HAL_RCC_OscConfig+0x344>)
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	2380      	movs	r3, #128	; 0x80
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	4013      	ands	r3, r2
 800188e:	d11a      	bne.n	80018c6 <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001890:	4b15      	ldr	r3, [pc, #84]	; (80018e8 <HAL_RCC_OscConfig+0x344>)
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	4b14      	ldr	r3, [pc, #80]	; (80018e8 <HAL_RCC_OscConfig+0x344>)
 8001896:	2180      	movs	r1, #128	; 0x80
 8001898:	0049      	lsls	r1, r1, #1
 800189a:	430a      	orrs	r2, r1
 800189c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800189e:	f7ff fbff 	bl	80010a0 <HAL_GetTick>
 80018a2:	0003      	movs	r3, r0
 80018a4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018a6:	e008      	b.n	80018ba <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018a8:	f7ff fbfa 	bl	80010a0 <HAL_GetTick>
 80018ac:	0002      	movs	r2, r0
 80018ae:	69bb      	ldr	r3, [r7, #24]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	2b64      	cmp	r3, #100	; 0x64
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e1f4      	b.n	8001ca4 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ba:	4b0b      	ldr	r3, [pc, #44]	; (80018e8 <HAL_RCC_OscConfig+0x344>)
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	2380      	movs	r3, #128	; 0x80
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	4013      	ands	r3, r2
 80018c4:	d0f0      	beq.n	80018a8 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d10e      	bne.n	80018ec <HAL_RCC_OscConfig+0x348>
 80018ce:	4b03      	ldr	r3, [pc, #12]	; (80018dc <HAL_RCC_OscConfig+0x338>)
 80018d0:	6a1a      	ldr	r2, [r3, #32]
 80018d2:	4b02      	ldr	r3, [pc, #8]	; (80018dc <HAL_RCC_OscConfig+0x338>)
 80018d4:	2101      	movs	r1, #1
 80018d6:	430a      	orrs	r2, r1
 80018d8:	621a      	str	r2, [r3, #32]
 80018da:	e035      	b.n	8001948 <HAL_RCC_OscConfig+0x3a4>
 80018dc:	40021000 	.word	0x40021000
 80018e0:	fffeffff 	.word	0xfffeffff
 80018e4:	fffbffff 	.word	0xfffbffff
 80018e8:	40007000 	.word	0x40007000
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d10c      	bne.n	800190e <HAL_RCC_OscConfig+0x36a>
 80018f4:	4bca      	ldr	r3, [pc, #808]	; (8001c20 <HAL_RCC_OscConfig+0x67c>)
 80018f6:	6a1a      	ldr	r2, [r3, #32]
 80018f8:	4bc9      	ldr	r3, [pc, #804]	; (8001c20 <HAL_RCC_OscConfig+0x67c>)
 80018fa:	2101      	movs	r1, #1
 80018fc:	438a      	bics	r2, r1
 80018fe:	621a      	str	r2, [r3, #32]
 8001900:	4bc7      	ldr	r3, [pc, #796]	; (8001c20 <HAL_RCC_OscConfig+0x67c>)
 8001902:	6a1a      	ldr	r2, [r3, #32]
 8001904:	4bc6      	ldr	r3, [pc, #792]	; (8001c20 <HAL_RCC_OscConfig+0x67c>)
 8001906:	2104      	movs	r1, #4
 8001908:	438a      	bics	r2, r1
 800190a:	621a      	str	r2, [r3, #32]
 800190c:	e01c      	b.n	8001948 <HAL_RCC_OscConfig+0x3a4>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	2b05      	cmp	r3, #5
 8001914:	d10c      	bne.n	8001930 <HAL_RCC_OscConfig+0x38c>
 8001916:	4bc2      	ldr	r3, [pc, #776]	; (8001c20 <HAL_RCC_OscConfig+0x67c>)
 8001918:	6a1a      	ldr	r2, [r3, #32]
 800191a:	4bc1      	ldr	r3, [pc, #772]	; (8001c20 <HAL_RCC_OscConfig+0x67c>)
 800191c:	2104      	movs	r1, #4
 800191e:	430a      	orrs	r2, r1
 8001920:	621a      	str	r2, [r3, #32]
 8001922:	4bbf      	ldr	r3, [pc, #764]	; (8001c20 <HAL_RCC_OscConfig+0x67c>)
 8001924:	6a1a      	ldr	r2, [r3, #32]
 8001926:	4bbe      	ldr	r3, [pc, #760]	; (8001c20 <HAL_RCC_OscConfig+0x67c>)
 8001928:	2101      	movs	r1, #1
 800192a:	430a      	orrs	r2, r1
 800192c:	621a      	str	r2, [r3, #32]
 800192e:	e00b      	b.n	8001948 <HAL_RCC_OscConfig+0x3a4>
 8001930:	4bbb      	ldr	r3, [pc, #748]	; (8001c20 <HAL_RCC_OscConfig+0x67c>)
 8001932:	6a1a      	ldr	r2, [r3, #32]
 8001934:	4bba      	ldr	r3, [pc, #744]	; (8001c20 <HAL_RCC_OscConfig+0x67c>)
 8001936:	2101      	movs	r1, #1
 8001938:	438a      	bics	r2, r1
 800193a:	621a      	str	r2, [r3, #32]
 800193c:	4bb8      	ldr	r3, [pc, #736]	; (8001c20 <HAL_RCC_OscConfig+0x67c>)
 800193e:	6a1a      	ldr	r2, [r3, #32]
 8001940:	4bb7      	ldr	r3, [pc, #732]	; (8001c20 <HAL_RCC_OscConfig+0x67c>)
 8001942:	2104      	movs	r1, #4
 8001944:	438a      	bics	r2, r1
 8001946:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d014      	beq.n	800197a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001950:	f7ff fba6 	bl	80010a0 <HAL_GetTick>
 8001954:	0003      	movs	r3, r0
 8001956:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001958:	e009      	b.n	800196e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800195a:	f7ff fba1 	bl	80010a0 <HAL_GetTick>
 800195e:	0002      	movs	r2, r0
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	4aaf      	ldr	r2, [pc, #700]	; (8001c24 <HAL_RCC_OscConfig+0x680>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e19a      	b.n	8001ca4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800196e:	4bac      	ldr	r3, [pc, #688]	; (8001c20 <HAL_RCC_OscConfig+0x67c>)
 8001970:	6a1b      	ldr	r3, [r3, #32]
 8001972:	2202      	movs	r2, #2
 8001974:	4013      	ands	r3, r2
 8001976:	d0f0      	beq.n	800195a <HAL_RCC_OscConfig+0x3b6>
 8001978:	e013      	b.n	80019a2 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800197a:	f7ff fb91 	bl	80010a0 <HAL_GetTick>
 800197e:	0003      	movs	r3, r0
 8001980:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001982:	e009      	b.n	8001998 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001984:	f7ff fb8c 	bl	80010a0 <HAL_GetTick>
 8001988:	0002      	movs	r2, r0
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	4aa5      	ldr	r2, [pc, #660]	; (8001c24 <HAL_RCC_OscConfig+0x680>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d901      	bls.n	8001998 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001994:	2303      	movs	r3, #3
 8001996:	e185      	b.n	8001ca4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001998:	4ba1      	ldr	r3, [pc, #644]	; (8001c20 <HAL_RCC_OscConfig+0x67c>)
 800199a:	6a1b      	ldr	r3, [r3, #32]
 800199c:	2202      	movs	r2, #2
 800199e:	4013      	ands	r3, r2
 80019a0:	d1f0      	bne.n	8001984 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80019a2:	231f      	movs	r3, #31
 80019a4:	18fb      	adds	r3, r7, r3
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d105      	bne.n	80019b8 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019ac:	4b9c      	ldr	r3, [pc, #624]	; (8001c20 <HAL_RCC_OscConfig+0x67c>)
 80019ae:	69da      	ldr	r2, [r3, #28]
 80019b0:	4b9b      	ldr	r3, [pc, #620]	; (8001c20 <HAL_RCC_OscConfig+0x67c>)
 80019b2:	499d      	ldr	r1, [pc, #628]	; (8001c28 <HAL_RCC_OscConfig+0x684>)
 80019b4:	400a      	ands	r2, r1
 80019b6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2210      	movs	r2, #16
 80019be:	4013      	ands	r3, r2
 80019c0:	d063      	beq.n	8001a8a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	695b      	ldr	r3, [r3, #20]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d12a      	bne.n	8001a20 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80019ca:	4b95      	ldr	r3, [pc, #596]	; (8001c20 <HAL_RCC_OscConfig+0x67c>)
 80019cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019ce:	4b94      	ldr	r3, [pc, #592]	; (8001c20 <HAL_RCC_OscConfig+0x67c>)
 80019d0:	2104      	movs	r1, #4
 80019d2:	430a      	orrs	r2, r1
 80019d4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80019d6:	4b92      	ldr	r3, [pc, #584]	; (8001c20 <HAL_RCC_OscConfig+0x67c>)
 80019d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019da:	4b91      	ldr	r3, [pc, #580]	; (8001c20 <HAL_RCC_OscConfig+0x67c>)
 80019dc:	2101      	movs	r1, #1
 80019de:	430a      	orrs	r2, r1
 80019e0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019e2:	f7ff fb5d 	bl	80010a0 <HAL_GetTick>
 80019e6:	0003      	movs	r3, r0
 80019e8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80019ea:	e008      	b.n	80019fe <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80019ec:	f7ff fb58 	bl	80010a0 <HAL_GetTick>
 80019f0:	0002      	movs	r2, r0
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e152      	b.n	8001ca4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80019fe:	4b88      	ldr	r3, [pc, #544]	; (8001c20 <HAL_RCC_OscConfig+0x67c>)
 8001a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a02:	2202      	movs	r2, #2
 8001a04:	4013      	ands	r3, r2
 8001a06:	d0f1      	beq.n	80019ec <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001a08:	4b85      	ldr	r3, [pc, #532]	; (8001c20 <HAL_RCC_OscConfig+0x67c>)
 8001a0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a0c:	22f8      	movs	r2, #248	; 0xf8
 8001a0e:	4393      	bics	r3, r2
 8001a10:	0019      	movs	r1, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	699b      	ldr	r3, [r3, #24]
 8001a16:	00da      	lsls	r2, r3, #3
 8001a18:	4b81      	ldr	r3, [pc, #516]	; (8001c20 <HAL_RCC_OscConfig+0x67c>)
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	635a      	str	r2, [r3, #52]	; 0x34
 8001a1e:	e034      	b.n	8001a8a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	695b      	ldr	r3, [r3, #20]
 8001a24:	3305      	adds	r3, #5
 8001a26:	d111      	bne.n	8001a4c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001a28:	4b7d      	ldr	r3, [pc, #500]	; (8001c20 <HAL_RCC_OscConfig+0x67c>)
 8001a2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a2c:	4b7c      	ldr	r3, [pc, #496]	; (8001c20 <HAL_RCC_OscConfig+0x67c>)
 8001a2e:	2104      	movs	r1, #4
 8001a30:	438a      	bics	r2, r1
 8001a32:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001a34:	4b7a      	ldr	r3, [pc, #488]	; (8001c20 <HAL_RCC_OscConfig+0x67c>)
 8001a36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a38:	22f8      	movs	r2, #248	; 0xf8
 8001a3a:	4393      	bics	r3, r2
 8001a3c:	0019      	movs	r1, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	699b      	ldr	r3, [r3, #24]
 8001a42:	00da      	lsls	r2, r3, #3
 8001a44:	4b76      	ldr	r3, [pc, #472]	; (8001c20 <HAL_RCC_OscConfig+0x67c>)
 8001a46:	430a      	orrs	r2, r1
 8001a48:	635a      	str	r2, [r3, #52]	; 0x34
 8001a4a:	e01e      	b.n	8001a8a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001a4c:	4b74      	ldr	r3, [pc, #464]	; (8001c20 <HAL_RCC_OscConfig+0x67c>)
 8001a4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a50:	4b73      	ldr	r3, [pc, #460]	; (8001c20 <HAL_RCC_OscConfig+0x67c>)
 8001a52:	2104      	movs	r1, #4
 8001a54:	430a      	orrs	r2, r1
 8001a56:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001a58:	4b71      	ldr	r3, [pc, #452]	; (8001c20 <HAL_RCC_OscConfig+0x67c>)
 8001a5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a5c:	4b70      	ldr	r3, [pc, #448]	; (8001c20 <HAL_RCC_OscConfig+0x67c>)
 8001a5e:	2101      	movs	r1, #1
 8001a60:	438a      	bics	r2, r1
 8001a62:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a64:	f7ff fb1c 	bl	80010a0 <HAL_GetTick>
 8001a68:	0003      	movs	r3, r0
 8001a6a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001a6c:	e008      	b.n	8001a80 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001a6e:	f7ff fb17 	bl	80010a0 <HAL_GetTick>
 8001a72:	0002      	movs	r2, r0
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d901      	bls.n	8001a80 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e111      	b.n	8001ca4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001a80:	4b67      	ldr	r3, [pc, #412]	; (8001c20 <HAL_RCC_OscConfig+0x67c>)
 8001a82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a84:	2202      	movs	r2, #2
 8001a86:	4013      	ands	r3, r2
 8001a88:	d1f1      	bne.n	8001a6e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2220      	movs	r2, #32
 8001a90:	4013      	ands	r3, r2
 8001a92:	d05c      	beq.n	8001b4e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001a94:	4b62      	ldr	r3, [pc, #392]	; (8001c20 <HAL_RCC_OscConfig+0x67c>)
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	220c      	movs	r2, #12
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	2b0c      	cmp	r3, #12
 8001a9e:	d00e      	beq.n	8001abe <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001aa0:	4b5f      	ldr	r3, [pc, #380]	; (8001c20 <HAL_RCC_OscConfig+0x67c>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	220c      	movs	r2, #12
 8001aa6:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001aa8:	2b08      	cmp	r3, #8
 8001aaa:	d114      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001aac:	4b5c      	ldr	r3, [pc, #368]	; (8001c20 <HAL_RCC_OscConfig+0x67c>)
 8001aae:	685a      	ldr	r2, [r3, #4]
 8001ab0:	23c0      	movs	r3, #192	; 0xc0
 8001ab2:	025b      	lsls	r3, r3, #9
 8001ab4:	401a      	ands	r2, r3
 8001ab6:	23c0      	movs	r3, #192	; 0xc0
 8001ab8:	025b      	lsls	r3, r3, #9
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d10b      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001abe:	4b58      	ldr	r3, [pc, #352]	; (8001c20 <HAL_RCC_OscConfig+0x67c>)
 8001ac0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ac2:	2380      	movs	r3, #128	; 0x80
 8001ac4:	025b      	lsls	r3, r3, #9
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	d040      	beq.n	8001b4c <HAL_RCC_OscConfig+0x5a8>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6a1b      	ldr	r3, [r3, #32]
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d03c      	beq.n	8001b4c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e0e6      	b.n	8001ca4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6a1b      	ldr	r3, [r3, #32]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d01b      	beq.n	8001b16 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001ade:	4b50      	ldr	r3, [pc, #320]	; (8001c20 <HAL_RCC_OscConfig+0x67c>)
 8001ae0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ae2:	4b4f      	ldr	r3, [pc, #316]	; (8001c20 <HAL_RCC_OscConfig+0x67c>)
 8001ae4:	2180      	movs	r1, #128	; 0x80
 8001ae6:	0249      	lsls	r1, r1, #9
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aec:	f7ff fad8 	bl	80010a0 <HAL_GetTick>
 8001af0:	0003      	movs	r3, r0
 8001af2:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001af4:	e008      	b.n	8001b08 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001af6:	f7ff fad3 	bl	80010a0 <HAL_GetTick>
 8001afa:	0002      	movs	r2, r0
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d901      	bls.n	8001b08 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001b04:	2303      	movs	r3, #3
 8001b06:	e0cd      	b.n	8001ca4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001b08:	4b45      	ldr	r3, [pc, #276]	; (8001c20 <HAL_RCC_OscConfig+0x67c>)
 8001b0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b0c:	2380      	movs	r3, #128	; 0x80
 8001b0e:	025b      	lsls	r3, r3, #9
 8001b10:	4013      	ands	r3, r2
 8001b12:	d0f0      	beq.n	8001af6 <HAL_RCC_OscConfig+0x552>
 8001b14:	e01b      	b.n	8001b4e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001b16:	4b42      	ldr	r3, [pc, #264]	; (8001c20 <HAL_RCC_OscConfig+0x67c>)
 8001b18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b1a:	4b41      	ldr	r3, [pc, #260]	; (8001c20 <HAL_RCC_OscConfig+0x67c>)
 8001b1c:	4943      	ldr	r1, [pc, #268]	; (8001c2c <HAL_RCC_OscConfig+0x688>)
 8001b1e:	400a      	ands	r2, r1
 8001b20:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b22:	f7ff fabd 	bl	80010a0 <HAL_GetTick>
 8001b26:	0003      	movs	r3, r0
 8001b28:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b2c:	f7ff fab8 	bl	80010a0 <HAL_GetTick>
 8001b30:	0002      	movs	r2, r0
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e0b2      	b.n	8001ca4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001b3e:	4b38      	ldr	r3, [pc, #224]	; (8001c20 <HAL_RCC_OscConfig+0x67c>)
 8001b40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b42:	2380      	movs	r3, #128	; 0x80
 8001b44:	025b      	lsls	r3, r3, #9
 8001b46:	4013      	ands	r3, r2
 8001b48:	d1f0      	bne.n	8001b2c <HAL_RCC_OscConfig+0x588>
 8001b4a:	e000      	b.n	8001b4e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001b4c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d100      	bne.n	8001b58 <HAL_RCC_OscConfig+0x5b4>
 8001b56:	e0a4      	b.n	8001ca2 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b58:	4b31      	ldr	r3, [pc, #196]	; (8001c20 <HAL_RCC_OscConfig+0x67c>)
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	220c      	movs	r2, #12
 8001b5e:	4013      	ands	r3, r2
 8001b60:	2b08      	cmp	r3, #8
 8001b62:	d100      	bne.n	8001b66 <HAL_RCC_OscConfig+0x5c2>
 8001b64:	e078      	b.n	8001c58 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d14c      	bne.n	8001c08 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b6e:	4b2c      	ldr	r3, [pc, #176]	; (8001c20 <HAL_RCC_OscConfig+0x67c>)
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	4b2b      	ldr	r3, [pc, #172]	; (8001c20 <HAL_RCC_OscConfig+0x67c>)
 8001b74:	492e      	ldr	r1, [pc, #184]	; (8001c30 <HAL_RCC_OscConfig+0x68c>)
 8001b76:	400a      	ands	r2, r1
 8001b78:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b7a:	f7ff fa91 	bl	80010a0 <HAL_GetTick>
 8001b7e:	0003      	movs	r3, r0
 8001b80:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b82:	e008      	b.n	8001b96 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b84:	f7ff fa8c 	bl	80010a0 <HAL_GetTick>
 8001b88:	0002      	movs	r2, r0
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e086      	b.n	8001ca4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b96:	4b22      	ldr	r3, [pc, #136]	; (8001c20 <HAL_RCC_OscConfig+0x67c>)
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	2380      	movs	r3, #128	; 0x80
 8001b9c:	049b      	lsls	r3, r3, #18
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	d1f0      	bne.n	8001b84 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ba2:	4b1f      	ldr	r3, [pc, #124]	; (8001c20 <HAL_RCC_OscConfig+0x67c>)
 8001ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba6:	220f      	movs	r2, #15
 8001ba8:	4393      	bics	r3, r2
 8001baa:	0019      	movs	r1, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bb0:	4b1b      	ldr	r3, [pc, #108]	; (8001c20 <HAL_RCC_OscConfig+0x67c>)
 8001bb2:	430a      	orrs	r2, r1
 8001bb4:	62da      	str	r2, [r3, #44]	; 0x2c
 8001bb6:	4b1a      	ldr	r3, [pc, #104]	; (8001c20 <HAL_RCC_OscConfig+0x67c>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	4a1e      	ldr	r2, [pc, #120]	; (8001c34 <HAL_RCC_OscConfig+0x690>)
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	0019      	movs	r1, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bc8:	431a      	orrs	r2, r3
 8001bca:	4b15      	ldr	r3, [pc, #84]	; (8001c20 <HAL_RCC_OscConfig+0x67c>)
 8001bcc:	430a      	orrs	r2, r1
 8001bce:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bd0:	4b13      	ldr	r3, [pc, #76]	; (8001c20 <HAL_RCC_OscConfig+0x67c>)
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	4b12      	ldr	r3, [pc, #72]	; (8001c20 <HAL_RCC_OscConfig+0x67c>)
 8001bd6:	2180      	movs	r1, #128	; 0x80
 8001bd8:	0449      	lsls	r1, r1, #17
 8001bda:	430a      	orrs	r2, r1
 8001bdc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bde:	f7ff fa5f 	bl	80010a0 <HAL_GetTick>
 8001be2:	0003      	movs	r3, r0
 8001be4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001be6:	e008      	b.n	8001bfa <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001be8:	f7ff fa5a 	bl	80010a0 <HAL_GetTick>
 8001bec:	0002      	movs	r2, r0
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e054      	b.n	8001ca4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bfa:	4b09      	ldr	r3, [pc, #36]	; (8001c20 <HAL_RCC_OscConfig+0x67c>)
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	2380      	movs	r3, #128	; 0x80
 8001c00:	049b      	lsls	r3, r3, #18
 8001c02:	4013      	ands	r3, r2
 8001c04:	d0f0      	beq.n	8001be8 <HAL_RCC_OscConfig+0x644>
 8001c06:	e04c      	b.n	8001ca2 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c08:	4b05      	ldr	r3, [pc, #20]	; (8001c20 <HAL_RCC_OscConfig+0x67c>)
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	4b04      	ldr	r3, [pc, #16]	; (8001c20 <HAL_RCC_OscConfig+0x67c>)
 8001c0e:	4908      	ldr	r1, [pc, #32]	; (8001c30 <HAL_RCC_OscConfig+0x68c>)
 8001c10:	400a      	ands	r2, r1
 8001c12:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c14:	f7ff fa44 	bl	80010a0 <HAL_GetTick>
 8001c18:	0003      	movs	r3, r0
 8001c1a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c1c:	e015      	b.n	8001c4a <HAL_RCC_OscConfig+0x6a6>
 8001c1e:	46c0      	nop			; (mov r8, r8)
 8001c20:	40021000 	.word	0x40021000
 8001c24:	00001388 	.word	0x00001388
 8001c28:	efffffff 	.word	0xefffffff
 8001c2c:	fffeffff 	.word	0xfffeffff
 8001c30:	feffffff 	.word	0xfeffffff
 8001c34:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c38:	f7ff fa32 	bl	80010a0 <HAL_GetTick>
 8001c3c:	0002      	movs	r2, r0
 8001c3e:	69bb      	ldr	r3, [r7, #24]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e02c      	b.n	8001ca4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c4a:	4b18      	ldr	r3, [pc, #96]	; (8001cac <HAL_RCC_OscConfig+0x708>)
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	2380      	movs	r3, #128	; 0x80
 8001c50:	049b      	lsls	r3, r3, #18
 8001c52:	4013      	ands	r3, r2
 8001c54:	d1f0      	bne.n	8001c38 <HAL_RCC_OscConfig+0x694>
 8001c56:	e024      	b.n	8001ca2 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d101      	bne.n	8001c64 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e01f      	b.n	8001ca4 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001c64:	4b11      	ldr	r3, [pc, #68]	; (8001cac <HAL_RCC_OscConfig+0x708>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001c6a:	4b10      	ldr	r3, [pc, #64]	; (8001cac <HAL_RCC_OscConfig+0x708>)
 8001c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c6e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c70:	697a      	ldr	r2, [r7, #20]
 8001c72:	23c0      	movs	r3, #192	; 0xc0
 8001c74:	025b      	lsls	r3, r3, #9
 8001c76:	401a      	ands	r2, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d10e      	bne.n	8001c9e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	220f      	movs	r2, #15
 8001c84:	401a      	ands	r2, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d107      	bne.n	8001c9e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001c8e:	697a      	ldr	r2, [r7, #20]
 8001c90:	23f0      	movs	r3, #240	; 0xf0
 8001c92:	039b      	lsls	r3, r3, #14
 8001c94:	401a      	ands	r2, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d001      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e000      	b.n	8001ca4 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001ca2:	2300      	movs	r3, #0
}
 8001ca4:	0018      	movs	r0, r3
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	b008      	add	sp, #32
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	40021000 	.word	0x40021000

08001cb0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d101      	bne.n	8001cc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e0bf      	b.n	8001e44 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cc4:	4b61      	ldr	r3, [pc, #388]	; (8001e4c <HAL_RCC_ClockConfig+0x19c>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2201      	movs	r2, #1
 8001cca:	4013      	ands	r3, r2
 8001ccc:	683a      	ldr	r2, [r7, #0]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d911      	bls.n	8001cf6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cd2:	4b5e      	ldr	r3, [pc, #376]	; (8001e4c <HAL_RCC_ClockConfig+0x19c>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	4393      	bics	r3, r2
 8001cda:	0019      	movs	r1, r3
 8001cdc:	4b5b      	ldr	r3, [pc, #364]	; (8001e4c <HAL_RCC_ClockConfig+0x19c>)
 8001cde:	683a      	ldr	r2, [r7, #0]
 8001ce0:	430a      	orrs	r2, r1
 8001ce2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ce4:	4b59      	ldr	r3, [pc, #356]	; (8001e4c <HAL_RCC_ClockConfig+0x19c>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2201      	movs	r2, #1
 8001cea:	4013      	ands	r3, r2
 8001cec:	683a      	ldr	r2, [r7, #0]
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d001      	beq.n	8001cf6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e0a6      	b.n	8001e44 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	2202      	movs	r2, #2
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	d015      	beq.n	8001d2c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2204      	movs	r2, #4
 8001d06:	4013      	ands	r3, r2
 8001d08:	d006      	beq.n	8001d18 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001d0a:	4b51      	ldr	r3, [pc, #324]	; (8001e50 <HAL_RCC_ClockConfig+0x1a0>)
 8001d0c:	685a      	ldr	r2, [r3, #4]
 8001d0e:	4b50      	ldr	r3, [pc, #320]	; (8001e50 <HAL_RCC_ClockConfig+0x1a0>)
 8001d10:	21e0      	movs	r1, #224	; 0xe0
 8001d12:	00c9      	lsls	r1, r1, #3
 8001d14:	430a      	orrs	r2, r1
 8001d16:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d18:	4b4d      	ldr	r3, [pc, #308]	; (8001e50 <HAL_RCC_ClockConfig+0x1a0>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	22f0      	movs	r2, #240	; 0xf0
 8001d1e:	4393      	bics	r3, r2
 8001d20:	0019      	movs	r1, r3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	689a      	ldr	r2, [r3, #8]
 8001d26:	4b4a      	ldr	r3, [pc, #296]	; (8001e50 <HAL_RCC_ClockConfig+0x1a0>)
 8001d28:	430a      	orrs	r2, r1
 8001d2a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2201      	movs	r2, #1
 8001d32:	4013      	ands	r3, r2
 8001d34:	d04c      	beq.n	8001dd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d107      	bne.n	8001d4e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d3e:	4b44      	ldr	r3, [pc, #272]	; (8001e50 <HAL_RCC_ClockConfig+0x1a0>)
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	2380      	movs	r3, #128	; 0x80
 8001d44:	029b      	lsls	r3, r3, #10
 8001d46:	4013      	ands	r3, r2
 8001d48:	d120      	bne.n	8001d8c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e07a      	b.n	8001e44 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d107      	bne.n	8001d66 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d56:	4b3e      	ldr	r3, [pc, #248]	; (8001e50 <HAL_RCC_ClockConfig+0x1a0>)
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	2380      	movs	r3, #128	; 0x80
 8001d5c:	049b      	lsls	r3, r3, #18
 8001d5e:	4013      	ands	r3, r2
 8001d60:	d114      	bne.n	8001d8c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e06e      	b.n	8001e44 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	2b03      	cmp	r3, #3
 8001d6c:	d107      	bne.n	8001d7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001d6e:	4b38      	ldr	r3, [pc, #224]	; (8001e50 <HAL_RCC_ClockConfig+0x1a0>)
 8001d70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d72:	2380      	movs	r3, #128	; 0x80
 8001d74:	025b      	lsls	r3, r3, #9
 8001d76:	4013      	ands	r3, r2
 8001d78:	d108      	bne.n	8001d8c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e062      	b.n	8001e44 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d7e:	4b34      	ldr	r3, [pc, #208]	; (8001e50 <HAL_RCC_ClockConfig+0x1a0>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	2202      	movs	r2, #2
 8001d84:	4013      	ands	r3, r2
 8001d86:	d101      	bne.n	8001d8c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e05b      	b.n	8001e44 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d8c:	4b30      	ldr	r3, [pc, #192]	; (8001e50 <HAL_RCC_ClockConfig+0x1a0>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	2203      	movs	r2, #3
 8001d92:	4393      	bics	r3, r2
 8001d94:	0019      	movs	r1, r3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685a      	ldr	r2, [r3, #4]
 8001d9a:	4b2d      	ldr	r3, [pc, #180]	; (8001e50 <HAL_RCC_ClockConfig+0x1a0>)
 8001d9c:	430a      	orrs	r2, r1
 8001d9e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001da0:	f7ff f97e 	bl	80010a0 <HAL_GetTick>
 8001da4:	0003      	movs	r3, r0
 8001da6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001da8:	e009      	b.n	8001dbe <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001daa:	f7ff f979 	bl	80010a0 <HAL_GetTick>
 8001dae:	0002      	movs	r2, r0
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	4a27      	ldr	r2, [pc, #156]	; (8001e54 <HAL_RCC_ClockConfig+0x1a4>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e042      	b.n	8001e44 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dbe:	4b24      	ldr	r3, [pc, #144]	; (8001e50 <HAL_RCC_ClockConfig+0x1a0>)
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	220c      	movs	r2, #12
 8001dc4:	401a      	ands	r2, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d1ec      	bne.n	8001daa <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001dd0:	4b1e      	ldr	r3, [pc, #120]	; (8001e4c <HAL_RCC_ClockConfig+0x19c>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	683a      	ldr	r2, [r7, #0]
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d211      	bcs.n	8001e02 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dde:	4b1b      	ldr	r3, [pc, #108]	; (8001e4c <HAL_RCC_ClockConfig+0x19c>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	2201      	movs	r2, #1
 8001de4:	4393      	bics	r3, r2
 8001de6:	0019      	movs	r1, r3
 8001de8:	4b18      	ldr	r3, [pc, #96]	; (8001e4c <HAL_RCC_ClockConfig+0x19c>)
 8001dea:	683a      	ldr	r2, [r7, #0]
 8001dec:	430a      	orrs	r2, r1
 8001dee:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001df0:	4b16      	ldr	r3, [pc, #88]	; (8001e4c <HAL_RCC_ClockConfig+0x19c>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2201      	movs	r2, #1
 8001df6:	4013      	ands	r3, r2
 8001df8:	683a      	ldr	r2, [r7, #0]
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d001      	beq.n	8001e02 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e020      	b.n	8001e44 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	2204      	movs	r2, #4
 8001e08:	4013      	ands	r3, r2
 8001e0a:	d009      	beq.n	8001e20 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001e0c:	4b10      	ldr	r3, [pc, #64]	; (8001e50 <HAL_RCC_ClockConfig+0x1a0>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	4a11      	ldr	r2, [pc, #68]	; (8001e58 <HAL_RCC_ClockConfig+0x1a8>)
 8001e12:	4013      	ands	r3, r2
 8001e14:	0019      	movs	r1, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	68da      	ldr	r2, [r3, #12]
 8001e1a:	4b0d      	ldr	r3, [pc, #52]	; (8001e50 <HAL_RCC_ClockConfig+0x1a0>)
 8001e1c:	430a      	orrs	r2, r1
 8001e1e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001e20:	f000 f820 	bl	8001e64 <HAL_RCC_GetSysClockFreq>
 8001e24:	0001      	movs	r1, r0
 8001e26:	4b0a      	ldr	r3, [pc, #40]	; (8001e50 <HAL_RCC_ClockConfig+0x1a0>)
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	091b      	lsrs	r3, r3, #4
 8001e2c:	220f      	movs	r2, #15
 8001e2e:	4013      	ands	r3, r2
 8001e30:	4a0a      	ldr	r2, [pc, #40]	; (8001e5c <HAL_RCC_ClockConfig+0x1ac>)
 8001e32:	5cd3      	ldrb	r3, [r2, r3]
 8001e34:	000a      	movs	r2, r1
 8001e36:	40da      	lsrs	r2, r3
 8001e38:	4b09      	ldr	r3, [pc, #36]	; (8001e60 <HAL_RCC_ClockConfig+0x1b0>)
 8001e3a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001e3c:	2000      	movs	r0, #0
 8001e3e:	f7ff f8e9 	bl	8001014 <HAL_InitTick>
  
  return HAL_OK;
 8001e42:	2300      	movs	r3, #0
}
 8001e44:	0018      	movs	r0, r3
 8001e46:	46bd      	mov	sp, r7
 8001e48:	b004      	add	sp, #16
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40022000 	.word	0x40022000
 8001e50:	40021000 	.word	0x40021000
 8001e54:	00001388 	.word	0x00001388
 8001e58:	fffff8ff 	.word	0xfffff8ff
 8001e5c:	080070c4 	.word	0x080070c4
 8001e60:	20000000 	.word	0x20000000

08001e64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e64:	b590      	push	{r4, r7, lr}
 8001e66:	b08f      	sub	sp, #60	; 0x3c
 8001e68:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001e6a:	2314      	movs	r3, #20
 8001e6c:	18fb      	adds	r3, r7, r3
 8001e6e:	4a37      	ldr	r2, [pc, #220]	; (8001f4c <HAL_RCC_GetSysClockFreq+0xe8>)
 8001e70:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001e72:	c313      	stmia	r3!, {r0, r1, r4}
 8001e74:	6812      	ldr	r2, [r2, #0]
 8001e76:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001e78:	1d3b      	adds	r3, r7, #4
 8001e7a:	4a35      	ldr	r2, [pc, #212]	; (8001f50 <HAL_RCC_GetSysClockFreq+0xec>)
 8001e7c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001e7e:	c313      	stmia	r3!, {r0, r1, r4}
 8001e80:	6812      	ldr	r2, [r2, #0]
 8001e82:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e84:	2300      	movs	r3, #0
 8001e86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e88:	2300      	movs	r3, #0
 8001e8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	637b      	str	r3, [r7, #52]	; 0x34
 8001e90:	2300      	movs	r3, #0
 8001e92:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001e94:	2300      	movs	r3, #0
 8001e96:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001e98:	4b2e      	ldr	r3, [pc, #184]	; (8001f54 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ea0:	220c      	movs	r2, #12
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	2b08      	cmp	r3, #8
 8001ea6:	d006      	beq.n	8001eb6 <HAL_RCC_GetSysClockFreq+0x52>
 8001ea8:	2b0c      	cmp	r3, #12
 8001eaa:	d043      	beq.n	8001f34 <HAL_RCC_GetSysClockFreq+0xd0>
 8001eac:	2b04      	cmp	r3, #4
 8001eae:	d144      	bne.n	8001f3a <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001eb0:	4b29      	ldr	r3, [pc, #164]	; (8001f58 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001eb2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001eb4:	e044      	b.n	8001f40 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eb8:	0c9b      	lsrs	r3, r3, #18
 8001eba:	220f      	movs	r2, #15
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	2214      	movs	r2, #20
 8001ec0:	18ba      	adds	r2, r7, r2
 8001ec2:	5cd3      	ldrb	r3, [r2, r3]
 8001ec4:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001ec6:	4b23      	ldr	r3, [pc, #140]	; (8001f54 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eca:	220f      	movs	r2, #15
 8001ecc:	4013      	ands	r3, r2
 8001ece:	1d3a      	adds	r2, r7, #4
 8001ed0:	5cd3      	ldrb	r3, [r2, r3]
 8001ed2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001ed4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ed6:	23c0      	movs	r3, #192	; 0xc0
 8001ed8:	025b      	lsls	r3, r3, #9
 8001eda:	401a      	ands	r2, r3
 8001edc:	2380      	movs	r3, #128	; 0x80
 8001ede:	025b      	lsls	r3, r3, #9
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d109      	bne.n	8001ef8 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001ee4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ee6:	481c      	ldr	r0, [pc, #112]	; (8001f58 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001ee8:	f7fe f916 	bl	8000118 <__udivsi3>
 8001eec:	0003      	movs	r3, r0
 8001eee:	001a      	movs	r2, r3
 8001ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef2:	4353      	muls	r3, r2
 8001ef4:	637b      	str	r3, [r7, #52]	; 0x34
 8001ef6:	e01a      	b.n	8001f2e <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001ef8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001efa:	23c0      	movs	r3, #192	; 0xc0
 8001efc:	025b      	lsls	r3, r3, #9
 8001efe:	401a      	ands	r2, r3
 8001f00:	23c0      	movs	r3, #192	; 0xc0
 8001f02:	025b      	lsls	r3, r3, #9
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d109      	bne.n	8001f1c <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001f08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f0a:	4814      	ldr	r0, [pc, #80]	; (8001f5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f0c:	f7fe f904 	bl	8000118 <__udivsi3>
 8001f10:	0003      	movs	r3, r0
 8001f12:	001a      	movs	r2, r3
 8001f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f16:	4353      	muls	r3, r2
 8001f18:	637b      	str	r3, [r7, #52]	; 0x34
 8001f1a:	e008      	b.n	8001f2e <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001f1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f1e:	480e      	ldr	r0, [pc, #56]	; (8001f58 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001f20:	f7fe f8fa 	bl	8000118 <__udivsi3>
 8001f24:	0003      	movs	r3, r0
 8001f26:	001a      	movs	r2, r3
 8001f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2a:	4353      	muls	r3, r2
 8001f2c:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001f2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f30:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001f32:	e005      	b.n	8001f40 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001f34:	4b09      	ldr	r3, [pc, #36]	; (8001f5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f36:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001f38:	e002      	b.n	8001f40 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f3a:	4b07      	ldr	r3, [pc, #28]	; (8001f58 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001f3c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001f3e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001f42:	0018      	movs	r0, r3
 8001f44:	46bd      	mov	sp, r7
 8001f46:	b00f      	add	sp, #60	; 0x3c
 8001f48:	bd90      	pop	{r4, r7, pc}
 8001f4a:	46c0      	nop			; (mov r8, r8)
 8001f4c:	08007060 	.word	0x08007060
 8001f50:	08007070 	.word	0x08007070
 8001f54:	40021000 	.word	0x40021000
 8001f58:	007a1200 	.word	0x007a1200
 8001f5c:	02dc6c00 	.word	0x02dc6c00

08001f60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f64:	4b02      	ldr	r3, [pc, #8]	; (8001f70 <HAL_RCC_GetHCLKFreq+0x10>)
 8001f66:	681b      	ldr	r3, [r3, #0]
}
 8001f68:	0018      	movs	r0, r3
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	46c0      	nop			; (mov r8, r8)
 8001f70:	20000000 	.word	0x20000000

08001f74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001f78:	f7ff fff2 	bl	8001f60 <HAL_RCC_GetHCLKFreq>
 8001f7c:	0001      	movs	r1, r0
 8001f7e:	4b06      	ldr	r3, [pc, #24]	; (8001f98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	0a1b      	lsrs	r3, r3, #8
 8001f84:	2207      	movs	r2, #7
 8001f86:	4013      	ands	r3, r2
 8001f88:	4a04      	ldr	r2, [pc, #16]	; (8001f9c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f8a:	5cd3      	ldrb	r3, [r2, r3]
 8001f8c:	40d9      	lsrs	r1, r3
 8001f8e:	000b      	movs	r3, r1
}    
 8001f90:	0018      	movs	r0, r3
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	46c0      	nop			; (mov r8, r8)
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	080070d4 	.word	0x080070d4

08001fa0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b086      	sub	sp, #24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001fac:	2300      	movs	r3, #0
 8001fae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	2380      	movs	r3, #128	; 0x80
 8001fb6:	025b      	lsls	r3, r3, #9
 8001fb8:	4013      	ands	r3, r2
 8001fba:	d100      	bne.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001fbc:	e08f      	b.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001fbe:	2317      	movs	r3, #23
 8001fc0:	18fb      	adds	r3, r7, r3
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fc6:	4b67      	ldr	r3, [pc, #412]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001fc8:	69da      	ldr	r2, [r3, #28]
 8001fca:	2380      	movs	r3, #128	; 0x80
 8001fcc:	055b      	lsls	r3, r3, #21
 8001fce:	4013      	ands	r3, r2
 8001fd0:	d111      	bne.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001fd2:	4b64      	ldr	r3, [pc, #400]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001fd4:	69da      	ldr	r2, [r3, #28]
 8001fd6:	4b63      	ldr	r3, [pc, #396]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001fd8:	2180      	movs	r1, #128	; 0x80
 8001fda:	0549      	lsls	r1, r1, #21
 8001fdc:	430a      	orrs	r2, r1
 8001fde:	61da      	str	r2, [r3, #28]
 8001fe0:	4b60      	ldr	r3, [pc, #384]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001fe2:	69da      	ldr	r2, [r3, #28]
 8001fe4:	2380      	movs	r3, #128	; 0x80
 8001fe6:	055b      	lsls	r3, r3, #21
 8001fe8:	4013      	ands	r3, r2
 8001fea:	60bb      	str	r3, [r7, #8]
 8001fec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fee:	2317      	movs	r3, #23
 8001ff0:	18fb      	adds	r3, r7, r3
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ff6:	4b5c      	ldr	r3, [pc, #368]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	2380      	movs	r3, #128	; 0x80
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	4013      	ands	r3, r2
 8002000:	d11a      	bne.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002002:	4b59      	ldr	r3, [pc, #356]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	4b58      	ldr	r3, [pc, #352]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002008:	2180      	movs	r1, #128	; 0x80
 800200a:	0049      	lsls	r1, r1, #1
 800200c:	430a      	orrs	r2, r1
 800200e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002010:	f7ff f846 	bl	80010a0 <HAL_GetTick>
 8002014:	0003      	movs	r3, r0
 8002016:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002018:	e008      	b.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800201a:	f7ff f841 	bl	80010a0 <HAL_GetTick>
 800201e:	0002      	movs	r2, r0
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	2b64      	cmp	r3, #100	; 0x64
 8002026:	d901      	bls.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e097      	b.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800202c:	4b4e      	ldr	r3, [pc, #312]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	2380      	movs	r3, #128	; 0x80
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	4013      	ands	r3, r2
 8002036:	d0f0      	beq.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002038:	4b4a      	ldr	r3, [pc, #296]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800203a:	6a1a      	ldr	r2, [r3, #32]
 800203c:	23c0      	movs	r3, #192	; 0xc0
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	4013      	ands	r3, r2
 8002042:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d034      	beq.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x114>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685a      	ldr	r2, [r3, #4]
 800204e:	23c0      	movs	r3, #192	; 0xc0
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	4013      	ands	r3, r2
 8002054:	68fa      	ldr	r2, [r7, #12]
 8002056:	429a      	cmp	r2, r3
 8002058:	d02c      	beq.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800205a:	4b42      	ldr	r3, [pc, #264]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800205c:	6a1b      	ldr	r3, [r3, #32]
 800205e:	4a43      	ldr	r2, [pc, #268]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002060:	4013      	ands	r3, r2
 8002062:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002064:	4b3f      	ldr	r3, [pc, #252]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002066:	6a1a      	ldr	r2, [r3, #32]
 8002068:	4b3e      	ldr	r3, [pc, #248]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800206a:	2180      	movs	r1, #128	; 0x80
 800206c:	0249      	lsls	r1, r1, #9
 800206e:	430a      	orrs	r2, r1
 8002070:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002072:	4b3c      	ldr	r3, [pc, #240]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002074:	6a1a      	ldr	r2, [r3, #32]
 8002076:	4b3b      	ldr	r3, [pc, #236]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002078:	493d      	ldr	r1, [pc, #244]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800207a:	400a      	ands	r2, r1
 800207c:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800207e:	4b39      	ldr	r3, [pc, #228]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002080:	68fa      	ldr	r2, [r7, #12]
 8002082:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2201      	movs	r2, #1
 8002088:	4013      	ands	r3, r2
 800208a:	d013      	beq.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800208c:	f7ff f808 	bl	80010a0 <HAL_GetTick>
 8002090:	0003      	movs	r3, r0
 8002092:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002094:	e009      	b.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002096:	f7ff f803 	bl	80010a0 <HAL_GetTick>
 800209a:	0002      	movs	r2, r0
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	4a34      	ldr	r2, [pc, #208]	; (8002174 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d901      	bls.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e058      	b.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020aa:	4b2e      	ldr	r3, [pc, #184]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80020ac:	6a1b      	ldr	r3, [r3, #32]
 80020ae:	2202      	movs	r2, #2
 80020b0:	4013      	ands	r3, r2
 80020b2:	d0f0      	beq.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020b4:	4b2b      	ldr	r3, [pc, #172]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80020b6:	6a1b      	ldr	r3, [r3, #32]
 80020b8:	4a2c      	ldr	r2, [pc, #176]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80020ba:	4013      	ands	r3, r2
 80020bc:	0019      	movs	r1, r3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685a      	ldr	r2, [r3, #4]
 80020c2:	4b28      	ldr	r3, [pc, #160]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80020c4:	430a      	orrs	r2, r1
 80020c6:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80020c8:	2317      	movs	r3, #23
 80020ca:	18fb      	adds	r3, r7, r3
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d105      	bne.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020d2:	4b24      	ldr	r3, [pc, #144]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80020d4:	69da      	ldr	r2, [r3, #28]
 80020d6:	4b23      	ldr	r3, [pc, #140]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80020d8:	4927      	ldr	r1, [pc, #156]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80020da:	400a      	ands	r2, r1
 80020dc:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	2201      	movs	r2, #1
 80020e4:	4013      	ands	r3, r2
 80020e6:	d009      	beq.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020e8:	4b1e      	ldr	r3, [pc, #120]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80020ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ec:	2203      	movs	r2, #3
 80020ee:	4393      	bics	r3, r2
 80020f0:	0019      	movs	r1, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	689a      	ldr	r2, [r3, #8]
 80020f6:	4b1b      	ldr	r3, [pc, #108]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80020f8:	430a      	orrs	r2, r1
 80020fa:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2220      	movs	r2, #32
 8002102:	4013      	ands	r3, r2
 8002104:	d009      	beq.n	800211a <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002106:	4b17      	ldr	r3, [pc, #92]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210a:	2210      	movs	r2, #16
 800210c:	4393      	bics	r3, r2
 800210e:	0019      	movs	r1, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	68da      	ldr	r2, [r3, #12]
 8002114:	4b13      	ldr	r3, [pc, #76]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002116:	430a      	orrs	r2, r1
 8002118:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	2380      	movs	r3, #128	; 0x80
 8002120:	029b      	lsls	r3, r3, #10
 8002122:	4013      	ands	r3, r2
 8002124:	d009      	beq.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002126:	4b0f      	ldr	r3, [pc, #60]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212a:	2280      	movs	r2, #128	; 0x80
 800212c:	4393      	bics	r3, r2
 800212e:	0019      	movs	r1, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	695a      	ldr	r2, [r3, #20]
 8002134:	4b0b      	ldr	r3, [pc, #44]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002136:	430a      	orrs	r2, r1
 8002138:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	2380      	movs	r3, #128	; 0x80
 8002140:	00db      	lsls	r3, r3, #3
 8002142:	4013      	ands	r3, r2
 8002144:	d009      	beq.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002146:	4b07      	ldr	r3, [pc, #28]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214a:	2240      	movs	r2, #64	; 0x40
 800214c:	4393      	bics	r3, r2
 800214e:	0019      	movs	r1, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	691a      	ldr	r2, [r3, #16]
 8002154:	4b03      	ldr	r3, [pc, #12]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002156:	430a      	orrs	r2, r1
 8002158:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800215a:	2300      	movs	r3, #0
}
 800215c:	0018      	movs	r0, r3
 800215e:	46bd      	mov	sp, r7
 8002160:	b006      	add	sp, #24
 8002162:	bd80      	pop	{r7, pc}
 8002164:	40021000 	.word	0x40021000
 8002168:	40007000 	.word	0x40007000
 800216c:	fffffcff 	.word	0xfffffcff
 8002170:	fffeffff 	.word	0xfffeffff
 8002174:	00001388 	.word	0x00001388
 8002178:	efffffff 	.word	0xefffffff

0800217c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d101      	bne.n	800218e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e0a8      	b.n	80022e0 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002192:	2b00      	cmp	r3, #0
 8002194:	d109      	bne.n	80021aa <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685a      	ldr	r2, [r3, #4]
 800219a:	2382      	movs	r3, #130	; 0x82
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	429a      	cmp	r2, r3
 80021a0:	d009      	beq.n	80021b6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	61da      	str	r2, [r3, #28]
 80021a8:	e005      	b.n	80021b6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	225d      	movs	r2, #93	; 0x5d
 80021c0:	5c9b      	ldrb	r3, [r3, r2]
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d107      	bne.n	80021d8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	225c      	movs	r2, #92	; 0x5c
 80021cc:	2100      	movs	r1, #0
 80021ce:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	0018      	movs	r0, r3
 80021d4:	f7fe fd66 	bl	8000ca4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	225d      	movs	r2, #93	; 0x5d
 80021dc:	2102      	movs	r1, #2
 80021de:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2140      	movs	r1, #64	; 0x40
 80021ec:	438a      	bics	r2, r1
 80021ee:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	68da      	ldr	r2, [r3, #12]
 80021f4:	23e0      	movs	r3, #224	; 0xe0
 80021f6:	00db      	lsls	r3, r3, #3
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d902      	bls.n	8002202 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80021fc:	2300      	movs	r3, #0
 80021fe:	60fb      	str	r3, [r7, #12]
 8002200:	e002      	b.n	8002208 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002202:	2380      	movs	r3, #128	; 0x80
 8002204:	015b      	lsls	r3, r3, #5
 8002206:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	68da      	ldr	r2, [r3, #12]
 800220c:	23f0      	movs	r3, #240	; 0xf0
 800220e:	011b      	lsls	r3, r3, #4
 8002210:	429a      	cmp	r2, r3
 8002212:	d008      	beq.n	8002226 <HAL_SPI_Init+0xaa>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	68da      	ldr	r2, [r3, #12]
 8002218:	23e0      	movs	r3, #224	; 0xe0
 800221a:	00db      	lsls	r3, r3, #3
 800221c:	429a      	cmp	r2, r3
 800221e:	d002      	beq.n	8002226 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685a      	ldr	r2, [r3, #4]
 800222a:	2382      	movs	r3, #130	; 0x82
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	401a      	ands	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6899      	ldr	r1, [r3, #8]
 8002234:	2384      	movs	r3, #132	; 0x84
 8002236:	021b      	lsls	r3, r3, #8
 8002238:	400b      	ands	r3, r1
 800223a:	431a      	orrs	r2, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	691b      	ldr	r3, [r3, #16]
 8002240:	2102      	movs	r1, #2
 8002242:	400b      	ands	r3, r1
 8002244:	431a      	orrs	r2, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	695b      	ldr	r3, [r3, #20]
 800224a:	2101      	movs	r1, #1
 800224c:	400b      	ands	r3, r1
 800224e:	431a      	orrs	r2, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6999      	ldr	r1, [r3, #24]
 8002254:	2380      	movs	r3, #128	; 0x80
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	400b      	ands	r3, r1
 800225a:	431a      	orrs	r2, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	69db      	ldr	r3, [r3, #28]
 8002260:	2138      	movs	r1, #56	; 0x38
 8002262:	400b      	ands	r3, r1
 8002264:	431a      	orrs	r2, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6a1b      	ldr	r3, [r3, #32]
 800226a:	2180      	movs	r1, #128	; 0x80
 800226c:	400b      	ands	r3, r1
 800226e:	431a      	orrs	r2, r3
 8002270:	0011      	movs	r1, r2
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002276:	2380      	movs	r3, #128	; 0x80
 8002278:	019b      	lsls	r3, r3, #6
 800227a:	401a      	ands	r2, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	430a      	orrs	r2, r1
 8002282:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	699b      	ldr	r3, [r3, #24]
 8002288:	0c1b      	lsrs	r3, r3, #16
 800228a:	2204      	movs	r2, #4
 800228c:	401a      	ands	r2, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002292:	2110      	movs	r1, #16
 8002294:	400b      	ands	r3, r1
 8002296:	431a      	orrs	r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800229c:	2108      	movs	r1, #8
 800229e:	400b      	ands	r3, r1
 80022a0:	431a      	orrs	r2, r3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	68d9      	ldr	r1, [r3, #12]
 80022a6:	23f0      	movs	r3, #240	; 0xf0
 80022a8:	011b      	lsls	r3, r3, #4
 80022aa:	400b      	ands	r3, r1
 80022ac:	431a      	orrs	r2, r3
 80022ae:	0011      	movs	r1, r2
 80022b0:	68fa      	ldr	r2, [r7, #12]
 80022b2:	2380      	movs	r3, #128	; 0x80
 80022b4:	015b      	lsls	r3, r3, #5
 80022b6:	401a      	ands	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	430a      	orrs	r2, r1
 80022be:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	69da      	ldr	r2, [r3, #28]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4907      	ldr	r1, [pc, #28]	; (80022e8 <HAL_SPI_Init+0x16c>)
 80022cc:	400a      	ands	r2, r1
 80022ce:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	225d      	movs	r2, #93	; 0x5d
 80022da:	2101      	movs	r1, #1
 80022dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80022de:	2300      	movs	r3, #0
}
 80022e0:	0018      	movs	r0, r3
 80022e2:	46bd      	mov	sp, r7
 80022e4:	b004      	add	sp, #16
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	fffff7ff 	.word	0xfffff7ff

080022ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d101      	bne.n	80022fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e044      	b.n	8002388 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002302:	2b00      	cmp	r3, #0
 8002304:	d107      	bne.n	8002316 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2274      	movs	r2, #116	; 0x74
 800230a:	2100      	movs	r1, #0
 800230c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	0018      	movs	r0, r3
 8002312:	f7fe fd13 	bl	8000d3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2224      	movs	r2, #36	; 0x24
 800231a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2101      	movs	r1, #1
 8002328:	438a      	bics	r2, r1
 800232a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	0018      	movs	r0, r3
 8002330:	f000 f830 	bl	8002394 <UART_SetConfig>
 8002334:	0003      	movs	r3, r0
 8002336:	2b01      	cmp	r3, #1
 8002338:	d101      	bne.n	800233e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e024      	b.n	8002388 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002342:	2b00      	cmp	r3, #0
 8002344:	d003      	beq.n	800234e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	0018      	movs	r0, r3
 800234a:	f000 f961 	bl	8002610 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	685a      	ldr	r2, [r3, #4]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	490d      	ldr	r1, [pc, #52]	; (8002390 <HAL_UART_Init+0xa4>)
 800235a:	400a      	ands	r2, r1
 800235c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	689a      	ldr	r2, [r3, #8]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	212a      	movs	r1, #42	; 0x2a
 800236a:	438a      	bics	r2, r1
 800236c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2101      	movs	r1, #1
 800237a:	430a      	orrs	r2, r1
 800237c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	0018      	movs	r0, r3
 8002382:	f000 f9f9 	bl	8002778 <UART_CheckIdleState>
 8002386:	0003      	movs	r3, r0
}
 8002388:	0018      	movs	r0, r3
 800238a:	46bd      	mov	sp, r7
 800238c:	b002      	add	sp, #8
 800238e:	bd80      	pop	{r7, pc}
 8002390:	ffffb7ff 	.word	0xffffb7ff

08002394 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b088      	sub	sp, #32
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800239c:	231e      	movs	r3, #30
 800239e:	18fb      	adds	r3, r7, r3
 80023a0:	2200      	movs	r2, #0
 80023a2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	689a      	ldr	r2, [r3, #8]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	691b      	ldr	r3, [r3, #16]
 80023ac:	431a      	orrs	r2, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	695b      	ldr	r3, [r3, #20]
 80023b2:	431a      	orrs	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	69db      	ldr	r3, [r3, #28]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a8b      	ldr	r2, [pc, #556]	; (80025f0 <UART_SetConfig+0x25c>)
 80023c4:	4013      	ands	r3, r2
 80023c6:	0019      	movs	r1, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	697a      	ldr	r2, [r7, #20]
 80023ce:	430a      	orrs	r2, r1
 80023d0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	4a86      	ldr	r2, [pc, #536]	; (80025f4 <UART_SetConfig+0x260>)
 80023da:	4013      	ands	r3, r2
 80023dc:	0019      	movs	r1, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	68da      	ldr	r2, [r3, #12]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	430a      	orrs	r2, r1
 80023e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	699b      	ldr	r3, [r3, #24]
 80023ee:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a1b      	ldr	r3, [r3, #32]
 80023f4:	697a      	ldr	r2, [r7, #20]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	4a7d      	ldr	r2, [pc, #500]	; (80025f8 <UART_SetConfig+0x264>)
 8002402:	4013      	ands	r3, r2
 8002404:	0019      	movs	r1, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	697a      	ldr	r2, [r7, #20]
 800240c:	430a      	orrs	r2, r1
 800240e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a79      	ldr	r2, [pc, #484]	; (80025fc <UART_SetConfig+0x268>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d125      	bne.n	8002466 <UART_SetConfig+0xd2>
 800241a:	4b79      	ldr	r3, [pc, #484]	; (8002600 <UART_SetConfig+0x26c>)
 800241c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241e:	2203      	movs	r2, #3
 8002420:	4013      	ands	r3, r2
 8002422:	2b01      	cmp	r3, #1
 8002424:	d00f      	beq.n	8002446 <UART_SetConfig+0xb2>
 8002426:	d304      	bcc.n	8002432 <UART_SetConfig+0x9e>
 8002428:	2b02      	cmp	r3, #2
 800242a:	d011      	beq.n	8002450 <UART_SetConfig+0xbc>
 800242c:	2b03      	cmp	r3, #3
 800242e:	d005      	beq.n	800243c <UART_SetConfig+0xa8>
 8002430:	e013      	b.n	800245a <UART_SetConfig+0xc6>
 8002432:	231f      	movs	r3, #31
 8002434:	18fb      	adds	r3, r7, r3
 8002436:	2200      	movs	r2, #0
 8002438:	701a      	strb	r2, [r3, #0]
 800243a:	e022      	b.n	8002482 <UART_SetConfig+0xee>
 800243c:	231f      	movs	r3, #31
 800243e:	18fb      	adds	r3, r7, r3
 8002440:	2202      	movs	r2, #2
 8002442:	701a      	strb	r2, [r3, #0]
 8002444:	e01d      	b.n	8002482 <UART_SetConfig+0xee>
 8002446:	231f      	movs	r3, #31
 8002448:	18fb      	adds	r3, r7, r3
 800244a:	2204      	movs	r2, #4
 800244c:	701a      	strb	r2, [r3, #0]
 800244e:	e018      	b.n	8002482 <UART_SetConfig+0xee>
 8002450:	231f      	movs	r3, #31
 8002452:	18fb      	adds	r3, r7, r3
 8002454:	2208      	movs	r2, #8
 8002456:	701a      	strb	r2, [r3, #0]
 8002458:	e013      	b.n	8002482 <UART_SetConfig+0xee>
 800245a:	231f      	movs	r3, #31
 800245c:	18fb      	adds	r3, r7, r3
 800245e:	2210      	movs	r2, #16
 8002460:	701a      	strb	r2, [r3, #0]
 8002462:	46c0      	nop			; (mov r8, r8)
 8002464:	e00d      	b.n	8002482 <UART_SetConfig+0xee>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a66      	ldr	r2, [pc, #408]	; (8002604 <UART_SetConfig+0x270>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d104      	bne.n	800247a <UART_SetConfig+0xe6>
 8002470:	231f      	movs	r3, #31
 8002472:	18fb      	adds	r3, r7, r3
 8002474:	2200      	movs	r2, #0
 8002476:	701a      	strb	r2, [r3, #0]
 8002478:	e003      	b.n	8002482 <UART_SetConfig+0xee>
 800247a:	231f      	movs	r3, #31
 800247c:	18fb      	adds	r3, r7, r3
 800247e:	2210      	movs	r2, #16
 8002480:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	69da      	ldr	r2, [r3, #28]
 8002486:	2380      	movs	r3, #128	; 0x80
 8002488:	021b      	lsls	r3, r3, #8
 800248a:	429a      	cmp	r2, r3
 800248c:	d15c      	bne.n	8002548 <UART_SetConfig+0x1b4>
  {
    switch (clocksource)
 800248e:	231f      	movs	r3, #31
 8002490:	18fb      	adds	r3, r7, r3
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	2b02      	cmp	r3, #2
 8002496:	d00d      	beq.n	80024b4 <UART_SetConfig+0x120>
 8002498:	dc02      	bgt.n	80024a0 <UART_SetConfig+0x10c>
 800249a:	2b00      	cmp	r3, #0
 800249c:	d005      	beq.n	80024aa <UART_SetConfig+0x116>
 800249e:	e015      	b.n	80024cc <UART_SetConfig+0x138>
 80024a0:	2b04      	cmp	r3, #4
 80024a2:	d00a      	beq.n	80024ba <UART_SetConfig+0x126>
 80024a4:	2b08      	cmp	r3, #8
 80024a6:	d00d      	beq.n	80024c4 <UART_SetConfig+0x130>
 80024a8:	e010      	b.n	80024cc <UART_SetConfig+0x138>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80024aa:	f7ff fd63 	bl	8001f74 <HAL_RCC_GetPCLK1Freq>
 80024ae:	0003      	movs	r3, r0
 80024b0:	61bb      	str	r3, [r7, #24]
        break;
 80024b2:	e012      	b.n	80024da <UART_SetConfig+0x146>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80024b4:	4b54      	ldr	r3, [pc, #336]	; (8002608 <UART_SetConfig+0x274>)
 80024b6:	61bb      	str	r3, [r7, #24]
        break;
 80024b8:	e00f      	b.n	80024da <UART_SetConfig+0x146>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80024ba:	f7ff fcd3 	bl	8001e64 <HAL_RCC_GetSysClockFreq>
 80024be:	0003      	movs	r3, r0
 80024c0:	61bb      	str	r3, [r7, #24]
        break;
 80024c2:	e00a      	b.n	80024da <UART_SetConfig+0x146>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80024c4:	2380      	movs	r3, #128	; 0x80
 80024c6:	021b      	lsls	r3, r3, #8
 80024c8:	61bb      	str	r3, [r7, #24]
        break;
 80024ca:	e006      	b.n	80024da <UART_SetConfig+0x146>
      default:
        pclk = 0U;
 80024cc:	2300      	movs	r3, #0
 80024ce:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80024d0:	231e      	movs	r3, #30
 80024d2:	18fb      	adds	r3, r7, r3
 80024d4:	2201      	movs	r2, #1
 80024d6:	701a      	strb	r2, [r3, #0]
        break;
 80024d8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d100      	bne.n	80024e2 <UART_SetConfig+0x14e>
 80024e0:	e079      	b.n	80025d6 <UART_SetConfig+0x242>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	005a      	lsls	r2, r3, #1
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	085b      	lsrs	r3, r3, #1
 80024ec:	18d2      	adds	r2, r2, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	0019      	movs	r1, r3
 80024f4:	0010      	movs	r0, r2
 80024f6:	f7fd fe0f 	bl	8000118 <__udivsi3>
 80024fa:	0003      	movs	r3, r0
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	2b0f      	cmp	r3, #15
 8002504:	d91b      	bls.n	800253e <UART_SetConfig+0x1aa>
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	4a40      	ldr	r2, [pc, #256]	; (800260c <UART_SetConfig+0x278>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d817      	bhi.n	800253e <UART_SetConfig+0x1aa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	b29a      	uxth	r2, r3
 8002512:	200e      	movs	r0, #14
 8002514:	183b      	adds	r3, r7, r0
 8002516:	210f      	movs	r1, #15
 8002518:	438a      	bics	r2, r1
 800251a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	085b      	lsrs	r3, r3, #1
 8002520:	b29b      	uxth	r3, r3
 8002522:	2207      	movs	r2, #7
 8002524:	4013      	ands	r3, r2
 8002526:	b299      	uxth	r1, r3
 8002528:	183b      	adds	r3, r7, r0
 800252a:	183a      	adds	r2, r7, r0
 800252c:	8812      	ldrh	r2, [r2, #0]
 800252e:	430a      	orrs	r2, r1
 8002530:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	183a      	adds	r2, r7, r0
 8002538:	8812      	ldrh	r2, [r2, #0]
 800253a:	60da      	str	r2, [r3, #12]
 800253c:	e04b      	b.n	80025d6 <UART_SetConfig+0x242>
      }
      else
      {
        ret = HAL_ERROR;
 800253e:	231e      	movs	r3, #30
 8002540:	18fb      	adds	r3, r7, r3
 8002542:	2201      	movs	r2, #1
 8002544:	701a      	strb	r2, [r3, #0]
 8002546:	e046      	b.n	80025d6 <UART_SetConfig+0x242>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002548:	231f      	movs	r3, #31
 800254a:	18fb      	adds	r3, r7, r3
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	2b02      	cmp	r3, #2
 8002550:	d00d      	beq.n	800256e <UART_SetConfig+0x1da>
 8002552:	dc02      	bgt.n	800255a <UART_SetConfig+0x1c6>
 8002554:	2b00      	cmp	r3, #0
 8002556:	d005      	beq.n	8002564 <UART_SetConfig+0x1d0>
 8002558:	e015      	b.n	8002586 <UART_SetConfig+0x1f2>
 800255a:	2b04      	cmp	r3, #4
 800255c:	d00a      	beq.n	8002574 <UART_SetConfig+0x1e0>
 800255e:	2b08      	cmp	r3, #8
 8002560:	d00d      	beq.n	800257e <UART_SetConfig+0x1ea>
 8002562:	e010      	b.n	8002586 <UART_SetConfig+0x1f2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002564:	f7ff fd06 	bl	8001f74 <HAL_RCC_GetPCLK1Freq>
 8002568:	0003      	movs	r3, r0
 800256a:	61bb      	str	r3, [r7, #24]
        break;
 800256c:	e012      	b.n	8002594 <UART_SetConfig+0x200>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800256e:	4b26      	ldr	r3, [pc, #152]	; (8002608 <UART_SetConfig+0x274>)
 8002570:	61bb      	str	r3, [r7, #24]
        break;
 8002572:	e00f      	b.n	8002594 <UART_SetConfig+0x200>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002574:	f7ff fc76 	bl	8001e64 <HAL_RCC_GetSysClockFreq>
 8002578:	0003      	movs	r3, r0
 800257a:	61bb      	str	r3, [r7, #24]
        break;
 800257c:	e00a      	b.n	8002594 <UART_SetConfig+0x200>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800257e:	2380      	movs	r3, #128	; 0x80
 8002580:	021b      	lsls	r3, r3, #8
 8002582:	61bb      	str	r3, [r7, #24]
        break;
 8002584:	e006      	b.n	8002594 <UART_SetConfig+0x200>
      default:
        pclk = 0U;
 8002586:	2300      	movs	r3, #0
 8002588:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800258a:	231e      	movs	r3, #30
 800258c:	18fb      	adds	r3, r7, r3
 800258e:	2201      	movs	r2, #1
 8002590:	701a      	strb	r2, [r3, #0]
        break;
 8002592:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d01d      	beq.n	80025d6 <UART_SetConfig+0x242>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	085a      	lsrs	r2, r3, #1
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	18d2      	adds	r2, r2, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	0019      	movs	r1, r3
 80025aa:	0010      	movs	r0, r2
 80025ac:	f7fd fdb4 	bl	8000118 <__udivsi3>
 80025b0:	0003      	movs	r3, r0
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	2b0f      	cmp	r3, #15
 80025ba:	d908      	bls.n	80025ce <UART_SetConfig+0x23a>
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	4a13      	ldr	r2, [pc, #76]	; (800260c <UART_SetConfig+0x278>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d804      	bhi.n	80025ce <UART_SetConfig+0x23a>
      {
        huart->Instance->BRR = usartdiv;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	693a      	ldr	r2, [r7, #16]
 80025ca:	60da      	str	r2, [r3, #12]
 80025cc:	e003      	b.n	80025d6 <UART_SetConfig+0x242>
      }
      else
      {
        ret = HAL_ERROR;
 80025ce:	231e      	movs	r3, #30
 80025d0:	18fb      	adds	r3, r7, r3
 80025d2:	2201      	movs	r2, #1
 80025d4:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80025e2:	231e      	movs	r3, #30
 80025e4:	18fb      	adds	r3, r7, r3
 80025e6:	781b      	ldrb	r3, [r3, #0]
}
 80025e8:	0018      	movs	r0, r3
 80025ea:	46bd      	mov	sp, r7
 80025ec:	b008      	add	sp, #32
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	efff69f3 	.word	0xefff69f3
 80025f4:	ffffcfff 	.word	0xffffcfff
 80025f8:	fffff4ff 	.word	0xfffff4ff
 80025fc:	40013800 	.word	0x40013800
 8002600:	40021000 	.word	0x40021000
 8002604:	40004400 	.word	0x40004400
 8002608:	007a1200 	.word	0x007a1200
 800260c:	0000ffff 	.word	0x0000ffff

08002610 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261c:	2201      	movs	r2, #1
 800261e:	4013      	ands	r3, r2
 8002620:	d00b      	beq.n	800263a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	4a4a      	ldr	r2, [pc, #296]	; (8002754 <UART_AdvFeatureConfig+0x144>)
 800262a:	4013      	ands	r3, r2
 800262c:	0019      	movs	r1, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	430a      	orrs	r2, r1
 8002638:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263e:	2202      	movs	r2, #2
 8002640:	4013      	ands	r3, r2
 8002642:	d00b      	beq.n	800265c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	4a43      	ldr	r2, [pc, #268]	; (8002758 <UART_AdvFeatureConfig+0x148>)
 800264c:	4013      	ands	r3, r2
 800264e:	0019      	movs	r1, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	430a      	orrs	r2, r1
 800265a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002660:	2204      	movs	r2, #4
 8002662:	4013      	ands	r3, r2
 8002664:	d00b      	beq.n	800267e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	4a3b      	ldr	r2, [pc, #236]	; (800275c <UART_AdvFeatureConfig+0x14c>)
 800266e:	4013      	ands	r3, r2
 8002670:	0019      	movs	r1, r3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	430a      	orrs	r2, r1
 800267c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002682:	2208      	movs	r2, #8
 8002684:	4013      	ands	r3, r2
 8002686:	d00b      	beq.n	80026a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	4a34      	ldr	r2, [pc, #208]	; (8002760 <UART_AdvFeatureConfig+0x150>)
 8002690:	4013      	ands	r3, r2
 8002692:	0019      	movs	r1, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	430a      	orrs	r2, r1
 800269e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a4:	2210      	movs	r2, #16
 80026a6:	4013      	ands	r3, r2
 80026a8:	d00b      	beq.n	80026c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	4a2c      	ldr	r2, [pc, #176]	; (8002764 <UART_AdvFeatureConfig+0x154>)
 80026b2:	4013      	ands	r3, r2
 80026b4:	0019      	movs	r1, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	430a      	orrs	r2, r1
 80026c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c6:	2220      	movs	r2, #32
 80026c8:	4013      	ands	r3, r2
 80026ca:	d00b      	beq.n	80026e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	4a25      	ldr	r2, [pc, #148]	; (8002768 <UART_AdvFeatureConfig+0x158>)
 80026d4:	4013      	ands	r3, r2
 80026d6:	0019      	movs	r1, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	430a      	orrs	r2, r1
 80026e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e8:	2240      	movs	r2, #64	; 0x40
 80026ea:	4013      	ands	r3, r2
 80026ec:	d01d      	beq.n	800272a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	4a1d      	ldr	r2, [pc, #116]	; (800276c <UART_AdvFeatureConfig+0x15c>)
 80026f6:	4013      	ands	r3, r2
 80026f8:	0019      	movs	r1, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	430a      	orrs	r2, r1
 8002704:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800270a:	2380      	movs	r3, #128	; 0x80
 800270c:	035b      	lsls	r3, r3, #13
 800270e:	429a      	cmp	r2, r3
 8002710:	d10b      	bne.n	800272a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	4a15      	ldr	r2, [pc, #84]	; (8002770 <UART_AdvFeatureConfig+0x160>)
 800271a:	4013      	ands	r3, r2
 800271c:	0019      	movs	r1, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	430a      	orrs	r2, r1
 8002728:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272e:	2280      	movs	r2, #128	; 0x80
 8002730:	4013      	ands	r3, r2
 8002732:	d00b      	beq.n	800274c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	4a0e      	ldr	r2, [pc, #56]	; (8002774 <UART_AdvFeatureConfig+0x164>)
 800273c:	4013      	ands	r3, r2
 800273e:	0019      	movs	r1, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	430a      	orrs	r2, r1
 800274a:	605a      	str	r2, [r3, #4]
  }
}
 800274c:	46c0      	nop			; (mov r8, r8)
 800274e:	46bd      	mov	sp, r7
 8002750:	b002      	add	sp, #8
 8002752:	bd80      	pop	{r7, pc}
 8002754:	fffdffff 	.word	0xfffdffff
 8002758:	fffeffff 	.word	0xfffeffff
 800275c:	fffbffff 	.word	0xfffbffff
 8002760:	ffff7fff 	.word	0xffff7fff
 8002764:	ffffefff 	.word	0xffffefff
 8002768:	ffffdfff 	.word	0xffffdfff
 800276c:	ffefffff 	.word	0xffefffff
 8002770:	ff9fffff 	.word	0xff9fffff
 8002774:	fff7ffff 	.word	0xfff7ffff

08002778 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b086      	sub	sp, #24
 800277c:	af02      	add	r7, sp, #8
 800277e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2280      	movs	r2, #128	; 0x80
 8002784:	2100      	movs	r1, #0
 8002786:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002788:	f7fe fc8a 	bl	80010a0 <HAL_GetTick>
 800278c:	0003      	movs	r3, r0
 800278e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	2208      	movs	r2, #8
 8002798:	4013      	ands	r3, r2
 800279a:	2b08      	cmp	r3, #8
 800279c:	d10d      	bne.n	80027ba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800279e:	68fa      	ldr	r2, [r7, #12]
 80027a0:	2380      	movs	r3, #128	; 0x80
 80027a2:	0399      	lsls	r1, r3, #14
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	4b18      	ldr	r3, [pc, #96]	; (8002808 <UART_CheckIdleState+0x90>)
 80027a8:	9300      	str	r3, [sp, #0]
 80027aa:	0013      	movs	r3, r2
 80027ac:	2200      	movs	r2, #0
 80027ae:	f000 f82d 	bl	800280c <UART_WaitOnFlagUntilTimeout>
 80027b2:	1e03      	subs	r3, r0, #0
 80027b4:	d001      	beq.n	80027ba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e022      	b.n	8002800 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2204      	movs	r2, #4
 80027c2:	4013      	ands	r3, r2
 80027c4:	2b04      	cmp	r3, #4
 80027c6:	d10d      	bne.n	80027e4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80027c8:	68fa      	ldr	r2, [r7, #12]
 80027ca:	2380      	movs	r3, #128	; 0x80
 80027cc:	03d9      	lsls	r1, r3, #15
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	4b0d      	ldr	r3, [pc, #52]	; (8002808 <UART_CheckIdleState+0x90>)
 80027d2:	9300      	str	r3, [sp, #0]
 80027d4:	0013      	movs	r3, r2
 80027d6:	2200      	movs	r2, #0
 80027d8:	f000 f818 	bl	800280c <UART_WaitOnFlagUntilTimeout>
 80027dc:	1e03      	subs	r3, r0, #0
 80027de:	d001      	beq.n	80027e4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	e00d      	b.n	8002800 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2220      	movs	r2, #32
 80027e8:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2220      	movs	r2, #32
 80027ee:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2274      	movs	r2, #116	; 0x74
 80027fa:	2100      	movs	r1, #0
 80027fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80027fe:	2300      	movs	r3, #0
}
 8002800:	0018      	movs	r0, r3
 8002802:	46bd      	mov	sp, r7
 8002804:	b004      	add	sp, #16
 8002806:	bd80      	pop	{r7, pc}
 8002808:	01ffffff 	.word	0x01ffffff

0800280c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	60b9      	str	r1, [r7, #8]
 8002816:	603b      	str	r3, [r7, #0]
 8002818:	1dfb      	adds	r3, r7, #7
 800281a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800281c:	e05e      	b.n	80028dc <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	3301      	adds	r3, #1
 8002822:	d05b      	beq.n	80028dc <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002824:	f7fe fc3c 	bl	80010a0 <HAL_GetTick>
 8002828:	0002      	movs	r2, r0
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	69ba      	ldr	r2, [r7, #24]
 8002830:	429a      	cmp	r2, r3
 8002832:	d302      	bcc.n	800283a <UART_WaitOnFlagUntilTimeout+0x2e>
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d11b      	bne.n	8002872 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	492f      	ldr	r1, [pc, #188]	; (8002904 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002846:	400a      	ands	r2, r1
 8002848:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	689a      	ldr	r2, [r3, #8]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2101      	movs	r1, #1
 8002856:	438a      	bics	r2, r1
 8002858:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2220      	movs	r2, #32
 800285e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2220      	movs	r2, #32
 8002864:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2274      	movs	r2, #116	; 0x74
 800286a:	2100      	movs	r1, #0
 800286c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e044      	b.n	80028fc <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2204      	movs	r2, #4
 800287a:	4013      	ands	r3, r2
 800287c:	d02e      	beq.n	80028dc <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	69da      	ldr	r2, [r3, #28]
 8002884:	2380      	movs	r3, #128	; 0x80
 8002886:	011b      	lsls	r3, r3, #4
 8002888:	401a      	ands	r2, r3
 800288a:	2380      	movs	r3, #128	; 0x80
 800288c:	011b      	lsls	r3, r3, #4
 800288e:	429a      	cmp	r2, r3
 8002890:	d124      	bne.n	80028dc <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2280      	movs	r2, #128	; 0x80
 8002898:	0112      	lsls	r2, r2, #4
 800289a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4917      	ldr	r1, [pc, #92]	; (8002904 <UART_WaitOnFlagUntilTimeout+0xf8>)
 80028a8:	400a      	ands	r2, r1
 80028aa:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	689a      	ldr	r2, [r3, #8]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2101      	movs	r1, #1
 80028b8:	438a      	bics	r2, r1
 80028ba:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2220      	movs	r2, #32
 80028c0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2220      	movs	r2, #32
 80028c6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2280      	movs	r2, #128	; 0x80
 80028cc:	2120      	movs	r1, #32
 80028ce:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2274      	movs	r2, #116	; 0x74
 80028d4:	2100      	movs	r1, #0
 80028d6:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80028d8:	2303      	movs	r3, #3
 80028da:	e00f      	b.n	80028fc <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	69db      	ldr	r3, [r3, #28]
 80028e2:	68ba      	ldr	r2, [r7, #8]
 80028e4:	4013      	ands	r3, r2
 80028e6:	68ba      	ldr	r2, [r7, #8]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	425a      	negs	r2, r3
 80028ec:	4153      	adcs	r3, r2
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	001a      	movs	r2, r3
 80028f2:	1dfb      	adds	r3, r7, #7
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d091      	beq.n	800281e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80028fa:	2300      	movs	r3, #0
}
 80028fc:	0018      	movs	r0, r3
 80028fe:	46bd      	mov	sp, r7
 8002900:	b004      	add	sp, #16
 8002902:	bd80      	pop	{r7, pc}
 8002904:	fffffe5f 	.word	0xfffffe5f

08002908 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800290c:	4a06      	ldr	r2, [pc, #24]	; (8002928 <MX_FATFS_Init+0x20>)
 800290e:	4b07      	ldr	r3, [pc, #28]	; (800292c <MX_FATFS_Init+0x24>)
 8002910:	0011      	movs	r1, r2
 8002912:	0018      	movs	r0, r3
 8002914:	f003 f9fa 	bl	8005d0c <FATFS_LinkDriver>
 8002918:	0003      	movs	r3, r0
 800291a:	001a      	movs	r2, r3
 800291c:	4b04      	ldr	r3, [pc, #16]	; (8002930 <MX_FATFS_Init+0x28>)
 800291e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8002920:	46c0      	nop			; (mov r8, r8)
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	46c0      	nop			; (mov r8, r8)
 8002928:	200001c4 	.word	0x200001c4
 800292c:	2000000c 	.word	0x2000000c
 8002930:	200001c8 	.word	0x200001c8

08002934 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8002938:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800293a:	0018      	movs	r0, r3
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}

08002940 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	0002      	movs	r2, r0
 8002948:	1dfb      	adds	r3, r7, #7
 800294a:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN INIT */
  /* USER CODE END INIT */
}
 800294c:	46c0      	nop			; (mov r8, r8)
 800294e:	0018      	movs	r0, r3
 8002950:	46bd      	mov	sp, r7
 8002952:	b002      	add	sp, #8
 8002954:	bd80      	pop	{r7, pc}

08002956 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8002956:	b580      	push	{r7, lr}
 8002958:	b082      	sub	sp, #8
 800295a:	af00      	add	r7, sp, #0
 800295c:	0002      	movs	r2, r0
 800295e:	1dfb      	adds	r3, r7, #7
 8002960:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN STATUS */

  /* USER CODE END STATUS */
}
 8002962:	46c0      	nop			; (mov r8, r8)
 8002964:	0018      	movs	r0, r3
 8002966:	46bd      	mov	sp, r7
 8002968:	b002      	add	sp, #8
 800296a:	bd80      	pop	{r7, pc}

0800296c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	60b9      	str	r1, [r7, #8]
 8002974:	607a      	str	r2, [r7, #4]
 8002976:	603b      	str	r3, [r7, #0]
 8002978:	230f      	movs	r3, #15
 800297a:	18fb      	adds	r3, r7, r3
 800297c:	1c02      	adds	r2, r0, #0
 800297e:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN READ */

  /* USER CODE END READ */
}
 8002980:	46c0      	nop			; (mov r8, r8)
 8002982:	0018      	movs	r0, r3
 8002984:	46bd      	mov	sp, r7
 8002986:	b004      	add	sp, #16
 8002988:	bd80      	pop	{r7, pc}

0800298a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800298a:	b580      	push	{r7, lr}
 800298c:	b084      	sub	sp, #16
 800298e:	af00      	add	r7, sp, #0
 8002990:	60b9      	str	r1, [r7, #8]
 8002992:	607a      	str	r2, [r7, #4]
 8002994:	603b      	str	r3, [r7, #0]
 8002996:	230f      	movs	r3, #15
 8002998:	18fb      	adds	r3, r7, r3
 800299a:	1c02      	adds	r2, r0, #0
 800299c:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */

  /* USER CODE END WRITE */
}
 800299e:	46c0      	nop			; (mov r8, r8)
 80029a0:	0018      	movs	r0, r3
 80029a2:	46bd      	mov	sp, r7
 80029a4:	b004      	add	sp, #16
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	603a      	str	r2, [r7, #0]
 80029b0:	1dfb      	adds	r3, r7, #7
 80029b2:	1c02      	adds	r2, r0, #0
 80029b4:	701a      	strb	r2, [r3, #0]
 80029b6:	1dbb      	adds	r3, r7, #6
 80029b8:	1c0a      	adds	r2, r1, #0
 80029ba:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN IOCTL */

  /* USER CODE END IOCTL */
}
 80029bc:	46c0      	nop			; (mov r8, r8)
 80029be:	0018      	movs	r0, r3
 80029c0:	46bd      	mov	sp, r7
 80029c2:	b002      	add	sp, #8
 80029c4:	bd80      	pop	{r7, pc}
	...

080029c8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 80029c8:	b5b0      	push	{r4, r5, r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	0002      	movs	r2, r0
 80029d0:	1dfb      	adds	r3, r7, #7
 80029d2:	701a      	strb	r2, [r3, #0]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80029d4:	1dfb      	adds	r3, r7, #7
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	4a0b      	ldr	r2, [pc, #44]	; (8002a08 <disk_status+0x40>)
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	18d3      	adds	r3, r2, r3
 80029de:	3304      	adds	r3, #4
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	1dfa      	adds	r2, r7, #7
 80029e6:	7812      	ldrb	r2, [r2, #0]
 80029e8:	4907      	ldr	r1, [pc, #28]	; (8002a08 <disk_status+0x40>)
 80029ea:	188a      	adds	r2, r1, r2
 80029ec:	7a12      	ldrb	r2, [r2, #8]
 80029ee:	250f      	movs	r5, #15
 80029f0:	197c      	adds	r4, r7, r5
 80029f2:	0010      	movs	r0, r2
 80029f4:	4798      	blx	r3
 80029f6:	0003      	movs	r3, r0
 80029f8:	7023      	strb	r3, [r4, #0]
  return stat;
 80029fa:	197b      	adds	r3, r7, r5
 80029fc:	781b      	ldrb	r3, [r3, #0]
}
 80029fe:	0018      	movs	r0, r3
 8002a00:	46bd      	mov	sp, r7
 8002a02:	b004      	add	sp, #16
 8002a04:	bdb0      	pop	{r4, r5, r7, pc}
 8002a06:	46c0      	nop			; (mov r8, r8)
 8002a08:	200000c4 	.word	0x200000c4

08002a0c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8002a0c:	b590      	push	{r4, r7, lr}
 8002a0e:	b085      	sub	sp, #20
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	0002      	movs	r2, r0
 8002a14:	1dfb      	adds	r3, r7, #7
 8002a16:	701a      	strb	r2, [r3, #0]
  DSTATUS stat = RES_OK;
 8002a18:	230f      	movs	r3, #15
 8002a1a:	18fb      	adds	r3, r7, r3
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	701a      	strb	r2, [r3, #0]
  
  if(disk.is_initialized[pdrv] == 0)
 8002a20:	1dfb      	adds	r3, r7, #7
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	4a11      	ldr	r2, [pc, #68]	; (8002a6c <disk_initialize+0x60>)
 8002a26:	5cd3      	ldrb	r3, [r2, r3]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d117      	bne.n	8002a5c <disk_initialize+0x50>
  { 
    disk.is_initialized[pdrv] = 1;
 8002a2c:	1dfb      	adds	r3, r7, #7
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	4a0e      	ldr	r2, [pc, #56]	; (8002a6c <disk_initialize+0x60>)
 8002a32:	2101      	movs	r1, #1
 8002a34:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8002a36:	1dfb      	adds	r3, r7, #7
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	4a0c      	ldr	r2, [pc, #48]	; (8002a6c <disk_initialize+0x60>)
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	18d3      	adds	r3, r2, r3
 8002a40:	3304      	adds	r3, #4
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	1dfa      	adds	r2, r7, #7
 8002a48:	7812      	ldrb	r2, [r2, #0]
 8002a4a:	4908      	ldr	r1, [pc, #32]	; (8002a6c <disk_initialize+0x60>)
 8002a4c:	188a      	adds	r2, r1, r2
 8002a4e:	7a12      	ldrb	r2, [r2, #8]
 8002a50:	210f      	movs	r1, #15
 8002a52:	187c      	adds	r4, r7, r1
 8002a54:	0010      	movs	r0, r2
 8002a56:	4798      	blx	r3
 8002a58:	0003      	movs	r3, r0
 8002a5a:	7023      	strb	r3, [r4, #0]
  }
  return stat;
 8002a5c:	230f      	movs	r3, #15
 8002a5e:	18fb      	adds	r3, r7, r3
 8002a60:	781b      	ldrb	r3, [r3, #0]
}
 8002a62:	0018      	movs	r0, r3
 8002a64:	46bd      	mov	sp, r7
 8002a66:	b005      	add	sp, #20
 8002a68:	bd90      	pop	{r4, r7, pc}
 8002a6a:	46c0      	nop			; (mov r8, r8)
 8002a6c:	200000c4 	.word	0x200000c4

08002a70 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8002a70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a72:	b087      	sub	sp, #28
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	60b9      	str	r1, [r7, #8]
 8002a78:	607a      	str	r2, [r7, #4]
 8002a7a:	603b      	str	r3, [r7, #0]
 8002a7c:	210f      	movs	r1, #15
 8002a7e:	187b      	adds	r3, r7, r1
 8002a80:	1c02      	adds	r2, r0, #0
 8002a82:	701a      	strb	r2, [r3, #0]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8002a84:	187b      	adds	r3, r7, r1
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	4a0c      	ldr	r2, [pc, #48]	; (8002abc <disk_read+0x4c>)
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	18d3      	adds	r3, r2, r3
 8002a8e:	3304      	adds	r3, #4
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	689d      	ldr	r5, [r3, #8]
 8002a94:	187b      	adds	r3, r7, r1
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	4a08      	ldr	r2, [pc, #32]	; (8002abc <disk_read+0x4c>)
 8002a9a:	18d3      	adds	r3, r2, r3
 8002a9c:	7a18      	ldrb	r0, [r3, #8]
 8002a9e:	2617      	movs	r6, #23
 8002aa0:	19bc      	adds	r4, r7, r6
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	68b9      	ldr	r1, [r7, #8]
 8002aa8:	47a8      	blx	r5
 8002aaa:	0003      	movs	r3, r0
 8002aac:	7023      	strb	r3, [r4, #0]
  return res;
 8002aae:	19bb      	adds	r3, r7, r6
 8002ab0:	781b      	ldrb	r3, [r3, #0]
}
 8002ab2:	0018      	movs	r0, r3
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	b007      	add	sp, #28
 8002ab8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002aba:	46c0      	nop			; (mov r8, r8)
 8002abc:	200000c4 	.word	0x200000c4

08002ac0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8002ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ac2:	b087      	sub	sp, #28
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	60b9      	str	r1, [r7, #8]
 8002ac8:	607a      	str	r2, [r7, #4]
 8002aca:	603b      	str	r3, [r7, #0]
 8002acc:	210f      	movs	r1, #15
 8002ace:	187b      	adds	r3, r7, r1
 8002ad0:	1c02      	adds	r2, r0, #0
 8002ad2:	701a      	strb	r2, [r3, #0]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8002ad4:	187b      	adds	r3, r7, r1
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	4a0c      	ldr	r2, [pc, #48]	; (8002b0c <disk_write+0x4c>)
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	18d3      	adds	r3, r2, r3
 8002ade:	3304      	adds	r3, #4
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	68dd      	ldr	r5, [r3, #12]
 8002ae4:	187b      	adds	r3, r7, r1
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	4a08      	ldr	r2, [pc, #32]	; (8002b0c <disk_write+0x4c>)
 8002aea:	18d3      	adds	r3, r2, r3
 8002aec:	7a18      	ldrb	r0, [r3, #8]
 8002aee:	2617      	movs	r6, #23
 8002af0:	19bc      	adds	r4, r7, r6
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	68b9      	ldr	r1, [r7, #8]
 8002af8:	47a8      	blx	r5
 8002afa:	0003      	movs	r3, r0
 8002afc:	7023      	strb	r3, [r4, #0]
  return res;
 8002afe:	19bb      	adds	r3, r7, r6
 8002b00:	781b      	ldrb	r3, [r3, #0]
}
 8002b02:	0018      	movs	r0, r3
 8002b04:	46bd      	mov	sp, r7
 8002b06:	b007      	add	sp, #28
 8002b08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b0a:	46c0      	nop			; (mov r8, r8)
 8002b0c:	200000c4 	.word	0x200000c4

08002b10 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8002b10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b12:	b085      	sub	sp, #20
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	603a      	str	r2, [r7, #0]
 8002b18:	1dfb      	adds	r3, r7, #7
 8002b1a:	1c02      	adds	r2, r0, #0
 8002b1c:	701a      	strb	r2, [r3, #0]
 8002b1e:	1dbb      	adds	r3, r7, #6
 8002b20:	1c0a      	adds	r2, r1, #0
 8002b22:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8002b24:	1dfb      	adds	r3, r7, #7
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	4a0c      	ldr	r2, [pc, #48]	; (8002b5c <disk_ioctl+0x4c>)
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	18d3      	adds	r3, r2, r3
 8002b2e:	3304      	adds	r3, #4
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	691b      	ldr	r3, [r3, #16]
 8002b34:	1dfa      	adds	r2, r7, #7
 8002b36:	7812      	ldrb	r2, [r2, #0]
 8002b38:	4908      	ldr	r1, [pc, #32]	; (8002b5c <disk_ioctl+0x4c>)
 8002b3a:	188a      	adds	r2, r1, r2
 8002b3c:	7a10      	ldrb	r0, [r2, #8]
 8002b3e:	260f      	movs	r6, #15
 8002b40:	19bc      	adds	r4, r7, r6
 8002b42:	683d      	ldr	r5, [r7, #0]
 8002b44:	1dba      	adds	r2, r7, #6
 8002b46:	7811      	ldrb	r1, [r2, #0]
 8002b48:	002a      	movs	r2, r5
 8002b4a:	4798      	blx	r3
 8002b4c:	0003      	movs	r3, r0
 8002b4e:	7023      	strb	r3, [r4, #0]
  return res;
 8002b50:	19bb      	adds	r3, r7, r6
 8002b52:	781b      	ldrb	r3, [r3, #0]
}
 8002b54:	0018      	movs	r0, r3
 8002b56:	46bd      	mov	sp, r7
 8002b58:	b005      	add	sp, #20
 8002b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b5c:	200000c4 	.word	0x200000c4

08002b60 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b086      	sub	sp, #24
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8002b74:	e007      	b.n	8002b86 <mem_cpy+0x26>
		*d++ = *s++;
 8002b76:	693a      	ldr	r2, [r7, #16]
 8002b78:	1c53      	adds	r3, r2, #1
 8002b7a:	613b      	str	r3, [r7, #16]
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	1c59      	adds	r1, r3, #1
 8002b80:	6179      	str	r1, [r7, #20]
 8002b82:	7812      	ldrb	r2, [r2, #0]
 8002b84:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	1e5a      	subs	r2, r3, #1
 8002b8a:	607a      	str	r2, [r7, #4]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d1f2      	bne.n	8002b76 <mem_cpy+0x16>
}
 8002b90:	46c0      	nop			; (mov r8, r8)
 8002b92:	46bd      	mov	sp, r7
 8002b94:	b006      	add	sp, #24
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b086      	sub	sp, #24
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8002ba8:	e005      	b.n	8002bb6 <mem_set+0x1e>
		*d++ = (BYTE)val;
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	1c5a      	adds	r2, r3, #1
 8002bae:	617a      	str	r2, [r7, #20]
 8002bb0:	68ba      	ldr	r2, [r7, #8]
 8002bb2:	b2d2      	uxtb	r2, r2
 8002bb4:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	1e5a      	subs	r2, r3, #1
 8002bba:	607a      	str	r2, [r7, #4]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d1f4      	bne.n	8002baa <mem_set+0x12>
}
 8002bc0:	46c0      	nop			; (mov r8, r8)
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	b006      	add	sp, #24
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b088      	sub	sp, #32
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	60b9      	str	r1, [r7, #8]
 8002bd2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	61fb      	str	r3, [r7, #28]
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8002be0:	46c0      	nop			; (mov r8, r8)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	1e5a      	subs	r2, r3, #1
 8002be6:	607a      	str	r2, [r7, #4]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d00d      	beq.n	8002c08 <mem_cmp+0x40>
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	1c5a      	adds	r2, r3, #1
 8002bf0:	61fa      	str	r2, [r7, #28]
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	0019      	movs	r1, r3
 8002bf6:	69bb      	ldr	r3, [r7, #24]
 8002bf8:	1c5a      	adds	r2, r3, #1
 8002bfa:	61ba      	str	r2, [r7, #24]
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	1acb      	subs	r3, r1, r3
 8002c00:	617b      	str	r3, [r7, #20]
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d0ec      	beq.n	8002be2 <mem_cmp+0x1a>
	return r;
 8002c08:	697b      	ldr	r3, [r7, #20]
}
 8002c0a:	0018      	movs	r0, r3
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	b008      	add	sp, #32
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8002c12:	b580      	push	{r7, lr}
 8002c14:	b082      	sub	sp, #8
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
 8002c1a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8002c1c:	e002      	b.n	8002c24 <chk_chr+0x12>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	3301      	adds	r3, #1
 8002c22:	607b      	str	r3, [r7, #4]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d005      	beq.n	8002c38 <chk_chr+0x26>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	001a      	movs	r2, r3
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d1f2      	bne.n	8002c1e <chk_chr+0xc>
	return *str;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	781b      	ldrb	r3, [r3, #0]
}
 8002c3c:	0018      	movs	r0, r3
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	b002      	add	sp, #8
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8002c4e:	2300      	movs	r3, #0
 8002c50:	60bb      	str	r3, [r7, #8]
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	60fb      	str	r3, [r7, #12]
 8002c56:	e038      	b.n	8002cca <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 8002c58:	492f      	ldr	r1, [pc, #188]	; (8002d18 <chk_lock+0xd4>)
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	0013      	movs	r3, r2
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	189b      	adds	r3, r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	585b      	ldr	r3, [r3, r1]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d02a      	beq.n	8002cc0 <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8002c6a:	492b      	ldr	r1, [pc, #172]	; (8002d18 <chk_lock+0xd4>)
 8002c6c:	68fa      	ldr	r2, [r7, #12]
 8002c6e:	0013      	movs	r3, r2
 8002c70:	005b      	lsls	r3, r3, #1
 8002c72:	189b      	adds	r3, r3, r2
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	585a      	ldr	r2, [r3, r1]
 8002c78:	6879      	ldr	r1, [r7, #4]
 8002c7a:	2380      	movs	r3, #128	; 0x80
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	58cb      	ldr	r3, [r1, r3]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d11f      	bne.n	8002cc4 <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 8002c84:	4924      	ldr	r1, [pc, #144]	; (8002d18 <chk_lock+0xd4>)
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	0013      	movs	r3, r2
 8002c8a:	005b      	lsls	r3, r3, #1
 8002c8c:	189b      	adds	r3, r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	18cb      	adds	r3, r1, r3
 8002c92:	3304      	adds	r3, #4
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	6879      	ldr	r1, [r7, #4]
 8002c98:	2382      	movs	r3, #130	; 0x82
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	58cb      	ldr	r3, [r1, r3]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d110      	bne.n	8002cc4 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8002ca2:	491d      	ldr	r1, [pc, #116]	; (8002d18 <chk_lock+0xd4>)
 8002ca4:	68fa      	ldr	r2, [r7, #12]
 8002ca6:	0013      	movs	r3, r2
 8002ca8:	005b      	lsls	r3, r3, #1
 8002caa:	189b      	adds	r3, r3, r2
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	18cb      	adds	r3, r1, r3
 8002cb0:	3308      	adds	r3, #8
 8002cb2:	881a      	ldrh	r2, [r3, #0]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	4919      	ldr	r1, [pc, #100]	; (8002d1c <chk_lock+0xd8>)
 8002cb8:	5a5b      	ldrh	r3, [r3, r1]
				Files[i].clu == dp->sclust &&
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d102      	bne.n	8002cc4 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8002cbe:	e007      	b.n	8002cd0 <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	60fb      	str	r3, [r7, #12]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d9c3      	bls.n	8002c58 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d109      	bne.n	8002cea <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d102      	bne.n	8002ce2 <chk_lock+0x9e>
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d101      	bne.n	8002ce6 <chk_lock+0xa2>
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	e014      	b.n	8002d10 <chk_lock+0xcc>
 8002ce6:	2312      	movs	r3, #18
 8002ce8:	e012      	b.n	8002d10 <chk_lock+0xcc>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d10c      	bne.n	8002d0a <chk_lock+0xc6>
 8002cf0:	4909      	ldr	r1, [pc, #36]	; (8002d18 <chk_lock+0xd4>)
 8002cf2:	68fa      	ldr	r2, [r7, #12]
 8002cf4:	0013      	movs	r3, r2
 8002cf6:	005b      	lsls	r3, r3, #1
 8002cf8:	189b      	adds	r3, r3, r2
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	18cb      	adds	r3, r1, r3
 8002cfe:	330a      	adds	r3, #10
 8002d00:	881a      	ldrh	r2, [r3, #0]
 8002d02:	2380      	movs	r3, #128	; 0x80
 8002d04:	005b      	lsls	r3, r3, #1
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d101      	bne.n	8002d0e <chk_lock+0xca>
 8002d0a:	2310      	movs	r3, #16
 8002d0c:	e000      	b.n	8002d10 <chk_lock+0xcc>
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	0018      	movs	r0, r3
 8002d12:	46bd      	mov	sp, r7
 8002d14:	b004      	add	sp, #16
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	200000ac 	.word	0x200000ac
 8002d1c:	00000206 	.word	0x00000206

08002d20 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8002d26:	2300      	movs	r3, #0
 8002d28:	607b      	str	r3, [r7, #4]
 8002d2a:	e002      	b.n	8002d32 <enq_lock+0x12>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	3301      	adds	r3, #1
 8002d30:	607b      	str	r3, [r7, #4]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d808      	bhi.n	8002d4a <enq_lock+0x2a>
 8002d38:	4908      	ldr	r1, [pc, #32]	; (8002d5c <enq_lock+0x3c>)
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	0013      	movs	r3, r2
 8002d3e:	005b      	lsls	r3, r3, #1
 8002d40:	189b      	adds	r3, r3, r2
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	585b      	ldr	r3, [r3, r1]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d1f0      	bne.n	8002d2c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	3b02      	subs	r3, #2
 8002d4e:	1e5a      	subs	r2, r3, #1
 8002d50:	4193      	sbcs	r3, r2
 8002d52:	b2db      	uxtb	r3, r3
}
 8002d54:	0018      	movs	r0, r3
 8002d56:	46bd      	mov	sp, r7
 8002d58:	b002      	add	sp, #8
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	200000ac 	.word	0x200000ac

08002d60 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	60fb      	str	r3, [r7, #12]
 8002d6e:	e02c      	b.n	8002dca <inc_lock+0x6a>
		if (Files[i].fs == dp->fs &&
 8002d70:	4955      	ldr	r1, [pc, #340]	; (8002ec8 <inc_lock+0x168>)
 8002d72:	68fa      	ldr	r2, [r7, #12]
 8002d74:	0013      	movs	r3, r2
 8002d76:	005b      	lsls	r3, r3, #1
 8002d78:	189b      	adds	r3, r3, r2
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	585a      	ldr	r2, [r3, r1]
 8002d7e:	6879      	ldr	r1, [r7, #4]
 8002d80:	2380      	movs	r3, #128	; 0x80
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	58cb      	ldr	r3, [r1, r3]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d11c      	bne.n	8002dc4 <inc_lock+0x64>
			Files[i].clu == dp->sclust &&
 8002d8a:	494f      	ldr	r1, [pc, #316]	; (8002ec8 <inc_lock+0x168>)
 8002d8c:	68fa      	ldr	r2, [r7, #12]
 8002d8e:	0013      	movs	r3, r2
 8002d90:	005b      	lsls	r3, r3, #1
 8002d92:	189b      	adds	r3, r3, r2
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	18cb      	adds	r3, r1, r3
 8002d98:	3304      	adds	r3, #4
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	6879      	ldr	r1, [r7, #4]
 8002d9e:	2382      	movs	r3, #130	; 0x82
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	58cb      	ldr	r3, [r1, r3]
		if (Files[i].fs == dp->fs &&
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d10d      	bne.n	8002dc4 <inc_lock+0x64>
			Files[i].idx == dp->index) break;
 8002da8:	4947      	ldr	r1, [pc, #284]	; (8002ec8 <inc_lock+0x168>)
 8002daa:	68fa      	ldr	r2, [r7, #12]
 8002dac:	0013      	movs	r3, r2
 8002dae:	005b      	lsls	r3, r3, #1
 8002db0:	189b      	adds	r3, r3, r2
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	18cb      	adds	r3, r1, r3
 8002db6:	3308      	adds	r3, #8
 8002db8:	881a      	ldrh	r2, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4943      	ldr	r1, [pc, #268]	; (8002ecc <inc_lock+0x16c>)
 8002dbe:	5a5b      	ldrh	r3, [r3, r1]
			Files[i].clu == dp->sclust &&
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d006      	beq.n	8002dd2 <inc_lock+0x72>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	60fb      	str	r3, [r7, #12]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d9cf      	bls.n	8002d70 <inc_lock+0x10>
 8002dd0:	e000      	b.n	8002dd4 <inc_lock+0x74>
			Files[i].idx == dp->index) break;
 8002dd2:	46c0      	nop			; (mov r8, r8)
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d145      	bne.n	8002e66 <inc_lock+0x106>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	60fb      	str	r3, [r7, #12]
 8002dde:	e002      	b.n	8002de6 <inc_lock+0x86>
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	3301      	adds	r3, #1
 8002de4:	60fb      	str	r3, [r7, #12]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d808      	bhi.n	8002dfe <inc_lock+0x9e>
 8002dec:	4936      	ldr	r1, [pc, #216]	; (8002ec8 <inc_lock+0x168>)
 8002dee:	68fa      	ldr	r2, [r7, #12]
 8002df0:	0013      	movs	r3, r2
 8002df2:	005b      	lsls	r3, r3, #1
 8002df4:	189b      	adds	r3, r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	585b      	ldr	r3, [r3, r1]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d1f0      	bne.n	8002de0 <inc_lock+0x80>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d101      	bne.n	8002e08 <inc_lock+0xa8>
 8002e04:	2300      	movs	r3, #0
 8002e06:	e05a      	b.n	8002ebe <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	2380      	movs	r3, #128	; 0x80
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	58d0      	ldr	r0, [r2, r3]
 8002e10:	492d      	ldr	r1, [pc, #180]	; (8002ec8 <inc_lock+0x168>)
 8002e12:	68fa      	ldr	r2, [r7, #12]
 8002e14:	0013      	movs	r3, r2
 8002e16:	005b      	lsls	r3, r3, #1
 8002e18:	189b      	adds	r3, r3, r2
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	5058      	str	r0, [r3, r1]
		Files[i].clu = dp->sclust;
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	2382      	movs	r3, #130	; 0x82
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	58d1      	ldr	r1, [r2, r3]
 8002e26:	4828      	ldr	r0, [pc, #160]	; (8002ec8 <inc_lock+0x168>)
 8002e28:	68fa      	ldr	r2, [r7, #12]
 8002e2a:	0013      	movs	r3, r2
 8002e2c:	005b      	lsls	r3, r3, #1
 8002e2e:	189b      	adds	r3, r3, r2
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	18c3      	adds	r3, r0, r3
 8002e34:	3304      	adds	r3, #4
 8002e36:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4a24      	ldr	r2, [pc, #144]	; (8002ecc <inc_lock+0x16c>)
 8002e3c:	5a98      	ldrh	r0, [r3, r2]
 8002e3e:	4922      	ldr	r1, [pc, #136]	; (8002ec8 <inc_lock+0x168>)
 8002e40:	68fa      	ldr	r2, [r7, #12]
 8002e42:	0013      	movs	r3, r2
 8002e44:	005b      	lsls	r3, r3, #1
 8002e46:	189b      	adds	r3, r3, r2
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	18cb      	adds	r3, r1, r3
 8002e4c:	3308      	adds	r3, #8
 8002e4e:	1c02      	adds	r2, r0, #0
 8002e50:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8002e52:	491d      	ldr	r1, [pc, #116]	; (8002ec8 <inc_lock+0x168>)
 8002e54:	68fa      	ldr	r2, [r7, #12]
 8002e56:	0013      	movs	r3, r2
 8002e58:	005b      	lsls	r3, r3, #1
 8002e5a:	189b      	adds	r3, r3, r2
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	18cb      	adds	r3, r1, r3
 8002e60:	330a      	adds	r3, #10
 8002e62:	2200      	movs	r2, #0
 8002e64:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d00c      	beq.n	8002e86 <inc_lock+0x126>
 8002e6c:	4916      	ldr	r1, [pc, #88]	; (8002ec8 <inc_lock+0x168>)
 8002e6e:	68fa      	ldr	r2, [r7, #12]
 8002e70:	0013      	movs	r3, r2
 8002e72:	005b      	lsls	r3, r3, #1
 8002e74:	189b      	adds	r3, r3, r2
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	18cb      	adds	r3, r1, r3
 8002e7a:	330a      	adds	r3, #10
 8002e7c:	881b      	ldrh	r3, [r3, #0]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d001      	beq.n	8002e86 <inc_lock+0x126>
 8002e82:	2300      	movs	r3, #0
 8002e84:	e01b      	b.n	8002ebe <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d10b      	bne.n	8002ea4 <inc_lock+0x144>
 8002e8c:	490e      	ldr	r1, [pc, #56]	; (8002ec8 <inc_lock+0x168>)
 8002e8e:	68fa      	ldr	r2, [r7, #12]
 8002e90:	0013      	movs	r3, r2
 8002e92:	005b      	lsls	r3, r3, #1
 8002e94:	189b      	adds	r3, r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	18cb      	adds	r3, r1, r3
 8002e9a:	330a      	adds	r3, #10
 8002e9c:	881b      	ldrh	r3, [r3, #0]
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	b29a      	uxth	r2, r3
 8002ea2:	e001      	b.n	8002ea8 <inc_lock+0x148>
 8002ea4:	2380      	movs	r3, #128	; 0x80
 8002ea6:	005a      	lsls	r2, r3, #1
 8002ea8:	4807      	ldr	r0, [pc, #28]	; (8002ec8 <inc_lock+0x168>)
 8002eaa:	68f9      	ldr	r1, [r7, #12]
 8002eac:	000b      	movs	r3, r1
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	185b      	adds	r3, r3, r1
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	18c3      	adds	r3, r0, r3
 8002eb6:	330a      	adds	r3, #10
 8002eb8:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	3301      	adds	r3, #1
}
 8002ebe:	0018      	movs	r0, r3
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	b004      	add	sp, #16
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	46c0      	nop			; (mov r8, r8)
 8002ec8:	200000ac 	.word	0x200000ac
 8002ecc:	00000206 	.word	0x00000206

08002ed0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8002ed0:	b590      	push	{r4, r7, lr}
 8002ed2:	b085      	sub	sp, #20
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	3b01      	subs	r3, #1
 8002edc:	607b      	str	r3, [r7, #4]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d83d      	bhi.n	8002f60 <dec_lock+0x90>
		n = Files[i].ctr;
 8002ee4:	240e      	movs	r4, #14
 8002ee6:	1939      	adds	r1, r7, r4
 8002ee8:	4823      	ldr	r0, [pc, #140]	; (8002f78 <dec_lock+0xa8>)
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	0013      	movs	r3, r2
 8002eee:	005b      	lsls	r3, r3, #1
 8002ef0:	189b      	adds	r3, r3, r2
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	18c3      	adds	r3, r0, r3
 8002ef6:	330a      	adds	r3, #10
 8002ef8:	881b      	ldrh	r3, [r3, #0]
 8002efa:	800b      	strh	r3, [r1, #0]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8002efc:	193b      	adds	r3, r7, r4
 8002efe:	881a      	ldrh	r2, [r3, #0]
 8002f00:	2380      	movs	r3, #128	; 0x80
 8002f02:	005b      	lsls	r3, r3, #1
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d103      	bne.n	8002f10 <dec_lock+0x40>
 8002f08:	230e      	movs	r3, #14
 8002f0a:	18fb      	adds	r3, r7, r3
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	801a      	strh	r2, [r3, #0]
		if (n) n--;					/* Decrement read mode open count */
 8002f10:	230e      	movs	r3, #14
 8002f12:	18fb      	adds	r3, r7, r3
 8002f14:	881b      	ldrh	r3, [r3, #0]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d005      	beq.n	8002f26 <dec_lock+0x56>
 8002f1a:	210e      	movs	r1, #14
 8002f1c:	187b      	adds	r3, r7, r1
 8002f1e:	881a      	ldrh	r2, [r3, #0]
 8002f20:	187b      	adds	r3, r7, r1
 8002f22:	3a01      	subs	r2, #1
 8002f24:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = n;
 8002f26:	4914      	ldr	r1, [pc, #80]	; (8002f78 <dec_lock+0xa8>)
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	0013      	movs	r3, r2
 8002f2c:	005b      	lsls	r3, r3, #1
 8002f2e:	189b      	adds	r3, r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	18cb      	adds	r3, r1, r3
 8002f34:	330a      	adds	r3, #10
 8002f36:	210e      	movs	r1, #14
 8002f38:	187a      	adds	r2, r7, r1
 8002f3a:	8812      	ldrh	r2, [r2, #0]
 8002f3c:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8002f3e:	187b      	adds	r3, r7, r1
 8002f40:	881b      	ldrh	r3, [r3, #0]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d107      	bne.n	8002f56 <dec_lock+0x86>
 8002f46:	490c      	ldr	r1, [pc, #48]	; (8002f78 <dec_lock+0xa8>)
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	0013      	movs	r3, r2
 8002f4c:	005b      	lsls	r3, r3, #1
 8002f4e:	189b      	adds	r3, r3, r2
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	2200      	movs	r2, #0
 8002f54:	505a      	str	r2, [r3, r1]
		res = FR_OK;
 8002f56:	230d      	movs	r3, #13
 8002f58:	18fb      	adds	r3, r7, r3
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	701a      	strb	r2, [r3, #0]
 8002f5e:	e003      	b.n	8002f68 <dec_lock+0x98>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8002f60:	230d      	movs	r3, #13
 8002f62:	18fb      	adds	r3, r7, r3
 8002f64:	2202      	movs	r2, #2
 8002f66:	701a      	strb	r2, [r3, #0]
	}
	return res;
 8002f68:	230d      	movs	r3, #13
 8002f6a:	18fb      	adds	r3, r7, r3
 8002f6c:	781b      	ldrb	r3, [r3, #0]
}
 8002f6e:	0018      	movs	r0, r3
 8002f70:	46bd      	mov	sp, r7
 8002f72:	b005      	add	sp, #20
 8002f74:	bd90      	pop	{r4, r7, pc}
 8002f76:	46c0      	nop			; (mov r8, r8)
 8002f78:	200000ac 	.word	0x200000ac

08002f7c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8002f84:	2300      	movs	r3, #0
 8002f86:	60fb      	str	r3, [r7, #12]
 8002f88:	e014      	b.n	8002fb4 <clear_lock+0x38>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8002f8a:	490e      	ldr	r1, [pc, #56]	; (8002fc4 <clear_lock+0x48>)
 8002f8c:	68fa      	ldr	r2, [r7, #12]
 8002f8e:	0013      	movs	r3, r2
 8002f90:	005b      	lsls	r3, r3, #1
 8002f92:	189b      	adds	r3, r3, r2
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	585b      	ldr	r3, [r3, r1]
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d107      	bne.n	8002fae <clear_lock+0x32>
 8002f9e:	4909      	ldr	r1, [pc, #36]	; (8002fc4 <clear_lock+0x48>)
 8002fa0:	68fa      	ldr	r2, [r7, #12]
 8002fa2:	0013      	movs	r3, r2
 8002fa4:	005b      	lsls	r3, r3, #1
 8002fa6:	189b      	adds	r3, r3, r2
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	2200      	movs	r2, #0
 8002fac:	505a      	str	r2, [r3, r1]
	for (i = 0; i < _FS_LOCK; i++) {
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	60fb      	str	r3, [r7, #12]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d9e7      	bls.n	8002f8a <clear_lock+0xe>
	}
}
 8002fba:	46c0      	nop			; (mov r8, r8)
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	b004      	add	sp, #16
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	46c0      	nop			; (mov r8, r8)
 8002fc4:	200000ac 	.word	0x200000ac

08002fc8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b086      	sub	sp, #24
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8002fd0:	230f      	movs	r3, #15
 8002fd2:	18fb      	adds	r3, r7, r3
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	701a      	strb	r2, [r3, #0]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	2381      	movs	r3, #129	; 0x81
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	5cd3      	ldrb	r3, [r2, r3]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d03e      	beq.n	8003062 <sync_window+0x9a>
		wsect = fs->winsect;	/* Current sector number */
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	238b      	movs	r3, #139	; 0x8b
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	58d3      	ldr	r3, [r2, r3]
 8002fec:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a1f      	ldr	r2, [pc, #124]	; (8003070 <sync_window+0xa8>)
 8002ff2:	5c98      	ldrb	r0, [r3, r2]
 8002ff4:	6879      	ldr	r1, [r7, #4]
 8002ff6:	697a      	ldr	r2, [r7, #20]
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	f7ff fd61 	bl	8002ac0 <disk_write>
 8002ffe:	1e03      	subs	r3, r0, #0
 8003000:	d004      	beq.n	800300c <sync_window+0x44>
			res = FR_DISK_ERR;
 8003002:	230f      	movs	r3, #15
 8003004:	18fb      	adds	r3, r7, r3
 8003006:	2201      	movs	r2, #1
 8003008:	701a      	strb	r2, [r3, #0]
 800300a:	e02a      	b.n	8003062 <sync_window+0x9a>
		} else {
			fs->wflag = 0;
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	2381      	movs	r3, #129	; 0x81
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	2100      	movs	r1, #0
 8003014:	54d1      	strb	r1, [r2, r3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	2388      	movs	r3, #136	; 0x88
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	58d3      	ldr	r3, [r2, r3]
 800301e:	697a      	ldr	r2, [r7, #20]
 8003020:	1ad2      	subs	r2, r2, r3
 8003022:	6879      	ldr	r1, [r7, #4]
 8003024:	2386      	movs	r3, #134	; 0x86
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	58cb      	ldr	r3, [r1, r3]
 800302a:	429a      	cmp	r2, r3
 800302c:	d219      	bcs.n	8003062 <sync_window+0x9a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4a10      	ldr	r2, [pc, #64]	; (8003074 <sync_window+0xac>)
 8003032:	5c9b      	ldrb	r3, [r3, r2]
 8003034:	613b      	str	r3, [r7, #16]
 8003036:	e011      	b.n	800305c <sync_window+0x94>
					wsect += fs->fsize;
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	2386      	movs	r3, #134	; 0x86
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	58d3      	ldr	r3, [r2, r3]
 8003040:	697a      	ldr	r2, [r7, #20]
 8003042:	18d3      	adds	r3, r2, r3
 8003044:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a09      	ldr	r2, [pc, #36]	; (8003070 <sync_window+0xa8>)
 800304a:	5c98      	ldrb	r0, [r3, r2]
 800304c:	6879      	ldr	r1, [r7, #4]
 800304e:	697a      	ldr	r2, [r7, #20]
 8003050:	2301      	movs	r3, #1
 8003052:	f7ff fd35 	bl	8002ac0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	3b01      	subs	r3, #1
 800305a:	613b      	str	r3, [r7, #16]
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d8ea      	bhi.n	8003038 <sync_window+0x70>
				}
			}
		}
	}
	return res;
 8003062:	230f      	movs	r3, #15
 8003064:	18fb      	adds	r3, r7, r3
 8003066:	781b      	ldrb	r3, [r3, #0]
}
 8003068:	0018      	movs	r0, r3
 800306a:	46bd      	mov	sp, r7
 800306c:	b006      	add	sp, #24
 800306e:	bd80      	pop	{r7, pc}
 8003070:	00000201 	.word	0x00000201
 8003074:	00000203 	.word	0x00000203

08003078 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8003078:	b5b0      	push	{r4, r5, r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8003082:	230f      	movs	r3, #15
 8003084:	18fb      	adds	r3, r7, r3
 8003086:	2200      	movs	r2, #0
 8003088:	701a      	strb	r2, [r3, #0]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	238b      	movs	r3, #139	; 0x8b
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	58d3      	ldr	r3, [r2, r3]
 8003092:	683a      	ldr	r2, [r7, #0]
 8003094:	429a      	cmp	r2, r3
 8003096:	d021      	beq.n	80030dc <move_window+0x64>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8003098:	250f      	movs	r5, #15
 800309a:	197c      	adds	r4, r7, r5
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	0018      	movs	r0, r3
 80030a0:	f7ff ff92 	bl	8002fc8 <sync_window>
 80030a4:	0003      	movs	r3, r0
 80030a6:	7023      	strb	r3, [r4, #0]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80030a8:	197b      	adds	r3, r7, r5
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d115      	bne.n	80030dc <move_window+0x64>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	4a0e      	ldr	r2, [pc, #56]	; (80030ec <move_window+0x74>)
 80030b4:	5c98      	ldrb	r0, [r3, r2]
 80030b6:	6879      	ldr	r1, [r7, #4]
 80030b8:	683a      	ldr	r2, [r7, #0]
 80030ba:	2301      	movs	r3, #1
 80030bc:	f7ff fcd8 	bl	8002a70 <disk_read>
 80030c0:	1e03      	subs	r3, r0, #0
 80030c2:	d006      	beq.n	80030d2 <move_window+0x5a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80030c4:	2301      	movs	r3, #1
 80030c6:	425b      	negs	r3, r3
 80030c8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80030ca:	230f      	movs	r3, #15
 80030cc:	18fb      	adds	r3, r7, r3
 80030ce:	2201      	movs	r2, #1
 80030d0:	701a      	strb	r2, [r3, #0]
			}
			fs->winsect = sector;
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	238b      	movs	r3, #139	; 0x8b
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	6839      	ldr	r1, [r7, #0]
 80030da:	50d1      	str	r1, [r2, r3]
		}
	}
	return res;
 80030dc:	230f      	movs	r3, #15
 80030de:	18fb      	adds	r3, r7, r3
 80030e0:	781b      	ldrb	r3, [r3, #0]
}
 80030e2:	0018      	movs	r0, r3
 80030e4:	46bd      	mov	sp, r7
 80030e6:	b004      	add	sp, #16
 80030e8:	bdb0      	pop	{r4, r5, r7, pc}
 80030ea:	46c0      	nop			; (mov r8, r8)
 80030ec:	00000201 	.word	0x00000201

080030f0 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 80030f0:	b5b0      	push	{r4, r5, r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80030f8:	250f      	movs	r5, #15
 80030fa:	197c      	adds	r4, r7, r5
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	0018      	movs	r0, r3
 8003100:	f7ff ff62 	bl	8002fc8 <sync_window>
 8003104:	0003      	movs	r3, r0
 8003106:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8003108:	197b      	adds	r3, r7, r5
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d000      	beq.n	8003112 <sync_fs+0x22>
 8003110:	e0b4      	b.n	800327c <sync_fs+0x18c>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	2380      	movs	r3, #128	; 0x80
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	5cd3      	ldrb	r3, [r2, r3]
 800311a:	2b03      	cmp	r3, #3
 800311c:	d000      	beq.n	8003120 <sync_fs+0x30>
 800311e:	e09f      	b.n	8003260 <sync_fs+0x170>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	4a5a      	ldr	r2, [pc, #360]	; (800328c <sync_fs+0x19c>)
 8003124:	5c9b      	ldrb	r3, [r3, r2]
 8003126:	2b01      	cmp	r3, #1
 8003128:	d000      	beq.n	800312c <sync_fs+0x3c>
 800312a:	e099      	b.n	8003260 <sync_fs+0x170>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	2380      	movs	r3, #128	; 0x80
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	001a      	movs	r2, r3
 8003134:	2100      	movs	r1, #0
 8003136:	f7ff fd2f 	bl	8002b98 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	23ff      	movs	r3, #255	; 0xff
 800313e:	005b      	lsls	r3, r3, #1
 8003140:	2155      	movs	r1, #85	; 0x55
 8003142:	54d1      	strb	r1, [r2, r3]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4a52      	ldr	r2, [pc, #328]	; (8003290 <sync_fs+0x1a0>)
 8003148:	21aa      	movs	r1, #170	; 0xaa
 800314a:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2252      	movs	r2, #82	; 0x52
 8003150:	701a      	strb	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2252      	movs	r2, #82	; 0x52
 8003156:	705a      	strb	r2, [r3, #1]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2261      	movs	r2, #97	; 0x61
 800315c:	709a      	strb	r2, [r3, #2]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2241      	movs	r2, #65	; 0x41
 8003162:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	23f2      	movs	r3, #242	; 0xf2
 8003168:	005b      	lsls	r3, r3, #1
 800316a:	2172      	movs	r1, #114	; 0x72
 800316c:	54d1      	strb	r1, [r2, r3]
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	23e6      	movs	r3, #230	; 0xe6
 8003172:	33ff      	adds	r3, #255	; 0xff
 8003174:	2172      	movs	r1, #114	; 0x72
 8003176:	54d1      	strb	r1, [r2, r3]
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	23f3      	movs	r3, #243	; 0xf3
 800317c:	005b      	lsls	r3, r3, #1
 800317e:	2141      	movs	r1, #65	; 0x41
 8003180:	54d1      	strb	r1, [r2, r3]
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	23e8      	movs	r3, #232	; 0xe8
 8003186:	33ff      	adds	r3, #255	; 0xff
 8003188:	2161      	movs	r1, #97	; 0x61
 800318a:	54d1      	strb	r1, [r2, r3]
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	2384      	movs	r3, #132	; 0x84
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	58d3      	ldr	r3, [r2, r3]
 8003194:	b2d9      	uxtb	r1, r3
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	23f4      	movs	r3, #244	; 0xf4
 800319a:	005b      	lsls	r3, r3, #1
 800319c:	54d1      	strb	r1, [r2, r3]
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	2384      	movs	r3, #132	; 0x84
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	58d3      	ldr	r3, [r2, r3]
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	0a1b      	lsrs	r3, r3, #8
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	b2d9      	uxtb	r1, r3
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	23ea      	movs	r3, #234	; 0xea
 80031b2:	33ff      	adds	r3, #255	; 0xff
 80031b4:	54d1      	strb	r1, [r2, r3]
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	2384      	movs	r3, #132	; 0x84
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	58d3      	ldr	r3, [r2, r3]
 80031be:	0c1b      	lsrs	r3, r3, #16
 80031c0:	b2d9      	uxtb	r1, r3
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	23f5      	movs	r3, #245	; 0xf5
 80031c6:	005b      	lsls	r3, r3, #1
 80031c8:	54d1      	strb	r1, [r2, r3]
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	2384      	movs	r3, #132	; 0x84
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	58d3      	ldr	r3, [r2, r3]
 80031d2:	0e1b      	lsrs	r3, r3, #24
 80031d4:	b2d9      	uxtb	r1, r3
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	23ec      	movs	r3, #236	; 0xec
 80031da:	33ff      	adds	r3, #255	; 0xff
 80031dc:	54d1      	strb	r1, [r2, r3]
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	2383      	movs	r3, #131	; 0x83
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	58d3      	ldr	r3, [r2, r3]
 80031e6:	b2d9      	uxtb	r1, r3
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	23f6      	movs	r3, #246	; 0xf6
 80031ec:	005b      	lsls	r3, r3, #1
 80031ee:	54d1      	strb	r1, [r2, r3]
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	2383      	movs	r3, #131	; 0x83
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	58d3      	ldr	r3, [r2, r3]
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	0a1b      	lsrs	r3, r3, #8
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	b2d9      	uxtb	r1, r3
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	23ee      	movs	r3, #238	; 0xee
 8003204:	33ff      	adds	r3, #255	; 0xff
 8003206:	54d1      	strb	r1, [r2, r3]
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	2383      	movs	r3, #131	; 0x83
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	58d3      	ldr	r3, [r2, r3]
 8003210:	0c1b      	lsrs	r3, r3, #16
 8003212:	b2d9      	uxtb	r1, r3
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	23f7      	movs	r3, #247	; 0xf7
 8003218:	005b      	lsls	r3, r3, #1
 800321a:	54d1      	strb	r1, [r2, r3]
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	2383      	movs	r3, #131	; 0x83
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	58d3      	ldr	r3, [r2, r3]
 8003224:	0e1b      	lsrs	r3, r3, #24
 8003226:	b2d9      	uxtb	r1, r3
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	23f0      	movs	r3, #240	; 0xf0
 800322c:	33ff      	adds	r3, #255	; 0xff
 800322e:	54d1      	strb	r1, [r2, r3]
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	2387      	movs	r3, #135	; 0x87
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	58d3      	ldr	r3, [r2, r3]
 8003238:	1c59      	adds	r1, r3, #1
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	238b      	movs	r3, #139	; 0x8b
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	50d1      	str	r1, [r2, r3]
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a13      	ldr	r2, [pc, #76]	; (8003294 <sync_fs+0x1a4>)
 8003246:	5c98      	ldrb	r0, [r3, r2]
 8003248:	6879      	ldr	r1, [r7, #4]
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	238b      	movs	r3, #139	; 0x8b
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	58d2      	ldr	r2, [r2, r3]
 8003252:	2301      	movs	r3, #1
 8003254:	f7ff fc34 	bl	8002ac0 <disk_write>
			fs->fsi_flag = 0;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4a0c      	ldr	r2, [pc, #48]	; (800328c <sync_fs+0x19c>)
 800325c:	2100      	movs	r1, #0
 800325e:	5499      	strb	r1, [r3, r2]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a0c      	ldr	r2, [pc, #48]	; (8003294 <sync_fs+0x1a4>)
 8003264:	5c9b      	ldrb	r3, [r3, r2]
 8003266:	2200      	movs	r2, #0
 8003268:	2100      	movs	r1, #0
 800326a:	0018      	movs	r0, r3
 800326c:	f7ff fc50 	bl	8002b10 <disk_ioctl>
 8003270:	1e03      	subs	r3, r0, #0
 8003272:	d003      	beq.n	800327c <sync_fs+0x18c>
			res = FR_DISK_ERR;
 8003274:	230f      	movs	r3, #15
 8003276:	18fb      	adds	r3, r7, r3
 8003278:	2201      	movs	r2, #1
 800327a:	701a      	strb	r2, [r3, #0]
	}

	return res;
 800327c:	230f      	movs	r3, #15
 800327e:	18fb      	adds	r3, r7, r3
 8003280:	781b      	ldrb	r3, [r3, #0]
}
 8003282:	0018      	movs	r0, r3
 8003284:	46bd      	mov	sp, r7
 8003286:	b004      	add	sp, #16
 8003288:	bdb0      	pop	{r4, r5, r7, pc}
 800328a:	46c0      	nop			; (mov r8, r8)
 800328c:	00000205 	.word	0x00000205
 8003290:	000001ff 	.word	0x000001ff
 8003294:	00000201 	.word	0x00000201

08003298 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	3b02      	subs	r3, #2
 80032a6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	2385      	movs	r3, #133	; 0x85
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	58d3      	ldr	r3, [r2, r3]
 80032b0:	3b02      	subs	r3, #2
 80032b2:	683a      	ldr	r2, [r7, #0]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d301      	bcc.n	80032bc <clust2sect+0x24>
 80032b8:	2300      	movs	r3, #0
 80032ba:	e00a      	b.n	80032d2 <clust2sect+0x3a>
	return clst * fs->csize + fs->database;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4a07      	ldr	r2, [pc, #28]	; (80032dc <clust2sect+0x44>)
 80032c0:	5c9b      	ldrb	r3, [r3, r2]
 80032c2:	001a      	movs	r2, r3
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	435a      	muls	r2, r3
 80032c8:	6879      	ldr	r1, [r7, #4]
 80032ca:	238a      	movs	r3, #138	; 0x8a
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	58cb      	ldr	r3, [r1, r3]
 80032d0:	18d3      	adds	r3, r2, r3
}
 80032d2:	0018      	movs	r0, r3
 80032d4:	46bd      	mov	sp, r7
 80032d6:	b002      	add	sp, #8
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	46c0      	nop			; (mov r8, r8)
 80032dc:	00000202 	.word	0x00000202

080032e0 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b086      	sub	sp, #24
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d906      	bls.n	80032fe <get_fat+0x1e>
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	2385      	movs	r3, #133	; 0x85
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	58d3      	ldr	r3, [r2, r3]
 80032f8:	683a      	ldr	r2, [r7, #0]
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d302      	bcc.n	8003304 <get_fat+0x24>
		val = 1;	/* Internal error */
 80032fe:	2301      	movs	r3, #1
 8003300:	617b      	str	r3, [r7, #20]
 8003302:	e0a7      	b.n	8003454 <get_fat+0x174>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8003304:	2301      	movs	r3, #1
 8003306:	425b      	negs	r3, r3
 8003308:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	2380      	movs	r3, #128	; 0x80
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	5cd3      	ldrb	r3, [r2, r3]
 8003312:	2b02      	cmp	r3, #2
 8003314:	d046      	beq.n	80033a4 <get_fat+0xc4>
 8003316:	2b03      	cmp	r3, #3
 8003318:	d067      	beq.n	80033ea <get_fat+0x10a>
 800331a:	2b01      	cmp	r3, #1
 800331c:	d000      	beq.n	8003320 <get_fat+0x40>
 800331e:	e08f      	b.n	8003440 <get_fat+0x160>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	60fb      	str	r3, [r7, #12]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	085b      	lsrs	r3, r3, #1
 8003328:	68fa      	ldr	r2, [r7, #12]
 800332a:	18d3      	adds	r3, r2, r3
 800332c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	2388      	movs	r3, #136	; 0x88
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	58d2      	ldr	r2, [r2, r3]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	0a5b      	lsrs	r3, r3, #9
 800333a:	18d2      	adds	r2, r2, r3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	0011      	movs	r1, r2
 8003340:	0018      	movs	r0, r3
 8003342:	f7ff fe99 	bl	8003078 <move_window>
 8003346:	1e03      	subs	r3, r0, #0
 8003348:	d000      	beq.n	800334c <get_fat+0x6c>
 800334a:	e07c      	b.n	8003446 <get_fat+0x166>
			wc = fs->win.d8[bc++ % SS(fs)];
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	1c5a      	adds	r2, r3, #1
 8003350:	60fa      	str	r2, [r7, #12]
 8003352:	05db      	lsls	r3, r3, #23
 8003354:	0ddb      	lsrs	r3, r3, #23
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	5cd3      	ldrb	r3, [r2, r3]
 800335a:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	2388      	movs	r3, #136	; 0x88
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	58d2      	ldr	r2, [r2, r3]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	0a5b      	lsrs	r3, r3, #9
 8003368:	18d2      	adds	r2, r2, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	0011      	movs	r1, r2
 800336e:	0018      	movs	r0, r3
 8003370:	f7ff fe82 	bl	8003078 <move_window>
 8003374:	1e03      	subs	r3, r0, #0
 8003376:	d168      	bne.n	800344a <get_fat+0x16a>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	05db      	lsls	r3, r3, #23
 800337c:	0ddb      	lsrs	r3, r3, #23
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	5cd3      	ldrb	r3, [r2, r3]
 8003382:	021b      	lsls	r3, r3, #8
 8003384:	001a      	movs	r2, r3
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	4313      	orrs	r3, r2
 800338a:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	2201      	movs	r2, #1
 8003390:	4013      	ands	r3, r2
 8003392:	d002      	beq.n	800339a <get_fat+0xba>
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	091b      	lsrs	r3, r3, #4
 8003398:	e002      	b.n	80033a0 <get_fat+0xc0>
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	051b      	lsls	r3, r3, #20
 800339e:	0d1b      	lsrs	r3, r3, #20
 80033a0:	617b      	str	r3, [r7, #20]
			break;
 80033a2:	e057      	b.n	8003454 <get_fat+0x174>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	2388      	movs	r3, #136	; 0x88
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	58d2      	ldr	r2, [r2, r3]
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	0a1b      	lsrs	r3, r3, #8
 80033b0:	18d2      	adds	r2, r2, r3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	0011      	movs	r1, r2
 80033b6:	0018      	movs	r0, r3
 80033b8:	f7ff fe5e 	bl	8003078 <move_window>
 80033bc:	1e03      	subs	r3, r0, #0
 80033be:	d146      	bne.n	800344e <get_fat+0x16e>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	005a      	lsls	r2, r3, #1
 80033c4:	23ff      	movs	r3, #255	; 0xff
 80033c6:	005b      	lsls	r3, r3, #1
 80033c8:	4013      	ands	r3, r2
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	18d3      	adds	r3, r2, r3
 80033ce:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	3301      	adds	r3, #1
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	021b      	lsls	r3, r3, #8
 80033d8:	b21a      	sxth	r2, r3
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	b21b      	sxth	r3, r3
 80033e0:	4313      	orrs	r3, r2
 80033e2:	b21b      	sxth	r3, r3
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	617b      	str	r3, [r7, #20]
			break;
 80033e8:	e034      	b.n	8003454 <get_fat+0x174>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	2388      	movs	r3, #136	; 0x88
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	58d2      	ldr	r2, [r2, r3]
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	09db      	lsrs	r3, r3, #7
 80033f6:	18d2      	adds	r2, r2, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	0011      	movs	r1, r2
 80033fc:	0018      	movs	r0, r3
 80033fe:	f7ff fe3b 	bl	8003078 <move_window>
 8003402:	1e03      	subs	r3, r0, #0
 8003404:	d125      	bne.n	8003452 <get_fat+0x172>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	009a      	lsls	r2, r3, #2
 800340a:	23fe      	movs	r3, #254	; 0xfe
 800340c:	005b      	lsls	r3, r3, #1
 800340e:	4013      	ands	r3, r2
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	18d3      	adds	r3, r2, r3
 8003414:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	3303      	adds	r3, #3
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	061a      	lsls	r2, r3, #24
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	3302      	adds	r3, #2
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	041b      	lsls	r3, r3, #16
 8003426:	4313      	orrs	r3, r2
 8003428:	693a      	ldr	r2, [r7, #16]
 800342a:	3201      	adds	r2, #1
 800342c:	7812      	ldrb	r2, [r2, #0]
 800342e:	0212      	lsls	r2, r2, #8
 8003430:	4313      	orrs	r3, r2
 8003432:	693a      	ldr	r2, [r7, #16]
 8003434:	7812      	ldrb	r2, [r2, #0]
 8003436:	4313      	orrs	r3, r2
 8003438:	011b      	lsls	r3, r3, #4
 800343a:	091b      	lsrs	r3, r3, #4
 800343c:	617b      	str	r3, [r7, #20]
			break;
 800343e:	e009      	b.n	8003454 <get_fat+0x174>

		default:
			val = 1;	/* Internal error */
 8003440:	2301      	movs	r3, #1
 8003442:	617b      	str	r3, [r7, #20]
 8003444:	e006      	b.n	8003454 <get_fat+0x174>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003446:	46c0      	nop			; (mov r8, r8)
 8003448:	e004      	b.n	8003454 <get_fat+0x174>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800344a:	46c0      	nop			; (mov r8, r8)
 800344c:	e002      	b.n	8003454 <get_fat+0x174>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800344e:	46c0      	nop			; (mov r8, r8)
 8003450:	e000      	b.n	8003454 <get_fat+0x174>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003452:	46c0      	nop			; (mov r8, r8)
		}
	}

	return val;
 8003454:	697b      	ldr	r3, [r7, #20]
}
 8003456:	0018      	movs	r0, r3
 8003458:	46bd      	mov	sp, r7
 800345a:	b006      	add	sp, #24
 800345c:	bd80      	pop	{r7, pc}

0800345e <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 800345e:	b5b0      	push	{r4, r5, r7, lr}
 8003460:	b088      	sub	sp, #32
 8003462:	af00      	add	r7, sp, #0
 8003464:	60f8      	str	r0, [r7, #12]
 8003466:	60b9      	str	r1, [r7, #8]
 8003468:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	2b01      	cmp	r3, #1
 800346e:	d906      	bls.n	800347e <put_fat+0x20>
 8003470:	68fa      	ldr	r2, [r7, #12]
 8003472:	2385      	movs	r3, #133	; 0x85
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	58d3      	ldr	r3, [r2, r3]
 8003478:	68ba      	ldr	r2, [r7, #8]
 800347a:	429a      	cmp	r2, r3
 800347c:	d304      	bcc.n	8003488 <put_fat+0x2a>
		res = FR_INT_ERR;
 800347e:	231f      	movs	r3, #31
 8003480:	18fb      	adds	r3, r7, r3
 8003482:	2202      	movs	r2, #2
 8003484:	701a      	strb	r2, [r3, #0]
 8003486:	e10f      	b.n	80036a8 <put_fat+0x24a>

	} else {
		switch (fs->fs_type) {
 8003488:	68fa      	ldr	r2, [r7, #12]
 800348a:	2380      	movs	r3, #128	; 0x80
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	5cd3      	ldrb	r3, [r2, r3]
 8003490:	2b02      	cmp	r3, #2
 8003492:	d100      	bne.n	8003496 <put_fat+0x38>
 8003494:	e07e      	b.n	8003594 <put_fat+0x136>
 8003496:	2b03      	cmp	r3, #3
 8003498:	d100      	bne.n	800349c <put_fat+0x3e>
 800349a:	e0a9      	b.n	80035f0 <put_fat+0x192>
 800349c:	2b01      	cmp	r3, #1
 800349e:	d000      	beq.n	80034a2 <put_fat+0x44>
 80034a0:	e0f6      	b.n	8003690 <put_fat+0x232>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	617b      	str	r3, [r7, #20]
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	085b      	lsrs	r3, r3, #1
 80034aa:	697a      	ldr	r2, [r7, #20]
 80034ac:	18d3      	adds	r3, r2, r3
 80034ae:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80034b0:	68fa      	ldr	r2, [r7, #12]
 80034b2:	2388      	movs	r3, #136	; 0x88
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	58d2      	ldr	r2, [r2, r3]
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	0a5b      	lsrs	r3, r3, #9
 80034bc:	18d2      	adds	r2, r2, r3
 80034be:	251f      	movs	r5, #31
 80034c0:	197c      	adds	r4, r7, r5
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	0011      	movs	r1, r2
 80034c6:	0018      	movs	r0, r3
 80034c8:	f7ff fdd6 	bl	8003078 <move_window>
 80034cc:	0003      	movs	r3, r0
 80034ce:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 80034d0:	197b      	adds	r3, r7, r5
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d000      	beq.n	80034da <put_fat+0x7c>
 80034d8:	e0df      	b.n	800369a <put_fat+0x23c>
			p = &fs->win.d8[bc++ % SS(fs)];
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	1c5a      	adds	r2, r3, #1
 80034de:	617a      	str	r2, [r7, #20]
 80034e0:	05db      	lsls	r3, r3, #23
 80034e2:	0ddb      	lsrs	r3, r3, #23
 80034e4:	68fa      	ldr	r2, [r7, #12]
 80034e6:	18d3      	adds	r3, r2, r3
 80034e8:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	2201      	movs	r2, #1
 80034ee:	4013      	ands	r3, r2
 80034f0:	d00d      	beq.n	800350e <put_fat+0xb0>
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	781b      	ldrb	r3, [r3, #0]
 80034f6:	b25b      	sxtb	r3, r3
 80034f8:	220f      	movs	r2, #15
 80034fa:	4013      	ands	r3, r2
 80034fc:	b25a      	sxtb	r2, r3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	b2db      	uxtb	r3, r3
 8003502:	011b      	lsls	r3, r3, #4
 8003504:	b25b      	sxtb	r3, r3
 8003506:	4313      	orrs	r3, r2
 8003508:	b25b      	sxtb	r3, r3
 800350a:	b2db      	uxtb	r3, r3
 800350c:	e001      	b.n	8003512 <put_fat+0xb4>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	b2db      	uxtb	r3, r3
 8003512:	69ba      	ldr	r2, [r7, #24]
 8003514:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003516:	68fa      	ldr	r2, [r7, #12]
 8003518:	2381      	movs	r3, #129	; 0x81
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	2101      	movs	r1, #1
 800351e:	54d1      	strb	r1, [r2, r3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003520:	68fa      	ldr	r2, [r7, #12]
 8003522:	2388      	movs	r3, #136	; 0x88
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	58d2      	ldr	r2, [r2, r3]
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	0a5b      	lsrs	r3, r3, #9
 800352c:	18d2      	adds	r2, r2, r3
 800352e:	251f      	movs	r5, #31
 8003530:	197c      	adds	r4, r7, r5
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	0011      	movs	r1, r2
 8003536:	0018      	movs	r0, r3
 8003538:	f7ff fd9e 	bl	8003078 <move_window>
 800353c:	0003      	movs	r3, r0
 800353e:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8003540:	197b      	adds	r3, r7, r5
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d000      	beq.n	800354a <put_fat+0xec>
 8003548:	e0a9      	b.n	800369e <put_fat+0x240>
			p = &fs->win.d8[bc % SS(fs)];
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	05db      	lsls	r3, r3, #23
 800354e:	0ddb      	lsrs	r3, r3, #23
 8003550:	68fa      	ldr	r2, [r7, #12]
 8003552:	18d3      	adds	r3, r2, r3
 8003554:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	2201      	movs	r2, #1
 800355a:	4013      	ands	r3, r2
 800355c:	d003      	beq.n	8003566 <put_fat+0x108>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	091b      	lsrs	r3, r3, #4
 8003562:	b2db      	uxtb	r3, r3
 8003564:	e00e      	b.n	8003584 <put_fat+0x126>
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	b25b      	sxtb	r3, r3
 800356c:	220f      	movs	r2, #15
 800356e:	4393      	bics	r3, r2
 8003570:	b25a      	sxtb	r2, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	0a1b      	lsrs	r3, r3, #8
 8003576:	b25b      	sxtb	r3, r3
 8003578:	210f      	movs	r1, #15
 800357a:	400b      	ands	r3, r1
 800357c:	b25b      	sxtb	r3, r3
 800357e:	4313      	orrs	r3, r2
 8003580:	b25b      	sxtb	r3, r3
 8003582:	b2db      	uxtb	r3, r3
 8003584:	69ba      	ldr	r2, [r7, #24]
 8003586:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003588:	68fa      	ldr	r2, [r7, #12]
 800358a:	2381      	movs	r3, #129	; 0x81
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	2101      	movs	r1, #1
 8003590:	54d1      	strb	r1, [r2, r3]
			break;
 8003592:	e089      	b.n	80036a8 <put_fat+0x24a>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8003594:	68fa      	ldr	r2, [r7, #12]
 8003596:	2388      	movs	r3, #136	; 0x88
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	58d2      	ldr	r2, [r2, r3]
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	0a1b      	lsrs	r3, r3, #8
 80035a0:	18d2      	adds	r2, r2, r3
 80035a2:	251f      	movs	r5, #31
 80035a4:	197c      	adds	r4, r7, r5
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	0011      	movs	r1, r2
 80035aa:	0018      	movs	r0, r3
 80035ac:	f7ff fd64 	bl	8003078 <move_window>
 80035b0:	0003      	movs	r3, r0
 80035b2:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 80035b4:	197b      	adds	r3, r7, r5
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d172      	bne.n	80036a2 <put_fat+0x244>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	005a      	lsls	r2, r3, #1
 80035c0:	23ff      	movs	r3, #255	; 0xff
 80035c2:	005b      	lsls	r3, r3, #1
 80035c4:	4013      	ands	r3, r2
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	18d3      	adds	r3, r2, r3
 80035ca:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	b2da      	uxtb	r2, r3
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	701a      	strb	r2, [r3, #0]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	0a1b      	lsrs	r3, r3, #8
 80035da:	b29a      	uxth	r2, r3
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	3301      	adds	r3, #1
 80035e0:	b2d2      	uxtb	r2, r2
 80035e2:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 80035e4:	68fa      	ldr	r2, [r7, #12]
 80035e6:	2381      	movs	r3, #129	; 0x81
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	2101      	movs	r1, #1
 80035ec:	54d1      	strb	r1, [r2, r3]
			break;
 80035ee:	e05b      	b.n	80036a8 <put_fat+0x24a>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80035f0:	68fa      	ldr	r2, [r7, #12]
 80035f2:	2388      	movs	r3, #136	; 0x88
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	58d2      	ldr	r2, [r2, r3]
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	09db      	lsrs	r3, r3, #7
 80035fc:	18d2      	adds	r2, r2, r3
 80035fe:	251f      	movs	r5, #31
 8003600:	197c      	adds	r4, r7, r5
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	0011      	movs	r1, r2
 8003606:	0018      	movs	r0, r3
 8003608:	f7ff fd36 	bl	8003078 <move_window>
 800360c:	0003      	movs	r3, r0
 800360e:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8003610:	197b      	adds	r3, r7, r5
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d146      	bne.n	80036a6 <put_fat+0x248>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	009a      	lsls	r2, r3, #2
 800361c:	23fe      	movs	r3, #254	; 0xfe
 800361e:	005b      	lsls	r3, r3, #1
 8003620:	4013      	ands	r3, r2
 8003622:	68fa      	ldr	r2, [r7, #12]
 8003624:	18d3      	adds	r3, r2, r3
 8003626:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	3303      	adds	r3, #3
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	061a      	lsls	r2, r3, #24
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	3302      	adds	r3, #2
 8003634:	781b      	ldrb	r3, [r3, #0]
 8003636:	041b      	lsls	r3, r3, #16
 8003638:	4313      	orrs	r3, r2
 800363a:	69ba      	ldr	r2, [r7, #24]
 800363c:	3201      	adds	r2, #1
 800363e:	7812      	ldrb	r2, [r2, #0]
 8003640:	0212      	lsls	r2, r2, #8
 8003642:	4313      	orrs	r3, r2
 8003644:	69ba      	ldr	r2, [r7, #24]
 8003646:	7812      	ldrb	r2, [r2, #0]
 8003648:	4313      	orrs	r3, r2
 800364a:	0f1b      	lsrs	r3, r3, #28
 800364c:	071b      	lsls	r3, r3, #28
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	4313      	orrs	r3, r2
 8003652:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	b2da      	uxtb	r2, r3
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	701a      	strb	r2, [r3, #0]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	b29b      	uxth	r3, r3
 8003660:	0a1b      	lsrs	r3, r3, #8
 8003662:	b29a      	uxth	r2, r3
 8003664:	69bb      	ldr	r3, [r7, #24]
 8003666:	3301      	adds	r3, #1
 8003668:	b2d2      	uxtb	r2, r2
 800366a:	701a      	strb	r2, [r3, #0]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	0c1a      	lsrs	r2, r3, #16
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	3302      	adds	r3, #2
 8003674:	b2d2      	uxtb	r2, r2
 8003676:	701a      	strb	r2, [r3, #0]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	0e1a      	lsrs	r2, r3, #24
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	3303      	adds	r3, #3
 8003680:	b2d2      	uxtb	r2, r2
 8003682:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8003684:	68fa      	ldr	r2, [r7, #12]
 8003686:	2381      	movs	r3, #129	; 0x81
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	2101      	movs	r1, #1
 800368c:	54d1      	strb	r1, [r2, r3]
			break;
 800368e:	e00b      	b.n	80036a8 <put_fat+0x24a>

		default :
			res = FR_INT_ERR;
 8003690:	231f      	movs	r3, #31
 8003692:	18fb      	adds	r3, r7, r3
 8003694:	2202      	movs	r2, #2
 8003696:	701a      	strb	r2, [r3, #0]
 8003698:	e006      	b.n	80036a8 <put_fat+0x24a>
			if (res != FR_OK) break;
 800369a:	46c0      	nop			; (mov r8, r8)
 800369c:	e004      	b.n	80036a8 <put_fat+0x24a>
			if (res != FR_OK) break;
 800369e:	46c0      	nop			; (mov r8, r8)
 80036a0:	e002      	b.n	80036a8 <put_fat+0x24a>
			if (res != FR_OK) break;
 80036a2:	46c0      	nop			; (mov r8, r8)
 80036a4:	e000      	b.n	80036a8 <put_fat+0x24a>
			if (res != FR_OK) break;
 80036a6:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
 80036a8:	231f      	movs	r3, #31
 80036aa:	18fb      	adds	r3, r7, r3
 80036ac:	781b      	ldrb	r3, [r3, #0]
}
 80036ae:	0018      	movs	r0, r3
 80036b0:	46bd      	mov	sp, r7
 80036b2:	b008      	add	sp, #32
 80036b4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080036b8 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 80036b8:	b5b0      	push	{r4, r5, r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d906      	bls.n	80036d6 <remove_chain+0x1e>
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	2385      	movs	r3, #133	; 0x85
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	58d3      	ldr	r3, [r2, r3]
 80036d0:	683a      	ldr	r2, [r7, #0]
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d304      	bcc.n	80036e0 <remove_chain+0x28>
		res = FR_INT_ERR;
 80036d6:	230f      	movs	r3, #15
 80036d8:	18fb      	adds	r3, r7, r3
 80036da:	2202      	movs	r2, #2
 80036dc:	701a      	strb	r2, [r3, #0]
 80036de:	e052      	b.n	8003786 <remove_chain+0xce>

	} else {
		res = FR_OK;
 80036e0:	230f      	movs	r3, #15
 80036e2:	18fb      	adds	r3, r7, r3
 80036e4:	2200      	movs	r2, #0
 80036e6:	701a      	strb	r2, [r3, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80036e8:	e042      	b.n	8003770 <remove_chain+0xb8>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 80036ea:	683a      	ldr	r2, [r7, #0]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	0011      	movs	r1, r2
 80036f0:	0018      	movs	r0, r3
 80036f2:	f7ff fdf5 	bl	80032e0 <get_fat>
 80036f6:	0003      	movs	r3, r0
 80036f8:	60bb      	str	r3, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d03f      	beq.n	8003780 <remove_chain+0xc8>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	2b01      	cmp	r3, #1
 8003704:	d104      	bne.n	8003710 <remove_chain+0x58>
 8003706:	230f      	movs	r3, #15
 8003708:	18fb      	adds	r3, r7, r3
 800370a:	2202      	movs	r2, #2
 800370c:	701a      	strb	r2, [r3, #0]
 800370e:	e03a      	b.n	8003786 <remove_chain+0xce>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	3301      	adds	r3, #1
 8003714:	d104      	bne.n	8003720 <remove_chain+0x68>
 8003716:	230f      	movs	r3, #15
 8003718:	18fb      	adds	r3, r7, r3
 800371a:	2201      	movs	r2, #1
 800371c:	701a      	strb	r2, [r3, #0]
 800371e:	e032      	b.n	8003786 <remove_chain+0xce>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8003720:	250f      	movs	r5, #15
 8003722:	197c      	adds	r4, r7, r5
 8003724:	6839      	ldr	r1, [r7, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	0018      	movs	r0, r3
 800372c:	f7ff fe97 	bl	800345e <put_fat>
 8003730:	0003      	movs	r3, r0
 8003732:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8003734:	197b      	adds	r3, r7, r5
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d123      	bne.n	8003784 <remove_chain+0xcc>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	2384      	movs	r3, #132	; 0x84
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	58d3      	ldr	r3, [r2, r3]
 8003744:	3301      	adds	r3, #1
 8003746:	d011      	beq.n	800376c <remove_chain+0xb4>
				fs->free_clust++;
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	2384      	movs	r3, #132	; 0x84
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	58d3      	ldr	r3, [r2, r3]
 8003750:	1c59      	adds	r1, r3, #1
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	2384      	movs	r3, #132	; 0x84
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	50d1      	str	r1, [r2, r3]
				fs->fsi_flag |= 1;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a0d      	ldr	r2, [pc, #52]	; (8003794 <remove_chain+0xdc>)
 800375e:	5c9b      	ldrb	r3, [r3, r2]
 8003760:	2201      	movs	r2, #1
 8003762:	4313      	orrs	r3, r2
 8003764:	b2d9      	uxtb	r1, r3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a0a      	ldr	r2, [pc, #40]	; (8003794 <remove_chain+0xdc>)
 800376a:	5499      	strb	r1, [r3, r2]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	2385      	movs	r3, #133	; 0x85
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	58d3      	ldr	r3, [r2, r3]
 8003778:	683a      	ldr	r2, [r7, #0]
 800377a:	429a      	cmp	r2, r3
 800377c:	d3b5      	bcc.n	80036ea <remove_chain+0x32>
 800377e:	e002      	b.n	8003786 <remove_chain+0xce>
			if (nxt == 0) break;				/* Empty cluster? */
 8003780:	46c0      	nop			; (mov r8, r8)
 8003782:	e000      	b.n	8003786 <remove_chain+0xce>
			if (res != FR_OK) break;
 8003784:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
 8003786:	230f      	movs	r3, #15
 8003788:	18fb      	adds	r3, r7, r3
 800378a:	781b      	ldrb	r3, [r3, #0]
}
 800378c:	0018      	movs	r0, r3
 800378e:	46bd      	mov	sp, r7
 8003790:	b004      	add	sp, #16
 8003792:	bdb0      	pop	{r4, r5, r7, pc}
 8003794:	00000205 	.word	0x00000205

08003798 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8003798:	b5b0      	push	{r4, r5, r7, lr}
 800379a:	b086      	sub	sp, #24
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d111      	bne.n	80037cc <create_chain+0x34>
		scl = fs->last_clust;			/* Get suggested start point */
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	2383      	movs	r3, #131	; 0x83
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	58d3      	ldr	r3, [r2, r3]
 80037b0:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d006      	beq.n	80037c6 <create_chain+0x2e>
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	2385      	movs	r3, #133	; 0x85
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	58d3      	ldr	r3, [r2, r3]
 80037c0:	693a      	ldr	r2, [r7, #16]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d31f      	bcc.n	8003806 <create_chain+0x6e>
 80037c6:	2301      	movs	r3, #1
 80037c8:	613b      	str	r3, [r7, #16]
 80037ca:	e01c      	b.n	8003806 <create_chain+0x6e>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 80037cc:	683a      	ldr	r2, [r7, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	0011      	movs	r1, r2
 80037d2:	0018      	movs	r0, r3
 80037d4:	f7ff fd84 	bl	80032e0 <get_fat>
 80037d8:	0003      	movs	r3, r0
 80037da:	60bb      	str	r3, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d801      	bhi.n	80037e6 <create_chain+0x4e>
 80037e2:	2301      	movs	r3, #1
 80037e4:	e086      	b.n	80038f4 <create_chain+0x15c>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	3301      	adds	r3, #1
 80037ea:	d101      	bne.n	80037f0 <create_chain+0x58>
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	e081      	b.n	80038f4 <create_chain+0x15c>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	2385      	movs	r3, #133	; 0x85
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	58d3      	ldr	r3, [r2, r3]
 80037f8:	68ba      	ldr	r2, [r7, #8]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d201      	bcs.n	8003802 <create_chain+0x6a>
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	e078      	b.n	80038f4 <create_chain+0x15c>
		scl = clst;
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	3301      	adds	r3, #1
 800380e:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	2385      	movs	r3, #133	; 0x85
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	58d3      	ldr	r3, [r2, r3]
 8003818:	697a      	ldr	r2, [r7, #20]
 800381a:	429a      	cmp	r2, r3
 800381c:	d307      	bcc.n	800382e <create_chain+0x96>
			ncl = 2;
 800381e:	2302      	movs	r3, #2
 8003820:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8003822:	697a      	ldr	r2, [r7, #20]
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	429a      	cmp	r2, r3
 8003828:	d901      	bls.n	800382e <create_chain+0x96>
 800382a:	2300      	movs	r3, #0
 800382c:	e062      	b.n	80038f4 <create_chain+0x15c>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 800382e:	697a      	ldr	r2, [r7, #20]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	0011      	movs	r1, r2
 8003834:	0018      	movs	r0, r3
 8003836:	f7ff fd53 	bl	80032e0 <get_fat>
 800383a:	0003      	movs	r3, r0
 800383c:	60bb      	str	r3, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d00d      	beq.n	8003860 <create_chain+0xc8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	3301      	adds	r3, #1
 8003848:	d002      	beq.n	8003850 <create_chain+0xb8>
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	2b01      	cmp	r3, #1
 800384e:	d101      	bne.n	8003854 <create_chain+0xbc>
			return cs;
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	e04f      	b.n	80038f4 <create_chain+0x15c>
		if (ncl == scl) return 0;		/* No free cluster */
 8003854:	697a      	ldr	r2, [r7, #20]
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	429a      	cmp	r2, r3
 800385a:	d1d6      	bne.n	800380a <create_chain+0x72>
 800385c:	2300      	movs	r3, #0
 800385e:	e049      	b.n	80038f4 <create_chain+0x15c>
		if (cs == 0) break;				/* Found a free cluster */
 8003860:	46c0      	nop			; (mov r8, r8)
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8003862:	250f      	movs	r5, #15
 8003864:	197c      	adds	r4, r7, r5
 8003866:	4a25      	ldr	r2, [pc, #148]	; (80038fc <create_chain+0x164>)
 8003868:	6979      	ldr	r1, [r7, #20]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	0018      	movs	r0, r3
 800386e:	f7ff fdf6 	bl	800345e <put_fat>
 8003872:	0003      	movs	r3, r0
 8003874:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK && clst != 0) {
 8003876:	197b      	adds	r3, r7, r5
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d10c      	bne.n	8003898 <create_chain+0x100>
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d009      	beq.n	8003898 <create_chain+0x100>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8003884:	230f      	movs	r3, #15
 8003886:	18fc      	adds	r4, r7, r3
 8003888:	697a      	ldr	r2, [r7, #20]
 800388a:	6839      	ldr	r1, [r7, #0]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	0018      	movs	r0, r3
 8003890:	f7ff fde5 	bl	800345e <put_fat>
 8003894:	0003      	movs	r3, r0
 8003896:	7023      	strb	r3, [r4, #0]
	}
	if (res == FR_OK) {
 8003898:	230f      	movs	r3, #15
 800389a:	18fb      	adds	r3, r7, r3
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d11d      	bne.n	80038de <create_chain+0x146>
		fs->last_clust = ncl;			/* Update FSINFO */
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	2383      	movs	r3, #131	; 0x83
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	6979      	ldr	r1, [r7, #20]
 80038aa:	50d1      	str	r1, [r2, r3]
		if (fs->free_clust != 0xFFFFFFFF) {
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	2384      	movs	r3, #132	; 0x84
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	58d3      	ldr	r3, [r2, r3]
 80038b4:	3301      	adds	r3, #1
 80038b6:	d01c      	beq.n	80038f2 <create_chain+0x15a>
			fs->free_clust--;
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	2384      	movs	r3, #132	; 0x84
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	58d3      	ldr	r3, [r2, r3]
 80038c0:	1e59      	subs	r1, r3, #1
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	2384      	movs	r3, #132	; 0x84
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	50d1      	str	r1, [r2, r3]
			fs->fsi_flag |= 1;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a0c      	ldr	r2, [pc, #48]	; (8003900 <create_chain+0x168>)
 80038ce:	5c9b      	ldrb	r3, [r3, r2]
 80038d0:	2201      	movs	r2, #1
 80038d2:	4313      	orrs	r3, r2
 80038d4:	b2d9      	uxtb	r1, r3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a09      	ldr	r2, [pc, #36]	; (8003900 <create_chain+0x168>)
 80038da:	5499      	strb	r1, [r3, r2]
 80038dc:	e009      	b.n	80038f2 <create_chain+0x15a>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 80038de:	230f      	movs	r3, #15
 80038e0:	18fb      	adds	r3, r7, r3
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d102      	bne.n	80038ee <create_chain+0x156>
 80038e8:	2301      	movs	r3, #1
 80038ea:	425b      	negs	r3, r3
 80038ec:	e000      	b.n	80038f0 <create_chain+0x158>
 80038ee:	2301      	movs	r3, #1
 80038f0:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 80038f2:	697b      	ldr	r3, [r7, #20]
}
 80038f4:	0018      	movs	r0, r3
 80038f6:	46bd      	mov	sp, r7
 80038f8:	b006      	add	sp, #24
 80038fa:	bdb0      	pop	{r4, r5, r7, pc}
 80038fc:	0fffffff 	.word	0x0fffffff
 8003900:	00000205 	.word	0x00000205

08003904 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b086      	sub	sp, #24
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	2389      	movs	r3, #137	; 0x89
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	58d3      	ldr	r3, [r2, r3]
 8003916:	3304      	adds	r3, #4
 8003918:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	0a58      	lsrs	r0, r3, #9
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	2380      	movs	r3, #128	; 0x80
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	58d3      	ldr	r3, [r2, r3]
 8003926:	4a13      	ldr	r2, [pc, #76]	; (8003974 <clmt_clust+0x70>)
 8003928:	5c9b      	ldrb	r3, [r3, r2]
 800392a:	0019      	movs	r1, r3
 800392c:	f7fc fbf4 	bl	8000118 <__udivsi3>
 8003930:	0003      	movs	r3, r0
 8003932:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	1d1a      	adds	r2, r3, #4
 8003938:	613a      	str	r2, [r7, #16]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d101      	bne.n	8003948 <clmt_clust+0x44>
 8003944:	2300      	movs	r3, #0
 8003946:	e010      	b.n	800396a <clmt_clust+0x66>
		if (cl < ncl) break;	/* In this fragment? */
 8003948:	697a      	ldr	r2, [r7, #20]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	429a      	cmp	r2, r3
 800394e:	d307      	bcc.n	8003960 <clmt_clust+0x5c>
		cl -= ncl; tbl++;		/* Next fragment */
 8003950:	697a      	ldr	r2, [r7, #20]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	617b      	str	r3, [r7, #20]
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	3304      	adds	r3, #4
 800395c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800395e:	e7e9      	b.n	8003934 <clmt_clust+0x30>
		if (cl < ncl) break;	/* In this fragment? */
 8003960:	46c0      	nop			; (mov r8, r8)
	}
	return cl + *tbl;	/* Return the cluster number */
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	18d3      	adds	r3, r2, r3
}
 800396a:	0018      	movs	r0, r3
 800396c:	46bd      	mov	sp, r7
 800396e:	b006      	add	sp, #24
 8003970:	bd80      	pop	{r7, pc}
 8003972:	46c0      	nop			; (mov r8, r8)
 8003974:	00000202 	.word	0x00000202

08003978 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b086      	sub	sp, #24
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	b299      	uxth	r1, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a51      	ldr	r2, [pc, #324]	; (8003ad0 <dir_sdi+0x158>)
 800398a:	5299      	strh	r1, [r3, r2]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	2382      	movs	r3, #130	; 0x82
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	58d3      	ldr	r3, [r2, r3]
 8003994:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	2b01      	cmp	r3, #1
 800399a:	d009      	beq.n	80039b0 <dir_sdi+0x38>
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	2380      	movs	r3, #128	; 0x80
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	58d2      	ldr	r2, [r2, r3]
 80039a4:	2385      	movs	r3, #133	; 0x85
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	58d3      	ldr	r3, [r2, r3]
 80039aa:	697a      	ldr	r2, [r7, #20]
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d301      	bcc.n	80039b4 <dir_sdi+0x3c>
		return FR_INT_ERR;
 80039b0:	2302      	movs	r3, #2
 80039b2:	e088      	b.n	8003ac6 <dir_sdi+0x14e>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d110      	bne.n	80039dc <dir_sdi+0x64>
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	2380      	movs	r3, #128	; 0x80
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	58d2      	ldr	r2, [r2, r3]
 80039c2:	2380      	movs	r3, #128	; 0x80
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	5cd3      	ldrb	r3, [r2, r3]
 80039c8:	2b03      	cmp	r3, #3
 80039ca:	d107      	bne.n	80039dc <dir_sdi+0x64>
		clst = dp->fs->dirbase;
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	2380      	movs	r3, #128	; 0x80
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	58d2      	ldr	r2, [r2, r3]
 80039d4:	2389      	movs	r3, #137	; 0x89
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	58d3      	ldr	r3, [r2, r3]
 80039da:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d115      	bne.n	8003a0e <dir_sdi+0x96>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	2380      	movs	r3, #128	; 0x80
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	58d2      	ldr	r2, [r2, r3]
 80039ea:	2382      	movs	r3, #130	; 0x82
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	5ad3      	ldrh	r3, [r2, r3]
 80039f0:	001a      	movs	r2, r3
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d301      	bcc.n	80039fc <dir_sdi+0x84>
			return FR_INT_ERR;
 80039f8:	2302      	movs	r3, #2
 80039fa:	e064      	b.n	8003ac6 <dir_sdi+0x14e>
		sect = dp->fs->dirbase;
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	2380      	movs	r3, #128	; 0x80
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	58d2      	ldr	r2, [r2, r3]
 8003a04:	2389      	movs	r3, #137	; 0x89
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	58d3      	ldr	r3, [r2, r3]
 8003a0a:	613b      	str	r3, [r7, #16]
 8003a0c:	e03a      	b.n	8003a84 <dir_sdi+0x10c>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	2380      	movs	r3, #128	; 0x80
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	58d3      	ldr	r3, [r2, r3]
 8003a16:	4a2f      	ldr	r2, [pc, #188]	; (8003ad4 <dir_sdi+0x15c>)
 8003a18:	5c9b      	ldrb	r3, [r3, r2]
 8003a1a:	011b      	lsls	r3, r3, #4
 8003a1c:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8003a1e:	e022      	b.n	8003a66 <dir_sdi+0xee>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	2380      	movs	r3, #128	; 0x80
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	58d3      	ldr	r3, [r2, r3]
 8003a28:	697a      	ldr	r2, [r7, #20]
 8003a2a:	0011      	movs	r1, r2
 8003a2c:	0018      	movs	r0, r3
 8003a2e:	f7ff fc57 	bl	80032e0 <get_fat>
 8003a32:	0003      	movs	r3, r0
 8003a34:	617b      	str	r3, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	3301      	adds	r3, #1
 8003a3a:	d101      	bne.n	8003a40 <dir_sdi+0xc8>
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e042      	b.n	8003ac6 <dir_sdi+0x14e>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d909      	bls.n	8003a5a <dir_sdi+0xe2>
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	2380      	movs	r3, #128	; 0x80
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	58d2      	ldr	r2, [r2, r3]
 8003a4e:	2385      	movs	r3, #133	; 0x85
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	58d3      	ldr	r3, [r2, r3]
 8003a54:	697a      	ldr	r2, [r7, #20]
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d301      	bcc.n	8003a5e <dir_sdi+0xe6>
				return FR_INT_ERR;
 8003a5a:	2302      	movs	r3, #2
 8003a5c:	e033      	b.n	8003ac6 <dir_sdi+0x14e>
			idx -= ic;
 8003a5e:	683a      	ldr	r2, [r7, #0]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8003a66:	683a      	ldr	r2, [r7, #0]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d2d8      	bcs.n	8003a20 <dir_sdi+0xa8>
		}
		sect = clust2sect(dp->fs, clst);
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	2380      	movs	r3, #128	; 0x80
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	58d3      	ldr	r3, [r2, r3]
 8003a76:	697a      	ldr	r2, [r7, #20]
 8003a78:	0011      	movs	r1, r2
 8003a7a:	0018      	movs	r0, r3
 8003a7c:	f7ff fc0c 	bl	8003298 <clust2sect>
 8003a80:	0003      	movs	r3, r0
 8003a82:	613b      	str	r3, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	2383      	movs	r3, #131	; 0x83
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	6979      	ldr	r1, [r7, #20]
 8003a8c:	50d1      	str	r1, [r2, r3]
	if (!sect) return FR_INT_ERR;
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d101      	bne.n	8003a98 <dir_sdi+0x120>
 8003a94:	2302      	movs	r3, #2
 8003a96:	e016      	b.n	8003ac6 <dir_sdi+0x14e>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	091a      	lsrs	r2, r3, #4
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	18d1      	adds	r1, r2, r3
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	2384      	movs	r3, #132	; 0x84
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	50d1      	str	r1, [r2, r3]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	2380      	movs	r3, #128	; 0x80
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	58d3      	ldr	r3, [r2, r3]
 8003ab0:	0019      	movs	r1, r3
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	220f      	movs	r2, #15
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	015b      	lsls	r3, r3, #5
 8003aba:	18c9      	adds	r1, r1, r3
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	2385      	movs	r3, #133	; 0x85
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	50d1      	str	r1, [r2, r3]

	return FR_OK;
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	0018      	movs	r0, r3
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	b006      	add	sp, #24
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	46c0      	nop			; (mov r8, r8)
 8003ad0:	00000206 	.word	0x00000206
 8003ad4:	00000202 	.word	0x00000202

08003ad8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8003ad8:	b590      	push	{r4, r7, lr}
 8003ada:	b087      	sub	sp, #28
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a87      	ldr	r2, [pc, #540]	; (8003d04 <dir_next+0x22c>)
 8003ae6:	5a9b      	ldrh	r3, [r3, r2]
 8003ae8:	3301      	adds	r3, #1
 8003aea:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	041b      	lsls	r3, r3, #16
 8003af0:	0c1b      	lsrs	r3, r3, #16
 8003af2:	d005      	beq.n	8003b00 <dir_next+0x28>
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	2384      	movs	r3, #132	; 0x84
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	58d3      	ldr	r3, [r2, r3]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d101      	bne.n	8003b04 <dir_next+0x2c>
		return FR_NO_FILE;
 8003b00:	2304      	movs	r3, #4
 8003b02:	e0fb      	b.n	8003cfc <dir_next+0x224>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	220f      	movs	r2, #15
 8003b08:	4013      	ands	r3, r2
 8003b0a:	d000      	beq.n	8003b0e <dir_next+0x36>
 8003b0c:	e0e2      	b.n	8003cd4 <dir_next+0x1fc>
		dp->sect++;					/* Next sector */
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	2384      	movs	r3, #132	; 0x84
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	58d3      	ldr	r3, [r2, r3]
 8003b16:	1c59      	adds	r1, r3, #1
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	2384      	movs	r3, #132	; 0x84
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	50d1      	str	r1, [r2, r3]

		if (!dp->clust) {		/* Static table */
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	2383      	movs	r3, #131	; 0x83
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	58d3      	ldr	r3, [r2, r3]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d10d      	bne.n	8003b48 <dir_next+0x70>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	2380      	movs	r3, #128	; 0x80
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	58d2      	ldr	r2, [r2, r3]
 8003b34:	2382      	movs	r3, #130	; 0x82
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	5ad3      	ldrh	r3, [r2, r3]
 8003b3a:	001a      	movs	r2, r3
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d200      	bcs.n	8003b44 <dir_next+0x6c>
 8003b42:	e0c7      	b.n	8003cd4 <dir_next+0x1fc>
				return FR_NO_FILE;
 8003b44:	2304      	movs	r3, #4
 8003b46:	e0d9      	b.n	8003cfc <dir_next+0x224>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	091b      	lsrs	r3, r3, #4
 8003b4c:	6879      	ldr	r1, [r7, #4]
 8003b4e:	2280      	movs	r2, #128	; 0x80
 8003b50:	0092      	lsls	r2, r2, #2
 8003b52:	588a      	ldr	r2, [r1, r2]
 8003b54:	496c      	ldr	r1, [pc, #432]	; (8003d08 <dir_next+0x230>)
 8003b56:	5c52      	ldrb	r2, [r2, r1]
 8003b58:	3a01      	subs	r2, #1
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	d000      	beq.n	8003b60 <dir_next+0x88>
 8003b5e:	e0b9      	b.n	8003cd4 <dir_next+0x1fc>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	2380      	movs	r3, #128	; 0x80
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	58d0      	ldr	r0, [r2, r3]
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	2383      	movs	r3, #131	; 0x83
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	58d3      	ldr	r3, [r2, r3]
 8003b70:	0019      	movs	r1, r3
 8003b72:	f7ff fbb5 	bl	80032e0 <get_fat>
 8003b76:	0003      	movs	r3, r0
 8003b78:	617b      	str	r3, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d801      	bhi.n	8003b84 <dir_next+0xac>
 8003b80:	2302      	movs	r3, #2
 8003b82:	e0bb      	b.n	8003cfc <dir_next+0x224>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	3301      	adds	r3, #1
 8003b88:	d101      	bne.n	8003b8e <dir_next+0xb6>
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e0b6      	b.n	8003cfc <dir_next+0x224>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	2380      	movs	r3, #128	; 0x80
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	58d2      	ldr	r2, [r2, r3]
 8003b96:	2385      	movs	r3, #133	; 0x85
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	58d3      	ldr	r3, [r2, r3]
 8003b9c:	697a      	ldr	r2, [r7, #20]
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d200      	bcs.n	8003ba4 <dir_next+0xcc>
 8003ba2:	e084      	b.n	8003cae <dir_next+0x1d6>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d101      	bne.n	8003bae <dir_next+0xd6>
 8003baa:	2304      	movs	r3, #4
 8003bac:	e0a6      	b.n	8003cfc <dir_next+0x224>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	2380      	movs	r3, #128	; 0x80
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	58d0      	ldr	r0, [r2, r3]
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	2383      	movs	r3, #131	; 0x83
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	58d3      	ldr	r3, [r2, r3]
 8003bbe:	0019      	movs	r1, r3
 8003bc0:	f7ff fdea 	bl	8003798 <create_chain>
 8003bc4:	0003      	movs	r3, r0
 8003bc6:	617b      	str	r3, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d101      	bne.n	8003bd2 <dir_next+0xfa>
 8003bce:	2307      	movs	r3, #7
 8003bd0:	e094      	b.n	8003cfc <dir_next+0x224>
					if (clst == 1) return FR_INT_ERR;
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d101      	bne.n	8003bdc <dir_next+0x104>
 8003bd8:	2302      	movs	r3, #2
 8003bda:	e08f      	b.n	8003cfc <dir_next+0x224>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	3301      	adds	r3, #1
 8003be0:	d101      	bne.n	8003be6 <dir_next+0x10e>
 8003be2:	2301      	movs	r3, #1
 8003be4:	e08a      	b.n	8003cfc <dir_next+0x224>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	2380      	movs	r3, #128	; 0x80
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	58d3      	ldr	r3, [r2, r3]
 8003bee:	0018      	movs	r0, r3
 8003bf0:	f7ff f9ea 	bl	8002fc8 <sync_window>
 8003bf4:	1e03      	subs	r3, r0, #0
 8003bf6:	d001      	beq.n	8003bfc <dir_next+0x124>
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e07f      	b.n	8003cfc <dir_next+0x224>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	2380      	movs	r3, #128	; 0x80
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	58d3      	ldr	r3, [r2, r3]
 8003c04:	0018      	movs	r0, r3
 8003c06:	2380      	movs	r3, #128	; 0x80
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	001a      	movs	r2, r3
 8003c0c:	2100      	movs	r1, #0
 8003c0e:	f7fe ffc3 	bl	8002b98 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	2380      	movs	r3, #128	; 0x80
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	58d0      	ldr	r0, [r2, r3]
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	2380      	movs	r3, #128	; 0x80
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	58d4      	ldr	r4, [r2, r3]
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	0019      	movs	r1, r3
 8003c26:	f7ff fb37 	bl	8003298 <clust2sect>
 8003c2a:	0002      	movs	r2, r0
 8003c2c:	238b      	movs	r3, #139	; 0x8b
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	50e2      	str	r2, [r4, r3]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8003c32:	2300      	movs	r3, #0
 8003c34:	613b      	str	r3, [r7, #16]
 8003c36:	e020      	b.n	8003c7a <dir_next+0x1a2>
						dp->fs->wflag = 1;
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	2380      	movs	r3, #128	; 0x80
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	58d2      	ldr	r2, [r2, r3]
 8003c40:	2381      	movs	r3, #129	; 0x81
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	2101      	movs	r1, #1
 8003c46:	54d1      	strb	r1, [r2, r3]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	2380      	movs	r3, #128	; 0x80
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	58d3      	ldr	r3, [r2, r3]
 8003c50:	0018      	movs	r0, r3
 8003c52:	f7ff f9b9 	bl	8002fc8 <sync_window>
 8003c56:	1e03      	subs	r3, r0, #0
 8003c58:	d001      	beq.n	8003c5e <dir_next+0x186>
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e04e      	b.n	8003cfc <dir_next+0x224>
						dp->fs->winsect++;
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	2380      	movs	r3, #128	; 0x80
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	58d3      	ldr	r3, [r2, r3]
 8003c66:	228b      	movs	r2, #139	; 0x8b
 8003c68:	0092      	lsls	r2, r2, #2
 8003c6a:	589a      	ldr	r2, [r3, r2]
 8003c6c:	1c51      	adds	r1, r2, #1
 8003c6e:	228b      	movs	r2, #139	; 0x8b
 8003c70:	0092      	lsls	r2, r2, #2
 8003c72:	5099      	str	r1, [r3, r2]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	3301      	adds	r3, #1
 8003c78:	613b      	str	r3, [r7, #16]
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	2380      	movs	r3, #128	; 0x80
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	58d3      	ldr	r3, [r2, r3]
 8003c82:	4a21      	ldr	r2, [pc, #132]	; (8003d08 <dir_next+0x230>)
 8003c84:	5c9b      	ldrb	r3, [r3, r2]
 8003c86:	001a      	movs	r2, r3
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d3d4      	bcc.n	8003c38 <dir_next+0x160>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	2380      	movs	r3, #128	; 0x80
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	58d2      	ldr	r2, [r2, r3]
 8003c96:	238b      	movs	r3, #139	; 0x8b
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	58d1      	ldr	r1, [r2, r3]
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	2380      	movs	r3, #128	; 0x80
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	58d2      	ldr	r2, [r2, r3]
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	1ac9      	subs	r1, r1, r3
 8003ca8:	238b      	movs	r3, #139	; 0x8b
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	50d1      	str	r1, [r2, r3]
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	2383      	movs	r3, #131	; 0x83
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	6979      	ldr	r1, [r7, #20]
 8003cb6:	50d1      	str	r1, [r2, r3]
				dp->sect = clust2sect(dp->fs, clst);
 8003cb8:	687a      	ldr	r2, [r7, #4]
 8003cba:	2380      	movs	r3, #128	; 0x80
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	58d3      	ldr	r3, [r2, r3]
 8003cc0:	697a      	ldr	r2, [r7, #20]
 8003cc2:	0011      	movs	r1, r2
 8003cc4:	0018      	movs	r0, r3
 8003cc6:	f7ff fae7 	bl	8003298 <clust2sect>
 8003cca:	0001      	movs	r1, r0
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	2384      	movs	r3, #132	; 0x84
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	50d1      	str	r1, [r2, r3]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	b299      	uxth	r1, r3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4a0a      	ldr	r2, [pc, #40]	; (8003d04 <dir_next+0x22c>)
 8003cdc:	5299      	strh	r1, [r3, r2]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	2380      	movs	r3, #128	; 0x80
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	58d3      	ldr	r3, [r2, r3]
 8003ce6:	0019      	movs	r1, r3
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	220f      	movs	r2, #15
 8003cec:	4013      	ands	r3, r2
 8003cee:	015b      	lsls	r3, r3, #5
 8003cf0:	18c9      	adds	r1, r1, r3
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	2385      	movs	r3, #133	; 0x85
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	50d1      	str	r1, [r2, r3]

	return FR_OK;
 8003cfa:	2300      	movs	r3, #0
}
 8003cfc:	0018      	movs	r0, r3
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	b007      	add	sp, #28
 8003d02:	bd90      	pop	{r4, r7, pc}
 8003d04:	00000206 	.word	0x00000206
 8003d08:	00000202 	.word	0x00000202

08003d0c <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8003d0c:	b5b0      	push	{r4, r5, r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8003d16:	250f      	movs	r5, #15
 8003d18:	197c      	adds	r4, r7, r5
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2100      	movs	r1, #0
 8003d1e:	0018      	movs	r0, r3
 8003d20:	f7ff fe2a 	bl	8003978 <dir_sdi>
 8003d24:	0003      	movs	r3, r0
 8003d26:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8003d28:	197b      	adds	r3, r7, r5
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d13b      	bne.n	8003da8 <dir_alloc+0x9c>
		n = 0;
 8003d30:	2300      	movs	r3, #0
 8003d32:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	2380      	movs	r3, #128	; 0x80
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	58d0      	ldr	r0, [r2, r3]
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	2384      	movs	r3, #132	; 0x84
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	58d3      	ldr	r3, [r2, r3]
 8003d44:	250f      	movs	r5, #15
 8003d46:	197c      	adds	r4, r7, r5
 8003d48:	0019      	movs	r1, r3
 8003d4a:	f7ff f995 	bl	8003078 <move_window>
 8003d4e:	0003      	movs	r3, r0
 8003d50:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8003d52:	197b      	adds	r3, r7, r5
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d125      	bne.n	8003da6 <dir_alloc+0x9a>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	2385      	movs	r3, #133	; 0x85
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	58d3      	ldr	r3, [r2, r3]
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	2be5      	cmp	r3, #229	; 0xe5
 8003d66:	d006      	beq.n	8003d76 <dir_alloc+0x6a>
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	2385      	movs	r3, #133	; 0x85
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	58d3      	ldr	r3, [r2, r3]
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d107      	bne.n	8003d86 <dir_alloc+0x7a>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	3301      	adds	r3, #1
 8003d7a:	60bb      	str	r3, [r7, #8]
 8003d7c:	68ba      	ldr	r2, [r7, #8]
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d102      	bne.n	8003d8a <dir_alloc+0x7e>
 8003d84:	e010      	b.n	8003da8 <dir_alloc+0x9c>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8003d86:	2300      	movs	r3, #0
 8003d88:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8003d8a:	250f      	movs	r5, #15
 8003d8c:	197c      	adds	r4, r7, r5
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2101      	movs	r1, #1
 8003d92:	0018      	movs	r0, r3
 8003d94:	f7ff fea0 	bl	8003ad8 <dir_next>
 8003d98:	0003      	movs	r3, r0
 8003d9a:	7023      	strb	r3, [r4, #0]
		} while (res == FR_OK);
 8003d9c:	197b      	adds	r3, r7, r5
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d0c7      	beq.n	8003d34 <dir_alloc+0x28>
 8003da4:	e000      	b.n	8003da8 <dir_alloc+0x9c>
			if (res != FR_OK) break;
 8003da6:	46c0      	nop			; (mov r8, r8)
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8003da8:	230f      	movs	r3, #15
 8003daa:	18fb      	adds	r3, r7, r3
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	2b04      	cmp	r3, #4
 8003db0:	d103      	bne.n	8003dba <dir_alloc+0xae>
 8003db2:	230f      	movs	r3, #15
 8003db4:	18fb      	adds	r3, r7, r3
 8003db6:	2207      	movs	r2, #7
 8003db8:	701a      	strb	r2, [r3, #0]
	return res;
 8003dba:	230f      	movs	r3, #15
 8003dbc:	18fb      	adds	r3, r7, r3
 8003dbe:	781b      	ldrb	r3, [r3, #0]
}
 8003dc0:	0018      	movs	r0, r3
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	b004      	add	sp, #16
 8003dc6:	bdb0      	pop	{r4, r5, r7, pc}

08003dc8 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	331b      	adds	r3, #27
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	021b      	lsls	r3, r3, #8
 8003dda:	b21a      	sxth	r2, r3
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	331a      	adds	r3, #26
 8003de0:	781b      	ldrb	r3, [r3, #0]
 8003de2:	b21b      	sxth	r3, r3
 8003de4:	4313      	orrs	r3, r2
 8003de6:	b21b      	sxth	r3, r3
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8003dec:	687a      	ldr	r2, [r7, #4]
 8003dee:	2380      	movs	r3, #128	; 0x80
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	5cd3      	ldrb	r3, [r2, r3]
 8003df4:	2b03      	cmp	r3, #3
 8003df6:	d10f      	bne.n	8003e18 <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	3315      	adds	r3, #21
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	021b      	lsls	r3, r3, #8
 8003e00:	b21a      	sxth	r2, r3
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	3314      	adds	r3, #20
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	b21b      	sxth	r3, r3
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	b21b      	sxth	r3, r3
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	041b      	lsls	r3, r3, #16
 8003e12:	68fa      	ldr	r2, [r7, #12]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	60fb      	str	r3, [r7, #12]

	return cl;
 8003e18:	68fb      	ldr	r3, [r7, #12]
}
 8003e1a:	0018      	movs	r0, r3
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	b004      	add	sp, #16
 8003e20:	bd80      	pop	{r7, pc}

08003e22 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8003e22:	b580      	push	{r7, lr}
 8003e24:	b082      	sub	sp, #8
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]
 8003e2a:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	331a      	adds	r3, #26
 8003e30:	683a      	ldr	r2, [r7, #0]
 8003e32:	b2d2      	uxtb	r2, r2
 8003e34:	701a      	strb	r2, [r3, #0]
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	0a1b      	lsrs	r3, r3, #8
 8003e3c:	b29a      	uxth	r2, r3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	331b      	adds	r3, #27
 8003e42:	b2d2      	uxtb	r2, r2
 8003e44:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	0c1a      	lsrs	r2, r3, #16
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	3314      	adds	r3, #20
 8003e4e:	b2d2      	uxtb	r2, r2
 8003e50:	701a      	strb	r2, [r3, #0]
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	0c1b      	lsrs	r3, r3, #16
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	0a1b      	lsrs	r3, r3, #8
 8003e5a:	b29a      	uxth	r2, r3
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	3315      	adds	r3, #21
 8003e60:	b2d2      	uxtb	r2, r2
 8003e62:	701a      	strb	r2, [r3, #0]
}
 8003e64:	46c0      	nop			; (mov r8, r8)
 8003e66:	46bd      	mov	sp, r7
 8003e68:	b002      	add	sp, #8
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8003e6c:	b5b0      	push	{r4, r5, r7, lr}
 8003e6e:	b086      	sub	sp, #24
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8003e74:	2517      	movs	r5, #23
 8003e76:	197c      	adds	r4, r7, r5
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2100      	movs	r1, #0
 8003e7c:	0018      	movs	r0, r3
 8003e7e:	f7ff fd7b 	bl	8003978 <dir_sdi>
 8003e82:	0003      	movs	r3, r0
 8003e84:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
 8003e86:	197b      	adds	r3, r7, r5
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d003      	beq.n	8003e96 <dir_find+0x2a>
 8003e8e:	2317      	movs	r3, #23
 8003e90:	18fb      	adds	r3, r7, r3
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	e04b      	b.n	8003f2e <dir_find+0xc2>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	2380      	movs	r3, #128	; 0x80
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	58d0      	ldr	r0, [r2, r3]
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	2384      	movs	r3, #132	; 0x84
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	58d3      	ldr	r3, [r2, r3]
 8003ea6:	2517      	movs	r5, #23
 8003ea8:	197c      	adds	r4, r7, r5
 8003eaa:	0019      	movs	r1, r3
 8003eac:	f7ff f8e4 	bl	8003078 <move_window>
 8003eb0:	0003      	movs	r3, r0
 8003eb2:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
 8003eb4:	197b      	adds	r3, r7, r5
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d132      	bne.n	8003f22 <dir_find+0xb6>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	2385      	movs	r3, #133	; 0x85
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	58d3      	ldr	r3, [r2, r3]
 8003ec4:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8003ec6:	210f      	movs	r1, #15
 8003ec8:	187b      	adds	r3, r7, r1
 8003eca:	693a      	ldr	r2, [r7, #16]
 8003ecc:	7812      	ldrb	r2, [r2, #0]
 8003ece:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8003ed0:	187b      	adds	r3, r7, r1
 8003ed2:	781b      	ldrb	r3, [r3, #0]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d104      	bne.n	8003ee2 <dir_find+0x76>
 8003ed8:	2317      	movs	r3, #23
 8003eda:	18fb      	adds	r3, r7, r3
 8003edc:	2204      	movs	r2, #4
 8003ede:	701a      	strb	r2, [r3, #0]
 8003ee0:	e022      	b.n	8003f28 <dir_find+0xbc>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	330b      	adds	r3, #11
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	001a      	movs	r2, r3
 8003eea:	2308      	movs	r3, #8
 8003eec:	4013      	ands	r3, r2
 8003eee:	d10a      	bne.n	8003f06 <dir_find+0x9a>
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	2386      	movs	r3, #134	; 0x86
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	58d1      	ldr	r1, [r2, r3]
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	220b      	movs	r2, #11
 8003efc:	0018      	movs	r0, r3
 8003efe:	f7fe fe63 	bl	8002bc8 <mem_cmp>
 8003f02:	1e03      	subs	r3, r0, #0
 8003f04:	d00f      	beq.n	8003f26 <dir_find+0xba>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8003f06:	2517      	movs	r5, #23
 8003f08:	197c      	adds	r4, r7, r5
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2100      	movs	r1, #0
 8003f0e:	0018      	movs	r0, r3
 8003f10:	f7ff fde2 	bl	8003ad8 <dir_next>
 8003f14:	0003      	movs	r3, r0
 8003f16:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
 8003f18:	197b      	adds	r3, r7, r5
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d0ba      	beq.n	8003e96 <dir_find+0x2a>
 8003f20:	e002      	b.n	8003f28 <dir_find+0xbc>
		if (res != FR_OK) break;
 8003f22:	46c0      	nop			; (mov r8, r8)
 8003f24:	e000      	b.n	8003f28 <dir_find+0xbc>
			break;
 8003f26:	46c0      	nop			; (mov r8, r8)

	return res;
 8003f28:	2317      	movs	r3, #23
 8003f2a:	18fb      	adds	r3, r7, r3
 8003f2c:	781b      	ldrb	r3, [r3, #0]
}
 8003f2e:	0018      	movs	r0, r3
 8003f30:	46bd      	mov	sp, r7
 8003f32:	b006      	add	sp, #24
 8003f34:	bdb0      	pop	{r4, r5, r7, pc}

08003f36 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8003f36:	b5b0      	push	{r4, r5, r7, lr}
 8003f38:	b084      	sub	sp, #16
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8003f3e:	250f      	movs	r5, #15
 8003f40:	197c      	adds	r4, r7, r5
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2101      	movs	r1, #1
 8003f46:	0018      	movs	r0, r3
 8003f48:	f7ff fee0 	bl	8003d0c <dir_alloc>
 8003f4c:	0003      	movs	r3, r0
 8003f4e:	7023      	strb	r3, [r4, #0]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8003f50:	197b      	adds	r3, r7, r5
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d12f      	bne.n	8003fb8 <dir_register+0x82>
		res = move_window(dp->fs, dp->sect);
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	2380      	movs	r3, #128	; 0x80
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	58d0      	ldr	r0, [r2, r3]
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	2384      	movs	r3, #132	; 0x84
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	58d3      	ldr	r3, [r2, r3]
 8003f68:	250f      	movs	r5, #15
 8003f6a:	197c      	adds	r4, r7, r5
 8003f6c:	0019      	movs	r1, r3
 8003f6e:	f7ff f883 	bl	8003078 <move_window>
 8003f72:	0003      	movs	r3, r0
 8003f74:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 8003f76:	197b      	adds	r3, r7, r5
 8003f78:	781b      	ldrb	r3, [r3, #0]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d11c      	bne.n	8003fb8 <dir_register+0x82>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	2385      	movs	r3, #133	; 0x85
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	58d3      	ldr	r3, [r2, r3]
 8003f86:	2220      	movs	r2, #32
 8003f88:	2100      	movs	r1, #0
 8003f8a:	0018      	movs	r0, r3
 8003f8c:	f7fe fe04 	bl	8002b98 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	2385      	movs	r3, #133	; 0x85
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	58d0      	ldr	r0, [r2, r3]
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	2386      	movs	r3, #134	; 0x86
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	58d3      	ldr	r3, [r2, r3]
 8003fa0:	220b      	movs	r2, #11
 8003fa2:	0019      	movs	r1, r3
 8003fa4:	f7fe fddc 	bl	8002b60 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	2380      	movs	r3, #128	; 0x80
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	58d2      	ldr	r2, [r2, r3]
 8003fb0:	2381      	movs	r3, #129	; 0x81
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	2101      	movs	r1, #1
 8003fb6:	54d1      	strb	r1, [r2, r3]
		}
	}

	return res;
 8003fb8:	230f      	movs	r3, #15
 8003fba:	18fb      	adds	r3, r7, r3
 8003fbc:	781b      	ldrb	r3, [r3, #0]
}
 8003fbe:	0018      	movs	r0, r3
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	b004      	add	sp, #16
 8003fc4:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003fc8 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b088      	sub	sp, #32
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	60fb      	str	r3, [r7, #12]
 8003fd8:	e002      	b.n	8003fe0 <create_name+0x18>
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	3301      	adds	r3, #1
 8003fde:	60fb      	str	r3, [r7, #12]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	2b2f      	cmp	r3, #47	; 0x2f
 8003fe6:	d0f8      	beq.n	8003fda <create_name+0x12>
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	2b5c      	cmp	r3, #92	; 0x5c
 8003fee:	d0f4      	beq.n	8003fda <create_name+0x12>
	sfn = dp->fn;
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	2386      	movs	r3, #134	; 0x86
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	58d3      	ldr	r3, [r2, r3]
 8003ff8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	220b      	movs	r2, #11
 8003ffe:	2120      	movs	r1, #32
 8004000:	0018      	movs	r0, r3
 8004002:	f7fe fdc9 	bl	8002b98 <mem_set>
	si = i = b = 0; ni = 8;
 8004006:	231f      	movs	r3, #31
 8004008:	18fb      	adds	r3, r7, r3
 800400a:	2200      	movs	r2, #0
 800400c:	701a      	strb	r2, [r3, #0]
 800400e:	2300      	movs	r3, #0
 8004010:	613b      	str	r3, [r7, #16]
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	617b      	str	r3, [r7, #20]
 8004016:	2308      	movs	r3, #8
 8004018:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	1c5a      	adds	r2, r3, #1
 800401e:	617a      	str	r2, [r7, #20]
 8004020:	68fa      	ldr	r2, [r7, #12]
 8004022:	18d2      	adds	r2, r2, r3
 8004024:	211e      	movs	r1, #30
 8004026:	187b      	adds	r3, r7, r1
 8004028:	7812      	ldrb	r2, [r2, #0]
 800402a:	701a      	strb	r2, [r3, #0]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 800402c:	187b      	adds	r3, r7, r1
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	2b20      	cmp	r3, #32
 8004032:	d800      	bhi.n	8004036 <create_name+0x6e>
 8004034:	e07e      	b.n	8004134 <create_name+0x16c>
 8004036:	231e      	movs	r3, #30
 8004038:	18fb      	adds	r3, r7, r3
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	2b2f      	cmp	r3, #47	; 0x2f
 800403e:	d100      	bne.n	8004042 <create_name+0x7a>
 8004040:	e078      	b.n	8004134 <create_name+0x16c>
 8004042:	231e      	movs	r3, #30
 8004044:	18fb      	adds	r3, r7, r3
 8004046:	781b      	ldrb	r3, [r3, #0]
 8004048:	2b5c      	cmp	r3, #92	; 0x5c
 800404a:	d100      	bne.n	800404e <create_name+0x86>
 800404c:	e072      	b.n	8004134 <create_name+0x16c>
		if (c == '.' || i >= ni) {
 800404e:	231e      	movs	r3, #30
 8004050:	18fb      	adds	r3, r7, r3
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	2b2e      	cmp	r3, #46	; 0x2e
 8004056:	d003      	beq.n	8004060 <create_name+0x98>
 8004058:	693a      	ldr	r2, [r7, #16]
 800405a:	69bb      	ldr	r3, [r7, #24]
 800405c:	429a      	cmp	r2, r3
 800405e:	d314      	bcc.n	800408a <create_name+0xc2>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	2b08      	cmp	r3, #8
 8004064:	d104      	bne.n	8004070 <create_name+0xa8>
 8004066:	231e      	movs	r3, #30
 8004068:	18fb      	adds	r3, r7, r3
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	2b2e      	cmp	r3, #46	; 0x2e
 800406e:	d001      	beq.n	8004074 <create_name+0xac>
 8004070:	2306      	movs	r3, #6
 8004072:	e0a7      	b.n	80041c4 <create_name+0x1fc>
			i = 8; ni = 11;
 8004074:	2308      	movs	r3, #8
 8004076:	613b      	str	r3, [r7, #16]
 8004078:	230b      	movs	r3, #11
 800407a:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 800407c:	221f      	movs	r2, #31
 800407e:	18bb      	adds	r3, r7, r2
 8004080:	18ba      	adds	r2, r7, r2
 8004082:	7812      	ldrb	r2, [r2, #0]
 8004084:	0092      	lsls	r2, r2, #2
 8004086:	701a      	strb	r2, [r3, #0]
 8004088:	e053      	b.n	8004132 <create_name+0x16a>
		}
		if (c >= 0x80) {				/* Extended character? */
 800408a:	231e      	movs	r3, #30
 800408c:	18fb      	adds	r3, r7, r3
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	b25b      	sxtb	r3, r3
 8004092:	2b00      	cmp	r3, #0
 8004094:	da0f      	bge.n	80040b6 <create_name+0xee>
			b |= 3;						/* Eliminate NT flag */
 8004096:	221f      	movs	r2, #31
 8004098:	18bb      	adds	r3, r7, r2
 800409a:	18ba      	adds	r2, r7, r2
 800409c:	7812      	ldrb	r2, [r2, #0]
 800409e:	2103      	movs	r1, #3
 80040a0:	430a      	orrs	r2, r1
 80040a2:	701a      	strb	r2, [r3, #0]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80040a4:	211e      	movs	r1, #30
 80040a6:	187b      	adds	r3, r7, r1
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	3b80      	subs	r3, #128	; 0x80
 80040ac:	001a      	movs	r2, r3
 80040ae:	187b      	adds	r3, r7, r1
 80040b0:	4946      	ldr	r1, [pc, #280]	; (80041cc <create_name+0x204>)
 80040b2:	5c8a      	ldrb	r2, [r1, r2]
 80040b4:	701a      	strb	r2, [r3, #0]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 80040b6:	231e      	movs	r3, #30
 80040b8:	18fb      	adds	r3, r7, r3
 80040ba:	781a      	ldrb	r2, [r3, #0]
 80040bc:	4b44      	ldr	r3, [pc, #272]	; (80041d0 <create_name+0x208>)
 80040be:	0011      	movs	r1, r2
 80040c0:	0018      	movs	r0, r3
 80040c2:	f7fe fda6 	bl	8002c12 <chk_chr>
 80040c6:	1e03      	subs	r3, r0, #0
 80040c8:	d001      	beq.n	80040ce <create_name+0x106>
				return FR_INVALID_NAME;
 80040ca:	2306      	movs	r3, #6
 80040cc:	e07a      	b.n	80041c4 <create_name+0x1fc>
			if (IsUpper(c)) {			/* ASCII large capital? */
 80040ce:	231e      	movs	r3, #30
 80040d0:	18fb      	adds	r3, r7, r3
 80040d2:	781b      	ldrb	r3, [r3, #0]
 80040d4:	2b40      	cmp	r3, #64	; 0x40
 80040d6:	d90c      	bls.n	80040f2 <create_name+0x12a>
 80040d8:	231e      	movs	r3, #30
 80040da:	18fb      	adds	r3, r7, r3
 80040dc:	781b      	ldrb	r3, [r3, #0]
 80040de:	2b5a      	cmp	r3, #90	; 0x5a
 80040e0:	d807      	bhi.n	80040f2 <create_name+0x12a>
				b |= 2;
 80040e2:	221f      	movs	r2, #31
 80040e4:	18bb      	adds	r3, r7, r2
 80040e6:	18ba      	adds	r2, r7, r2
 80040e8:	7812      	ldrb	r2, [r2, #0]
 80040ea:	2102      	movs	r1, #2
 80040ec:	430a      	orrs	r2, r1
 80040ee:	701a      	strb	r2, [r3, #0]
 80040f0:	e016      	b.n	8004120 <create_name+0x158>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 80040f2:	231e      	movs	r3, #30
 80040f4:	18fb      	adds	r3, r7, r3
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	2b60      	cmp	r3, #96	; 0x60
 80040fa:	d911      	bls.n	8004120 <create_name+0x158>
 80040fc:	231e      	movs	r3, #30
 80040fe:	18fb      	adds	r3, r7, r3
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	2b7a      	cmp	r3, #122	; 0x7a
 8004104:	d80c      	bhi.n	8004120 <create_name+0x158>
					b |= 1; c -= 0x20;
 8004106:	221f      	movs	r2, #31
 8004108:	18bb      	adds	r3, r7, r2
 800410a:	18ba      	adds	r2, r7, r2
 800410c:	7812      	ldrb	r2, [r2, #0]
 800410e:	2101      	movs	r1, #1
 8004110:	430a      	orrs	r2, r1
 8004112:	701a      	strb	r2, [r3, #0]
 8004114:	221e      	movs	r2, #30
 8004116:	18bb      	adds	r3, r7, r2
 8004118:	18ba      	adds	r2, r7, r2
 800411a:	7812      	ldrb	r2, [r2, #0]
 800411c:	3a20      	subs	r2, #32
 800411e:	701a      	strb	r2, [r3, #0]
				}
			}
			sfn[i++] = c;
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	1c5a      	adds	r2, r3, #1
 8004124:	613a      	str	r2, [r7, #16]
 8004126:	68ba      	ldr	r2, [r7, #8]
 8004128:	18d3      	adds	r3, r2, r3
 800412a:	221e      	movs	r2, #30
 800412c:	18ba      	adds	r2, r7, r2
 800412e:	7812      	ldrb	r2, [r2, #0]
 8004130:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8004132:	e772      	b.n	800401a <create_name+0x52>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8004134:	68fa      	ldr	r2, [r7, #12]
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	18d2      	adds	r2, r2, r3
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800413e:	231e      	movs	r3, #30
 8004140:	18fb      	adds	r3, r7, r3
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	2b20      	cmp	r3, #32
 8004146:	d801      	bhi.n	800414c <create_name+0x184>
 8004148:	2204      	movs	r2, #4
 800414a:	e000      	b.n	800414e <create_name+0x186>
 800414c:	2200      	movs	r2, #0
 800414e:	231e      	movs	r3, #30
 8004150:	18fb      	adds	r3, r7, r3
 8004152:	701a      	strb	r2, [r3, #0]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d101      	bne.n	800415e <create_name+0x196>
 800415a:	2306      	movs	r3, #6
 800415c:	e032      	b.n	80041c4 <create_name+0x1fc>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	781b      	ldrb	r3, [r3, #0]
 8004162:	2be5      	cmp	r3, #229	; 0xe5
 8004164:	d102      	bne.n	800416c <create_name+0x1a4>
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	2205      	movs	r2, #5
 800416a:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 800416c:	69bb      	ldr	r3, [r7, #24]
 800416e:	2b08      	cmp	r3, #8
 8004170:	d105      	bne.n	800417e <create_name+0x1b6>
 8004172:	221f      	movs	r2, #31
 8004174:	18bb      	adds	r3, r7, r2
 8004176:	18ba      	adds	r2, r7, r2
 8004178:	7812      	ldrb	r2, [r2, #0]
 800417a:	0092      	lsls	r2, r2, #2
 800417c:	701a      	strb	r2, [r3, #0]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 800417e:	231f      	movs	r3, #31
 8004180:	18fb      	adds	r3, r7, r3
 8004182:	781b      	ldrb	r3, [r3, #0]
 8004184:	2203      	movs	r2, #3
 8004186:	4013      	ands	r3, r2
 8004188:	2b01      	cmp	r3, #1
 800418a:	d106      	bne.n	800419a <create_name+0x1d2>
 800418c:	221e      	movs	r2, #30
 800418e:	18bb      	adds	r3, r7, r2
 8004190:	18ba      	adds	r2, r7, r2
 8004192:	7812      	ldrb	r2, [r2, #0]
 8004194:	2110      	movs	r1, #16
 8004196:	430a      	orrs	r2, r1
 8004198:	701a      	strb	r2, [r3, #0]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 800419a:	231f      	movs	r3, #31
 800419c:	18fb      	adds	r3, r7, r3
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	220c      	movs	r2, #12
 80041a2:	4013      	ands	r3, r2
 80041a4:	2b04      	cmp	r3, #4
 80041a6:	d106      	bne.n	80041b6 <create_name+0x1ee>
 80041a8:	221e      	movs	r2, #30
 80041aa:	18bb      	adds	r3, r7, r2
 80041ac:	18ba      	adds	r2, r7, r2
 80041ae:	7812      	ldrb	r2, [r2, #0]
 80041b0:	2108      	movs	r1, #8
 80041b2:	430a      	orrs	r2, r1
 80041b4:	701a      	strb	r2, [r3, #0]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	330b      	adds	r3, #11
 80041ba:	221e      	movs	r2, #30
 80041bc:	18ba      	adds	r2, r7, r2
 80041be:	7812      	ldrb	r2, [r2, #0]
 80041c0:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80041c2:	2300      	movs	r3, #0
#endif
}
 80041c4:	0018      	movs	r0, r3
 80041c6:	46bd      	mov	sp, r7
 80041c8:	b008      	add	sp, #32
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	080070dc 	.word	0x080070dc
 80041d0:	08007080 	.word	0x08007080

080041d4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80041d4:	b5b0      	push	{r4, r5, r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	781b      	ldrb	r3, [r3, #0]
 80041e2:	2b2f      	cmp	r3, #47	; 0x2f
 80041e4:	d003      	beq.n	80041ee <follow_path+0x1a>
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	781b      	ldrb	r3, [r3, #0]
 80041ea:	2b5c      	cmp	r3, #92	; 0x5c
 80041ec:	d102      	bne.n	80041f4 <follow_path+0x20>
		path++;
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	3301      	adds	r3, #1
 80041f2:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	2382      	movs	r3, #130	; 0x82
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	2100      	movs	r1, #0
 80041fc:	50d1      	str	r1, [r2, r3]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	2b1f      	cmp	r3, #31
 8004204:	d80e      	bhi.n	8004224 <follow_path+0x50>
		res = dir_sdi(dp, 0);
 8004206:	230f      	movs	r3, #15
 8004208:	18fc      	adds	r4, r7, r3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2100      	movs	r1, #0
 800420e:	0018      	movs	r0, r3
 8004210:	f7ff fbb2 	bl	8003978 <dir_sdi>
 8004214:	0003      	movs	r3, r0
 8004216:	7023      	strb	r3, [r4, #0]
		dp->dir = 0;
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	2385      	movs	r3, #133	; 0x85
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	2100      	movs	r1, #0
 8004220:	50d1      	str	r1, [r2, r3]
 8004222:	e05c      	b.n	80042de <follow_path+0x10a>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004224:	250f      	movs	r5, #15
 8004226:	197c      	adds	r4, r7, r5
 8004228:	003a      	movs	r2, r7
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	0011      	movs	r1, r2
 800422e:	0018      	movs	r0, r3
 8004230:	f7ff feca 	bl	8003fc8 <create_name>
 8004234:	0003      	movs	r3, r0
 8004236:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8004238:	197b      	adds	r3, r7, r5
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d149      	bne.n	80042d4 <follow_path+0x100>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8004240:	250f      	movs	r5, #15
 8004242:	197c      	adds	r4, r7, r5
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	0018      	movs	r0, r3
 8004248:	f7ff fe10 	bl	8003e6c <dir_find>
 800424c:	0003      	movs	r3, r0
 800424e:	7023      	strb	r3, [r4, #0]
			ns = dp->fn[NSFLAG];
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	2386      	movs	r3, #134	; 0x86
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	58d2      	ldr	r2, [r2, r3]
 8004258:	230e      	movs	r3, #14
 800425a:	18fb      	adds	r3, r7, r3
 800425c:	7ad2      	ldrb	r2, [r2, #11]
 800425e:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
 8004260:	197b      	adds	r3, r7, r5
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d00f      	beq.n	8004288 <follow_path+0xb4>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8004268:	230f      	movs	r3, #15
 800426a:	18fb      	adds	r3, r7, r3
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	2b04      	cmp	r3, #4
 8004270:	d132      	bne.n	80042d8 <follow_path+0x104>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8004272:	230e      	movs	r3, #14
 8004274:	18fb      	adds	r3, r7, r3
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	2204      	movs	r2, #4
 800427a:	4013      	ands	r3, r2
 800427c:	d12c      	bne.n	80042d8 <follow_path+0x104>
 800427e:	230f      	movs	r3, #15
 8004280:	18fb      	adds	r3, r7, r3
 8004282:	2205      	movs	r2, #5
 8004284:	701a      	strb	r2, [r3, #0]
					}
				}
				break;
 8004286:	e027      	b.n	80042d8 <follow_path+0x104>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004288:	230e      	movs	r3, #14
 800428a:	18fb      	adds	r3, r7, r3
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	2204      	movs	r2, #4
 8004290:	4013      	ands	r3, r2
 8004292:	d123      	bne.n	80042dc <follow_path+0x108>
			dir = dp->dir;						/* Follow the sub-directory */
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	2385      	movs	r3, #133	; 0x85
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	58d3      	ldr	r3, [r2, r3]
 800429c:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	330b      	adds	r3, #11
 80042a2:	781b      	ldrb	r3, [r3, #0]
 80042a4:	001a      	movs	r2, r3
 80042a6:	2310      	movs	r3, #16
 80042a8:	4013      	ands	r3, r2
 80042aa:	d104      	bne.n	80042b6 <follow_path+0xe2>
				res = FR_NO_PATH; break;
 80042ac:	230f      	movs	r3, #15
 80042ae:	18fb      	adds	r3, r7, r3
 80042b0:	2205      	movs	r2, #5
 80042b2:	701a      	strb	r2, [r3, #0]
 80042b4:	e013      	b.n	80042de <follow_path+0x10a>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	2380      	movs	r3, #128	; 0x80
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	58d3      	ldr	r3, [r2, r3]
 80042be:	68ba      	ldr	r2, [r7, #8]
 80042c0:	0011      	movs	r1, r2
 80042c2:	0018      	movs	r0, r3
 80042c4:	f7ff fd80 	bl	8003dc8 <ld_clust>
 80042c8:	0001      	movs	r1, r0
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	2382      	movs	r3, #130	; 0x82
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	50d1      	str	r1, [r2, r3]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80042d2:	e7a7      	b.n	8004224 <follow_path+0x50>
			if (res != FR_OK) break;
 80042d4:	46c0      	nop			; (mov r8, r8)
 80042d6:	e002      	b.n	80042de <follow_path+0x10a>
				break;
 80042d8:	46c0      	nop			; (mov r8, r8)
 80042da:	e000      	b.n	80042de <follow_path+0x10a>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80042dc:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
 80042de:	230f      	movs	r3, #15
 80042e0:	18fb      	adds	r3, r7, r3
 80042e2:	781b      	ldrb	r3, [r3, #0]
}
 80042e4:	0018      	movs	r0, r3
 80042e6:	46bd      	mov	sp, r7
 80042e8:	b004      	add	sp, #16
 80042ea:	bdb0      	pop	{r4, r5, r7, pc}

080042ec <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b086      	sub	sp, #24
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80042f4:	2301      	movs	r3, #1
 80042f6:	425b      	negs	r3, r3
 80042f8:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d031      	beq.n	8004366 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	617b      	str	r3, [r7, #20]
 8004308:	e002      	b.n	8004310 <get_ldnumber+0x24>
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	3301      	adds	r3, #1
 800430e:	617b      	str	r3, [r7, #20]
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	2b20      	cmp	r3, #32
 8004316:	d903      	bls.n	8004320 <get_ldnumber+0x34>
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	781b      	ldrb	r3, [r3, #0]
 800431c:	2b3a      	cmp	r3, #58	; 0x3a
 800431e:	d1f4      	bne.n	800430a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	2b3a      	cmp	r3, #58	; 0x3a
 8004326:	d11c      	bne.n	8004362 <get_ldnumber+0x76>
			tp = *path;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	1c5a      	adds	r2, r3, #1
 8004332:	60fa      	str	r2, [r7, #12]
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	3b30      	subs	r3, #48	; 0x30
 8004338:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	2b09      	cmp	r3, #9
 800433e:	d80e      	bhi.n	800435e <get_ldnumber+0x72>
 8004340:	68fa      	ldr	r2, [r7, #12]
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	429a      	cmp	r2, r3
 8004346:	d10a      	bne.n	800435e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d107      	bne.n	800435e <get_ldnumber+0x72>
					vol = (int)i;
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	3301      	adds	r3, #1
 8004356:	617b      	str	r3, [r7, #20]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	697a      	ldr	r2, [r7, #20]
 800435c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	e002      	b.n	8004368 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8004362:	2300      	movs	r3, #0
 8004364:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8004366:	693b      	ldr	r3, [r7, #16]
}
 8004368:	0018      	movs	r0, r3
 800436a:	46bd      	mov	sp, r7
 800436c:	b006      	add	sp, #24
 800436e:	bd80      	pop	{r7, pc}

08004370 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b082      	sub	sp, #8
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	2381      	movs	r3, #129	; 0x81
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	2100      	movs	r1, #0
 8004382:	54d1      	strb	r1, [r2, r3]
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	238b      	movs	r3, #139	; 0x8b
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	2101      	movs	r1, #1
 800438c:	4249      	negs	r1, r1
 800438e:	50d1      	str	r1, [r2, r3]
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8004390:	683a      	ldr	r2, [r7, #0]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	0011      	movs	r1, r2
 8004396:	0018      	movs	r0, r3
 8004398:	f7fe fe6e 	bl	8003078 <move_window>
 800439c:	1e03      	subs	r3, r0, #0
 800439e:	d001      	beq.n	80043a4 <check_fs+0x34>
		return 3;
 80043a0:	2303      	movs	r3, #3
 80043a2:	e04b      	b.n	800443c <check_fs+0xcc>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	33ff      	adds	r3, #255	; 0xff
 80043a8:	33ff      	adds	r3, #255	; 0xff
 80043aa:	3301      	adds	r3, #1
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	021b      	lsls	r3, r3, #8
 80043b0:	b21a      	sxth	r2, r3
 80043b2:	6879      	ldr	r1, [r7, #4]
 80043b4:	23ff      	movs	r3, #255	; 0xff
 80043b6:	005b      	lsls	r3, r3, #1
 80043b8:	5ccb      	ldrb	r3, [r1, r3]
 80043ba:	b21b      	sxth	r3, r3
 80043bc:	4313      	orrs	r3, r2
 80043be:	b21b      	sxth	r3, r3
 80043c0:	4a20      	ldr	r2, [pc, #128]	; (8004444 <check_fs+0xd4>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d001      	beq.n	80043ca <check_fs+0x5a>
		return 2;
 80043c6:	2302      	movs	r3, #2
 80043c8:	e038      	b.n	800443c <check_fs+0xcc>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	3336      	adds	r3, #54	; 0x36
 80043ce:	3303      	adds	r3, #3
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	061a      	lsls	r2, r3, #24
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	3336      	adds	r3, #54	; 0x36
 80043d8:	3302      	adds	r3, #2
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	041b      	lsls	r3, r3, #16
 80043de:	4313      	orrs	r3, r2
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	3236      	adds	r2, #54	; 0x36
 80043e4:	3201      	adds	r2, #1
 80043e6:	7812      	ldrb	r2, [r2, #0]
 80043e8:	0212      	lsls	r2, r2, #8
 80043ea:	4313      	orrs	r3, r2
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	2136      	movs	r1, #54	; 0x36
 80043f0:	5c52      	ldrb	r2, [r2, r1]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	021b      	lsls	r3, r3, #8
 80043f6:	0a1b      	lsrs	r3, r3, #8
 80043f8:	4a13      	ldr	r2, [pc, #76]	; (8004448 <check_fs+0xd8>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d101      	bne.n	8004402 <check_fs+0x92>
		return 0;
 80043fe:	2300      	movs	r3, #0
 8004400:	e01c      	b.n	800443c <check_fs+0xcc>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	3352      	adds	r3, #82	; 0x52
 8004406:	3303      	adds	r3, #3
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	061a      	lsls	r2, r3, #24
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	3352      	adds	r3, #82	; 0x52
 8004410:	3302      	adds	r3, #2
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	041b      	lsls	r3, r3, #16
 8004416:	4313      	orrs	r3, r2
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	3252      	adds	r2, #82	; 0x52
 800441c:	3201      	adds	r2, #1
 800441e:	7812      	ldrb	r2, [r2, #0]
 8004420:	0212      	lsls	r2, r2, #8
 8004422:	4313      	orrs	r3, r2
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	2152      	movs	r1, #82	; 0x52
 8004428:	5c52      	ldrb	r2, [r2, r1]
 800442a:	4313      	orrs	r3, r2
 800442c:	021b      	lsls	r3, r3, #8
 800442e:	0a1b      	lsrs	r3, r3, #8
 8004430:	4a05      	ldr	r2, [pc, #20]	; (8004448 <check_fs+0xd8>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d101      	bne.n	800443a <check_fs+0xca>
		return 0;
 8004436:	2300      	movs	r3, #0
 8004438:	e000      	b.n	800443c <check_fs+0xcc>

	return 1;
 800443a:	2301      	movs	r3, #1
}
 800443c:	0018      	movs	r0, r3
 800443e:	46bd      	mov	sp, r7
 8004440:	b002      	add	sp, #8
 8004442:	bd80      	pop	{r7, pc}
 8004444:	ffffaa55 	.word	0xffffaa55
 8004448:	00544146 	.word	0x00544146

0800444c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 800444c:	b5b0      	push	{r4, r5, r7, lr}
 800444e:	b096      	sub	sp, #88	; 0x58
 8004450:	af00      	add	r7, sp, #0
 8004452:	60f8      	str	r0, [r7, #12]
 8004454:	60b9      	str	r1, [r7, #8]
 8004456:	1dfb      	adds	r3, r7, #7
 8004458:	701a      	strb	r2, [r3, #0]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2200      	movs	r2, #0
 800445e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	0018      	movs	r0, r3
 8004464:	f7ff ff42 	bl	80042ec <get_ldnumber>
 8004468:	0003      	movs	r3, r0
 800446a:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800446c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800446e:	2b00      	cmp	r3, #0
 8004470:	da01      	bge.n	8004476 <find_volume+0x2a>
 8004472:	230b      	movs	r3, #11
 8004474:	e2f1      	b.n	8004a5a <find_volume+0x60e>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8004476:	4bce      	ldr	r3, [pc, #824]	; (80047b0 <find_volume+0x364>)
 8004478:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800447a:	0092      	lsls	r2, r2, #2
 800447c:	58d3      	ldr	r3, [r2, r3]
 800447e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8004480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004482:	2b00      	cmp	r3, #0
 8004484:	d101      	bne.n	800448a <find_volume+0x3e>
 8004486:	230c      	movs	r3, #12
 8004488:	e2e7      	b.n	8004a5a <find_volume+0x60e>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800448e:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8004490:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004492:	2380      	movs	r3, #128	; 0x80
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	5cd3      	ldrb	r3, [r2, r3]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d01c      	beq.n	80044d6 <find_volume+0x8a>
		stat = disk_status(fs->drv);
 800449c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800449e:	4ac5      	ldr	r2, [pc, #788]	; (80047b4 <find_volume+0x368>)
 80044a0:	5c9b      	ldrb	r3, [r3, r2]
 80044a2:	2537      	movs	r5, #55	; 0x37
 80044a4:	197c      	adds	r4, r7, r5
 80044a6:	0018      	movs	r0, r3
 80044a8:	f7fe fa8e 	bl	80029c8 <disk_status>
 80044ac:	0003      	movs	r3, r0
 80044ae:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80044b0:	197b      	adds	r3, r7, r5
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	2201      	movs	r2, #1
 80044b6:	4013      	ands	r3, r2
 80044b8:	d10d      	bne.n	80044d6 <find_volume+0x8a>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 80044ba:	1dfb      	adds	r3, r7, #7
 80044bc:	781b      	ldrb	r3, [r3, #0]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d007      	beq.n	80044d2 <find_volume+0x86>
 80044c2:	2337      	movs	r3, #55	; 0x37
 80044c4:	18fb      	adds	r3, r7, r3
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	2204      	movs	r2, #4
 80044ca:	4013      	ands	r3, r2
 80044cc:	d001      	beq.n	80044d2 <find_volume+0x86>
				return FR_WRITE_PROTECTED;
 80044ce:	230a      	movs	r3, #10
 80044d0:	e2c3      	b.n	8004a5a <find_volume+0x60e>
			return FR_OK;				/* The file system object is valid */
 80044d2:	2300      	movs	r3, #0
 80044d4:	e2c1      	b.n	8004a5a <find_volume+0x60e>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80044d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80044d8:	2380      	movs	r3, #128	; 0x80
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	2100      	movs	r1, #0
 80044de:	54d1      	strb	r1, [r2, r3]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80044e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044e2:	b2d9      	uxtb	r1, r3
 80044e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044e6:	4ab3      	ldr	r2, [pc, #716]	; (80047b4 <find_volume+0x368>)
 80044e8:	5499      	strb	r1, [r3, r2]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80044ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ec:	4ab1      	ldr	r2, [pc, #708]	; (80047b4 <find_volume+0x368>)
 80044ee:	5c9b      	ldrb	r3, [r3, r2]
 80044f0:	2537      	movs	r5, #55	; 0x37
 80044f2:	197c      	adds	r4, r7, r5
 80044f4:	0018      	movs	r0, r3
 80044f6:	f7fe fa89 	bl	8002a0c <disk_initialize>
 80044fa:	0003      	movs	r3, r0
 80044fc:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 80044fe:	197b      	adds	r3, r7, r5
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	2201      	movs	r2, #1
 8004504:	4013      	ands	r3, r2
 8004506:	d001      	beq.n	800450c <find_volume+0xc0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8004508:	2303      	movs	r3, #3
 800450a:	e2a6      	b.n	8004a5a <find_volume+0x60e>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800450c:	1dfb      	adds	r3, r7, #7
 800450e:	781b      	ldrb	r3, [r3, #0]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d007      	beq.n	8004524 <find_volume+0xd8>
 8004514:	2337      	movs	r3, #55	; 0x37
 8004516:	18fb      	adds	r3, r7, r3
 8004518:	781b      	ldrb	r3, [r3, #0]
 800451a:	2204      	movs	r2, #4
 800451c:	4013      	ands	r3, r2
 800451e:	d001      	beq.n	8004524 <find_volume+0xd8>
		return FR_WRITE_PROTECTED;
 8004520:	230a      	movs	r3, #10
 8004522:	e29a      	b.n	8004a5a <find_volume+0x60e>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8004524:	2300      	movs	r3, #0
 8004526:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8004528:	2557      	movs	r5, #87	; 0x57
 800452a:	197c      	adds	r4, r7, r5
 800452c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800452e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004530:	0011      	movs	r1, r2
 8004532:	0018      	movs	r0, r3
 8004534:	f7ff ff1c 	bl	8004370 <check_fs>
 8004538:	0003      	movs	r3, r0
 800453a:	7023      	strb	r3, [r4, #0]
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800453c:	197b      	adds	r3, r7, r5
 800453e:	781b      	ldrb	r3, [r3, #0]
 8004540:	2b01      	cmp	r3, #1
 8004542:	d155      	bne.n	80045f0 <find_volume+0x1a4>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8004544:	2300      	movs	r3, #0
 8004546:	643b      	str	r3, [r7, #64]	; 0x40
 8004548:	e027      	b.n	800459a <find_volume+0x14e>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 800454a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800454c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800454e:	011b      	lsls	r3, r3, #4
 8004550:	33bf      	adds	r3, #191	; 0xbf
 8004552:	33ff      	adds	r3, #255	; 0xff
 8004554:	18d3      	adds	r3, r2, r3
 8004556:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8004558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800455a:	3304      	adds	r3, #4
 800455c:	781b      	ldrb	r3, [r3, #0]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d012      	beq.n	8004588 <find_volume+0x13c>
 8004562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004564:	330b      	adds	r3, #11
 8004566:	781b      	ldrb	r3, [r3, #0]
 8004568:	061a      	lsls	r2, r3, #24
 800456a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800456c:	330a      	adds	r3, #10
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	041b      	lsls	r3, r3, #16
 8004572:	4313      	orrs	r3, r2
 8004574:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004576:	3209      	adds	r2, #9
 8004578:	7812      	ldrb	r2, [r2, #0]
 800457a:	0212      	lsls	r2, r2, #8
 800457c:	4313      	orrs	r3, r2
 800457e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004580:	3208      	adds	r2, #8
 8004582:	7812      	ldrb	r2, [r2, #0]
 8004584:	4313      	orrs	r3, r2
 8004586:	e000      	b.n	800458a <find_volume+0x13e>
 8004588:	2300      	movs	r3, #0
 800458a:	2214      	movs	r2, #20
 800458c:	18ba      	adds	r2, r7, r2
 800458e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004590:	0089      	lsls	r1, r1, #2
 8004592:	508b      	str	r3, [r1, r2]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8004594:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004596:	3301      	adds	r3, #1
 8004598:	643b      	str	r3, [r7, #64]	; 0x40
 800459a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800459c:	2b03      	cmp	r3, #3
 800459e:	d9d4      	bls.n	800454a <find_volume+0xfe>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 80045a0:	2300      	movs	r3, #0
 80045a2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80045a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d002      	beq.n	80045b0 <find_volume+0x164>
 80045aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045ac:	3b01      	subs	r3, #1
 80045ae:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 80045b0:	2314      	movs	r3, #20
 80045b2:	18fb      	adds	r3, r7, r3
 80045b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80045b6:	0092      	lsls	r2, r2, #2
 80045b8:	58d3      	ldr	r3, [r2, r3]
 80045ba:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 80045bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d008      	beq.n	80045d4 <find_volume+0x188>
 80045c2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80045c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045c6:	0011      	movs	r1, r2
 80045c8:	0018      	movs	r0, r3
 80045ca:	f7ff fed1 	bl	8004370 <check_fs>
 80045ce:	0003      	movs	r3, r0
 80045d0:	001a      	movs	r2, r3
 80045d2:	e000      	b.n	80045d6 <find_volume+0x18a>
 80045d4:	2202      	movs	r2, #2
 80045d6:	2157      	movs	r1, #87	; 0x57
 80045d8:	187b      	adds	r3, r7, r1
 80045da:	701a      	strb	r2, [r3, #0]
		} while (!LD2PT(vol) && fmt && ++i < 4);
 80045dc:	187b      	adds	r3, r7, r1
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d005      	beq.n	80045f0 <find_volume+0x1a4>
 80045e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045e6:	3301      	adds	r3, #1
 80045e8:	643b      	str	r3, [r7, #64]	; 0x40
 80045ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045ec:	2b03      	cmp	r3, #3
 80045ee:	d9df      	bls.n	80045b0 <find_volume+0x164>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80045f0:	2357      	movs	r3, #87	; 0x57
 80045f2:	18fb      	adds	r3, r7, r3
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	2b03      	cmp	r3, #3
 80045f8:	d101      	bne.n	80045fe <find_volume+0x1b2>
 80045fa:	2301      	movs	r3, #1
 80045fc:	e22d      	b.n	8004a5a <find_volume+0x60e>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 80045fe:	2357      	movs	r3, #87	; 0x57
 8004600:	18fb      	adds	r3, r7, r3
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d001      	beq.n	800460c <find_volume+0x1c0>
 8004608:	230d      	movs	r3, #13
 800460a:	e226      	b.n	8004a5a <find_volume+0x60e>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800460c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800460e:	7b1b      	ldrb	r3, [r3, #12]
 8004610:	021b      	lsls	r3, r3, #8
 8004612:	b21a      	sxth	r2, r3
 8004614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004616:	7adb      	ldrb	r3, [r3, #11]
 8004618:	b21b      	sxth	r3, r3
 800461a:	4313      	orrs	r3, r2
 800461c:	b21a      	sxth	r2, r3
 800461e:	2380      	movs	r3, #128	; 0x80
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	429a      	cmp	r2, r3
 8004624:	d001      	beq.n	800462a <find_volume+0x1de>
		return FR_NO_FILESYSTEM;
 8004626:	230d      	movs	r3, #13
 8004628:	e217      	b.n	8004a5a <find_volume+0x60e>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800462a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800462c:	7ddb      	ldrb	r3, [r3, #23]
 800462e:	021b      	lsls	r3, r3, #8
 8004630:	b21a      	sxth	r2, r3
 8004632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004634:	7d9b      	ldrb	r3, [r3, #22]
 8004636:	b21b      	sxth	r3, r3
 8004638:	4313      	orrs	r3, r2
 800463a:	b21b      	sxth	r3, r3
 800463c:	b29b      	uxth	r3, r3
 800463e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8004640:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004642:	2b00      	cmp	r3, #0
 8004644:	d112      	bne.n	800466c <find_volume+0x220>
 8004646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004648:	2227      	movs	r2, #39	; 0x27
 800464a:	5c9b      	ldrb	r3, [r3, r2]
 800464c:	061a      	lsls	r2, r3, #24
 800464e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004650:	2126      	movs	r1, #38	; 0x26
 8004652:	5c5b      	ldrb	r3, [r3, r1]
 8004654:	041b      	lsls	r3, r3, #16
 8004656:	4313      	orrs	r3, r2
 8004658:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800465a:	2125      	movs	r1, #37	; 0x25
 800465c:	5c52      	ldrb	r2, [r2, r1]
 800465e:	0212      	lsls	r2, r2, #8
 8004660:	4313      	orrs	r3, r2
 8004662:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004664:	2124      	movs	r1, #36	; 0x24
 8004666:	5c52      	ldrb	r2, [r2, r1]
 8004668:	4313      	orrs	r3, r2
 800466a:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 800466c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800466e:	2386      	movs	r3, #134	; 0x86
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004674:	50d1      	str	r1, [r2, r3]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8004676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004678:	7c19      	ldrb	r1, [r3, #16]
 800467a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800467c:	4a4e      	ldr	r2, [pc, #312]	; (80047b8 <find_volume+0x36c>)
 800467e:	5499      	strb	r1, [r3, r2]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8004680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004682:	4a4d      	ldr	r2, [pc, #308]	; (80047b8 <find_volume+0x36c>)
 8004684:	5c9b      	ldrb	r3, [r3, r2]
 8004686:	2b01      	cmp	r3, #1
 8004688:	d006      	beq.n	8004698 <find_volume+0x24c>
 800468a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800468c:	4a4a      	ldr	r2, [pc, #296]	; (80047b8 <find_volume+0x36c>)
 800468e:	5c9b      	ldrb	r3, [r3, r2]
 8004690:	2b02      	cmp	r3, #2
 8004692:	d001      	beq.n	8004698 <find_volume+0x24c>
		return FR_NO_FILESYSTEM;
 8004694:	230d      	movs	r3, #13
 8004696:	e1e0      	b.n	8004a5a <find_volume+0x60e>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8004698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800469a:	4a47      	ldr	r2, [pc, #284]	; (80047b8 <find_volume+0x36c>)
 800469c:	5c9b      	ldrb	r3, [r3, r2]
 800469e:	001a      	movs	r2, r3
 80046a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046a2:	4353      	muls	r3, r2
 80046a4:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 80046a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046a8:	7b59      	ldrb	r1, [r3, #13]
 80046aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ac:	4a43      	ldr	r2, [pc, #268]	; (80047bc <find_volume+0x370>)
 80046ae:	5499      	strb	r1, [r3, r2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 80046b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046b2:	4a42      	ldr	r2, [pc, #264]	; (80047bc <find_volume+0x370>)
 80046b4:	5c9b      	ldrb	r3, [r3, r2]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d009      	beq.n	80046ce <find_volume+0x282>
 80046ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046bc:	4a3f      	ldr	r2, [pc, #252]	; (80047bc <find_volume+0x370>)
 80046be:	5c9b      	ldrb	r3, [r3, r2]
 80046c0:	0019      	movs	r1, r3
 80046c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046c4:	4a3d      	ldr	r2, [pc, #244]	; (80047bc <find_volume+0x370>)
 80046c6:	5c9b      	ldrb	r3, [r3, r2]
 80046c8:	3b01      	subs	r3, #1
 80046ca:	400b      	ands	r3, r1
 80046cc:	d001      	beq.n	80046d2 <find_volume+0x286>
		return FR_NO_FILESYSTEM;
 80046ce:	230d      	movs	r3, #13
 80046d0:	e1c3      	b.n	8004a5a <find_volume+0x60e>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 80046d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046d4:	7c9b      	ldrb	r3, [r3, #18]
 80046d6:	021b      	lsls	r3, r3, #8
 80046d8:	b21a      	sxth	r2, r3
 80046da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046dc:	7c5b      	ldrb	r3, [r3, #17]
 80046de:	b21b      	sxth	r3, r3
 80046e0:	4313      	orrs	r3, r2
 80046e2:	b21b      	sxth	r3, r3
 80046e4:	b299      	uxth	r1, r3
 80046e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80046e8:	2382      	movs	r3, #130	; 0x82
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	52d1      	strh	r1, [r2, r3]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 80046ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80046f0:	2382      	movs	r3, #130	; 0x82
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	5ad3      	ldrh	r3, [r2, r3]
 80046f6:	220f      	movs	r2, #15
 80046f8:	4013      	ands	r3, r2
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d001      	beq.n	8004704 <find_volume+0x2b8>
		return FR_NO_FILESYSTEM;
 8004700:	230d      	movs	r3, #13
 8004702:	e1aa      	b.n	8004a5a <find_volume+0x60e>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8004704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004706:	7d1b      	ldrb	r3, [r3, #20]
 8004708:	021b      	lsls	r3, r3, #8
 800470a:	b21a      	sxth	r2, r3
 800470c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800470e:	7cdb      	ldrb	r3, [r3, #19]
 8004710:	b21b      	sxth	r3, r3
 8004712:	4313      	orrs	r3, r2
 8004714:	b21b      	sxth	r3, r3
 8004716:	b29b      	uxth	r3, r3
 8004718:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800471a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800471c:	2b00      	cmp	r3, #0
 800471e:	d112      	bne.n	8004746 <find_volume+0x2fa>
 8004720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004722:	2223      	movs	r2, #35	; 0x23
 8004724:	5c9b      	ldrb	r3, [r3, r2]
 8004726:	061a      	lsls	r2, r3, #24
 8004728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800472a:	2122      	movs	r1, #34	; 0x22
 800472c:	5c5b      	ldrb	r3, [r3, r1]
 800472e:	041b      	lsls	r3, r3, #16
 8004730:	4313      	orrs	r3, r2
 8004732:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004734:	2121      	movs	r1, #33	; 0x21
 8004736:	5c52      	ldrb	r2, [r2, r1]
 8004738:	0212      	lsls	r2, r2, #8
 800473a:	4313      	orrs	r3, r2
 800473c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800473e:	2120      	movs	r1, #32
 8004740:	5c52      	ldrb	r2, [r2, r1]
 8004742:	4313      	orrs	r3, r2
 8004744:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8004746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004748:	7bdb      	ldrb	r3, [r3, #15]
 800474a:	021b      	lsls	r3, r3, #8
 800474c:	b21a      	sxth	r2, r3
 800474e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004750:	7b9b      	ldrb	r3, [r3, #14]
 8004752:	b21b      	sxth	r3, r3
 8004754:	4313      	orrs	r3, r2
 8004756:	b21a      	sxth	r2, r3
 8004758:	212e      	movs	r1, #46	; 0x2e
 800475a:	187b      	adds	r3, r7, r1
 800475c:	801a      	strh	r2, [r3, #0]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800475e:	187b      	adds	r3, r7, r1
 8004760:	881b      	ldrh	r3, [r3, #0]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d101      	bne.n	800476a <find_volume+0x31e>
 8004766:	230d      	movs	r3, #13
 8004768:	e177      	b.n	8004a5a <find_volume+0x60e>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800476a:	232e      	movs	r3, #46	; 0x2e
 800476c:	18fb      	adds	r3, r7, r3
 800476e:	881a      	ldrh	r2, [r3, #0]
 8004770:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004772:	18d3      	adds	r3, r2, r3
 8004774:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004776:	2282      	movs	r2, #130	; 0x82
 8004778:	0092      	lsls	r2, r2, #2
 800477a:	5a8a      	ldrh	r2, [r1, r2]
 800477c:	0912      	lsrs	r2, r2, #4
 800477e:	b292      	uxth	r2, r2
 8004780:	189b      	adds	r3, r3, r2
 8004782:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8004784:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004788:	429a      	cmp	r2, r3
 800478a:	d201      	bcs.n	8004790 <find_volume+0x344>
 800478c:	230d      	movs	r3, #13
 800478e:	e164      	b.n	8004a5a <find_volume+0x60e>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8004790:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004794:	1ad0      	subs	r0, r2, r3
 8004796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004798:	4a08      	ldr	r2, [pc, #32]	; (80047bc <find_volume+0x370>)
 800479a:	5c9b      	ldrb	r3, [r3, r2]
 800479c:	0019      	movs	r1, r3
 800479e:	f7fb fcbb 	bl	8000118 <__udivsi3>
 80047a2:	0003      	movs	r3, r0
 80047a4:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 80047a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d109      	bne.n	80047c0 <find_volume+0x374>
 80047ac:	230d      	movs	r3, #13
 80047ae:	e154      	b.n	8004a5a <find_volume+0x60e>
 80047b0:	200000a4 	.word	0x200000a4
 80047b4:	00000201 	.word	0x00000201
 80047b8:	00000203 	.word	0x00000203
 80047bc:	00000202 	.word	0x00000202
	fmt = FS_FAT12;
 80047c0:	2357      	movs	r3, #87	; 0x57
 80047c2:	18fb      	adds	r3, r7, r3
 80047c4:	2201      	movs	r2, #1
 80047c6:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 80047c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ca:	4aa6      	ldr	r2, [pc, #664]	; (8004a64 <find_volume+0x618>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d903      	bls.n	80047d8 <find_volume+0x38c>
 80047d0:	2357      	movs	r3, #87	; 0x57
 80047d2:	18fb      	adds	r3, r7, r3
 80047d4:	2202      	movs	r2, #2
 80047d6:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 80047d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047da:	4aa3      	ldr	r2, [pc, #652]	; (8004a68 <find_volume+0x61c>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d903      	bls.n	80047e8 <find_volume+0x39c>
 80047e0:	2357      	movs	r3, #87	; 0x57
 80047e2:	18fb      	adds	r3, r7, r3
 80047e4:	2203      	movs	r2, #3
 80047e6:	701a      	strb	r2, [r3, #0]

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 80047e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ea:	1c99      	adds	r1, r3, #2
 80047ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80047ee:	2385      	movs	r3, #133	; 0x85
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	50d1      	str	r1, [r2, r3]
	fs->volbase = bsect;								/* Volume start sector */
 80047f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80047f6:	2387      	movs	r3, #135	; 0x87
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80047fc:	50d1      	str	r1, [r2, r3]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 80047fe:	232e      	movs	r3, #46	; 0x2e
 8004800:	18fb      	adds	r3, r7, r3
 8004802:	881a      	ldrh	r2, [r3, #0]
 8004804:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004806:	18d1      	adds	r1, r2, r3
 8004808:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800480a:	2388      	movs	r3, #136	; 0x88
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	50d1      	str	r1, [r2, r3]
	fs->database = bsect + sysect;						/* Data start sector */
 8004810:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004814:	18d1      	adds	r1, r2, r3
 8004816:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004818:	238a      	movs	r3, #138	; 0x8a
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	50d1      	str	r1, [r2, r3]
	if (fmt == FS_FAT32) {
 800481e:	2357      	movs	r3, #87	; 0x57
 8004820:	18fb      	adds	r3, r7, r3
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	2b03      	cmp	r3, #3
 8004826:	d125      	bne.n	8004874 <find_volume+0x428>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8004828:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800482a:	2382      	movs	r3, #130	; 0x82
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	5ad3      	ldrh	r3, [r2, r3]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d001      	beq.n	8004838 <find_volume+0x3ec>
 8004834:	230d      	movs	r3, #13
 8004836:	e110      	b.n	8004a5a <find_volume+0x60e>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8004838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800483a:	222f      	movs	r2, #47	; 0x2f
 800483c:	5c9b      	ldrb	r3, [r3, r2]
 800483e:	061a      	lsls	r2, r3, #24
 8004840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004842:	212e      	movs	r1, #46	; 0x2e
 8004844:	5c5b      	ldrb	r3, [r3, r1]
 8004846:	041b      	lsls	r3, r3, #16
 8004848:	4313      	orrs	r3, r2
 800484a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800484c:	212d      	movs	r1, #45	; 0x2d
 800484e:	5c52      	ldrb	r2, [r2, r1]
 8004850:	0212      	lsls	r2, r2, #8
 8004852:	4313      	orrs	r3, r2
 8004854:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004856:	212c      	movs	r1, #44	; 0x2c
 8004858:	5c52      	ldrb	r2, [r2, r1]
 800485a:	4313      	orrs	r3, r2
 800485c:	0019      	movs	r1, r3
 800485e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004860:	2389      	movs	r3, #137	; 0x89
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	50d1      	str	r1, [r2, r3]
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8004866:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004868:	2385      	movs	r3, #133	; 0x85
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	58d3      	ldr	r3, [r2, r3]
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	647b      	str	r3, [r7, #68]	; 0x44
 8004872:	e02c      	b.n	80048ce <find_volume+0x482>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8004874:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004876:	2382      	movs	r3, #130	; 0x82
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	5ad3      	ldrh	r3, [r2, r3]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d101      	bne.n	8004884 <find_volume+0x438>
 8004880:	230d      	movs	r3, #13
 8004882:	e0ea      	b.n	8004a5a <find_volume+0x60e>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8004884:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004886:	2388      	movs	r3, #136	; 0x88
 8004888:	009b      	lsls	r3, r3, #2
 800488a:	58d2      	ldr	r2, [r2, r3]
 800488c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800488e:	18d1      	adds	r1, r2, r3
 8004890:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004892:	2389      	movs	r3, #137	; 0x89
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	50d1      	str	r1, [r2, r3]
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8004898:	2357      	movs	r3, #87	; 0x57
 800489a:	18fb      	adds	r3, r7, r3
 800489c:	781b      	ldrb	r3, [r3, #0]
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d105      	bne.n	80048ae <find_volume+0x462>
 80048a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80048a4:	2385      	movs	r3, #133	; 0x85
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	58d3      	ldr	r3, [r2, r3]
 80048aa:	005b      	lsls	r3, r3, #1
 80048ac:	e00e      	b.n	80048cc <find_volume+0x480>
 80048ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80048b0:	2385      	movs	r3, #133	; 0x85
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	58d2      	ldr	r2, [r2, r3]
 80048b6:	0013      	movs	r3, r2
 80048b8:	005b      	lsls	r3, r3, #1
 80048ba:	189b      	adds	r3, r3, r2
 80048bc:	085a      	lsrs	r2, r3, #1
 80048be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80048c0:	2385      	movs	r3, #133	; 0x85
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	58cb      	ldr	r3, [r1, r3]
 80048c6:	2101      	movs	r1, #1
 80048c8:	400b      	ands	r3, r1
 80048ca:	18d3      	adds	r3, r2, r3
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 80048cc:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 80048ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80048d0:	2386      	movs	r3, #134	; 0x86
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	58d2      	ldr	r2, [r2, r3]
 80048d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048d8:	4964      	ldr	r1, [pc, #400]	; (8004a6c <find_volume+0x620>)
 80048da:	468c      	mov	ip, r1
 80048dc:	4463      	add	r3, ip
 80048de:	0a5b      	lsrs	r3, r3, #9
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d201      	bcs.n	80048e8 <find_volume+0x49c>
		return FR_NO_FILESYSTEM;
 80048e4:	230d      	movs	r3, #13
 80048e6:	e0b8      	b.n	8004a5a <find_volume+0x60e>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 80048e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80048ea:	2384      	movs	r3, #132	; 0x84
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	2101      	movs	r1, #1
 80048f0:	4249      	negs	r1, r1
 80048f2:	50d1      	str	r1, [r2, r3]
 80048f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80048f6:	2384      	movs	r3, #132	; 0x84
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	58d1      	ldr	r1, [r2, r3]
 80048fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80048fe:	2383      	movs	r3, #131	; 0x83
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	50d1      	str	r1, [r2, r3]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8004904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004906:	4a5a      	ldr	r2, [pc, #360]	; (8004a70 <find_volume+0x624>)
 8004908:	2180      	movs	r1, #128	; 0x80
 800490a:	5499      	strb	r1, [r3, r2]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800490c:	2357      	movs	r3, #87	; 0x57
 800490e:	18fb      	adds	r3, r7, r3
 8004910:	781b      	ldrb	r3, [r3, #0]
 8004912:	2b03      	cmp	r3, #3
 8004914:	d000      	beq.n	8004918 <find_volume+0x4cc>
 8004916:	e089      	b.n	8004a2c <find_volume+0x5e0>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8004918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800491a:	2231      	movs	r2, #49	; 0x31
 800491c:	5c9b      	ldrb	r3, [r3, r2]
 800491e:	021b      	lsls	r3, r3, #8
 8004920:	b21a      	sxth	r2, r3
 8004922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004924:	2130      	movs	r1, #48	; 0x30
 8004926:	5c5b      	ldrb	r3, [r3, r1]
 8004928:	b21b      	sxth	r3, r3
 800492a:	4313      	orrs	r3, r2
 800492c:	b21b      	sxth	r3, r3
 800492e:	2b01      	cmp	r3, #1
 8004930:	d000      	beq.n	8004934 <find_volume+0x4e8>
 8004932:	e07b      	b.n	8004a2c <find_volume+0x5e0>
		&& move_window(fs, bsect + 1) == FR_OK)
 8004934:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004936:	1c5a      	adds	r2, r3, #1
 8004938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800493a:	0011      	movs	r1, r2
 800493c:	0018      	movs	r0, r3
 800493e:	f7fe fb9b 	bl	8003078 <move_window>
 8004942:	1e03      	subs	r3, r0, #0
 8004944:	d172      	bne.n	8004a2c <find_volume+0x5e0>
	{
		fs->fsi_flag = 0;
 8004946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004948:	4a49      	ldr	r2, [pc, #292]	; (8004a70 <find_volume+0x624>)
 800494a:	2100      	movs	r1, #0
 800494c:	5499      	strb	r1, [r3, r2]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800494e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004950:	4a46      	ldr	r2, [pc, #280]	; (8004a6c <find_volume+0x620>)
 8004952:	5c9b      	ldrb	r3, [r3, r2]
 8004954:	021b      	lsls	r3, r3, #8
 8004956:	b21a      	sxth	r2, r3
 8004958:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800495a:	23ff      	movs	r3, #255	; 0xff
 800495c:	005b      	lsls	r3, r3, #1
 800495e:	5ccb      	ldrb	r3, [r1, r3]
 8004960:	b21b      	sxth	r3, r3
 8004962:	4313      	orrs	r3, r2
 8004964:	b21b      	sxth	r3, r3
 8004966:	4a43      	ldr	r2, [pc, #268]	; (8004a74 <find_volume+0x628>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d15f      	bne.n	8004a2c <find_volume+0x5e0>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800496c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800496e:	78db      	ldrb	r3, [r3, #3]
 8004970:	061a      	lsls	r2, r3, #24
 8004972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004974:	789b      	ldrb	r3, [r3, #2]
 8004976:	041b      	lsls	r3, r3, #16
 8004978:	4313      	orrs	r3, r2
 800497a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800497c:	7852      	ldrb	r2, [r2, #1]
 800497e:	0212      	lsls	r2, r2, #8
 8004980:	4313      	orrs	r3, r2
 8004982:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004984:	7812      	ldrb	r2, [r2, #0]
 8004986:	4313      	orrs	r3, r2
 8004988:	4a3b      	ldr	r2, [pc, #236]	; (8004a78 <find_volume+0x62c>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d14e      	bne.n	8004a2c <find_volume+0x5e0>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800498e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004990:	23e8      	movs	r3, #232	; 0xe8
 8004992:	33ff      	adds	r3, #255	; 0xff
 8004994:	5cd3      	ldrb	r3, [r2, r3]
 8004996:	061a      	lsls	r2, r3, #24
 8004998:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800499a:	23f3      	movs	r3, #243	; 0xf3
 800499c:	005b      	lsls	r3, r3, #1
 800499e:	5ccb      	ldrb	r3, [r1, r3]
 80049a0:	041b      	lsls	r3, r3, #16
 80049a2:	4313      	orrs	r3, r2
 80049a4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80049a6:	22e6      	movs	r2, #230	; 0xe6
 80049a8:	32ff      	adds	r2, #255	; 0xff
 80049aa:	5c8a      	ldrb	r2, [r1, r2]
 80049ac:	0212      	lsls	r2, r2, #8
 80049ae:	4313      	orrs	r3, r2
 80049b0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80049b2:	22f2      	movs	r2, #242	; 0xf2
 80049b4:	0052      	lsls	r2, r2, #1
 80049b6:	5c8a      	ldrb	r2, [r1, r2]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	4a30      	ldr	r2, [pc, #192]	; (8004a7c <find_volume+0x630>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d135      	bne.n	8004a2c <find_volume+0x5e0>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 80049c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049c2:	23ec      	movs	r3, #236	; 0xec
 80049c4:	33ff      	adds	r3, #255	; 0xff
 80049c6:	5cd3      	ldrb	r3, [r2, r3]
 80049c8:	061a      	lsls	r2, r3, #24
 80049ca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80049cc:	23f5      	movs	r3, #245	; 0xf5
 80049ce:	005b      	lsls	r3, r3, #1
 80049d0:	5ccb      	ldrb	r3, [r1, r3]
 80049d2:	041b      	lsls	r3, r3, #16
 80049d4:	4313      	orrs	r3, r2
 80049d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80049d8:	22ea      	movs	r2, #234	; 0xea
 80049da:	32ff      	adds	r2, #255	; 0xff
 80049dc:	5c8a      	ldrb	r2, [r1, r2]
 80049de:	0212      	lsls	r2, r2, #8
 80049e0:	4313      	orrs	r3, r2
 80049e2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80049e4:	22f4      	movs	r2, #244	; 0xf4
 80049e6:	0052      	lsls	r2, r2, #1
 80049e8:	5c8a      	ldrb	r2, [r1, r2]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	0019      	movs	r1, r3
 80049ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049f0:	2384      	movs	r3, #132	; 0x84
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	50d1      	str	r1, [r2, r3]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 80049f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049f8:	23f0      	movs	r3, #240	; 0xf0
 80049fa:	33ff      	adds	r3, #255	; 0xff
 80049fc:	5cd3      	ldrb	r3, [r2, r3]
 80049fe:	061a      	lsls	r2, r3, #24
 8004a00:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004a02:	23f7      	movs	r3, #247	; 0xf7
 8004a04:	005b      	lsls	r3, r3, #1
 8004a06:	5ccb      	ldrb	r3, [r1, r3]
 8004a08:	041b      	lsls	r3, r3, #16
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004a0e:	22ee      	movs	r2, #238	; 0xee
 8004a10:	32ff      	adds	r2, #255	; 0xff
 8004a12:	5c8a      	ldrb	r2, [r1, r2]
 8004a14:	0212      	lsls	r2, r2, #8
 8004a16:	4313      	orrs	r3, r2
 8004a18:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004a1a:	22f6      	movs	r2, #246	; 0xf6
 8004a1c:	0052      	lsls	r2, r2, #1
 8004a1e:	5c8a      	ldrb	r2, [r1, r2]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	0019      	movs	r1, r3
 8004a24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a26:	2383      	movs	r3, #131	; 0x83
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	50d1      	str	r1, [r2, r3]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8004a2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a2e:	2357      	movs	r3, #87	; 0x57
 8004a30:	18f9      	adds	r1, r7, r3
 8004a32:	2380      	movs	r3, #128	; 0x80
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	7809      	ldrb	r1, [r1, #0]
 8004a38:	54d1      	strb	r1, [r2, r3]
	fs->id = ++Fsid;	/* File system mount ID */
 8004a3a:	4b11      	ldr	r3, [pc, #68]	; (8004a80 <find_volume+0x634>)
 8004a3c:	881b      	ldrh	r3, [r3, #0]
 8004a3e:	3301      	adds	r3, #1
 8004a40:	b29a      	uxth	r2, r3
 8004a42:	4b0f      	ldr	r3, [pc, #60]	; (8004a80 <find_volume+0x634>)
 8004a44:	801a      	strh	r2, [r3, #0]
 8004a46:	4b0e      	ldr	r3, [pc, #56]	; (8004a80 <find_volume+0x634>)
 8004a48:	8819      	ldrh	r1, [r3, #0]
 8004a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a4c:	4a0d      	ldr	r2, [pc, #52]	; (8004a84 <find_volume+0x638>)
 8004a4e:	5299      	strh	r1, [r3, r2]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8004a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a52:	0018      	movs	r0, r3
 8004a54:	f7fe fa92 	bl	8002f7c <clear_lock>
#endif

	return FR_OK;
 8004a58:	2300      	movs	r3, #0
}
 8004a5a:	0018      	movs	r0, r3
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	b016      	add	sp, #88	; 0x58
 8004a60:	bdb0      	pop	{r4, r5, r7, pc}
 8004a62:	46c0      	nop			; (mov r8, r8)
 8004a64:	00000ff5 	.word	0x00000ff5
 8004a68:	0000fff5 	.word	0x0000fff5
 8004a6c:	000001ff 	.word	0x000001ff
 8004a70:	00000205 	.word	0x00000205
 8004a74:	ffffaa55 	.word	0xffffaa55
 8004a78:	41615252 	.word	0x41615252
 8004a7c:	61417272 	.word	0x61417272
 8004a80:	200000a8 	.word	0x200000a8
 8004a84:	00000206 	.word	0x00000206

08004a88 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d028      	beq.n	8004aec <validate+0x64>
 8004a9a:	68fa      	ldr	r2, [r7, #12]
 8004a9c:	2380      	movs	r3, #128	; 0x80
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	58d3      	ldr	r3, [r2, r3]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d022      	beq.n	8004aec <validate+0x64>
 8004aa6:	68fa      	ldr	r2, [r7, #12]
 8004aa8:	2380      	movs	r3, #128	; 0x80
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	58d2      	ldr	r2, [r2, r3]
 8004aae:	2380      	movs	r3, #128	; 0x80
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	5cd3      	ldrb	r3, [r2, r3]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d019      	beq.n	8004aec <validate+0x64>
 8004ab8:	68fa      	ldr	r2, [r7, #12]
 8004aba:	2380      	movs	r3, #128	; 0x80
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	58d3      	ldr	r3, [r2, r3]
 8004ac0:	4a0e      	ldr	r2, [pc, #56]	; (8004afc <validate+0x74>)
 8004ac2:	5a9a      	ldrh	r2, [r3, r2]
 8004ac4:	68f9      	ldr	r1, [r7, #12]
 8004ac6:	2381      	movs	r3, #129	; 0x81
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	5acb      	ldrh	r3, [r1, r3]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d10d      	bne.n	8004aec <validate+0x64>
 8004ad0:	68fa      	ldr	r2, [r7, #12]
 8004ad2:	2380      	movs	r3, #128	; 0x80
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	58d3      	ldr	r3, [r2, r3]
 8004ad8:	4a09      	ldr	r2, [pc, #36]	; (8004b00 <validate+0x78>)
 8004ada:	5c9b      	ldrb	r3, [r3, r2]
 8004adc:	0018      	movs	r0, r3
 8004ade:	f7fd ff73 	bl	80029c8 <disk_status>
 8004ae2:	0003      	movs	r3, r0
 8004ae4:	001a      	movs	r2, r3
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	4013      	ands	r3, r2
 8004aea:	d001      	beq.n	8004af0 <validate+0x68>
		return FR_INVALID_OBJECT;
 8004aec:	2309      	movs	r3, #9
 8004aee:	e000      	b.n	8004af2 <validate+0x6a>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8004af0:	2300      	movs	r3, #0
}
 8004af2:	0018      	movs	r0, r3
 8004af4:	46bd      	mov	sp, r7
 8004af6:	b004      	add	sp, #16
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	46c0      	nop			; (mov r8, r8)
 8004afc:	00000206 	.word	0x00000206
 8004b00:	00000201 	.word	0x00000201

08004b04 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8004b04:	b5b0      	push	{r4, r5, r7, lr}
 8004b06:	b088      	sub	sp, #32
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	60b9      	str	r1, [r7, #8]
 8004b0e:	1dfb      	adds	r3, r7, #7
 8004b10:	701a      	strb	r2, [r3, #0]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8004b16:	2310      	movs	r3, #16
 8004b18:	18fb      	adds	r3, r7, r3
 8004b1a:	0018      	movs	r0, r3
 8004b1c:	f7ff fbe6 	bl	80042ec <get_ldnumber>
 8004b20:	0003      	movs	r3, r0
 8004b22:	61fb      	str	r3, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	da01      	bge.n	8004b2e <f_mount+0x2a>
 8004b2a:	230b      	movs	r3, #11
 8004b2c:	e034      	b.n	8004b98 <f_mount+0x94>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8004b2e:	4b1c      	ldr	r3, [pc, #112]	; (8004ba0 <f_mount+0x9c>)
 8004b30:	69fa      	ldr	r2, [r7, #28]
 8004b32:	0092      	lsls	r2, r2, #2
 8004b34:	58d3      	ldr	r3, [r2, r3]
 8004b36:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8004b38:	69bb      	ldr	r3, [r7, #24]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d008      	beq.n	8004b50 <f_mount+0x4c>
#if _FS_LOCK
		clear_lock(cfs);
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	0018      	movs	r0, r3
 8004b42:	f7fe fa1b 	bl	8002f7c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8004b46:	69ba      	ldr	r2, [r7, #24]
 8004b48:	2380      	movs	r3, #128	; 0x80
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	2100      	movs	r1, #0
 8004b4e:	54d1      	strb	r1, [r2, r3]
	}

	if (fs) {
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d004      	beq.n	8004b60 <f_mount+0x5c>
		fs->fs_type = 0;				/* Clear new fs object */
 8004b56:	68fa      	ldr	r2, [r7, #12]
 8004b58:	2380      	movs	r3, #128	; 0x80
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	2100      	movs	r1, #0
 8004b5e:	54d1      	strb	r1, [r2, r3]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8004b60:	68f9      	ldr	r1, [r7, #12]
 8004b62:	4b0f      	ldr	r3, [pc, #60]	; (8004ba0 <f_mount+0x9c>)
 8004b64:	69fa      	ldr	r2, [r7, #28]
 8004b66:	0092      	lsls	r2, r2, #2
 8004b68:	50d1      	str	r1, [r2, r3]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d003      	beq.n	8004b78 <f_mount+0x74>
 8004b70:	1dfb      	adds	r3, r7, #7
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d001      	beq.n	8004b7c <f_mount+0x78>
 8004b78:	2300      	movs	r3, #0
 8004b7a:	e00d      	b.n	8004b98 <f_mount+0x94>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8004b7c:	2517      	movs	r5, #23
 8004b7e:	197c      	adds	r4, r7, r5
 8004b80:	2308      	movs	r3, #8
 8004b82:	18f9      	adds	r1, r7, r3
 8004b84:	230c      	movs	r3, #12
 8004b86:	18fb      	adds	r3, r7, r3
 8004b88:	2200      	movs	r2, #0
 8004b8a:	0018      	movs	r0, r3
 8004b8c:	f7ff fc5e 	bl	800444c <find_volume>
 8004b90:	0003      	movs	r3, r0
 8004b92:	7023      	strb	r3, [r4, #0]
	LEAVE_FF(fs, res);
 8004b94:	197b      	adds	r3, r7, r5
 8004b96:	781b      	ldrb	r3, [r3, #0]
}
 8004b98:	0018      	movs	r0, r3
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	b008      	add	sp, #32
 8004b9e:	bdb0      	pop	{r4, r5, r7, pc}
 8004ba0:	200000a4 	.word	0x200000a4

08004ba4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8004ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ba6:	4ce1      	ldr	r4, [pc, #900]	; (8004f2c <f_open+0x388>)
 8004ba8:	44a5      	add	sp, r4
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	60f8      	str	r0, [r7, #12]
 8004bae:	60b9      	str	r1, [r7, #8]
 8004bb0:	4bdf      	ldr	r3, [pc, #892]	; (8004f30 <f_open+0x38c>)
 8004bb2:	2194      	movs	r1, #148	; 0x94
 8004bb4:	0089      	lsls	r1, r1, #2
 8004bb6:	468c      	mov	ip, r1
 8004bb8:	44bc      	add	ip, r7
 8004bba:	4463      	add	r3, ip
 8004bbc:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d101      	bne.n	8004bc8 <f_open+0x24>
 8004bc4:	2309      	movs	r3, #9
 8004bc6:	e294      	b.n	80050f2 <f_open+0x54e>
	fp->fs = 0;			/* Clear file object */
 8004bc8:	68fa      	ldr	r2, [r7, #12]
 8004bca:	2380      	movs	r3, #128	; 0x80
 8004bcc:	009b      	lsls	r3, r3, #2
 8004bce:	2100      	movs	r1, #0
 8004bd0:	50d1      	str	r1, [r2, r3]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8004bd2:	4bd7      	ldr	r3, [pc, #860]	; (8004f30 <f_open+0x38c>)
 8004bd4:	2294      	movs	r2, #148	; 0x94
 8004bd6:	0092      	lsls	r2, r2, #2
 8004bd8:	4694      	mov	ip, r2
 8004bda:	44bc      	add	ip, r7
 8004bdc:	4463      	add	r3, ip
 8004bde:	4ad4      	ldr	r2, [pc, #848]	; (8004f30 <f_open+0x38c>)
 8004be0:	2194      	movs	r1, #148	; 0x94
 8004be2:	0089      	lsls	r1, r1, #2
 8004be4:	468c      	mov	ip, r1
 8004be6:	44bc      	add	ip, r7
 8004be8:	4462      	add	r2, ip
 8004bea:	7812      	ldrb	r2, [r2, #0]
 8004bec:	211f      	movs	r1, #31
 8004bee:	400a      	ands	r2, r1
 8004bf0:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8004bf2:	4bcf      	ldr	r3, [pc, #828]	; (8004f30 <f_open+0x38c>)
 8004bf4:	2294      	movs	r2, #148	; 0x94
 8004bf6:	0092      	lsls	r2, r2, #2
 8004bf8:	4694      	mov	ip, r2
 8004bfa:	44bc      	add	ip, r7
 8004bfc:	4463      	add	r3, ip
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	2201      	movs	r2, #1
 8004c02:	4393      	bics	r3, r2
 8004c04:	b2da      	uxtb	r2, r3
 8004c06:	4dcb      	ldr	r5, [pc, #812]	; (8004f34 <f_open+0x390>)
 8004c08:	197c      	adds	r4, r7, r5
 8004c0a:	2308      	movs	r3, #8
 8004c0c:	18f9      	adds	r1, r7, r3
 8004c0e:	2320      	movs	r3, #32
 8004c10:	18fb      	adds	r3, r7, r3
 8004c12:	2080      	movs	r0, #128	; 0x80
 8004c14:	0080      	lsls	r0, r0, #2
 8004c16:	4684      	mov	ip, r0
 8004c18:	4463      	add	r3, ip
 8004c1a:	0018      	movs	r0, r3
 8004c1c:	f7ff fc16 	bl	800444c <find_volume>
 8004c20:	0003      	movs	r3, r0
 8004c22:	7023      	strb	r3, [r4, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8004c24:	197b      	adds	r3, r7, r5
 8004c26:	781b      	ldrb	r3, [r3, #0]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d000      	beq.n	8004c2e <f_open+0x8a>
 8004c2c:	e25e      	b.n	80050ec <f_open+0x548>
		INIT_BUF(dj);
 8004c2e:	4bc2      	ldr	r3, [pc, #776]	; (8004f38 <f_open+0x394>)
 8004c30:	2594      	movs	r5, #148	; 0x94
 8004c32:	00ad      	lsls	r5, r5, #2
 8004c34:	197a      	adds	r2, r7, r5
 8004c36:	18d2      	adds	r2, r2, r3
 8004c38:	2386      	movs	r3, #134	; 0x86
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	2114      	movs	r1, #20
 8004c3e:	1879      	adds	r1, r7, r1
 8004c40:	50d1      	str	r1, [r2, r3]
		res = follow_path(&dj, path);	/* Follow the file path */
 8004c42:	68ba      	ldr	r2, [r7, #8]
 8004c44:	4ebb      	ldr	r6, [pc, #748]	; (8004f34 <f_open+0x390>)
 8004c46:	19bc      	adds	r4, r7, r6
 8004c48:	2320      	movs	r3, #32
 8004c4a:	18fb      	adds	r3, r7, r3
 8004c4c:	0011      	movs	r1, r2
 8004c4e:	0018      	movs	r0, r3
 8004c50:	f7ff fac0 	bl	80041d4 <follow_path>
 8004c54:	0003      	movs	r3, r0
 8004c56:	7023      	strb	r3, [r4, #0]
		dir = dj.dir;
 8004c58:	4bb7      	ldr	r3, [pc, #732]	; (8004f38 <f_open+0x394>)
 8004c5a:	197a      	adds	r2, r7, r5
 8004c5c:	18d2      	adds	r2, r2, r3
 8004c5e:	2385      	movs	r3, #133	; 0x85
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	58d3      	ldr	r3, [r2, r3]
 8004c64:	2292      	movs	r2, #146	; 0x92
 8004c66:	0092      	lsls	r2, r2, #2
 8004c68:	18ba      	adds	r2, r7, r2
 8004c6a:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8004c6c:	19bb      	adds	r3, r7, r6
 8004c6e:	781b      	ldrb	r3, [r3, #0]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d121      	bne.n	8004cb8 <f_open+0x114>
			if (!dir)	/* Default directory itself */
 8004c74:	2392      	movs	r3, #146	; 0x92
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	18fb      	adds	r3, r7, r3
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d104      	bne.n	8004c8a <f_open+0xe6>
				res = FR_INVALID_NAME;
 8004c80:	4bac      	ldr	r3, [pc, #688]	; (8004f34 <f_open+0x390>)
 8004c82:	18fb      	adds	r3, r7, r3
 8004c84:	2206      	movs	r2, #6
 8004c86:	701a      	strb	r2, [r3, #0]
 8004c88:	e016      	b.n	8004cb8 <f_open+0x114>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8004c8a:	4ba9      	ldr	r3, [pc, #676]	; (8004f30 <f_open+0x38c>)
 8004c8c:	2294      	movs	r2, #148	; 0x94
 8004c8e:	0092      	lsls	r2, r2, #2
 8004c90:	4694      	mov	ip, r2
 8004c92:	44bc      	add	ip, r7
 8004c94:	4463      	add	r3, ip
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	4393      	bics	r3, r2
 8004c9c:	1e5a      	subs	r2, r3, #1
 8004c9e:	4193      	sbcs	r3, r2
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	001a      	movs	r2, r3
 8004ca4:	4ba3      	ldr	r3, [pc, #652]	; (8004f34 <f_open+0x390>)
 8004ca6:	18fc      	adds	r4, r7, r3
 8004ca8:	2320      	movs	r3, #32
 8004caa:	18fb      	adds	r3, r7, r3
 8004cac:	0011      	movs	r1, r2
 8004cae:	0018      	movs	r0, r3
 8004cb0:	f7fd ffc8 	bl	8002c44 <chk_lock>
 8004cb4:	0003      	movs	r3, r0
 8004cb6:	7023      	strb	r3, [r4, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8004cb8:	4b9d      	ldr	r3, [pc, #628]	; (8004f30 <f_open+0x38c>)
 8004cba:	2294      	movs	r2, #148	; 0x94
 8004cbc:	0092      	lsls	r2, r2, #2
 8004cbe:	4694      	mov	ip, r2
 8004cc0:	44bc      	add	ip, r7
 8004cc2:	4463      	add	r3, ip
 8004cc4:	781b      	ldrb	r3, [r3, #0]
 8004cc6:	221c      	movs	r2, #28
 8004cc8:	4013      	ands	r3, r2
 8004cca:	d100      	bne.n	8004cce <f_open+0x12a>
 8004ccc:	e119      	b.n	8004f02 <f_open+0x35e>
			if (res != FR_OK) {					/* No file, create new */
 8004cce:	4b99      	ldr	r3, [pc, #612]	; (8004f34 <f_open+0x390>)
 8004cd0:	18fb      	adds	r3, r7, r3
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d031      	beq.n	8004d3c <f_open+0x198>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8004cd8:	4b96      	ldr	r3, [pc, #600]	; (8004f34 <f_open+0x390>)
 8004cda:	18fb      	adds	r3, r7, r3
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	2b04      	cmp	r3, #4
 8004ce0:	d10f      	bne.n	8004d02 <f_open+0x15e>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8004ce2:	f7fe f81d 	bl	8002d20 <enq_lock>
 8004ce6:	1e03      	subs	r3, r0, #0
 8004ce8:	d007      	beq.n	8004cfa <f_open+0x156>
 8004cea:	2320      	movs	r3, #32
 8004cec:	18fb      	adds	r3, r7, r3
 8004cee:	0018      	movs	r0, r3
 8004cf0:	f7ff f921 	bl	8003f36 <dir_register>
 8004cf4:	0003      	movs	r3, r0
 8004cf6:	001a      	movs	r2, r3
 8004cf8:	e000      	b.n	8004cfc <f_open+0x158>
 8004cfa:	2212      	movs	r2, #18
 8004cfc:	4b8d      	ldr	r3, [pc, #564]	; (8004f34 <f_open+0x390>)
 8004cfe:	18fb      	adds	r3, r7, r3
 8004d00:	701a      	strb	r2, [r3, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8004d02:	4b8b      	ldr	r3, [pc, #556]	; (8004f30 <f_open+0x38c>)
 8004d04:	2294      	movs	r2, #148	; 0x94
 8004d06:	0092      	lsls	r2, r2, #2
 8004d08:	4694      	mov	ip, r2
 8004d0a:	44bc      	add	ip, r7
 8004d0c:	4463      	add	r3, ip
 8004d0e:	4a88      	ldr	r2, [pc, #544]	; (8004f30 <f_open+0x38c>)
 8004d10:	2194      	movs	r1, #148	; 0x94
 8004d12:	0089      	lsls	r1, r1, #2
 8004d14:	468c      	mov	ip, r1
 8004d16:	44bc      	add	ip, r7
 8004d18:	4462      	add	r2, ip
 8004d1a:	7812      	ldrb	r2, [r2, #0]
 8004d1c:	2108      	movs	r1, #8
 8004d1e:	430a      	orrs	r2, r1
 8004d20:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 8004d22:	4b85      	ldr	r3, [pc, #532]	; (8004f38 <f_open+0x394>)
 8004d24:	2294      	movs	r2, #148	; 0x94
 8004d26:	0092      	lsls	r2, r2, #2
 8004d28:	18ba      	adds	r2, r7, r2
 8004d2a:	18d2      	adds	r2, r2, r3
 8004d2c:	2385      	movs	r3, #133	; 0x85
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	58d3      	ldr	r3, [r2, r3]
 8004d32:	2292      	movs	r2, #146	; 0x92
 8004d34:	0092      	lsls	r2, r2, #2
 8004d36:	18ba      	adds	r2, r7, r2
 8004d38:	6013      	str	r3, [r2, #0]
 8004d3a:	e01c      	b.n	8004d76 <f_open+0x1d2>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8004d3c:	2392      	movs	r3, #146	; 0x92
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	18fb      	adds	r3, r7, r3
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	330b      	adds	r3, #11
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	001a      	movs	r2, r3
 8004d4a:	2311      	movs	r3, #17
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	d004      	beq.n	8004d5a <f_open+0x1b6>
					res = FR_DENIED;
 8004d50:	4b78      	ldr	r3, [pc, #480]	; (8004f34 <f_open+0x390>)
 8004d52:	18fb      	adds	r3, r7, r3
 8004d54:	2207      	movs	r2, #7
 8004d56:	701a      	strb	r2, [r3, #0]
 8004d58:	e00d      	b.n	8004d76 <f_open+0x1d2>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8004d5a:	4b75      	ldr	r3, [pc, #468]	; (8004f30 <f_open+0x38c>)
 8004d5c:	2294      	movs	r2, #148	; 0x94
 8004d5e:	0092      	lsls	r2, r2, #2
 8004d60:	4694      	mov	ip, r2
 8004d62:	44bc      	add	ip, r7
 8004d64:	4463      	add	r3, ip
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	2204      	movs	r2, #4
 8004d6a:	4013      	ands	r3, r2
 8004d6c:	d003      	beq.n	8004d76 <f_open+0x1d2>
						res = FR_EXIST;
 8004d6e:	4b71      	ldr	r3, [pc, #452]	; (8004f34 <f_open+0x390>)
 8004d70:	18fb      	adds	r3, r7, r3
 8004d72:	2208      	movs	r2, #8
 8004d74:	701a      	strb	r2, [r3, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8004d76:	4b6f      	ldr	r3, [pc, #444]	; (8004f34 <f_open+0x390>)
 8004d78:	18fb      	adds	r3, r7, r3
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d000      	beq.n	8004d82 <f_open+0x1de>
 8004d80:	e0f4      	b.n	8004f6c <f_open+0x3c8>
 8004d82:	4b6b      	ldr	r3, [pc, #428]	; (8004f30 <f_open+0x38c>)
 8004d84:	2294      	movs	r2, #148	; 0x94
 8004d86:	0092      	lsls	r2, r2, #2
 8004d88:	4694      	mov	ip, r2
 8004d8a:	44bc      	add	ip, r7
 8004d8c:	4463      	add	r3, ip
 8004d8e:	781b      	ldrb	r3, [r3, #0]
 8004d90:	2208      	movs	r2, #8
 8004d92:	4013      	ands	r3, r2
 8004d94:	d100      	bne.n	8004d98 <f_open+0x1f4>
 8004d96:	e0e9      	b.n	8004f6c <f_open+0x3c8>
				dw = GET_FATTIME();				/* Created time */
 8004d98:	f7fd fdcc 	bl	8002934 <get_fattime>
 8004d9c:	0003      	movs	r3, r0
 8004d9e:	2091      	movs	r0, #145	; 0x91
 8004da0:	0080      	lsls	r0, r0, #2
 8004da2:	183a      	adds	r2, r7, r0
 8004da4:	6013      	str	r3, [r2, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 8004da6:	2192      	movs	r1, #146	; 0x92
 8004da8:	0089      	lsls	r1, r1, #2
 8004daa:	187b      	adds	r3, r7, r1
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	330e      	adds	r3, #14
 8004db0:	183a      	adds	r2, r7, r0
 8004db2:	6812      	ldr	r2, [r2, #0]
 8004db4:	b2d2      	uxtb	r2, r2
 8004db6:	701a      	strb	r2, [r3, #0]
 8004db8:	183b      	adds	r3, r7, r0
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	0a1b      	lsrs	r3, r3, #8
 8004dc0:	b29a      	uxth	r2, r3
 8004dc2:	187b      	adds	r3, r7, r1
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	330f      	adds	r3, #15
 8004dc8:	b2d2      	uxtb	r2, r2
 8004dca:	701a      	strb	r2, [r3, #0]
 8004dcc:	183b      	adds	r3, r7, r0
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	0c1a      	lsrs	r2, r3, #16
 8004dd2:	187b      	adds	r3, r7, r1
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	3310      	adds	r3, #16
 8004dd8:	b2d2      	uxtb	r2, r2
 8004dda:	701a      	strb	r2, [r3, #0]
 8004ddc:	183b      	adds	r3, r7, r0
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	0e1a      	lsrs	r2, r3, #24
 8004de2:	187b      	adds	r3, r7, r1
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	3311      	adds	r3, #17
 8004de8:	b2d2      	uxtb	r2, r2
 8004dea:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8004dec:	187b      	adds	r3, r7, r1
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	330b      	adds	r3, #11
 8004df2:	2200      	movs	r2, #0
 8004df4:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8004df6:	187b      	adds	r3, r7, r1
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	331c      	adds	r3, #28
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	701a      	strb	r2, [r3, #0]
 8004e00:	187b      	adds	r3, r7, r1
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	331d      	adds	r3, #29
 8004e06:	2200      	movs	r2, #0
 8004e08:	701a      	strb	r2, [r3, #0]
 8004e0a:	187b      	adds	r3, r7, r1
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	331e      	adds	r3, #30
 8004e10:	2200      	movs	r2, #0
 8004e12:	701a      	strb	r2, [r3, #0]
 8004e14:	187b      	adds	r3, r7, r1
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	331f      	adds	r3, #31
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8004e1e:	4b46      	ldr	r3, [pc, #280]	; (8004f38 <f_open+0x394>)
 8004e20:	2594      	movs	r5, #148	; 0x94
 8004e22:	00ad      	lsls	r5, r5, #2
 8004e24:	197a      	adds	r2, r7, r5
 8004e26:	18d2      	adds	r2, r2, r3
 8004e28:	2380      	movs	r3, #128	; 0x80
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	58d3      	ldr	r3, [r2, r3]
 8004e2e:	000c      	movs	r4, r1
 8004e30:	187a      	adds	r2, r7, r1
 8004e32:	6812      	ldr	r2, [r2, #0]
 8004e34:	0011      	movs	r1, r2
 8004e36:	0018      	movs	r0, r3
 8004e38:	f7fe ffc6 	bl	8003dc8 <ld_clust>
 8004e3c:	0003      	movs	r3, r0
 8004e3e:	2690      	movs	r6, #144	; 0x90
 8004e40:	00b6      	lsls	r6, r6, #2
 8004e42:	19ba      	adds	r2, r7, r6
 8004e44:	6013      	str	r3, [r2, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 8004e46:	0021      	movs	r1, r4
 8004e48:	187b      	adds	r3, r7, r1
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	2100      	movs	r1, #0
 8004e4e:	0018      	movs	r0, r3
 8004e50:	f7fe ffe7 	bl	8003e22 <st_clust>
				dj.fs->wflag = 1;
 8004e54:	4b38      	ldr	r3, [pc, #224]	; (8004f38 <f_open+0x394>)
 8004e56:	197a      	adds	r2, r7, r5
 8004e58:	18d2      	adds	r2, r2, r3
 8004e5a:	2380      	movs	r3, #128	; 0x80
 8004e5c:	009b      	lsls	r3, r3, #2
 8004e5e:	58d2      	ldr	r2, [r2, r3]
 8004e60:	2381      	movs	r3, #129	; 0x81
 8004e62:	009b      	lsls	r3, r3, #2
 8004e64:	2101      	movs	r1, #1
 8004e66:	54d1      	strb	r1, [r2, r3]
				if (cl) {						/* Remove the cluster chain if exist */
 8004e68:	19bb      	adds	r3, r7, r6
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d100      	bne.n	8004e72 <f_open+0x2ce>
 8004e70:	e07c      	b.n	8004f6c <f_open+0x3c8>
					dw = dj.fs->winsect;
 8004e72:	4b31      	ldr	r3, [pc, #196]	; (8004f38 <f_open+0x394>)
 8004e74:	2194      	movs	r1, #148	; 0x94
 8004e76:	0089      	lsls	r1, r1, #2
 8004e78:	187a      	adds	r2, r7, r1
 8004e7a:	18d2      	adds	r2, r2, r3
 8004e7c:	2380      	movs	r3, #128	; 0x80
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	58d2      	ldr	r2, [r2, r3]
 8004e82:	238b      	movs	r3, #139	; 0x8b
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	58d3      	ldr	r3, [r2, r3]
 8004e88:	2291      	movs	r2, #145	; 0x91
 8004e8a:	0092      	lsls	r2, r2, #2
 8004e8c:	18ba      	adds	r2, r7, r2
 8004e8e:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 8004e90:	4b29      	ldr	r3, [pc, #164]	; (8004f38 <f_open+0x394>)
 8004e92:	187a      	adds	r2, r7, r1
 8004e94:	18d2      	adds	r2, r2, r3
 8004e96:	2380      	movs	r3, #128	; 0x80
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	58d3      	ldr	r3, [r2, r3]
 8004e9c:	4d25      	ldr	r5, [pc, #148]	; (8004f34 <f_open+0x390>)
 8004e9e:	197c      	adds	r4, r7, r5
 8004ea0:	2290      	movs	r2, #144	; 0x90
 8004ea2:	0092      	lsls	r2, r2, #2
 8004ea4:	18ba      	adds	r2, r7, r2
 8004ea6:	6812      	ldr	r2, [r2, #0]
 8004ea8:	0011      	movs	r1, r2
 8004eaa:	0018      	movs	r0, r3
 8004eac:	f7fe fc04 	bl	80036b8 <remove_chain>
 8004eb0:	0003      	movs	r3, r0
 8004eb2:	7023      	strb	r3, [r4, #0]
					if (res == FR_OK) {
 8004eb4:	197b      	adds	r3, r7, r5
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d157      	bne.n	8004f6c <f_open+0x3c8>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8004ebc:	4b1e      	ldr	r3, [pc, #120]	; (8004f38 <f_open+0x394>)
 8004ebe:	2094      	movs	r0, #148	; 0x94
 8004ec0:	0080      	lsls	r0, r0, #2
 8004ec2:	183a      	adds	r2, r7, r0
 8004ec4:	18d2      	adds	r2, r2, r3
 8004ec6:	2380      	movs	r3, #128	; 0x80
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	58d2      	ldr	r2, [r2, r3]
 8004ecc:	2390      	movs	r3, #144	; 0x90
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	18fb      	adds	r3, r7, r3
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	1e59      	subs	r1, r3, #1
 8004ed6:	2383      	movs	r3, #131	; 0x83
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	50d1      	str	r1, [r2, r3]
						res = move_window(dj.fs, dw);
 8004edc:	4b16      	ldr	r3, [pc, #88]	; (8004f38 <f_open+0x394>)
 8004ede:	183a      	adds	r2, r7, r0
 8004ee0:	18d2      	adds	r2, r2, r3
 8004ee2:	2380      	movs	r3, #128	; 0x80
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	58d3      	ldr	r3, [r2, r3]
 8004ee8:	4a12      	ldr	r2, [pc, #72]	; (8004f34 <f_open+0x390>)
 8004eea:	18bc      	adds	r4, r7, r2
 8004eec:	2291      	movs	r2, #145	; 0x91
 8004eee:	0092      	lsls	r2, r2, #2
 8004ef0:	18ba      	adds	r2, r7, r2
 8004ef2:	6812      	ldr	r2, [r2, #0]
 8004ef4:	0011      	movs	r1, r2
 8004ef6:	0018      	movs	r0, r3
 8004ef8:	f7fe f8be 	bl	8003078 <move_window>
 8004efc:	0003      	movs	r3, r0
 8004efe:	7023      	strb	r3, [r4, #0]
 8004f00:	e034      	b.n	8004f6c <f_open+0x3c8>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8004f02:	4b0c      	ldr	r3, [pc, #48]	; (8004f34 <f_open+0x390>)
 8004f04:	18fb      	adds	r3, r7, r3
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d12f      	bne.n	8004f6c <f_open+0x3c8>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8004f0c:	2392      	movs	r3, #146	; 0x92
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	18fb      	adds	r3, r7, r3
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	330b      	adds	r3, #11
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	001a      	movs	r2, r3
 8004f1a:	2310      	movs	r3, #16
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	d00d      	beq.n	8004f3c <f_open+0x398>
					res = FR_NO_FILE;
 8004f20:	4b04      	ldr	r3, [pc, #16]	; (8004f34 <f_open+0x390>)
 8004f22:	18fb      	adds	r3, r7, r3
 8004f24:	2204      	movs	r2, #4
 8004f26:	701a      	strb	r2, [r3, #0]
 8004f28:	e020      	b.n	8004f6c <f_open+0x3c8>
 8004f2a:	46c0      	nop			; (mov r8, r8)
 8004f2c:	fffffdac 	.word	0xfffffdac
 8004f30:	fffffdb7 	.word	0xfffffdb7
 8004f34:	0000024f 	.word	0x0000024f
 8004f38:	fffffdd0 	.word	0xfffffdd0
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8004f3c:	4b70      	ldr	r3, [pc, #448]	; (8005100 <f_open+0x55c>)
 8004f3e:	2294      	movs	r2, #148	; 0x94
 8004f40:	0092      	lsls	r2, r2, #2
 8004f42:	4694      	mov	ip, r2
 8004f44:	44bc      	add	ip, r7
 8004f46:	4463      	add	r3, ip
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	2202      	movs	r2, #2
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	d00d      	beq.n	8004f6c <f_open+0x3c8>
 8004f50:	2392      	movs	r3, #146	; 0x92
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	18fb      	adds	r3, r7, r3
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	330b      	adds	r3, #11
 8004f5a:	781b      	ldrb	r3, [r3, #0]
 8004f5c:	001a      	movs	r2, r3
 8004f5e:	2301      	movs	r3, #1
 8004f60:	4013      	ands	r3, r2
 8004f62:	d003      	beq.n	8004f6c <f_open+0x3c8>
						res = FR_DENIED;
 8004f64:	4b67      	ldr	r3, [pc, #412]	; (8005104 <f_open+0x560>)
 8004f66:	18fb      	adds	r3, r7, r3
 8004f68:	2207      	movs	r2, #7
 8004f6a:	701a      	strb	r2, [r3, #0]
				}
			}
		}
		if (res == FR_OK) {
 8004f6c:	4b65      	ldr	r3, [pc, #404]	; (8005104 <f_open+0x560>)
 8004f6e:	18fb      	adds	r3, r7, r3
 8004f70:	781b      	ldrb	r3, [r3, #0]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d152      	bne.n	800501c <f_open+0x478>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8004f76:	4b62      	ldr	r3, [pc, #392]	; (8005100 <f_open+0x55c>)
 8004f78:	2294      	movs	r2, #148	; 0x94
 8004f7a:	0092      	lsls	r2, r2, #2
 8004f7c:	4694      	mov	ip, r2
 8004f7e:	44bc      	add	ip, r7
 8004f80:	4463      	add	r3, ip
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	2208      	movs	r2, #8
 8004f86:	4013      	ands	r3, r2
 8004f88:	d00f      	beq.n	8004faa <f_open+0x406>
				mode |= FA__WRITTEN;
 8004f8a:	4b5d      	ldr	r3, [pc, #372]	; (8005100 <f_open+0x55c>)
 8004f8c:	2294      	movs	r2, #148	; 0x94
 8004f8e:	0092      	lsls	r2, r2, #2
 8004f90:	4694      	mov	ip, r2
 8004f92:	44bc      	add	ip, r7
 8004f94:	4463      	add	r3, ip
 8004f96:	4a5a      	ldr	r2, [pc, #360]	; (8005100 <f_open+0x55c>)
 8004f98:	2194      	movs	r1, #148	; 0x94
 8004f9a:	0089      	lsls	r1, r1, #2
 8004f9c:	468c      	mov	ip, r1
 8004f9e:	44bc      	add	ip, r7
 8004fa0:	4462      	add	r2, ip
 8004fa2:	7812      	ldrb	r2, [r2, #0]
 8004fa4:	2120      	movs	r1, #32
 8004fa6:	430a      	orrs	r2, r1
 8004fa8:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8004faa:	4b57      	ldr	r3, [pc, #348]	; (8005108 <f_open+0x564>)
 8004fac:	2294      	movs	r2, #148	; 0x94
 8004fae:	0092      	lsls	r2, r2, #2
 8004fb0:	18ba      	adds	r2, r7, r2
 8004fb2:	18d2      	adds	r2, r2, r3
 8004fb4:	2380      	movs	r3, #128	; 0x80
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	58d2      	ldr	r2, [r2, r3]
 8004fba:	238b      	movs	r3, #139	; 0x8b
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	58d1      	ldr	r1, [r2, r3]
 8004fc0:	68fa      	ldr	r2, [r7, #12]
 8004fc2:	2387      	movs	r3, #135	; 0x87
 8004fc4:	009b      	lsls	r3, r3, #2
 8004fc6:	50d1      	str	r1, [r2, r3]
			fp->dir_ptr = dir;
 8004fc8:	68fa      	ldr	r2, [r7, #12]
 8004fca:	2388      	movs	r3, #136	; 0x88
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	2192      	movs	r1, #146	; 0x92
 8004fd0:	0089      	lsls	r1, r1, #2
 8004fd2:	1879      	adds	r1, r7, r1
 8004fd4:	6809      	ldr	r1, [r1, #0]
 8004fd6:	50d1      	str	r1, [r2, r3]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8004fd8:	4b49      	ldr	r3, [pc, #292]	; (8005100 <f_open+0x55c>)
 8004fda:	2294      	movs	r2, #148	; 0x94
 8004fdc:	0092      	lsls	r2, r2, #2
 8004fde:	4694      	mov	ip, r2
 8004fe0:	44bc      	add	ip, r7
 8004fe2:	4463      	add	r3, ip
 8004fe4:	781b      	ldrb	r3, [r3, #0]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	4393      	bics	r3, r2
 8004fea:	1e5a      	subs	r2, r3, #1
 8004fec:	4193      	sbcs	r3, r2
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	001a      	movs	r2, r3
 8004ff2:	2320      	movs	r3, #32
 8004ff4:	18fb      	adds	r3, r7, r3
 8004ff6:	0011      	movs	r1, r2
 8004ff8:	0018      	movs	r0, r3
 8004ffa:	f7fd feb1 	bl	8002d60 <inc_lock>
 8004ffe:	0001      	movs	r1, r0
 8005000:	68fa      	ldr	r2, [r7, #12]
 8005002:	238a      	movs	r3, #138	; 0x8a
 8005004:	009b      	lsls	r3, r3, #2
 8005006:	50d1      	str	r1, [r2, r3]
			if (!fp->lockid) res = FR_INT_ERR;
 8005008:	68fa      	ldr	r2, [r7, #12]
 800500a:	238a      	movs	r3, #138	; 0x8a
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	58d3      	ldr	r3, [r2, r3]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d103      	bne.n	800501c <f_open+0x478>
 8005014:	4b3b      	ldr	r3, [pc, #236]	; (8005104 <f_open+0x560>)
 8005016:	18fb      	adds	r3, r7, r3
 8005018:	2202      	movs	r2, #2
 800501a:	701a      	strb	r2, [r3, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 800501c:	4b39      	ldr	r3, [pc, #228]	; (8005104 <f_open+0x560>)
 800501e:	18fb      	adds	r3, r7, r3
 8005020:	781b      	ldrb	r3, [r3, #0]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d162      	bne.n	80050ec <f_open+0x548>
			fp->flag = mode;					/* File access mode */
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	4a35      	ldr	r2, [pc, #212]	; (8005100 <f_open+0x55c>)
 800502a:	2194      	movs	r1, #148	; 0x94
 800502c:	0089      	lsls	r1, r1, #2
 800502e:	468c      	mov	ip, r1
 8005030:	44bc      	add	ip, r7
 8005032:	4462      	add	r2, ip
 8005034:	4935      	ldr	r1, [pc, #212]	; (800510c <f_open+0x568>)
 8005036:	7812      	ldrb	r2, [r2, #0]
 8005038:	545a      	strb	r2, [r3, r1]
			fp->err = 0;						/* Clear error flag */
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	4a34      	ldr	r2, [pc, #208]	; (8005110 <f_open+0x56c>)
 800503e:	2100      	movs	r1, #0
 8005040:	5499      	strb	r1, [r3, r2]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8005042:	4b31      	ldr	r3, [pc, #196]	; (8005108 <f_open+0x564>)
 8005044:	2594      	movs	r5, #148	; 0x94
 8005046:	00ad      	lsls	r5, r5, #2
 8005048:	197a      	adds	r2, r7, r5
 800504a:	18d2      	adds	r2, r2, r3
 800504c:	2380      	movs	r3, #128	; 0x80
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	58d3      	ldr	r3, [r2, r3]
 8005052:	2192      	movs	r1, #146	; 0x92
 8005054:	0089      	lsls	r1, r1, #2
 8005056:	000c      	movs	r4, r1
 8005058:	187a      	adds	r2, r7, r1
 800505a:	6812      	ldr	r2, [r2, #0]
 800505c:	0011      	movs	r1, r2
 800505e:	0018      	movs	r0, r3
 8005060:	f7fe feb2 	bl	8003dc8 <ld_clust>
 8005064:	0001      	movs	r1, r0
 8005066:	68fa      	ldr	r2, [r7, #12]
 8005068:	2384      	movs	r3, #132	; 0x84
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	50d1      	str	r1, [r2, r3]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800506e:	0021      	movs	r1, r4
 8005070:	187b      	adds	r3, r7, r1
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	331f      	adds	r3, #31
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	061a      	lsls	r2, r3, #24
 800507a:	187b      	adds	r3, r7, r1
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	331e      	adds	r3, #30
 8005080:	781b      	ldrb	r3, [r3, #0]
 8005082:	041b      	lsls	r3, r3, #16
 8005084:	4313      	orrs	r3, r2
 8005086:	187a      	adds	r2, r7, r1
 8005088:	6812      	ldr	r2, [r2, #0]
 800508a:	321d      	adds	r2, #29
 800508c:	7812      	ldrb	r2, [r2, #0]
 800508e:	0212      	lsls	r2, r2, #8
 8005090:	4313      	orrs	r3, r2
 8005092:	187a      	adds	r2, r7, r1
 8005094:	6812      	ldr	r2, [r2, #0]
 8005096:	321c      	adds	r2, #28
 8005098:	7812      	ldrb	r2, [r2, #0]
 800509a:	4313      	orrs	r3, r2
 800509c:	0019      	movs	r1, r3
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	2383      	movs	r3, #131	; 0x83
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	50d1      	str	r1, [r2, r3]
			fp->fptr = 0;						/* File pointer */
 80050a6:	68fa      	ldr	r2, [r7, #12]
 80050a8:	2382      	movs	r3, #130	; 0x82
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	2100      	movs	r1, #0
 80050ae:	50d1      	str	r1, [r2, r3]
			fp->dsect = 0;
 80050b0:	68fa      	ldr	r2, [r7, #12]
 80050b2:	2386      	movs	r3, #134	; 0x86
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	2100      	movs	r1, #0
 80050b8:	50d1      	str	r1, [r2, r3]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 80050ba:	68fa      	ldr	r2, [r7, #12]
 80050bc:	2389      	movs	r3, #137	; 0x89
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	2100      	movs	r1, #0
 80050c2:	50d1      	str	r1, [r2, r3]
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 80050c4:	4b10      	ldr	r3, [pc, #64]	; (8005108 <f_open+0x564>)
 80050c6:	197a      	adds	r2, r7, r5
 80050c8:	18d2      	adds	r2, r2, r3
 80050ca:	2380      	movs	r3, #128	; 0x80
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	58d1      	ldr	r1, [r2, r3]
 80050d0:	68fa      	ldr	r2, [r7, #12]
 80050d2:	2380      	movs	r3, #128	; 0x80
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	50d1      	str	r1, [r2, r3]
			fp->id = fp->fs->id;
 80050d8:	68fa      	ldr	r2, [r7, #12]
 80050da:	2380      	movs	r3, #128	; 0x80
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	58d3      	ldr	r3, [r2, r3]
 80050e0:	4a0a      	ldr	r2, [pc, #40]	; (800510c <f_open+0x568>)
 80050e2:	5a99      	ldrh	r1, [r3, r2]
 80050e4:	68fa      	ldr	r2, [r7, #12]
 80050e6:	2381      	movs	r3, #129	; 0x81
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	52d1      	strh	r1, [r2, r3]
		}
	}

	LEAVE_FF(dj.fs, res);
 80050ec:	4b05      	ldr	r3, [pc, #20]	; (8005104 <f_open+0x560>)
 80050ee:	18fb      	adds	r3, r7, r3
 80050f0:	781b      	ldrb	r3, [r3, #0]
}
 80050f2:	0018      	movs	r0, r3
 80050f4:	46bd      	mov	sp, r7
 80050f6:	2395      	movs	r3, #149	; 0x95
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	449d      	add	sp, r3
 80050fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050fe:	46c0      	nop			; (mov r8, r8)
 8005100:	fffffdb7 	.word	0xfffffdb7
 8005104:	0000024f 	.word	0x0000024f
 8005108:	fffffdd0 	.word	0xfffffdd0
 800510c:	00000206 	.word	0x00000206
 8005110:	00000207 	.word	0x00000207

08005114 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8005114:	b5b0      	push	{r4, r5, r7, lr}
 8005116:	b08a      	sub	sp, #40	; 0x28
 8005118:	af00      	add	r7, sp, #0
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	607a      	str	r2, [r7, #4]
 8005120:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	2200      	movs	r2, #0
 800512a:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 800512c:	2517      	movs	r5, #23
 800512e:	197c      	adds	r4, r7, r5
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	0018      	movs	r0, r3
 8005134:	f7ff fca8 	bl	8004a88 <validate>
 8005138:	0003      	movs	r3, r0
 800513a:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800513c:	197b      	adds	r3, r7, r5
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d003      	beq.n	800514c <f_write+0x38>
 8005144:	2317      	movs	r3, #23
 8005146:	18fb      	adds	r3, r7, r3
 8005148:	781b      	ldrb	r3, [r3, #0]
 800514a:	e1c8      	b.n	80054de <f_write+0x3ca>
	if (fp->err)							/* Check error */
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	4ad1      	ldr	r2, [pc, #836]	; (8005494 <f_write+0x380>)
 8005150:	5c9b      	ldrb	r3, [r3, r2]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d003      	beq.n	800515e <f_write+0x4a>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	4ace      	ldr	r2, [pc, #824]	; (8005494 <f_write+0x380>)
 800515a:	5c9b      	ldrb	r3, [r3, r2]
 800515c:	e1bf      	b.n	80054de <f_write+0x3ca>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	4acd      	ldr	r2, [pc, #820]	; (8005498 <f_write+0x384>)
 8005162:	5c9b      	ldrb	r3, [r3, r2]
 8005164:	001a      	movs	r2, r3
 8005166:	2302      	movs	r3, #2
 8005168:	4013      	ands	r3, r2
 800516a:	d101      	bne.n	8005170 <f_write+0x5c>
		LEAVE_FF(fp->fs, FR_DENIED);
 800516c:	2307      	movs	r3, #7
 800516e:	e1b6      	b.n	80054de <f_write+0x3ca>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8005170:	68fa      	ldr	r2, [r7, #12]
 8005172:	2382      	movs	r3, #130	; 0x82
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	58d2      	ldr	r2, [r2, r3]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	18d2      	adds	r2, r2, r3
 800517c:	68f9      	ldr	r1, [r7, #12]
 800517e:	2382      	movs	r3, #130	; 0x82
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	58cb      	ldr	r3, [r1, r3]
 8005184:	429a      	cmp	r2, r3
 8005186:	d300      	bcc.n	800518a <f_write+0x76>
 8005188:	e17e      	b.n	8005488 <f_write+0x374>
 800518a:	2300      	movs	r3, #0
 800518c:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 800518e:	e17b      	b.n	8005488 <f_write+0x374>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8005190:	68fa      	ldr	r2, [r7, #12]
 8005192:	2382      	movs	r3, #130	; 0x82
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	58d3      	ldr	r3, [r2, r3]
 8005198:	05db      	lsls	r3, r3, #23
 800519a:	0ddb      	lsrs	r3, r3, #23
 800519c:	d000      	beq.n	80051a0 <f_write+0x8c>
 800519e:	e135      	b.n	800540c <f_write+0x2f8>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 80051a0:	68fa      	ldr	r2, [r7, #12]
 80051a2:	2382      	movs	r3, #130	; 0x82
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	58d3      	ldr	r3, [r2, r3]
 80051a8:	0a5b      	lsrs	r3, r3, #9
 80051aa:	b2da      	uxtb	r2, r3
 80051ac:	68f9      	ldr	r1, [r7, #12]
 80051ae:	2380      	movs	r3, #128	; 0x80
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	58cb      	ldr	r3, [r1, r3]
 80051b4:	49b9      	ldr	r1, [pc, #740]	; (800549c <f_write+0x388>)
 80051b6:	5c5b      	ldrb	r3, [r3, r1]
 80051b8:	3b01      	subs	r3, #1
 80051ba:	b2d9      	uxtb	r1, r3
 80051bc:	2016      	movs	r0, #22
 80051be:	183b      	adds	r3, r7, r0
 80051c0:	400a      	ands	r2, r1
 80051c2:	701a      	strb	r2, [r3, #0]
			if (!csect) {					/* On the cluster boundary? */
 80051c4:	183b      	adds	r3, r7, r0
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d15d      	bne.n	8005288 <f_write+0x174>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80051cc:	68fa      	ldr	r2, [r7, #12]
 80051ce:	2382      	movs	r3, #130	; 0x82
 80051d0:	009b      	lsls	r3, r3, #2
 80051d2:	58d3      	ldr	r3, [r2, r3]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d112      	bne.n	80051fe <f_write+0xea>
					clst = fp->sclust;		/* Follow from the origin */
 80051d8:	68fa      	ldr	r2, [r7, #12]
 80051da:	2384      	movs	r3, #132	; 0x84
 80051dc:	009b      	lsls	r3, r3, #2
 80051de:	58d3      	ldr	r3, [r2, r3]
 80051e0:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 80051e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d129      	bne.n	800523c <f_write+0x128>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 80051e8:	68fa      	ldr	r2, [r7, #12]
 80051ea:	2380      	movs	r3, #128	; 0x80
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	58d3      	ldr	r3, [r2, r3]
 80051f0:	2100      	movs	r1, #0
 80051f2:	0018      	movs	r0, r3
 80051f4:	f7fe fad0 	bl	8003798 <create_chain>
 80051f8:	0003      	movs	r3, r0
 80051fa:	627b      	str	r3, [r7, #36]	; 0x24
 80051fc:	e01e      	b.n	800523c <f_write+0x128>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 80051fe:	68fa      	ldr	r2, [r7, #12]
 8005200:	2389      	movs	r3, #137	; 0x89
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	58d3      	ldr	r3, [r2, r3]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d00b      	beq.n	8005222 <f_write+0x10e>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800520a:	68fa      	ldr	r2, [r7, #12]
 800520c:	2382      	movs	r3, #130	; 0x82
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	58d2      	ldr	r2, [r2, r3]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	0011      	movs	r1, r2
 8005216:	0018      	movs	r0, r3
 8005218:	f7fe fb74 	bl	8003904 <clmt_clust>
 800521c:	0003      	movs	r3, r0
 800521e:	627b      	str	r3, [r7, #36]	; 0x24
 8005220:	e00c      	b.n	800523c <f_write+0x128>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8005222:	68fa      	ldr	r2, [r7, #12]
 8005224:	2380      	movs	r3, #128	; 0x80
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	58d0      	ldr	r0, [r2, r3]
 800522a:	68fa      	ldr	r2, [r7, #12]
 800522c:	2385      	movs	r3, #133	; 0x85
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	58d3      	ldr	r3, [r2, r3]
 8005232:	0019      	movs	r1, r3
 8005234:	f7fe fab0 	bl	8003798 <create_chain>
 8005238:	0003      	movs	r3, r0
 800523a:	627b      	str	r3, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800523c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523e:	2b00      	cmp	r3, #0
 8005240:	d100      	bne.n	8005244 <f_write+0x130>
 8005242:	e12f      	b.n	80054a4 <f_write+0x390>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8005244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005246:	2b01      	cmp	r3, #1
 8005248:	d105      	bne.n	8005256 <f_write+0x142>
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	4a91      	ldr	r2, [pc, #580]	; (8005494 <f_write+0x380>)
 800524e:	2102      	movs	r1, #2
 8005250:	5499      	strb	r1, [r3, r2]
 8005252:	2302      	movs	r3, #2
 8005254:	e143      	b.n	80054de <f_write+0x3ca>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8005256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005258:	3301      	adds	r3, #1
 800525a:	d105      	bne.n	8005268 <f_write+0x154>
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	4a8d      	ldr	r2, [pc, #564]	; (8005494 <f_write+0x380>)
 8005260:	2101      	movs	r1, #1
 8005262:	5499      	strb	r1, [r3, r2]
 8005264:	2301      	movs	r3, #1
 8005266:	e13a      	b.n	80054de <f_write+0x3ca>
				fp->clust = clst;			/* Update current cluster */
 8005268:	68fa      	ldr	r2, [r7, #12]
 800526a:	2385      	movs	r3, #133	; 0x85
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005270:	50d1      	str	r1, [r2, r3]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8005272:	68fa      	ldr	r2, [r7, #12]
 8005274:	2384      	movs	r3, #132	; 0x84
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	58d3      	ldr	r3, [r2, r3]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d104      	bne.n	8005288 <f_write+0x174>
 800527e:	68fa      	ldr	r2, [r7, #12]
 8005280:	2384      	movs	r3, #132	; 0x84
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005286:	50d1      	str	r1, [r2, r3]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	4a83      	ldr	r2, [pc, #524]	; (8005498 <f_write+0x384>)
 800528c:	5c9b      	ldrb	r3, [r3, r2]
 800528e:	001a      	movs	r2, r3
 8005290:	2340      	movs	r3, #64	; 0x40
 8005292:	4013      	ands	r3, r2
 8005294:	d01e      	beq.n	80052d4 <f_write+0x1c0>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8005296:	68fa      	ldr	r2, [r7, #12]
 8005298:	2380      	movs	r3, #128	; 0x80
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	58d3      	ldr	r3, [r2, r3]
 800529e:	4a80      	ldr	r2, [pc, #512]	; (80054a0 <f_write+0x38c>)
 80052a0:	5c98      	ldrb	r0, [r3, r2]
 80052a2:	68f9      	ldr	r1, [r7, #12]
 80052a4:	68fa      	ldr	r2, [r7, #12]
 80052a6:	2386      	movs	r3, #134	; 0x86
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	58d2      	ldr	r2, [r2, r3]
 80052ac:	2301      	movs	r3, #1
 80052ae:	f7fd fc07 	bl	8002ac0 <disk_write>
 80052b2:	1e03      	subs	r3, r0, #0
 80052b4:	d005      	beq.n	80052c2 <f_write+0x1ae>
					ABORT(fp->fs, FR_DISK_ERR);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	4a76      	ldr	r2, [pc, #472]	; (8005494 <f_write+0x380>)
 80052ba:	2101      	movs	r1, #1
 80052bc:	5499      	strb	r1, [r3, r2]
 80052be:	2301      	movs	r3, #1
 80052c0:	e10d      	b.n	80054de <f_write+0x3ca>
				fp->flag &= ~FA__DIRTY;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	4a74      	ldr	r2, [pc, #464]	; (8005498 <f_write+0x384>)
 80052c6:	5c9b      	ldrb	r3, [r3, r2]
 80052c8:	2240      	movs	r2, #64	; 0x40
 80052ca:	4393      	bics	r3, r2
 80052cc:	b2d9      	uxtb	r1, r3
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	4a71      	ldr	r2, [pc, #452]	; (8005498 <f_write+0x384>)
 80052d2:	5499      	strb	r1, [r3, r2]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 80052d4:	68fa      	ldr	r2, [r7, #12]
 80052d6:	2380      	movs	r3, #128	; 0x80
 80052d8:	009b      	lsls	r3, r3, #2
 80052da:	58d0      	ldr	r0, [r2, r3]
 80052dc:	68fa      	ldr	r2, [r7, #12]
 80052de:	2385      	movs	r3, #133	; 0x85
 80052e0:	009b      	lsls	r3, r3, #2
 80052e2:	58d3      	ldr	r3, [r2, r3]
 80052e4:	0019      	movs	r1, r3
 80052e6:	f7fd ffd7 	bl	8003298 <clust2sect>
 80052ea:	0003      	movs	r3, r0
 80052ec:	613b      	str	r3, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d105      	bne.n	8005300 <f_write+0x1ec>
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	4a67      	ldr	r2, [pc, #412]	; (8005494 <f_write+0x380>)
 80052f8:	2102      	movs	r1, #2
 80052fa:	5499      	strb	r1, [r3, r2]
 80052fc:	2302      	movs	r3, #2
 80052fe:	e0ee      	b.n	80054de <f_write+0x3ca>
			sect += csect;
 8005300:	2316      	movs	r3, #22
 8005302:	18fb      	adds	r3, r7, r3
 8005304:	781b      	ldrb	r3, [r3, #0]
 8005306:	693a      	ldr	r2, [r7, #16]
 8005308:	18d3      	adds	r3, r2, r3
 800530a:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	0a5b      	lsrs	r3, r3, #9
 8005310:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d050      	beq.n	80053ba <f_write+0x2a6>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8005318:	2316      	movs	r3, #22
 800531a:	18fb      	adds	r3, r7, r3
 800531c:	781a      	ldrb	r2, [r3, #0]
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	18d3      	adds	r3, r2, r3
 8005322:	68f9      	ldr	r1, [r7, #12]
 8005324:	2280      	movs	r2, #128	; 0x80
 8005326:	0092      	lsls	r2, r2, #2
 8005328:	588a      	ldr	r2, [r1, r2]
 800532a:	495c      	ldr	r1, [pc, #368]	; (800549c <f_write+0x388>)
 800532c:	5c52      	ldrb	r2, [r2, r1]
 800532e:	4293      	cmp	r3, r2
 8005330:	d90b      	bls.n	800534a <f_write+0x236>
					cc = fp->fs->csize - csect;
 8005332:	68fa      	ldr	r2, [r7, #12]
 8005334:	2380      	movs	r3, #128	; 0x80
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	58d3      	ldr	r3, [r2, r3]
 800533a:	4a58      	ldr	r2, [pc, #352]	; (800549c <f_write+0x388>)
 800533c:	5c9b      	ldrb	r3, [r3, r2]
 800533e:	001a      	movs	r2, r3
 8005340:	2316      	movs	r3, #22
 8005342:	18fb      	adds	r3, r7, r3
 8005344:	781b      	ldrb	r3, [r3, #0]
 8005346:	1ad3      	subs	r3, r2, r3
 8005348:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800534a:	68fa      	ldr	r2, [r7, #12]
 800534c:	2380      	movs	r3, #128	; 0x80
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	58d3      	ldr	r3, [r2, r3]
 8005352:	4a53      	ldr	r2, [pc, #332]	; (80054a0 <f_write+0x38c>)
 8005354:	5c98      	ldrb	r0, [r3, r2]
 8005356:	69fb      	ldr	r3, [r7, #28]
 8005358:	693a      	ldr	r2, [r7, #16]
 800535a:	69b9      	ldr	r1, [r7, #24]
 800535c:	f7fd fbb0 	bl	8002ac0 <disk_write>
 8005360:	1e03      	subs	r3, r0, #0
 8005362:	d005      	beq.n	8005370 <f_write+0x25c>
					ABORT(fp->fs, FR_DISK_ERR);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	4a4b      	ldr	r2, [pc, #300]	; (8005494 <f_write+0x380>)
 8005368:	2101      	movs	r1, #1
 800536a:	5499      	strb	r1, [r3, r2]
 800536c:	2301      	movs	r3, #1
 800536e:	e0b6      	b.n	80054de <f_write+0x3ca>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8005370:	68fa      	ldr	r2, [r7, #12]
 8005372:	2386      	movs	r3, #134	; 0x86
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	58d2      	ldr	r2, [r2, r3]
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	1ad3      	subs	r3, r2, r3
 800537c:	69fa      	ldr	r2, [r7, #28]
 800537e:	429a      	cmp	r2, r3
 8005380:	d917      	bls.n	80053b2 <f_write+0x29e>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8005382:	68f8      	ldr	r0, [r7, #12]
 8005384:	68fa      	ldr	r2, [r7, #12]
 8005386:	2386      	movs	r3, #134	; 0x86
 8005388:	009b      	lsls	r3, r3, #2
 800538a:	58d2      	ldr	r2, [r2, r3]
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	1ad3      	subs	r3, r2, r3
 8005390:	025b      	lsls	r3, r3, #9
 8005392:	69ba      	ldr	r2, [r7, #24]
 8005394:	18d1      	adds	r1, r2, r3
 8005396:	2380      	movs	r3, #128	; 0x80
 8005398:	009b      	lsls	r3, r3, #2
 800539a:	001a      	movs	r2, r3
 800539c:	f7fd fbe0 	bl	8002b60 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	4a3d      	ldr	r2, [pc, #244]	; (8005498 <f_write+0x384>)
 80053a4:	5c9b      	ldrb	r3, [r3, r2]
 80053a6:	2240      	movs	r2, #64	; 0x40
 80053a8:	4393      	bics	r3, r2
 80053aa:	b2d9      	uxtb	r1, r3
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	4a3a      	ldr	r2, [pc, #232]	; (8005498 <f_write+0x384>)
 80053b0:	5499      	strb	r1, [r3, r2]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 80053b2:	69fb      	ldr	r3, [r7, #28]
 80053b4:	025b      	lsls	r3, r3, #9
 80053b6:	623b      	str	r3, [r7, #32]
				continue;
 80053b8:	e04e      	b.n	8005458 <f_write+0x344>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 80053ba:	68fa      	ldr	r2, [r7, #12]
 80053bc:	2386      	movs	r3, #134	; 0x86
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	58d3      	ldr	r3, [r2, r3]
 80053c2:	693a      	ldr	r2, [r7, #16]
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d01c      	beq.n	8005402 <f_write+0x2ee>
				if (fp->fptr < fp->fsize &&
 80053c8:	68fa      	ldr	r2, [r7, #12]
 80053ca:	2382      	movs	r3, #130	; 0x82
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	58d2      	ldr	r2, [r2, r3]
 80053d0:	68f9      	ldr	r1, [r7, #12]
 80053d2:	2383      	movs	r3, #131	; 0x83
 80053d4:	009b      	lsls	r3, r3, #2
 80053d6:	58cb      	ldr	r3, [r1, r3]
 80053d8:	429a      	cmp	r2, r3
 80053da:	d212      	bcs.n	8005402 <f_write+0x2ee>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 80053dc:	68fa      	ldr	r2, [r7, #12]
 80053de:	2380      	movs	r3, #128	; 0x80
 80053e0:	009b      	lsls	r3, r3, #2
 80053e2:	58d3      	ldr	r3, [r2, r3]
 80053e4:	4a2e      	ldr	r2, [pc, #184]	; (80054a0 <f_write+0x38c>)
 80053e6:	5c98      	ldrb	r0, [r3, r2]
 80053e8:	68f9      	ldr	r1, [r7, #12]
 80053ea:	693a      	ldr	r2, [r7, #16]
 80053ec:	2301      	movs	r3, #1
 80053ee:	f7fd fb3f 	bl	8002a70 <disk_read>
 80053f2:	1e03      	subs	r3, r0, #0
				if (fp->fptr < fp->fsize &&
 80053f4:	d005      	beq.n	8005402 <f_write+0x2ee>
						ABORT(fp->fs, FR_DISK_ERR);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	4a26      	ldr	r2, [pc, #152]	; (8005494 <f_write+0x380>)
 80053fa:	2101      	movs	r1, #1
 80053fc:	5499      	strb	r1, [r3, r2]
 80053fe:	2301      	movs	r3, #1
 8005400:	e06d      	b.n	80054de <f_write+0x3ca>
			}
#endif
			fp->dsect = sect;
 8005402:	68fa      	ldr	r2, [r7, #12]
 8005404:	2386      	movs	r3, #134	; 0x86
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	6939      	ldr	r1, [r7, #16]
 800540a:	50d1      	str	r1, [r2, r3]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 800540c:	68fa      	ldr	r2, [r7, #12]
 800540e:	2382      	movs	r3, #130	; 0x82
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	58d3      	ldr	r3, [r2, r3]
 8005414:	05db      	lsls	r3, r3, #23
 8005416:	0ddb      	lsrs	r3, r3, #23
 8005418:	2280      	movs	r2, #128	; 0x80
 800541a:	0092      	lsls	r2, r2, #2
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 8005420:	6a3a      	ldr	r2, [r7, #32]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	429a      	cmp	r2, r3
 8005426:	d901      	bls.n	800542c <f_write+0x318>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800542c:	68fa      	ldr	r2, [r7, #12]
 800542e:	2382      	movs	r3, #130	; 0x82
 8005430:	009b      	lsls	r3, r3, #2
 8005432:	58d3      	ldr	r3, [r2, r3]
 8005434:	05db      	lsls	r3, r3, #23
 8005436:	0ddb      	lsrs	r3, r3, #23
 8005438:	68fa      	ldr	r2, [r7, #12]
 800543a:	18d3      	adds	r3, r2, r3
 800543c:	6a3a      	ldr	r2, [r7, #32]
 800543e:	69b9      	ldr	r1, [r7, #24]
 8005440:	0018      	movs	r0, r3
 8005442:	f7fd fb8d 	bl	8002b60 <mem_cpy>
		fp->flag |= FA__DIRTY;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	4a13      	ldr	r2, [pc, #76]	; (8005498 <f_write+0x384>)
 800544a:	5c9b      	ldrb	r3, [r3, r2]
 800544c:	2240      	movs	r2, #64	; 0x40
 800544e:	4313      	orrs	r3, r2
 8005450:	b2d9      	uxtb	r1, r3
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	4a10      	ldr	r2, [pc, #64]	; (8005498 <f_write+0x384>)
 8005456:	5499      	strb	r1, [r3, r2]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8005458:	69ba      	ldr	r2, [r7, #24]
 800545a:	6a3b      	ldr	r3, [r7, #32]
 800545c:	18d3      	adds	r3, r2, r3
 800545e:	61bb      	str	r3, [r7, #24]
 8005460:	68fa      	ldr	r2, [r7, #12]
 8005462:	2382      	movs	r3, #130	; 0x82
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	58d2      	ldr	r2, [r2, r3]
 8005468:	6a3b      	ldr	r3, [r7, #32]
 800546a:	18d1      	adds	r1, r2, r3
 800546c:	68fa      	ldr	r2, [r7, #12]
 800546e:	2382      	movs	r3, #130	; 0x82
 8005470:	009b      	lsls	r3, r3, #2
 8005472:	50d1      	str	r1, [r2, r3]
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	6a3b      	ldr	r3, [r7, #32]
 800547a:	18d2      	adds	r2, r2, r3
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	601a      	str	r2, [r3, #0]
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	6a3b      	ldr	r3, [r7, #32]
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d000      	beq.n	8005490 <f_write+0x37c>
 800548e:	e67f      	b.n	8005190 <f_write+0x7c>
 8005490:	e009      	b.n	80054a6 <f_write+0x392>
 8005492:	46c0      	nop			; (mov r8, r8)
 8005494:	00000207 	.word	0x00000207
 8005498:	00000206 	.word	0x00000206
 800549c:	00000202 	.word	0x00000202
 80054a0:	00000201 	.word	0x00000201
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80054a4:	46c0      	nop			; (mov r8, r8)
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 80054a6:	68fa      	ldr	r2, [r7, #12]
 80054a8:	2382      	movs	r3, #130	; 0x82
 80054aa:	009b      	lsls	r3, r3, #2
 80054ac:	58d2      	ldr	r2, [r2, r3]
 80054ae:	68f9      	ldr	r1, [r7, #12]
 80054b0:	2383      	movs	r3, #131	; 0x83
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	58cb      	ldr	r3, [r1, r3]
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d907      	bls.n	80054ca <f_write+0x3b6>
 80054ba:	68fa      	ldr	r2, [r7, #12]
 80054bc:	2382      	movs	r3, #130	; 0x82
 80054be:	009b      	lsls	r3, r3, #2
 80054c0:	58d1      	ldr	r1, [r2, r3]
 80054c2:	68fa      	ldr	r2, [r7, #12]
 80054c4:	2383      	movs	r3, #131	; 0x83
 80054c6:	009b      	lsls	r3, r3, #2
 80054c8:	50d1      	str	r1, [r2, r3]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	4a06      	ldr	r2, [pc, #24]	; (80054e8 <f_write+0x3d4>)
 80054ce:	5c9b      	ldrb	r3, [r3, r2]
 80054d0:	2220      	movs	r2, #32
 80054d2:	4313      	orrs	r3, r2
 80054d4:	b2d9      	uxtb	r1, r3
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	4a03      	ldr	r2, [pc, #12]	; (80054e8 <f_write+0x3d4>)
 80054da:	5499      	strb	r1, [r3, r2]

	LEAVE_FF(fp->fs, FR_OK);
 80054dc:	2300      	movs	r3, #0
}
 80054de:	0018      	movs	r0, r3
 80054e0:	46bd      	mov	sp, r7
 80054e2:	b00a      	add	sp, #40	; 0x28
 80054e4:	bdb0      	pop	{r4, r5, r7, pc}
 80054e6:	46c0      	nop			; (mov r8, r8)
 80054e8:	00000206 	.word	0x00000206

080054ec <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80054ec:	b5b0      	push	{r4, r5, r7, lr}
 80054ee:	b086      	sub	sp, #24
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 80054f4:	2517      	movs	r5, #23
 80054f6:	197c      	adds	r4, r7, r5
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	0018      	movs	r0, r3
 80054fc:	f7ff fac4 	bl	8004a88 <validate>
 8005500:	0003      	movs	r3, r0
 8005502:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8005504:	197b      	adds	r3, r7, r5
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d000      	beq.n	800550e <f_sync+0x22>
 800550c:	e0b9      	b.n	8005682 <f_sync+0x196>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	4a5f      	ldr	r2, [pc, #380]	; (8005690 <f_sync+0x1a4>)
 8005512:	5c9b      	ldrb	r3, [r3, r2]
 8005514:	001a      	movs	r2, r3
 8005516:	2320      	movs	r3, #32
 8005518:	4013      	ands	r3, r2
 800551a:	d100      	bne.n	800551e <f_sync+0x32>
 800551c:	e0b1      	b.n	8005682 <f_sync+0x196>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4a5b      	ldr	r2, [pc, #364]	; (8005690 <f_sync+0x1a4>)
 8005522:	5c9b      	ldrb	r3, [r3, r2]
 8005524:	001a      	movs	r2, r3
 8005526:	2340      	movs	r3, #64	; 0x40
 8005528:	4013      	ands	r3, r2
 800552a:	d01a      	beq.n	8005562 <f_sync+0x76>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	2380      	movs	r3, #128	; 0x80
 8005530:	009b      	lsls	r3, r3, #2
 8005532:	58d3      	ldr	r3, [r2, r3]
 8005534:	4a57      	ldr	r2, [pc, #348]	; (8005694 <f_sync+0x1a8>)
 8005536:	5c98      	ldrb	r0, [r3, r2]
 8005538:	6879      	ldr	r1, [r7, #4]
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	2386      	movs	r3, #134	; 0x86
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	58d2      	ldr	r2, [r2, r3]
 8005542:	2301      	movs	r3, #1
 8005544:	f7fd fabc 	bl	8002ac0 <disk_write>
 8005548:	1e03      	subs	r3, r0, #0
 800554a:	d001      	beq.n	8005550 <f_sync+0x64>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 800554c:	2301      	movs	r3, #1
 800554e:	e09b      	b.n	8005688 <f_sync+0x19c>
				fp->flag &= ~FA__DIRTY;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	4a4f      	ldr	r2, [pc, #316]	; (8005690 <f_sync+0x1a4>)
 8005554:	5c9b      	ldrb	r3, [r3, r2]
 8005556:	2240      	movs	r2, #64	; 0x40
 8005558:	4393      	bics	r3, r2
 800555a:	b2d9      	uxtb	r1, r3
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4a4c      	ldr	r2, [pc, #304]	; (8005690 <f_sync+0x1a4>)
 8005560:	5499      	strb	r1, [r3, r2]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	2380      	movs	r3, #128	; 0x80
 8005566:	009b      	lsls	r3, r3, #2
 8005568:	58d0      	ldr	r0, [r2, r3]
 800556a:	687a      	ldr	r2, [r7, #4]
 800556c:	2387      	movs	r3, #135	; 0x87
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	58d3      	ldr	r3, [r2, r3]
 8005572:	2517      	movs	r5, #23
 8005574:	197c      	adds	r4, r7, r5
 8005576:	0019      	movs	r1, r3
 8005578:	f7fd fd7e 	bl	8003078 <move_window>
 800557c:	0003      	movs	r3, r0
 800557e:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK) {
 8005580:	197b      	adds	r3, r7, r5
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d17c      	bne.n	8005682 <f_sync+0x196>
				dir = fp->dir_ptr;
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	2388      	movs	r3, #136	; 0x88
 800558c:	009b      	lsls	r3, r3, #2
 800558e:	58d3      	ldr	r3, [r2, r3]
 8005590:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	330b      	adds	r3, #11
 8005596:	781a      	ldrb	r2, [r3, #0]
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	330b      	adds	r3, #11
 800559c:	2120      	movs	r1, #32
 800559e:	430a      	orrs	r2, r1
 80055a0:	b2d2      	uxtb	r2, r2
 80055a2:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	2383      	movs	r3, #131	; 0x83
 80055a8:	009b      	lsls	r3, r3, #2
 80055aa:	58d2      	ldr	r2, [r2, r3]
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	331c      	adds	r3, #28
 80055b0:	b2d2      	uxtb	r2, r2
 80055b2:	701a      	strb	r2, [r3, #0]
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	2383      	movs	r3, #131	; 0x83
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	58d3      	ldr	r3, [r2, r3]
 80055bc:	b29b      	uxth	r3, r3
 80055be:	0a1b      	lsrs	r3, r3, #8
 80055c0:	b29a      	uxth	r2, r3
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	331d      	adds	r3, #29
 80055c6:	b2d2      	uxtb	r2, r2
 80055c8:	701a      	strb	r2, [r3, #0]
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	2383      	movs	r3, #131	; 0x83
 80055ce:	009b      	lsls	r3, r3, #2
 80055d0:	58d3      	ldr	r3, [r2, r3]
 80055d2:	0c1a      	lsrs	r2, r3, #16
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	331e      	adds	r3, #30
 80055d8:	b2d2      	uxtb	r2, r2
 80055da:	701a      	strb	r2, [r3, #0]
 80055dc:	687a      	ldr	r2, [r7, #4]
 80055de:	2383      	movs	r3, #131	; 0x83
 80055e0:	009b      	lsls	r3, r3, #2
 80055e2:	58d3      	ldr	r3, [r2, r3]
 80055e4:	0e1a      	lsrs	r2, r3, #24
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	331f      	adds	r3, #31
 80055ea:	b2d2      	uxtb	r2, r2
 80055ec:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 80055ee:	687a      	ldr	r2, [r7, #4]
 80055f0:	2384      	movs	r3, #132	; 0x84
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	58d2      	ldr	r2, [r2, r3]
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	0011      	movs	r1, r2
 80055fa:	0018      	movs	r0, r3
 80055fc:	f7fe fc11 	bl	8003e22 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8005600:	f7fd f998 	bl	8002934 <get_fattime>
 8005604:	0003      	movs	r3, r0
 8005606:	60fb      	str	r3, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	3316      	adds	r3, #22
 800560c:	68fa      	ldr	r2, [r7, #12]
 800560e:	b2d2      	uxtb	r2, r2
 8005610:	701a      	strb	r2, [r3, #0]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	b29b      	uxth	r3, r3
 8005616:	0a1b      	lsrs	r3, r3, #8
 8005618:	b29a      	uxth	r2, r3
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	3317      	adds	r3, #23
 800561e:	b2d2      	uxtb	r2, r2
 8005620:	701a      	strb	r2, [r3, #0]
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	0c1a      	lsrs	r2, r3, #16
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	3318      	adds	r3, #24
 800562a:	b2d2      	uxtb	r2, r2
 800562c:	701a      	strb	r2, [r3, #0]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	0e1a      	lsrs	r2, r3, #24
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	3319      	adds	r3, #25
 8005636:	b2d2      	uxtb	r2, r2
 8005638:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	3312      	adds	r3, #18
 800563e:	2200      	movs	r2, #0
 8005640:	701a      	strb	r2, [r3, #0]
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	3313      	adds	r3, #19
 8005646:	2200      	movs	r2, #0
 8005648:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4a10      	ldr	r2, [pc, #64]	; (8005690 <f_sync+0x1a4>)
 800564e:	5c9b      	ldrb	r3, [r3, r2]
 8005650:	2220      	movs	r2, #32
 8005652:	4393      	bics	r3, r2
 8005654:	b2d9      	uxtb	r1, r3
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	4a0d      	ldr	r2, [pc, #52]	; (8005690 <f_sync+0x1a4>)
 800565a:	5499      	strb	r1, [r3, r2]
				fp->fs->wflag = 1;
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	2380      	movs	r3, #128	; 0x80
 8005660:	009b      	lsls	r3, r3, #2
 8005662:	58d2      	ldr	r2, [r2, r3]
 8005664:	2381      	movs	r3, #129	; 0x81
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	2101      	movs	r1, #1
 800566a:	54d1      	strb	r1, [r2, r3]
				res = sync_fs(fp->fs);
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	2380      	movs	r3, #128	; 0x80
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	58d3      	ldr	r3, [r2, r3]
 8005674:	2217      	movs	r2, #23
 8005676:	18bc      	adds	r4, r7, r2
 8005678:	0018      	movs	r0, r3
 800567a:	f7fd fd39 	bl	80030f0 <sync_fs>
 800567e:	0003      	movs	r3, r0
 8005680:	7023      	strb	r3, [r4, #0]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8005682:	2317      	movs	r3, #23
 8005684:	18fb      	adds	r3, r7, r3
 8005686:	781b      	ldrb	r3, [r3, #0]
}
 8005688:	0018      	movs	r0, r3
 800568a:	46bd      	mov	sp, r7
 800568c:	b006      	add	sp, #24
 800568e:	bdb0      	pop	{r4, r5, r7, pc}
 8005690:	00000206 	.word	0x00000206
 8005694:	00000201 	.word	0x00000201

08005698 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8005698:	b5b0      	push	{r4, r5, r7, lr}
 800569a:	b084      	sub	sp, #16
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80056a0:	250f      	movs	r5, #15
 80056a2:	197c      	adds	r4, r7, r5
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	0018      	movs	r0, r3
 80056a8:	f7ff ff20 	bl	80054ec <f_sync>
 80056ac:	0003      	movs	r3, r0
 80056ae:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK)
 80056b0:	197b      	adds	r3, r7, r5
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d11f      	bne.n	80056f8 <f_close+0x60>
#endif
	{
		res = validate(fp);				/* Lock volume */
 80056b8:	250f      	movs	r5, #15
 80056ba:	197c      	adds	r4, r7, r5
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	0018      	movs	r0, r3
 80056c0:	f7ff f9e2 	bl	8004a88 <validate>
 80056c4:	0003      	movs	r3, r0
 80056c6:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 80056c8:	197b      	adds	r3, r7, r5
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d113      	bne.n	80056f8 <f_close+0x60>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 80056d0:	687a      	ldr	r2, [r7, #4]
 80056d2:	238a      	movs	r3, #138	; 0x8a
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	58d3      	ldr	r3, [r2, r3]
 80056d8:	250f      	movs	r5, #15
 80056da:	197c      	adds	r4, r7, r5
 80056dc:	0018      	movs	r0, r3
 80056de:	f7fd fbf7 	bl	8002ed0 <dec_lock>
 80056e2:	0003      	movs	r3, r0
 80056e4:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK)
 80056e6:	197b      	adds	r3, r7, r5
 80056e8:	781b      	ldrb	r3, [r3, #0]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d104      	bne.n	80056f8 <f_close+0x60>
#endif
				fp->fs = 0;				/* Invalidate file object */
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	2380      	movs	r3, #128	; 0x80
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	2100      	movs	r1, #0
 80056f6:	50d1      	str	r1, [r2, r3]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80056f8:	230f      	movs	r3, #15
 80056fa:	18fb      	adds	r3, r7, r3
 80056fc:	781b      	ldrb	r3, [r3, #0]
}
 80056fe:	0018      	movs	r0, r3
 8005700:	46bd      	mov	sp, r7
 8005702:	b004      	add	sp, #16
 8005704:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005708 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 8005708:	b5b0      	push	{r4, r5, r7, lr}
 800570a:	b090      	sub	sp, #64	; 0x40
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 8005712:	253f      	movs	r5, #63	; 0x3f
 8005714:	197c      	adds	r4, r7, r5
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	0018      	movs	r0, r3
 800571a:	f7ff f9b5 	bl	8004a88 <validate>
 800571e:	0003      	movs	r3, r0
 8005720:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8005722:	197b      	adds	r3, r7, r5
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d003      	beq.n	8005732 <f_lseek+0x2a>
 800572a:	233f      	movs	r3, #63	; 0x3f
 800572c:	18fb      	adds	r3, r7, r3
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	e28b      	b.n	8005c4a <f_lseek+0x542>
	if (fp->err)						/* Check error */
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4ad9      	ldr	r2, [pc, #868]	; (8005a9c <f_lseek+0x394>)
 8005736:	5c9b      	ldrb	r3, [r3, r2]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d003      	beq.n	8005744 <f_lseek+0x3c>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	4ad7      	ldr	r2, [pc, #860]	; (8005a9c <f_lseek+0x394>)
 8005740:	5c9b      	ldrb	r3, [r3, r2]
 8005742:	e282      	b.n	8005c4a <f_lseek+0x542>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8005744:	687a      	ldr	r2, [r7, #4]
 8005746:	2389      	movs	r3, #137	; 0x89
 8005748:	009b      	lsls	r3, r3, #2
 800574a:	58d3      	ldr	r3, [r2, r3]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d100      	bne.n	8005752 <f_lseek+0x4a>
 8005750:	e103      	b.n	800595a <f_lseek+0x252>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	3301      	adds	r3, #1
 8005756:	d16c      	bne.n	8005832 <f_lseek+0x12a>
			tbl = fp->cltbl;
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	2389      	movs	r3, #137	; 0x89
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	58d3      	ldr	r3, [r2, r3]
 8005760:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8005762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005764:	1d1a      	adds	r2, r3, #4
 8005766:	627a      	str	r2, [r7, #36]	; 0x24
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	617b      	str	r3, [r7, #20]
 800576c:	2302      	movs	r3, #2
 800576e:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->sclust;			/* Top of the chain */
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	2384      	movs	r3, #132	; 0x84
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	58d3      	ldr	r3, [r2, r3]
 8005778:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800577a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800577c:	2b00      	cmp	r3, #0
 800577e:	d045      	beq.n	800580c <f_lseek+0x104>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8005780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005782:	613b      	str	r3, [r7, #16]
 8005784:	2300      	movs	r3, #0
 8005786:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800578a:	3302      	adds	r3, #2
 800578c:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800578e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005790:	60fb      	str	r3, [r7, #12]
 8005792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005794:	3301      	adds	r3, #1
 8005796:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(fp->fs, cl);
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	2380      	movs	r3, #128	; 0x80
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	58d3      	ldr	r3, [r2, r3]
 80057a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057a2:	0011      	movs	r1, r2
 80057a4:	0018      	movs	r0, r3
 80057a6:	f7fd fd9b 	bl	80032e0 <get_fat>
 80057aa:	0003      	movs	r3, r0
 80057ac:	633b      	str	r3, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 80057ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d805      	bhi.n	80057c0 <f_lseek+0xb8>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	4ab9      	ldr	r2, [pc, #740]	; (8005a9c <f_lseek+0x394>)
 80057b8:	2102      	movs	r1, #2
 80057ba:	5499      	strb	r1, [r3, r2]
 80057bc:	2302      	movs	r3, #2
 80057be:	e244      	b.n	8005c4a <f_lseek+0x542>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80057c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c2:	3301      	adds	r3, #1
 80057c4:	d105      	bne.n	80057d2 <f_lseek+0xca>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	4ab4      	ldr	r2, [pc, #720]	; (8005a9c <f_lseek+0x394>)
 80057ca:	2101      	movs	r1, #1
 80057cc:	5499      	strb	r1, [r3, r2]
 80057ce:	2301      	movs	r3, #1
 80057d0:	e23b      	b.n	8005c4a <f_lseek+0x542>
					} while (cl == pcl + 1);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	3301      	adds	r3, #1
 80057d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057d8:	429a      	cmp	r2, r3
 80057da:	d0d8      	beq.n	800578e <f_lseek+0x86>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80057dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d809      	bhi.n	80057f8 <f_lseek+0xf0>
						*tbl++ = ncl; *tbl++ = tcl;
 80057e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e6:	1d1a      	adds	r2, r3, #4
 80057e8:	627a      	str	r2, [r7, #36]	; 0x24
 80057ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057ec:	601a      	str	r2, [r3, #0]
 80057ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f0:	1d1a      	adds	r2, r3, #4
 80057f2:	627a      	str	r2, [r7, #36]	; 0x24
 80057f4:	693a      	ldr	r2, [r7, #16]
 80057f6:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	2380      	movs	r3, #128	; 0x80
 80057fc:	009b      	lsls	r3, r3, #2
 80057fe:	58d2      	ldr	r2, [r2, r3]
 8005800:	2385      	movs	r3, #133	; 0x85
 8005802:	009b      	lsls	r3, r3, #2
 8005804:	58d3      	ldr	r3, [r2, r3]
 8005806:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005808:	429a      	cmp	r2, r3
 800580a:	d3b9      	bcc.n	8005780 <f_lseek+0x78>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800580c:	687a      	ldr	r2, [r7, #4]
 800580e:	2389      	movs	r3, #137	; 0x89
 8005810:	009b      	lsls	r3, r3, #2
 8005812:	58d3      	ldr	r3, [r2, r3]
 8005814:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005816:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 8005818:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	429a      	cmp	r2, r3
 800581e:	d803      	bhi.n	8005828 <f_lseek+0x120>
				*tbl = 0;		/* Terminate table */
 8005820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005822:	2200      	movs	r2, #0
 8005824:	601a      	str	r2, [r3, #0]
 8005826:	e20d      	b.n	8005c44 <f_lseek+0x53c>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8005828:	233f      	movs	r3, #63	; 0x3f
 800582a:	18fb      	adds	r3, r7, r3
 800582c:	2211      	movs	r2, #17
 800582e:	701a      	strb	r2, [r3, #0]
 8005830:	e208      	b.n	8005c44 <f_lseek+0x53c>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	2383      	movs	r3, #131	; 0x83
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	58d3      	ldr	r3, [r2, r3]
 800583a:	683a      	ldr	r2, [r7, #0]
 800583c:	429a      	cmp	r2, r3
 800583e:	d904      	bls.n	800584a <f_lseek+0x142>
				ofs = fp->fsize;
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	2383      	movs	r3, #131	; 0x83
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	58d3      	ldr	r3, [r2, r3]
 8005848:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800584a:	687a      	ldr	r2, [r7, #4]
 800584c:	2382      	movs	r3, #130	; 0x82
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	6839      	ldr	r1, [r7, #0]
 8005852:	50d1      	str	r1, [r2, r3]
			if (ofs) {
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d100      	bne.n	800585c <f_lseek+0x154>
 800585a:	e1f3      	b.n	8005c44 <f_lseek+0x53c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	1e5a      	subs	r2, r3, #1
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	0011      	movs	r1, r2
 8005864:	0018      	movs	r0, r3
 8005866:	f7fe f84d 	bl	8003904 <clmt_clust>
 800586a:	0001      	movs	r1, r0
 800586c:	687a      	ldr	r2, [r7, #4]
 800586e:	2385      	movs	r3, #133	; 0x85
 8005870:	009b      	lsls	r3, r3, #2
 8005872:	50d1      	str	r1, [r2, r3]
				dsc = clust2sect(fp->fs, fp->clust);
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	2380      	movs	r3, #128	; 0x80
 8005878:	009b      	lsls	r3, r3, #2
 800587a:	58d0      	ldr	r0, [r2, r3]
 800587c:	687a      	ldr	r2, [r7, #4]
 800587e:	2385      	movs	r3, #133	; 0x85
 8005880:	009b      	lsls	r3, r3, #2
 8005882:	58d3      	ldr	r3, [r2, r3]
 8005884:	0019      	movs	r1, r3
 8005886:	f7fd fd07 	bl	8003298 <clust2sect>
 800588a:	0003      	movs	r3, r0
 800588c:	61bb      	str	r3, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 800588e:	69bb      	ldr	r3, [r7, #24]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d105      	bne.n	80058a0 <f_lseek+0x198>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	4a81      	ldr	r2, [pc, #516]	; (8005a9c <f_lseek+0x394>)
 8005898:	2102      	movs	r1, #2
 800589a:	5499      	strb	r1, [r3, r2]
 800589c:	2302      	movs	r3, #2
 800589e:	e1d4      	b.n	8005c4a <f_lseek+0x542>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	3b01      	subs	r3, #1
 80058a4:	0a5b      	lsrs	r3, r3, #9
 80058a6:	6879      	ldr	r1, [r7, #4]
 80058a8:	2280      	movs	r2, #128	; 0x80
 80058aa:	0092      	lsls	r2, r2, #2
 80058ac:	588a      	ldr	r2, [r1, r2]
 80058ae:	497c      	ldr	r1, [pc, #496]	; (8005aa0 <f_lseek+0x398>)
 80058b0:	5c52      	ldrb	r2, [r2, r1]
 80058b2:	3a01      	subs	r2, #1
 80058b4:	4013      	ands	r3, r2
 80058b6:	69ba      	ldr	r2, [r7, #24]
 80058b8:	18d3      	adds	r3, r2, r3
 80058ba:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	2382      	movs	r3, #130	; 0x82
 80058c0:	009b      	lsls	r3, r3, #2
 80058c2:	58d3      	ldr	r3, [r2, r3]
 80058c4:	05db      	lsls	r3, r3, #23
 80058c6:	0ddb      	lsrs	r3, r3, #23
 80058c8:	d100      	bne.n	80058cc <f_lseek+0x1c4>
 80058ca:	e1bb      	b.n	8005c44 <f_lseek+0x53c>
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	2386      	movs	r3, #134	; 0x86
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	58d3      	ldr	r3, [r2, r3]
 80058d4:	69ba      	ldr	r2, [r7, #24]
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d100      	bne.n	80058dc <f_lseek+0x1d4>
 80058da:	e1b3      	b.n	8005c44 <f_lseek+0x53c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	4a71      	ldr	r2, [pc, #452]	; (8005aa4 <f_lseek+0x39c>)
 80058e0:	5c9b      	ldrb	r3, [r3, r2]
 80058e2:	001a      	movs	r2, r3
 80058e4:	2340      	movs	r3, #64	; 0x40
 80058e6:	4013      	ands	r3, r2
 80058e8:	d01e      	beq.n	8005928 <f_lseek+0x220>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	2380      	movs	r3, #128	; 0x80
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	58d3      	ldr	r3, [r2, r3]
 80058f2:	4a6d      	ldr	r2, [pc, #436]	; (8005aa8 <f_lseek+0x3a0>)
 80058f4:	5c98      	ldrb	r0, [r3, r2]
 80058f6:	6879      	ldr	r1, [r7, #4]
 80058f8:	687a      	ldr	r2, [r7, #4]
 80058fa:	2386      	movs	r3, #134	; 0x86
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	58d2      	ldr	r2, [r2, r3]
 8005900:	2301      	movs	r3, #1
 8005902:	f7fd f8dd 	bl	8002ac0 <disk_write>
 8005906:	1e03      	subs	r3, r0, #0
 8005908:	d005      	beq.n	8005916 <f_lseek+0x20e>
							ABORT(fp->fs, FR_DISK_ERR);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4a63      	ldr	r2, [pc, #396]	; (8005a9c <f_lseek+0x394>)
 800590e:	2101      	movs	r1, #1
 8005910:	5499      	strb	r1, [r3, r2]
 8005912:	2301      	movs	r3, #1
 8005914:	e199      	b.n	8005c4a <f_lseek+0x542>
						fp->flag &= ~FA__DIRTY;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4a62      	ldr	r2, [pc, #392]	; (8005aa4 <f_lseek+0x39c>)
 800591a:	5c9b      	ldrb	r3, [r3, r2]
 800591c:	2240      	movs	r2, #64	; 0x40
 800591e:	4393      	bics	r3, r2
 8005920:	b2d9      	uxtb	r1, r3
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4a5f      	ldr	r2, [pc, #380]	; (8005aa4 <f_lseek+0x39c>)
 8005926:	5499      	strb	r1, [r3, r2]
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 8005928:	687a      	ldr	r2, [r7, #4]
 800592a:	2380      	movs	r3, #128	; 0x80
 800592c:	009b      	lsls	r3, r3, #2
 800592e:	58d3      	ldr	r3, [r2, r3]
 8005930:	4a5d      	ldr	r2, [pc, #372]	; (8005aa8 <f_lseek+0x3a0>)
 8005932:	5c98      	ldrb	r0, [r3, r2]
 8005934:	6879      	ldr	r1, [r7, #4]
 8005936:	69ba      	ldr	r2, [r7, #24]
 8005938:	2301      	movs	r3, #1
 800593a:	f7fd f899 	bl	8002a70 <disk_read>
 800593e:	1e03      	subs	r3, r0, #0
 8005940:	d005      	beq.n	800594e <f_lseek+0x246>
						ABORT(fp->fs, FR_DISK_ERR);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4a55      	ldr	r2, [pc, #340]	; (8005a9c <f_lseek+0x394>)
 8005946:	2101      	movs	r1, #1
 8005948:	5499      	strb	r1, [r3, r2]
 800594a:	2301      	movs	r3, #1
 800594c:	e17d      	b.n	8005c4a <f_lseek+0x542>
#endif
					fp->dsect = dsc;
 800594e:	687a      	ldr	r2, [r7, #4]
 8005950:	2386      	movs	r3, #134	; 0x86
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	69b9      	ldr	r1, [r7, #24]
 8005956:	50d1      	str	r1, [r2, r3]
 8005958:	e174      	b.n	8005c44 <f_lseek+0x53c>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	2383      	movs	r3, #131	; 0x83
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	58d3      	ldr	r3, [r2, r3]
 8005962:	683a      	ldr	r2, [r7, #0]
 8005964:	429a      	cmp	r2, r3
 8005966:	d90b      	bls.n	8005980 <f_lseek+0x278>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	4a4e      	ldr	r2, [pc, #312]	; (8005aa4 <f_lseek+0x39c>)
 800596c:	5c9b      	ldrb	r3, [r3, r2]
 800596e:	001a      	movs	r2, r3
 8005970:	2302      	movs	r3, #2
 8005972:	4013      	ands	r3, r2
 8005974:	d104      	bne.n	8005980 <f_lseek+0x278>
#endif
			) ofs = fp->fsize;
 8005976:	687a      	ldr	r2, [r7, #4]
 8005978:	2383      	movs	r3, #131	; 0x83
 800597a:	009b      	lsls	r3, r3, #2
 800597c:	58d3      	ldr	r3, [r2, r3]
 800597e:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	2382      	movs	r3, #130	; 0x82
 8005984:	009b      	lsls	r3, r3, #2
 8005986:	58d3      	ldr	r3, [r2, r3]
 8005988:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800598a:	2300      	movs	r3, #0
 800598c:	637b      	str	r3, [r7, #52]	; 0x34
 800598e:	687a      	ldr	r2, [r7, #4]
 8005990:	2382      	movs	r3, #130	; 0x82
 8005992:	009b      	lsls	r3, r3, #2
 8005994:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005996:	50d1      	str	r1, [r2, r3]
		if (ofs) {
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d100      	bne.n	80059a0 <f_lseek+0x298>
 800599e:	e0ea      	b.n	8005b76 <f_lseek+0x46e>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	2380      	movs	r3, #128	; 0x80
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	58d3      	ldr	r3, [r2, r3]
 80059a8:	4a3d      	ldr	r2, [pc, #244]	; (8005aa0 <f_lseek+0x398>)
 80059aa:	5c9b      	ldrb	r3, [r3, r2]
 80059ac:	025b      	lsls	r3, r3, #9
 80059ae:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80059b0:	6a3b      	ldr	r3, [r7, #32]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d027      	beq.n	8005a06 <f_lseek+0x2fe>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	3b01      	subs	r3, #1
 80059ba:	69f9      	ldr	r1, [r7, #28]
 80059bc:	0018      	movs	r0, r3
 80059be:	f7fa fbab 	bl	8000118 <__udivsi3>
 80059c2:	0003      	movs	r3, r0
 80059c4:	001c      	movs	r4, r3
 80059c6:	6a3b      	ldr	r3, [r7, #32]
 80059c8:	3b01      	subs	r3, #1
 80059ca:	69f9      	ldr	r1, [r7, #28]
 80059cc:	0018      	movs	r0, r3
 80059ce:	f7fa fba3 	bl	8000118 <__udivsi3>
 80059d2:	0003      	movs	r3, r0
			if (ifptr > 0 &&
 80059d4:	429c      	cmp	r4, r3
 80059d6:	d316      	bcc.n	8005a06 <f_lseek+0x2fe>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 80059d8:	6a3b      	ldr	r3, [r7, #32]
 80059da:	3b01      	subs	r3, #1
 80059dc:	69fa      	ldr	r2, [r7, #28]
 80059de:	4252      	negs	r2, r2
 80059e0:	401a      	ands	r2, r3
 80059e2:	0011      	movs	r1, r2
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	2382      	movs	r3, #130	; 0x82
 80059e8:	009b      	lsls	r3, r3, #2
 80059ea:	50d1      	str	r1, [r2, r3]
				ofs -= fp->fptr;
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	2382      	movs	r3, #130	; 0x82
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	58d3      	ldr	r3, [r2, r3]
 80059f4:	683a      	ldr	r2, [r7, #0]
 80059f6:	1ad3      	subs	r3, r2, r3
 80059f8:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80059fa:	687a      	ldr	r2, [r7, #4]
 80059fc:	2385      	movs	r3, #133	; 0x85
 80059fe:	009b      	lsls	r3, r3, #2
 8005a00:	58d3      	ldr	r3, [r2, r3]
 8005a02:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a04:	e02d      	b.n	8005a62 <f_lseek+0x35a>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	2384      	movs	r3, #132	; 0x84
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	58d3      	ldr	r3, [r2, r3]
 8005a0e:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8005a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d120      	bne.n	8005a58 <f_lseek+0x350>
					clst = create_chain(fp->fs, 0);
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	2380      	movs	r3, #128	; 0x80
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	58d3      	ldr	r3, [r2, r3]
 8005a1e:	2100      	movs	r1, #0
 8005a20:	0018      	movs	r0, r3
 8005a22:	f7fd feb9 	bl	8003798 <create_chain>
 8005a26:	0003      	movs	r3, r0
 8005a28:	63bb      	str	r3, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8005a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d105      	bne.n	8005a3c <f_lseek+0x334>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	4a1a      	ldr	r2, [pc, #104]	; (8005a9c <f_lseek+0x394>)
 8005a34:	2102      	movs	r1, #2
 8005a36:	5499      	strb	r1, [r3, r2]
 8005a38:	2302      	movs	r3, #2
 8005a3a:	e106      	b.n	8005c4a <f_lseek+0x542>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8005a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a3e:	3301      	adds	r3, #1
 8005a40:	d105      	bne.n	8005a4e <f_lseek+0x346>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a15      	ldr	r2, [pc, #84]	; (8005a9c <f_lseek+0x394>)
 8005a46:	2101      	movs	r1, #1
 8005a48:	5499      	strb	r1, [r3, r2]
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e0fd      	b.n	8005c4a <f_lseek+0x542>
					fp->sclust = clst;
 8005a4e:	687a      	ldr	r2, [r7, #4]
 8005a50:	2384      	movs	r3, #132	; 0x84
 8005a52:	009b      	lsls	r3, r3, #2
 8005a54:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005a56:	50d1      	str	r1, [r2, r3]
				}
#endif
				fp->clust = clst;
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	2385      	movs	r3, #133	; 0x85
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005a60:	50d1      	str	r1, [r2, r3]
			}
			if (clst != 0) {
 8005a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d100      	bne.n	8005a6a <f_lseek+0x362>
 8005a68:	e085      	b.n	8005b76 <f_lseek+0x46e>
				while (ofs > bcs) {						/* Cluster following loop */
 8005a6a:	e059      	b.n	8005b20 <f_lseek+0x418>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	4a0d      	ldr	r2, [pc, #52]	; (8005aa4 <f_lseek+0x39c>)
 8005a70:	5c9b      	ldrb	r3, [r3, r2]
 8005a72:	001a      	movs	r2, r3
 8005a74:	2302      	movs	r3, #2
 8005a76:	4013      	ands	r3, r2
 8005a78:	d018      	beq.n	8005aac <f_lseek+0x3a4>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 8005a7a:	687a      	ldr	r2, [r7, #4]
 8005a7c:	2380      	movs	r3, #128	; 0x80
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	58d3      	ldr	r3, [r2, r3]
 8005a82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a84:	0011      	movs	r1, r2
 8005a86:	0018      	movs	r0, r3
 8005a88:	f7fd fe86 	bl	8003798 <create_chain>
 8005a8c:	0003      	movs	r3, r0
 8005a8e:	63bb      	str	r3, [r7, #56]	; 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 8005a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d115      	bne.n	8005ac2 <f_lseek+0x3ba>
							ofs = bcs; break;
 8005a96:	69fb      	ldr	r3, [r7, #28]
 8005a98:	603b      	str	r3, [r7, #0]
 8005a9a:	e045      	b.n	8005b28 <f_lseek+0x420>
 8005a9c:	00000207 	.word	0x00000207
 8005aa0:	00000202 	.word	0x00000202
 8005aa4:	00000206 	.word	0x00000206
 8005aa8:	00000201 	.word	0x00000201
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 8005aac:	687a      	ldr	r2, [r7, #4]
 8005aae:	2380      	movs	r3, #128	; 0x80
 8005ab0:	009b      	lsls	r3, r3, #2
 8005ab2:	58d3      	ldr	r3, [r2, r3]
 8005ab4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ab6:	0011      	movs	r1, r2
 8005ab8:	0018      	movs	r0, r3
 8005aba:	f7fd fc11 	bl	80032e0 <get_fat>
 8005abe:	0003      	movs	r3, r0
 8005ac0:	63bb      	str	r3, [r7, #56]	; 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8005ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ac4:	3301      	adds	r3, #1
 8005ac6:	d105      	bne.n	8005ad4 <f_lseek+0x3cc>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4a62      	ldr	r2, [pc, #392]	; (8005c54 <f_lseek+0x54c>)
 8005acc:	2101      	movs	r1, #1
 8005ace:	5499      	strb	r1, [r3, r2]
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	e0ba      	b.n	8005c4a <f_lseek+0x542>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 8005ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d909      	bls.n	8005aee <f_lseek+0x3e6>
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	2380      	movs	r3, #128	; 0x80
 8005ade:	009b      	lsls	r3, r3, #2
 8005ae0:	58d2      	ldr	r2, [r2, r3]
 8005ae2:	2385      	movs	r3, #133	; 0x85
 8005ae4:	009b      	lsls	r3, r3, #2
 8005ae6:	58d3      	ldr	r3, [r2, r3]
 8005ae8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d305      	bcc.n	8005afa <f_lseek+0x3f2>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	4a58      	ldr	r2, [pc, #352]	; (8005c54 <f_lseek+0x54c>)
 8005af2:	2102      	movs	r1, #2
 8005af4:	5499      	strb	r1, [r3, r2]
 8005af6:	2302      	movs	r3, #2
 8005af8:	e0a7      	b.n	8005c4a <f_lseek+0x542>
					fp->clust = clst;
 8005afa:	687a      	ldr	r2, [r7, #4]
 8005afc:	2385      	movs	r3, #133	; 0x85
 8005afe:	009b      	lsls	r3, r3, #2
 8005b00:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005b02:	50d1      	str	r1, [r2, r3]
					fp->fptr += bcs;
 8005b04:	687a      	ldr	r2, [r7, #4]
 8005b06:	2382      	movs	r3, #130	; 0x82
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	58d2      	ldr	r2, [r2, r3]
 8005b0c:	69fb      	ldr	r3, [r7, #28]
 8005b0e:	18d1      	adds	r1, r2, r3
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	2382      	movs	r3, #130	; 0x82
 8005b14:	009b      	lsls	r3, r3, #2
 8005b16:	50d1      	str	r1, [r2, r3]
					ofs -= bcs;
 8005b18:	683a      	ldr	r2, [r7, #0]
 8005b1a:	69fb      	ldr	r3, [r7, #28]
 8005b1c:	1ad3      	subs	r3, r2, r3
 8005b1e:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 8005b20:	683a      	ldr	r2, [r7, #0]
 8005b22:	69fb      	ldr	r3, [r7, #28]
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d8a1      	bhi.n	8005a6c <f_lseek+0x364>
				}
				fp->fptr += ofs;
 8005b28:	687a      	ldr	r2, [r7, #4]
 8005b2a:	2382      	movs	r3, #130	; 0x82
 8005b2c:	009b      	lsls	r3, r3, #2
 8005b2e:	58d2      	ldr	r2, [r2, r3]
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	18d1      	adds	r1, r2, r3
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	2382      	movs	r3, #130	; 0x82
 8005b38:	009b      	lsls	r3, r3, #2
 8005b3a:	50d1      	str	r1, [r2, r3]
				if (ofs % SS(fp->fs)) {
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	05db      	lsls	r3, r3, #23
 8005b40:	0ddb      	lsrs	r3, r3, #23
 8005b42:	d018      	beq.n	8005b76 <f_lseek+0x46e>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	2380      	movs	r3, #128	; 0x80
 8005b48:	009b      	lsls	r3, r3, #2
 8005b4a:	58d3      	ldr	r3, [r2, r3]
 8005b4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b4e:	0011      	movs	r1, r2
 8005b50:	0018      	movs	r0, r3
 8005b52:	f7fd fba1 	bl	8003298 <clust2sect>
 8005b56:	0003      	movs	r3, r0
 8005b58:	637b      	str	r3, [r7, #52]	; 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 8005b5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d105      	bne.n	8005b6c <f_lseek+0x464>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	4a3c      	ldr	r2, [pc, #240]	; (8005c54 <f_lseek+0x54c>)
 8005b64:	2102      	movs	r1, #2
 8005b66:	5499      	strb	r1, [r3, r2]
 8005b68:	2302      	movs	r3, #2
 8005b6a:	e06e      	b.n	8005c4a <f_lseek+0x542>
					nsect += ofs / SS(fp->fs);
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	0a5b      	lsrs	r3, r3, #9
 8005b70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b72:	18d3      	adds	r3, r2, r3
 8005b74:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	2382      	movs	r3, #130	; 0x82
 8005b7a:	009b      	lsls	r3, r3, #2
 8005b7c:	58d3      	ldr	r3, [r2, r3]
 8005b7e:	05db      	lsls	r3, r3, #23
 8005b80:	0ddb      	lsrs	r3, r3, #23
 8005b82:	d044      	beq.n	8005c0e <f_lseek+0x506>
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	2386      	movs	r3, #134	; 0x86
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	58d3      	ldr	r3, [r2, r3]
 8005b8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d03d      	beq.n	8005c0e <f_lseek+0x506>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	4a30      	ldr	r2, [pc, #192]	; (8005c58 <f_lseek+0x550>)
 8005b96:	5c9b      	ldrb	r3, [r3, r2]
 8005b98:	001a      	movs	r2, r3
 8005b9a:	2340      	movs	r3, #64	; 0x40
 8005b9c:	4013      	ands	r3, r2
 8005b9e:	d01e      	beq.n	8005bde <f_lseek+0x4d6>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8005ba0:	687a      	ldr	r2, [r7, #4]
 8005ba2:	2380      	movs	r3, #128	; 0x80
 8005ba4:	009b      	lsls	r3, r3, #2
 8005ba6:	58d3      	ldr	r3, [r2, r3]
 8005ba8:	4a2c      	ldr	r2, [pc, #176]	; (8005c5c <f_lseek+0x554>)
 8005baa:	5c98      	ldrb	r0, [r3, r2]
 8005bac:	6879      	ldr	r1, [r7, #4]
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	2386      	movs	r3, #134	; 0x86
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	58d2      	ldr	r2, [r2, r3]
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	f7fc ff82 	bl	8002ac0 <disk_write>
 8005bbc:	1e03      	subs	r3, r0, #0
 8005bbe:	d005      	beq.n	8005bcc <f_lseek+0x4c4>
					ABORT(fp->fs, FR_DISK_ERR);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	4a24      	ldr	r2, [pc, #144]	; (8005c54 <f_lseek+0x54c>)
 8005bc4:	2101      	movs	r1, #1
 8005bc6:	5499      	strb	r1, [r3, r2]
 8005bc8:	2301      	movs	r3, #1
 8005bca:	e03e      	b.n	8005c4a <f_lseek+0x542>
				fp->flag &= ~FA__DIRTY;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	4a22      	ldr	r2, [pc, #136]	; (8005c58 <f_lseek+0x550>)
 8005bd0:	5c9b      	ldrb	r3, [r3, r2]
 8005bd2:	2240      	movs	r2, #64	; 0x40
 8005bd4:	4393      	bics	r3, r2
 8005bd6:	b2d9      	uxtb	r1, r3
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	4a1f      	ldr	r2, [pc, #124]	; (8005c58 <f_lseek+0x550>)
 8005bdc:	5499      	strb	r1, [r3, r2]
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	2380      	movs	r3, #128	; 0x80
 8005be2:	009b      	lsls	r3, r3, #2
 8005be4:	58d3      	ldr	r3, [r2, r3]
 8005be6:	4a1d      	ldr	r2, [pc, #116]	; (8005c5c <f_lseek+0x554>)
 8005be8:	5c98      	ldrb	r0, [r3, r2]
 8005bea:	6879      	ldr	r1, [r7, #4]
 8005bec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005bee:	2301      	movs	r3, #1
 8005bf0:	f7fc ff3e 	bl	8002a70 <disk_read>
 8005bf4:	1e03      	subs	r3, r0, #0
 8005bf6:	d005      	beq.n	8005c04 <f_lseek+0x4fc>
				ABORT(fp->fs, FR_DISK_ERR);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4a16      	ldr	r2, [pc, #88]	; (8005c54 <f_lseek+0x54c>)
 8005bfc:	2101      	movs	r1, #1
 8005bfe:	5499      	strb	r1, [r3, r2]
 8005c00:	2301      	movs	r3, #1
 8005c02:	e022      	b.n	8005c4a <f_lseek+0x542>
#endif
			fp->dsect = nsect;
 8005c04:	687a      	ldr	r2, [r7, #4]
 8005c06:	2386      	movs	r3, #134	; 0x86
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005c0c:	50d1      	str	r1, [r2, r3]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	2382      	movs	r3, #130	; 0x82
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	58d2      	ldr	r2, [r2, r3]
 8005c16:	6879      	ldr	r1, [r7, #4]
 8005c18:	2383      	movs	r3, #131	; 0x83
 8005c1a:	009b      	lsls	r3, r3, #2
 8005c1c:	58cb      	ldr	r3, [r1, r3]
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d910      	bls.n	8005c44 <f_lseek+0x53c>
			fp->fsize = fp->fptr;
 8005c22:	687a      	ldr	r2, [r7, #4]
 8005c24:	2382      	movs	r3, #130	; 0x82
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	58d1      	ldr	r1, [r2, r3]
 8005c2a:	687a      	ldr	r2, [r7, #4]
 8005c2c:	2383      	movs	r3, #131	; 0x83
 8005c2e:	009b      	lsls	r3, r3, #2
 8005c30:	50d1      	str	r1, [r2, r3]
			fp->flag |= FA__WRITTEN;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4a08      	ldr	r2, [pc, #32]	; (8005c58 <f_lseek+0x550>)
 8005c36:	5c9b      	ldrb	r3, [r3, r2]
 8005c38:	2220      	movs	r2, #32
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	b2d9      	uxtb	r1, r3
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4a05      	ldr	r2, [pc, #20]	; (8005c58 <f_lseek+0x550>)
 8005c42:	5499      	strb	r1, [r3, r2]
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 8005c44:	233f      	movs	r3, #63	; 0x3f
 8005c46:	18fb      	adds	r3, r7, r3
 8005c48:	781b      	ldrb	r3, [r3, #0]
}
 8005c4a:	0018      	movs	r0, r3
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	b010      	add	sp, #64	; 0x40
 8005c50:	bdb0      	pop	{r4, r5, r7, pc}
 8005c52:	46c0      	nop			; (mov r8, r8)
 8005c54:	00000207 	.word	0x00000207
 8005c58:	00000206 	.word	0x00000206
 8005c5c:	00000201 	.word	0x00000201

08005c60 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b086      	sub	sp, #24
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	60b9      	str	r1, [r7, #8]
 8005c6a:	1dfb      	adds	r3, r7, #7
 8005c6c:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 1;
 8005c6e:	2317      	movs	r3, #23
 8005c70:	18fb      	adds	r3, r7, r3
 8005c72:	2201      	movs	r2, #1
 8005c74:	701a      	strb	r2, [r3, #0]
  uint8_t DiskNum = 0;
 8005c76:	2316      	movs	r3, #22
 8005c78:	18fb      	adds	r3, r7, r3
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	701a      	strb	r2, [r3, #0]
  
  if(disk.nbr <= _VOLUMES)
 8005c7e:	4b22      	ldr	r3, [pc, #136]	; (8005d08 <FATFS_LinkDriverEx+0xa8>)
 8005c80:	7a5b      	ldrb	r3, [r3, #9]
 8005c82:	b2db      	uxtb	r3, r3
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d838      	bhi.n	8005cfa <FATFS_LinkDriverEx+0x9a>
  {
    disk.is_initialized[disk.nbr] = 0;
 8005c88:	4b1f      	ldr	r3, [pc, #124]	; (8005d08 <FATFS_LinkDriverEx+0xa8>)
 8005c8a:	7a5b      	ldrb	r3, [r3, #9]
 8005c8c:	b2db      	uxtb	r3, r3
 8005c8e:	001a      	movs	r2, r3
 8005c90:	4b1d      	ldr	r3, [pc, #116]	; (8005d08 <FATFS_LinkDriverEx+0xa8>)
 8005c92:	2100      	movs	r1, #0
 8005c94:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8005c96:	4b1c      	ldr	r3, [pc, #112]	; (8005d08 <FATFS_LinkDriverEx+0xa8>)
 8005c98:	7a5b      	ldrb	r3, [r3, #9]
 8005c9a:	b2db      	uxtb	r3, r3
 8005c9c:	4a1a      	ldr	r2, [pc, #104]	; (8005d08 <FATFS_LinkDriverEx+0xa8>)
 8005c9e:	009b      	lsls	r3, r3, #2
 8005ca0:	18d3      	adds	r3, r2, r3
 8005ca2:	3304      	adds	r3, #4
 8005ca4:	68fa      	ldr	r2, [r7, #12]
 8005ca6:	601a      	str	r2, [r3, #0]
    disk.lun[disk.nbr] = lun;  
 8005ca8:	4b17      	ldr	r3, [pc, #92]	; (8005d08 <FATFS_LinkDriverEx+0xa8>)
 8005caa:	7a5b      	ldrb	r3, [r3, #9]
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	001a      	movs	r2, r3
 8005cb0:	4b15      	ldr	r3, [pc, #84]	; (8005d08 <FATFS_LinkDriverEx+0xa8>)
 8005cb2:	189b      	adds	r3, r3, r2
 8005cb4:	1dfa      	adds	r2, r7, #7
 8005cb6:	7812      	ldrb	r2, [r2, #0]
 8005cb8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8005cba:	4b13      	ldr	r3, [pc, #76]	; (8005d08 <FATFS_LinkDriverEx+0xa8>)
 8005cbc:	7a5b      	ldrb	r3, [r3, #9]
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	1c5a      	adds	r2, r3, #1
 8005cc2:	b2d1      	uxtb	r1, r2
 8005cc4:	4a10      	ldr	r2, [pc, #64]	; (8005d08 <FATFS_LinkDriverEx+0xa8>)
 8005cc6:	7251      	strb	r1, [r2, #9]
 8005cc8:	2116      	movs	r1, #22
 8005cca:	187a      	adds	r2, r7, r1
 8005ccc:	7013      	strb	r3, [r2, #0]
    path[0] = DiskNum + '0';
 8005cce:	187b      	adds	r3, r7, r1
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	3330      	adds	r3, #48	; 0x30
 8005cd4:	b2da      	uxtb	r2, r3
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	3301      	adds	r3, #1
 8005cde:	223a      	movs	r2, #58	; 0x3a
 8005ce0:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	3302      	adds	r3, #2
 8005ce6:	222f      	movs	r2, #47	; 0x2f
 8005ce8:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	3303      	adds	r3, #3
 8005cee:	2200      	movs	r2, #0
 8005cf0:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8005cf2:	2317      	movs	r3, #23
 8005cf4:	18fb      	adds	r3, r7, r3
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 8005cfa:	2317      	movs	r3, #23
 8005cfc:	18fb      	adds	r3, r7, r3
 8005cfe:	781b      	ldrb	r3, [r3, #0]
}
 8005d00:	0018      	movs	r0, r3
 8005d02:	46bd      	mov	sp, r7
 8005d04:	b006      	add	sp, #24
 8005d06:	bd80      	pop	{r7, pc}
 8005d08:	200000c4 	.word	0x200000c4

08005d0c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b082      	sub	sp, #8
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8005d16:	6839      	ldr	r1, [r7, #0]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	0018      	movs	r0, r3
 8005d1e:	f7ff ff9f 	bl	8005c60 <FATFS_LinkDriverEx>
 8005d22:	0003      	movs	r3, r0
}
 8005d24:	0018      	movs	r0, r3
 8005d26:	46bd      	mov	sp, r7
 8005d28:	b002      	add	sp, #8
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <__errno>:
 8005d2c:	4b01      	ldr	r3, [pc, #4]	; (8005d34 <__errno+0x8>)
 8005d2e:	6818      	ldr	r0, [r3, #0]
 8005d30:	4770      	bx	lr
 8005d32:	46c0      	nop			; (mov r8, r8)
 8005d34:	20000020 	.word	0x20000020

08005d38 <_fclose_r>:
 8005d38:	b570      	push	{r4, r5, r6, lr}
 8005d3a:	0005      	movs	r5, r0
 8005d3c:	1e0c      	subs	r4, r1, #0
 8005d3e:	d102      	bne.n	8005d46 <_fclose_r+0xe>
 8005d40:	2600      	movs	r6, #0
 8005d42:	0030      	movs	r0, r6
 8005d44:	bd70      	pop	{r4, r5, r6, pc}
 8005d46:	2800      	cmp	r0, #0
 8005d48:	d004      	beq.n	8005d54 <_fclose_r+0x1c>
 8005d4a:	6983      	ldr	r3, [r0, #24]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d101      	bne.n	8005d54 <_fclose_r+0x1c>
 8005d50:	f000 f94c 	bl	8005fec <__sinit>
 8005d54:	4b21      	ldr	r3, [pc, #132]	; (8005ddc <_fclose_r+0xa4>)
 8005d56:	429c      	cmp	r4, r3
 8005d58:	d135      	bne.n	8005dc6 <_fclose_r+0x8e>
 8005d5a:	686c      	ldr	r4, [r5, #4]
 8005d5c:	220c      	movs	r2, #12
 8005d5e:	5ea3      	ldrsh	r3, [r4, r2]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d0ed      	beq.n	8005d40 <_fclose_r+0x8>
 8005d64:	0021      	movs	r1, r4
 8005d66:	0028      	movs	r0, r5
 8005d68:	f000 f848 	bl	8005dfc <__sflush_r>
 8005d6c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005d6e:	0006      	movs	r6, r0
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d006      	beq.n	8005d82 <_fclose_r+0x4a>
 8005d74:	6a21      	ldr	r1, [r4, #32]
 8005d76:	0028      	movs	r0, r5
 8005d78:	4798      	blx	r3
 8005d7a:	2800      	cmp	r0, #0
 8005d7c:	da01      	bge.n	8005d82 <_fclose_r+0x4a>
 8005d7e:	2601      	movs	r6, #1
 8005d80:	4276      	negs	r6, r6
 8005d82:	89a3      	ldrh	r3, [r4, #12]
 8005d84:	061b      	lsls	r3, r3, #24
 8005d86:	d503      	bpl.n	8005d90 <_fclose_r+0x58>
 8005d88:	6921      	ldr	r1, [r4, #16]
 8005d8a:	0028      	movs	r0, r5
 8005d8c:	f000 fbc0 	bl	8006510 <_free_r>
 8005d90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d92:	2900      	cmp	r1, #0
 8005d94:	d008      	beq.n	8005da8 <_fclose_r+0x70>
 8005d96:	0023      	movs	r3, r4
 8005d98:	3344      	adds	r3, #68	; 0x44
 8005d9a:	4299      	cmp	r1, r3
 8005d9c:	d002      	beq.n	8005da4 <_fclose_r+0x6c>
 8005d9e:	0028      	movs	r0, r5
 8005da0:	f000 fbb6 	bl	8006510 <_free_r>
 8005da4:	2300      	movs	r3, #0
 8005da6:	6363      	str	r3, [r4, #52]	; 0x34
 8005da8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005daa:	2900      	cmp	r1, #0
 8005dac:	d004      	beq.n	8005db8 <_fclose_r+0x80>
 8005dae:	0028      	movs	r0, r5
 8005db0:	f000 fbae 	bl	8006510 <_free_r>
 8005db4:	2300      	movs	r3, #0
 8005db6:	64a3      	str	r3, [r4, #72]	; 0x48
 8005db8:	f000 f98a 	bl	80060d0 <__sfp_lock_acquire>
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	81a3      	strh	r3, [r4, #12]
 8005dc0:	f000 f987 	bl	80060d2 <__sfp_lock_release>
 8005dc4:	e7bd      	b.n	8005d42 <_fclose_r+0xa>
 8005dc6:	4b06      	ldr	r3, [pc, #24]	; (8005de0 <_fclose_r+0xa8>)
 8005dc8:	429c      	cmp	r4, r3
 8005dca:	d101      	bne.n	8005dd0 <_fclose_r+0x98>
 8005dcc:	68ac      	ldr	r4, [r5, #8]
 8005dce:	e7c5      	b.n	8005d5c <_fclose_r+0x24>
 8005dd0:	4b04      	ldr	r3, [pc, #16]	; (8005de4 <_fclose_r+0xac>)
 8005dd2:	429c      	cmp	r4, r3
 8005dd4:	d1c2      	bne.n	8005d5c <_fclose_r+0x24>
 8005dd6:	68ec      	ldr	r4, [r5, #12]
 8005dd8:	e7c0      	b.n	8005d5c <_fclose_r+0x24>
 8005dda:	46c0      	nop			; (mov r8, r8)
 8005ddc:	0800717c 	.word	0x0800717c
 8005de0:	0800719c 	.word	0x0800719c
 8005de4:	0800715c 	.word	0x0800715c

08005de8 <fclose>:
 8005de8:	b510      	push	{r4, lr}
 8005dea:	4b03      	ldr	r3, [pc, #12]	; (8005df8 <fclose+0x10>)
 8005dec:	0001      	movs	r1, r0
 8005dee:	6818      	ldr	r0, [r3, #0]
 8005df0:	f7ff ffa2 	bl	8005d38 <_fclose_r>
 8005df4:	bd10      	pop	{r4, pc}
 8005df6:	46c0      	nop			; (mov r8, r8)
 8005df8:	20000020 	.word	0x20000020

08005dfc <__sflush_r>:
 8005dfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005dfe:	898a      	ldrh	r2, [r1, #12]
 8005e00:	0005      	movs	r5, r0
 8005e02:	000c      	movs	r4, r1
 8005e04:	0713      	lsls	r3, r2, #28
 8005e06:	d460      	bmi.n	8005eca <__sflush_r+0xce>
 8005e08:	684b      	ldr	r3, [r1, #4]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	dc04      	bgt.n	8005e18 <__sflush_r+0x1c>
 8005e0e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	dc01      	bgt.n	8005e18 <__sflush_r+0x1c>
 8005e14:	2000      	movs	r0, #0
 8005e16:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005e18:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005e1a:	2f00      	cmp	r7, #0
 8005e1c:	d0fa      	beq.n	8005e14 <__sflush_r+0x18>
 8005e1e:	2300      	movs	r3, #0
 8005e20:	682e      	ldr	r6, [r5, #0]
 8005e22:	602b      	str	r3, [r5, #0]
 8005e24:	2380      	movs	r3, #128	; 0x80
 8005e26:	015b      	lsls	r3, r3, #5
 8005e28:	6a21      	ldr	r1, [r4, #32]
 8005e2a:	401a      	ands	r2, r3
 8005e2c:	d034      	beq.n	8005e98 <__sflush_r+0x9c>
 8005e2e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005e30:	89a3      	ldrh	r3, [r4, #12]
 8005e32:	075b      	lsls	r3, r3, #29
 8005e34:	d506      	bpl.n	8005e44 <__sflush_r+0x48>
 8005e36:	6863      	ldr	r3, [r4, #4]
 8005e38:	1ac0      	subs	r0, r0, r3
 8005e3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d001      	beq.n	8005e44 <__sflush_r+0x48>
 8005e40:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005e42:	1ac0      	subs	r0, r0, r3
 8005e44:	0002      	movs	r2, r0
 8005e46:	6a21      	ldr	r1, [r4, #32]
 8005e48:	2300      	movs	r3, #0
 8005e4a:	0028      	movs	r0, r5
 8005e4c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005e4e:	47b8      	blx	r7
 8005e50:	89a1      	ldrh	r1, [r4, #12]
 8005e52:	1c43      	adds	r3, r0, #1
 8005e54:	d106      	bne.n	8005e64 <__sflush_r+0x68>
 8005e56:	682b      	ldr	r3, [r5, #0]
 8005e58:	2b1d      	cmp	r3, #29
 8005e5a:	d830      	bhi.n	8005ebe <__sflush_r+0xc2>
 8005e5c:	4a2b      	ldr	r2, [pc, #172]	; (8005f0c <__sflush_r+0x110>)
 8005e5e:	40da      	lsrs	r2, r3
 8005e60:	07d3      	lsls	r3, r2, #31
 8005e62:	d52c      	bpl.n	8005ebe <__sflush_r+0xc2>
 8005e64:	2300      	movs	r3, #0
 8005e66:	6063      	str	r3, [r4, #4]
 8005e68:	6923      	ldr	r3, [r4, #16]
 8005e6a:	6023      	str	r3, [r4, #0]
 8005e6c:	04cb      	lsls	r3, r1, #19
 8005e6e:	d505      	bpl.n	8005e7c <__sflush_r+0x80>
 8005e70:	1c43      	adds	r3, r0, #1
 8005e72:	d102      	bne.n	8005e7a <__sflush_r+0x7e>
 8005e74:	682b      	ldr	r3, [r5, #0]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d100      	bne.n	8005e7c <__sflush_r+0x80>
 8005e7a:	6560      	str	r0, [r4, #84]	; 0x54
 8005e7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e7e:	602e      	str	r6, [r5, #0]
 8005e80:	2900      	cmp	r1, #0
 8005e82:	d0c7      	beq.n	8005e14 <__sflush_r+0x18>
 8005e84:	0023      	movs	r3, r4
 8005e86:	3344      	adds	r3, #68	; 0x44
 8005e88:	4299      	cmp	r1, r3
 8005e8a:	d002      	beq.n	8005e92 <__sflush_r+0x96>
 8005e8c:	0028      	movs	r0, r5
 8005e8e:	f000 fb3f 	bl	8006510 <_free_r>
 8005e92:	2000      	movs	r0, #0
 8005e94:	6360      	str	r0, [r4, #52]	; 0x34
 8005e96:	e7be      	b.n	8005e16 <__sflush_r+0x1a>
 8005e98:	2301      	movs	r3, #1
 8005e9a:	0028      	movs	r0, r5
 8005e9c:	47b8      	blx	r7
 8005e9e:	1c43      	adds	r3, r0, #1
 8005ea0:	d1c6      	bne.n	8005e30 <__sflush_r+0x34>
 8005ea2:	682b      	ldr	r3, [r5, #0]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d0c3      	beq.n	8005e30 <__sflush_r+0x34>
 8005ea8:	2b1d      	cmp	r3, #29
 8005eaa:	d001      	beq.n	8005eb0 <__sflush_r+0xb4>
 8005eac:	2b16      	cmp	r3, #22
 8005eae:	d101      	bne.n	8005eb4 <__sflush_r+0xb8>
 8005eb0:	602e      	str	r6, [r5, #0]
 8005eb2:	e7af      	b.n	8005e14 <__sflush_r+0x18>
 8005eb4:	2340      	movs	r3, #64	; 0x40
 8005eb6:	89a2      	ldrh	r2, [r4, #12]
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	81a3      	strh	r3, [r4, #12]
 8005ebc:	e7ab      	b.n	8005e16 <__sflush_r+0x1a>
 8005ebe:	2340      	movs	r3, #64	; 0x40
 8005ec0:	430b      	orrs	r3, r1
 8005ec2:	2001      	movs	r0, #1
 8005ec4:	81a3      	strh	r3, [r4, #12]
 8005ec6:	4240      	negs	r0, r0
 8005ec8:	e7a5      	b.n	8005e16 <__sflush_r+0x1a>
 8005eca:	690f      	ldr	r7, [r1, #16]
 8005ecc:	2f00      	cmp	r7, #0
 8005ece:	d0a1      	beq.n	8005e14 <__sflush_r+0x18>
 8005ed0:	680b      	ldr	r3, [r1, #0]
 8005ed2:	600f      	str	r7, [r1, #0]
 8005ed4:	1bdb      	subs	r3, r3, r7
 8005ed6:	9301      	str	r3, [sp, #4]
 8005ed8:	2300      	movs	r3, #0
 8005eda:	0792      	lsls	r2, r2, #30
 8005edc:	d100      	bne.n	8005ee0 <__sflush_r+0xe4>
 8005ede:	694b      	ldr	r3, [r1, #20]
 8005ee0:	60a3      	str	r3, [r4, #8]
 8005ee2:	9b01      	ldr	r3, [sp, #4]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	dc00      	bgt.n	8005eea <__sflush_r+0xee>
 8005ee8:	e794      	b.n	8005e14 <__sflush_r+0x18>
 8005eea:	9b01      	ldr	r3, [sp, #4]
 8005eec:	003a      	movs	r2, r7
 8005eee:	6a21      	ldr	r1, [r4, #32]
 8005ef0:	0028      	movs	r0, r5
 8005ef2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005ef4:	47b0      	blx	r6
 8005ef6:	2800      	cmp	r0, #0
 8005ef8:	dc03      	bgt.n	8005f02 <__sflush_r+0x106>
 8005efa:	2340      	movs	r3, #64	; 0x40
 8005efc:	89a2      	ldrh	r2, [r4, #12]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	e7df      	b.n	8005ec2 <__sflush_r+0xc6>
 8005f02:	9b01      	ldr	r3, [sp, #4]
 8005f04:	183f      	adds	r7, r7, r0
 8005f06:	1a1b      	subs	r3, r3, r0
 8005f08:	9301      	str	r3, [sp, #4]
 8005f0a:	e7ea      	b.n	8005ee2 <__sflush_r+0xe6>
 8005f0c:	20400001 	.word	0x20400001

08005f10 <_fflush_r>:
 8005f10:	690b      	ldr	r3, [r1, #16]
 8005f12:	b570      	push	{r4, r5, r6, lr}
 8005f14:	0005      	movs	r5, r0
 8005f16:	000c      	movs	r4, r1
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d101      	bne.n	8005f20 <_fflush_r+0x10>
 8005f1c:	2000      	movs	r0, #0
 8005f1e:	bd70      	pop	{r4, r5, r6, pc}
 8005f20:	2800      	cmp	r0, #0
 8005f22:	d004      	beq.n	8005f2e <_fflush_r+0x1e>
 8005f24:	6983      	ldr	r3, [r0, #24]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d101      	bne.n	8005f2e <_fflush_r+0x1e>
 8005f2a:	f000 f85f 	bl	8005fec <__sinit>
 8005f2e:	4b0b      	ldr	r3, [pc, #44]	; (8005f5c <_fflush_r+0x4c>)
 8005f30:	429c      	cmp	r4, r3
 8005f32:	d109      	bne.n	8005f48 <_fflush_r+0x38>
 8005f34:	686c      	ldr	r4, [r5, #4]
 8005f36:	220c      	movs	r2, #12
 8005f38:	5ea3      	ldrsh	r3, [r4, r2]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d0ee      	beq.n	8005f1c <_fflush_r+0xc>
 8005f3e:	0021      	movs	r1, r4
 8005f40:	0028      	movs	r0, r5
 8005f42:	f7ff ff5b 	bl	8005dfc <__sflush_r>
 8005f46:	e7ea      	b.n	8005f1e <_fflush_r+0xe>
 8005f48:	4b05      	ldr	r3, [pc, #20]	; (8005f60 <_fflush_r+0x50>)
 8005f4a:	429c      	cmp	r4, r3
 8005f4c:	d101      	bne.n	8005f52 <_fflush_r+0x42>
 8005f4e:	68ac      	ldr	r4, [r5, #8]
 8005f50:	e7f1      	b.n	8005f36 <_fflush_r+0x26>
 8005f52:	4b04      	ldr	r3, [pc, #16]	; (8005f64 <_fflush_r+0x54>)
 8005f54:	429c      	cmp	r4, r3
 8005f56:	d1ee      	bne.n	8005f36 <_fflush_r+0x26>
 8005f58:	68ec      	ldr	r4, [r5, #12]
 8005f5a:	e7ec      	b.n	8005f36 <_fflush_r+0x26>
 8005f5c:	0800717c 	.word	0x0800717c
 8005f60:	0800719c 	.word	0x0800719c
 8005f64:	0800715c 	.word	0x0800715c

08005f68 <std>:
 8005f68:	2300      	movs	r3, #0
 8005f6a:	b510      	push	{r4, lr}
 8005f6c:	0004      	movs	r4, r0
 8005f6e:	6003      	str	r3, [r0, #0]
 8005f70:	6043      	str	r3, [r0, #4]
 8005f72:	6083      	str	r3, [r0, #8]
 8005f74:	8181      	strh	r1, [r0, #12]
 8005f76:	6643      	str	r3, [r0, #100]	; 0x64
 8005f78:	81c2      	strh	r2, [r0, #14]
 8005f7a:	6103      	str	r3, [r0, #16]
 8005f7c:	6143      	str	r3, [r0, #20]
 8005f7e:	6183      	str	r3, [r0, #24]
 8005f80:	0019      	movs	r1, r3
 8005f82:	2208      	movs	r2, #8
 8005f84:	305c      	adds	r0, #92	; 0x5c
 8005f86:	f000 faba 	bl	80064fe <memset>
 8005f8a:	4b05      	ldr	r3, [pc, #20]	; (8005fa0 <std+0x38>)
 8005f8c:	6224      	str	r4, [r4, #32]
 8005f8e:	6263      	str	r3, [r4, #36]	; 0x24
 8005f90:	4b04      	ldr	r3, [pc, #16]	; (8005fa4 <std+0x3c>)
 8005f92:	62a3      	str	r3, [r4, #40]	; 0x28
 8005f94:	4b04      	ldr	r3, [pc, #16]	; (8005fa8 <std+0x40>)
 8005f96:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005f98:	4b04      	ldr	r3, [pc, #16]	; (8005fac <std+0x44>)
 8005f9a:	6323      	str	r3, [r4, #48]	; 0x30
 8005f9c:	bd10      	pop	{r4, pc}
 8005f9e:	46c0      	nop			; (mov r8, r8)
 8005fa0:	080066e1 	.word	0x080066e1
 8005fa4:	08006709 	.word	0x08006709
 8005fa8:	08006741 	.word	0x08006741
 8005fac:	0800676d 	.word	0x0800676d

08005fb0 <_cleanup_r>:
 8005fb0:	b510      	push	{r4, lr}
 8005fb2:	4902      	ldr	r1, [pc, #8]	; (8005fbc <_cleanup_r+0xc>)
 8005fb4:	f000 f9de 	bl	8006374 <_fwalk_reent>
 8005fb8:	bd10      	pop	{r4, pc}
 8005fba:	46c0      	nop			; (mov r8, r8)
 8005fbc:	08005f11 	.word	0x08005f11

08005fc0 <__sfmoreglue>:
 8005fc0:	b570      	push	{r4, r5, r6, lr}
 8005fc2:	2568      	movs	r5, #104	; 0x68
 8005fc4:	1e4a      	subs	r2, r1, #1
 8005fc6:	4355      	muls	r5, r2
 8005fc8:	000e      	movs	r6, r1
 8005fca:	0029      	movs	r1, r5
 8005fcc:	3174      	adds	r1, #116	; 0x74
 8005fce:	f000 fae9 	bl	80065a4 <_malloc_r>
 8005fd2:	1e04      	subs	r4, r0, #0
 8005fd4:	d008      	beq.n	8005fe8 <__sfmoreglue+0x28>
 8005fd6:	2100      	movs	r1, #0
 8005fd8:	002a      	movs	r2, r5
 8005fda:	6001      	str	r1, [r0, #0]
 8005fdc:	6046      	str	r6, [r0, #4]
 8005fde:	300c      	adds	r0, #12
 8005fe0:	60a0      	str	r0, [r4, #8]
 8005fe2:	3268      	adds	r2, #104	; 0x68
 8005fe4:	f000 fa8b 	bl	80064fe <memset>
 8005fe8:	0020      	movs	r0, r4
 8005fea:	bd70      	pop	{r4, r5, r6, pc}

08005fec <__sinit>:
 8005fec:	6983      	ldr	r3, [r0, #24]
 8005fee:	b513      	push	{r0, r1, r4, lr}
 8005ff0:	0004      	movs	r4, r0
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d128      	bne.n	8006048 <__sinit+0x5c>
 8005ff6:	6483      	str	r3, [r0, #72]	; 0x48
 8005ff8:	64c3      	str	r3, [r0, #76]	; 0x4c
 8005ffa:	6503      	str	r3, [r0, #80]	; 0x50
 8005ffc:	4b13      	ldr	r3, [pc, #76]	; (800604c <__sinit+0x60>)
 8005ffe:	4a14      	ldr	r2, [pc, #80]	; (8006050 <__sinit+0x64>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	6282      	str	r2, [r0, #40]	; 0x28
 8006004:	9301      	str	r3, [sp, #4]
 8006006:	4298      	cmp	r0, r3
 8006008:	d101      	bne.n	800600e <__sinit+0x22>
 800600a:	2301      	movs	r3, #1
 800600c:	6183      	str	r3, [r0, #24]
 800600e:	0020      	movs	r0, r4
 8006010:	f000 f820 	bl	8006054 <__sfp>
 8006014:	6060      	str	r0, [r4, #4]
 8006016:	0020      	movs	r0, r4
 8006018:	f000 f81c 	bl	8006054 <__sfp>
 800601c:	60a0      	str	r0, [r4, #8]
 800601e:	0020      	movs	r0, r4
 8006020:	f000 f818 	bl	8006054 <__sfp>
 8006024:	2200      	movs	r2, #0
 8006026:	60e0      	str	r0, [r4, #12]
 8006028:	2104      	movs	r1, #4
 800602a:	6860      	ldr	r0, [r4, #4]
 800602c:	f7ff ff9c 	bl	8005f68 <std>
 8006030:	2201      	movs	r2, #1
 8006032:	2109      	movs	r1, #9
 8006034:	68a0      	ldr	r0, [r4, #8]
 8006036:	f7ff ff97 	bl	8005f68 <std>
 800603a:	2202      	movs	r2, #2
 800603c:	2112      	movs	r1, #18
 800603e:	68e0      	ldr	r0, [r4, #12]
 8006040:	f7ff ff92 	bl	8005f68 <std>
 8006044:	2301      	movs	r3, #1
 8006046:	61a3      	str	r3, [r4, #24]
 8006048:	bd13      	pop	{r0, r1, r4, pc}
 800604a:	46c0      	nop			; (mov r8, r8)
 800604c:	080071bc 	.word	0x080071bc
 8006050:	08005fb1 	.word	0x08005fb1

08006054 <__sfp>:
 8006054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006056:	4b1c      	ldr	r3, [pc, #112]	; (80060c8 <__sfp+0x74>)
 8006058:	0007      	movs	r7, r0
 800605a:	681e      	ldr	r6, [r3, #0]
 800605c:	69b3      	ldr	r3, [r6, #24]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d102      	bne.n	8006068 <__sfp+0x14>
 8006062:	0030      	movs	r0, r6
 8006064:	f7ff ffc2 	bl	8005fec <__sinit>
 8006068:	3648      	adds	r6, #72	; 0x48
 800606a:	68b4      	ldr	r4, [r6, #8]
 800606c:	6873      	ldr	r3, [r6, #4]
 800606e:	3b01      	subs	r3, #1
 8006070:	d504      	bpl.n	800607c <__sfp+0x28>
 8006072:	6833      	ldr	r3, [r6, #0]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d007      	beq.n	8006088 <__sfp+0x34>
 8006078:	6836      	ldr	r6, [r6, #0]
 800607a:	e7f6      	b.n	800606a <__sfp+0x16>
 800607c:	220c      	movs	r2, #12
 800607e:	5ea5      	ldrsh	r5, [r4, r2]
 8006080:	2d00      	cmp	r5, #0
 8006082:	d00d      	beq.n	80060a0 <__sfp+0x4c>
 8006084:	3468      	adds	r4, #104	; 0x68
 8006086:	e7f2      	b.n	800606e <__sfp+0x1a>
 8006088:	2104      	movs	r1, #4
 800608a:	0038      	movs	r0, r7
 800608c:	f7ff ff98 	bl	8005fc0 <__sfmoreglue>
 8006090:	6030      	str	r0, [r6, #0]
 8006092:	2800      	cmp	r0, #0
 8006094:	d1f0      	bne.n	8006078 <__sfp+0x24>
 8006096:	230c      	movs	r3, #12
 8006098:	0004      	movs	r4, r0
 800609a:	603b      	str	r3, [r7, #0]
 800609c:	0020      	movs	r0, r4
 800609e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060a0:	0020      	movs	r0, r4
 80060a2:	4b0a      	ldr	r3, [pc, #40]	; (80060cc <__sfp+0x78>)
 80060a4:	6665      	str	r5, [r4, #100]	; 0x64
 80060a6:	6025      	str	r5, [r4, #0]
 80060a8:	6065      	str	r5, [r4, #4]
 80060aa:	60a5      	str	r5, [r4, #8]
 80060ac:	60e3      	str	r3, [r4, #12]
 80060ae:	6125      	str	r5, [r4, #16]
 80060b0:	6165      	str	r5, [r4, #20]
 80060b2:	61a5      	str	r5, [r4, #24]
 80060b4:	2208      	movs	r2, #8
 80060b6:	0029      	movs	r1, r5
 80060b8:	305c      	adds	r0, #92	; 0x5c
 80060ba:	f000 fa20 	bl	80064fe <memset>
 80060be:	6365      	str	r5, [r4, #52]	; 0x34
 80060c0:	63a5      	str	r5, [r4, #56]	; 0x38
 80060c2:	64a5      	str	r5, [r4, #72]	; 0x48
 80060c4:	64e5      	str	r5, [r4, #76]	; 0x4c
 80060c6:	e7e9      	b.n	800609c <__sfp+0x48>
 80060c8:	080071bc 	.word	0x080071bc
 80060cc:	ffff0001 	.word	0xffff0001

080060d0 <__sfp_lock_acquire>:
 80060d0:	4770      	bx	lr

080060d2 <__sfp_lock_release>:
 80060d2:	4770      	bx	lr

080060d4 <_fopen_r>:
 80060d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80060d6:	000f      	movs	r7, r1
 80060d8:	0011      	movs	r1, r2
 80060da:	aa01      	add	r2, sp, #4
 80060dc:	0005      	movs	r5, r0
 80060de:	f000 fb79 	bl	80067d4 <__sflags>
 80060e2:	1e06      	subs	r6, r0, #0
 80060e4:	d102      	bne.n	80060ec <_fopen_r+0x18>
 80060e6:	2400      	movs	r4, #0
 80060e8:	0020      	movs	r0, r4
 80060ea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80060ec:	0028      	movs	r0, r5
 80060ee:	f7ff ffb1 	bl	8006054 <__sfp>
 80060f2:	1e04      	subs	r4, r0, #0
 80060f4:	d0f7      	beq.n	80060e6 <_fopen_r+0x12>
 80060f6:	23db      	movs	r3, #219	; 0xdb
 80060f8:	9a01      	ldr	r2, [sp, #4]
 80060fa:	005b      	lsls	r3, r3, #1
 80060fc:	0039      	movs	r1, r7
 80060fe:	0028      	movs	r0, r5
 8006100:	f000 faae 	bl	8006660 <_open_r>
 8006104:	2800      	cmp	r0, #0
 8006106:	da06      	bge.n	8006116 <_fopen_r+0x42>
 8006108:	2500      	movs	r5, #0
 800610a:	f7ff ffe1 	bl	80060d0 <__sfp_lock_acquire>
 800610e:	81a5      	strh	r5, [r4, #12]
 8006110:	f7ff ffdf 	bl	80060d2 <__sfp_lock_release>
 8006114:	e7e7      	b.n	80060e6 <_fopen_r+0x12>
 8006116:	4b0a      	ldr	r3, [pc, #40]	; (8006140 <_fopen_r+0x6c>)
 8006118:	81e0      	strh	r0, [r4, #14]
 800611a:	6263      	str	r3, [r4, #36]	; 0x24
 800611c:	4b09      	ldr	r3, [pc, #36]	; (8006144 <_fopen_r+0x70>)
 800611e:	81a6      	strh	r6, [r4, #12]
 8006120:	62a3      	str	r3, [r4, #40]	; 0x28
 8006122:	4b09      	ldr	r3, [pc, #36]	; (8006148 <_fopen_r+0x74>)
 8006124:	6224      	str	r4, [r4, #32]
 8006126:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006128:	4b08      	ldr	r3, [pc, #32]	; (800614c <_fopen_r+0x78>)
 800612a:	6323      	str	r3, [r4, #48]	; 0x30
 800612c:	05f3      	lsls	r3, r6, #23
 800612e:	d5db      	bpl.n	80060e8 <_fopen_r+0x14>
 8006130:	2302      	movs	r3, #2
 8006132:	2200      	movs	r2, #0
 8006134:	0021      	movs	r1, r4
 8006136:	0028      	movs	r0, r5
 8006138:	f000 f814 	bl	8006164 <_fseek_r>
 800613c:	e7d4      	b.n	80060e8 <_fopen_r+0x14>
 800613e:	46c0      	nop			; (mov r8, r8)
 8006140:	080066e1 	.word	0x080066e1
 8006144:	08006709 	.word	0x08006709
 8006148:	08006741 	.word	0x08006741
 800614c:	0800676d 	.word	0x0800676d

08006150 <fopen>:
 8006150:	b510      	push	{r4, lr}
 8006152:	4b03      	ldr	r3, [pc, #12]	; (8006160 <fopen+0x10>)
 8006154:	000a      	movs	r2, r1
 8006156:	0001      	movs	r1, r0
 8006158:	6818      	ldr	r0, [r3, #0]
 800615a:	f7ff ffbb 	bl	80060d4 <_fopen_r>
 800615e:	bd10      	pop	{r4, pc}
 8006160:	20000020 	.word	0x20000020

08006164 <_fseek_r>:
 8006164:	b510      	push	{r4, lr}
 8006166:	f000 f80d 	bl	8006184 <_fseeko_r>
 800616a:	bd10      	pop	{r4, pc}

0800616c <fseek>:
 800616c:	b510      	push	{r4, lr}
 800616e:	0013      	movs	r3, r2
 8006170:	000a      	movs	r2, r1
 8006172:	0001      	movs	r1, r0
 8006174:	4802      	ldr	r0, [pc, #8]	; (8006180 <fseek+0x14>)
 8006176:	6800      	ldr	r0, [r0, #0]
 8006178:	f000 f804 	bl	8006184 <_fseeko_r>
 800617c:	bd10      	pop	{r4, pc}
 800617e:	46c0      	nop			; (mov r8, r8)
 8006180:	20000020 	.word	0x20000020

08006184 <_fseeko_r>:
 8006184:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006186:	0005      	movs	r5, r0
 8006188:	000c      	movs	r4, r1
 800618a:	9201      	str	r2, [sp, #4]
 800618c:	001e      	movs	r6, r3
 800618e:	2800      	cmp	r0, #0
 8006190:	d004      	beq.n	800619c <_fseeko_r+0x18>
 8006192:	6983      	ldr	r3, [r0, #24]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d101      	bne.n	800619c <_fseeko_r+0x18>
 8006198:	f7ff ff28 	bl	8005fec <__sinit>
 800619c:	4b40      	ldr	r3, [pc, #256]	; (80062a0 <_fseeko_r+0x11c>)
 800619e:	429c      	cmp	r4, r3
 80061a0:	d111      	bne.n	80061c6 <_fseeko_r+0x42>
 80061a2:	686c      	ldr	r4, [r5, #4]
 80061a4:	2284      	movs	r2, #132	; 0x84
 80061a6:	89a3      	ldrh	r3, [r4, #12]
 80061a8:	0052      	lsls	r2, r2, #1
 80061aa:	4013      	ands	r3, r2
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d103      	bne.n	80061b8 <_fseeko_r+0x34>
 80061b0:	0021      	movs	r1, r4
 80061b2:	0028      	movs	r0, r5
 80061b4:	f7ff feac 	bl	8005f10 <_fflush_r>
 80061b8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80061ba:	9300      	str	r3, [sp, #0]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d10c      	bne.n	80061da <_fseeko_r+0x56>
 80061c0:	331d      	adds	r3, #29
 80061c2:	602b      	str	r3, [r5, #0]
 80061c4:	e05f      	b.n	8006286 <_fseeko_r+0x102>
 80061c6:	4b37      	ldr	r3, [pc, #220]	; (80062a4 <_fseeko_r+0x120>)
 80061c8:	429c      	cmp	r4, r3
 80061ca:	d101      	bne.n	80061d0 <_fseeko_r+0x4c>
 80061cc:	68ac      	ldr	r4, [r5, #8]
 80061ce:	e7e9      	b.n	80061a4 <_fseeko_r+0x20>
 80061d0:	4b35      	ldr	r3, [pc, #212]	; (80062a8 <_fseeko_r+0x124>)
 80061d2:	429c      	cmp	r4, r3
 80061d4:	d1e6      	bne.n	80061a4 <_fseeko_r+0x20>
 80061d6:	68ec      	ldr	r4, [r5, #12]
 80061d8:	e7e4      	b.n	80061a4 <_fseeko_r+0x20>
 80061da:	2e01      	cmp	r6, #1
 80061dc:	d033      	beq.n	8006246 <_fseeko_r+0xc2>
 80061de:	2e02      	cmp	r6, #2
 80061e0:	d002      	beq.n	80061e8 <_fseeko_r+0x64>
 80061e2:	2316      	movs	r3, #22
 80061e4:	2e00      	cmp	r6, #0
 80061e6:	d1ec      	bne.n	80061c2 <_fseeko_r+0x3e>
 80061e8:	6923      	ldr	r3, [r4, #16]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d103      	bne.n	80061f6 <_fseeko_r+0x72>
 80061ee:	0021      	movs	r1, r4
 80061f0:	0028      	movs	r0, r5
 80061f2:	f000 f92d 	bl	8006450 <__smakebuf_r>
 80061f6:	0021      	movs	r1, r4
 80061f8:	0028      	movs	r0, r5
 80061fa:	f7ff fe89 	bl	8005f10 <_fflush_r>
 80061fe:	1e07      	subs	r7, r0, #0
 8006200:	d141      	bne.n	8006286 <_fseeko_r+0x102>
 8006202:	0033      	movs	r3, r6
 8006204:	9a01      	ldr	r2, [sp, #4]
 8006206:	6a21      	ldr	r1, [r4, #32]
 8006208:	0028      	movs	r0, r5
 800620a:	9e00      	ldr	r6, [sp, #0]
 800620c:	47b0      	blx	r6
 800620e:	1c43      	adds	r3, r0, #1
 8006210:	d039      	beq.n	8006286 <_fseeko_r+0x102>
 8006212:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006214:	2900      	cmp	r1, #0
 8006216:	d008      	beq.n	800622a <_fseeko_r+0xa6>
 8006218:	0023      	movs	r3, r4
 800621a:	3344      	adds	r3, #68	; 0x44
 800621c:	4299      	cmp	r1, r3
 800621e:	d002      	beq.n	8006226 <_fseeko_r+0xa2>
 8006220:	0028      	movs	r0, r5
 8006222:	f000 f975 	bl	8006510 <_free_r>
 8006226:	2300      	movs	r3, #0
 8006228:	6363      	str	r3, [r4, #52]	; 0x34
 800622a:	2100      	movs	r1, #0
 800622c:	0020      	movs	r0, r4
 800622e:	6923      	ldr	r3, [r4, #16]
 8006230:	4a1e      	ldr	r2, [pc, #120]	; (80062ac <_fseeko_r+0x128>)
 8006232:	6023      	str	r3, [r4, #0]
 8006234:	89a3      	ldrh	r3, [r4, #12]
 8006236:	6061      	str	r1, [r4, #4]
 8006238:	4013      	ands	r3, r2
 800623a:	81a3      	strh	r3, [r4, #12]
 800623c:	2208      	movs	r2, #8
 800623e:	305c      	adds	r0, #92	; 0x5c
 8006240:	f000 f95d 	bl	80064fe <memset>
 8006244:	e021      	b.n	800628a <_fseeko_r+0x106>
 8006246:	0021      	movs	r1, r4
 8006248:	0028      	movs	r0, r5
 800624a:	f7ff fe61 	bl	8005f10 <_fflush_r>
 800624e:	2380      	movs	r3, #128	; 0x80
 8006250:	89a2      	ldrh	r2, [r4, #12]
 8006252:	015b      	lsls	r3, r3, #5
 8006254:	401a      	ands	r2, r3
 8006256:	d00f      	beq.n	8006278 <_fseeko_r+0xf4>
 8006258:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800625a:	89a3      	ldrh	r3, [r4, #12]
 800625c:	075a      	lsls	r2, r3, #29
 800625e:	d516      	bpl.n	800628e <_fseeko_r+0x10a>
 8006260:	6863      	ldr	r3, [r4, #4]
 8006262:	1ac0      	subs	r0, r0, r3
 8006264:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006266:	2b00      	cmp	r3, #0
 8006268:	d001      	beq.n	800626e <_fseeko_r+0xea>
 800626a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800626c:	1ac0      	subs	r0, r0, r3
 800626e:	9b01      	ldr	r3, [sp, #4]
 8006270:	2600      	movs	r6, #0
 8006272:	181b      	adds	r3, r3, r0
 8006274:	9301      	str	r3, [sp, #4]
 8006276:	e7b7      	b.n	80061e8 <_fseeko_r+0x64>
 8006278:	0033      	movs	r3, r6
 800627a:	6a21      	ldr	r1, [r4, #32]
 800627c:	0028      	movs	r0, r5
 800627e:	9e00      	ldr	r6, [sp, #0]
 8006280:	47b0      	blx	r6
 8006282:	1c43      	adds	r3, r0, #1
 8006284:	d1e9      	bne.n	800625a <_fseeko_r+0xd6>
 8006286:	2701      	movs	r7, #1
 8006288:	427f      	negs	r7, r7
 800628a:	0038      	movs	r0, r7
 800628c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800628e:	071b      	lsls	r3, r3, #28
 8006290:	d5ed      	bpl.n	800626e <_fseeko_r+0xea>
 8006292:	6823      	ldr	r3, [r4, #0]
 8006294:	6922      	ldr	r2, [r4, #16]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d0e9      	beq.n	800626e <_fseeko_r+0xea>
 800629a:	1a9b      	subs	r3, r3, r2
 800629c:	18c0      	adds	r0, r0, r3
 800629e:	e7e6      	b.n	800626e <_fseeko_r+0xea>
 80062a0:	0800717c 	.word	0x0800717c
 80062a4:	0800719c 	.word	0x0800719c
 80062a8:	0800715c 	.word	0x0800715c
 80062ac:	fffff7df 	.word	0xfffff7df

080062b0 <ftell>:
 80062b0:	b510      	push	{r4, lr}
 80062b2:	4b03      	ldr	r3, [pc, #12]	; (80062c0 <ftell+0x10>)
 80062b4:	0001      	movs	r1, r0
 80062b6:	6818      	ldr	r0, [r3, #0]
 80062b8:	f000 f804 	bl	80062c4 <_ftello_r>
 80062bc:	bd10      	pop	{r4, pc}
 80062be:	46c0      	nop			; (mov r8, r8)
 80062c0:	20000020 	.word	0x20000020

080062c4 <_ftello_r>:
 80062c4:	b570      	push	{r4, r5, r6, lr}
 80062c6:	0005      	movs	r5, r0
 80062c8:	000c      	movs	r4, r1
 80062ca:	2800      	cmp	r0, #0
 80062cc:	d004      	beq.n	80062d8 <_ftello_r+0x14>
 80062ce:	6983      	ldr	r3, [r0, #24]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d101      	bne.n	80062d8 <_ftello_r+0x14>
 80062d4:	f7ff fe8a 	bl	8005fec <__sinit>
 80062d8:	4b23      	ldr	r3, [pc, #140]	; (8006368 <_ftello_r+0xa4>)
 80062da:	429c      	cmp	r4, r3
 80062dc:	d108      	bne.n	80062f0 <_ftello_r+0x2c>
 80062de:	686c      	ldr	r4, [r5, #4]
 80062e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80062e2:	2e00      	cmp	r6, #0
 80062e4:	d10e      	bne.n	8006304 <_ftello_r+0x40>
 80062e6:	231d      	movs	r3, #29
 80062e8:	602b      	str	r3, [r5, #0]
 80062ea:	2001      	movs	r0, #1
 80062ec:	4240      	negs	r0, r0
 80062ee:	bd70      	pop	{r4, r5, r6, pc}
 80062f0:	4b1e      	ldr	r3, [pc, #120]	; (800636c <_ftello_r+0xa8>)
 80062f2:	429c      	cmp	r4, r3
 80062f4:	d101      	bne.n	80062fa <_ftello_r+0x36>
 80062f6:	68ac      	ldr	r4, [r5, #8]
 80062f8:	e7f2      	b.n	80062e0 <_ftello_r+0x1c>
 80062fa:	4b1d      	ldr	r3, [pc, #116]	; (8006370 <_ftello_r+0xac>)
 80062fc:	429c      	cmp	r4, r3
 80062fe:	d1ef      	bne.n	80062e0 <_ftello_r+0x1c>
 8006300:	68ec      	ldr	r4, [r5, #12]
 8006302:	e7ed      	b.n	80062e0 <_ftello_r+0x1c>
 8006304:	230c      	movs	r3, #12
 8006306:	89a2      	ldrh	r2, [r4, #12]
 8006308:	4013      	ands	r3, r2
 800630a:	2b08      	cmp	r3, #8
 800630c:	d11a      	bne.n	8006344 <_ftello_r+0x80>
 800630e:	6823      	ldr	r3, [r4, #0]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d017      	beq.n	8006344 <_ftello_r+0x80>
 8006314:	6921      	ldr	r1, [r4, #16]
 8006316:	1a5b      	subs	r3, r3, r1
 8006318:	2b00      	cmp	r3, #0
 800631a:	dd13      	ble.n	8006344 <_ftello_r+0x80>
 800631c:	05d3      	lsls	r3, r2, #23
 800631e:	d511      	bpl.n	8006344 <_ftello_r+0x80>
 8006320:	2302      	movs	r3, #2
 8006322:	2200      	movs	r2, #0
 8006324:	6a21      	ldr	r1, [r4, #32]
 8006326:	0028      	movs	r0, r5
 8006328:	47b0      	blx	r6
 800632a:	1c43      	adds	r3, r0, #1
 800632c:	d0dd      	beq.n	80062ea <_ftello_r+0x26>
 800632e:	89a3      	ldrh	r3, [r4, #12]
 8006330:	075a      	lsls	r2, r3, #29
 8006332:	d50f      	bpl.n	8006354 <_ftello_r+0x90>
 8006334:	6863      	ldr	r3, [r4, #4]
 8006336:	1ac0      	subs	r0, r0, r3
 8006338:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800633a:	2b00      	cmp	r3, #0
 800633c:	d0d7      	beq.n	80062ee <_ftello_r+0x2a>
 800633e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006340:	1ac0      	subs	r0, r0, r3
 8006342:	e7d4      	b.n	80062ee <_ftello_r+0x2a>
 8006344:	2380      	movs	r3, #128	; 0x80
 8006346:	015b      	lsls	r3, r3, #5
 8006348:	401a      	ands	r2, r3
 800634a:	2301      	movs	r3, #1
 800634c:	2a00      	cmp	r2, #0
 800634e:	d0e9      	beq.n	8006324 <_ftello_r+0x60>
 8006350:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006352:	e7ec      	b.n	800632e <_ftello_r+0x6a>
 8006354:	071b      	lsls	r3, r3, #28
 8006356:	d5ca      	bpl.n	80062ee <_ftello_r+0x2a>
 8006358:	6823      	ldr	r3, [r4, #0]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d0c7      	beq.n	80062ee <_ftello_r+0x2a>
 800635e:	6922      	ldr	r2, [r4, #16]
 8006360:	1a9b      	subs	r3, r3, r2
 8006362:	18c0      	adds	r0, r0, r3
 8006364:	e7c3      	b.n	80062ee <_ftello_r+0x2a>
 8006366:	46c0      	nop			; (mov r8, r8)
 8006368:	0800717c 	.word	0x0800717c
 800636c:	0800719c 	.word	0x0800719c
 8006370:	0800715c 	.word	0x0800715c

08006374 <_fwalk_reent>:
 8006374:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006376:	0004      	movs	r4, r0
 8006378:	0007      	movs	r7, r0
 800637a:	2600      	movs	r6, #0
 800637c:	9101      	str	r1, [sp, #4]
 800637e:	3448      	adds	r4, #72	; 0x48
 8006380:	2c00      	cmp	r4, #0
 8006382:	d101      	bne.n	8006388 <_fwalk_reent+0x14>
 8006384:	0030      	movs	r0, r6
 8006386:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006388:	6863      	ldr	r3, [r4, #4]
 800638a:	68a5      	ldr	r5, [r4, #8]
 800638c:	9300      	str	r3, [sp, #0]
 800638e:	9b00      	ldr	r3, [sp, #0]
 8006390:	3b01      	subs	r3, #1
 8006392:	9300      	str	r3, [sp, #0]
 8006394:	d501      	bpl.n	800639a <_fwalk_reent+0x26>
 8006396:	6824      	ldr	r4, [r4, #0]
 8006398:	e7f2      	b.n	8006380 <_fwalk_reent+0xc>
 800639a:	89ab      	ldrh	r3, [r5, #12]
 800639c:	2b01      	cmp	r3, #1
 800639e:	d908      	bls.n	80063b2 <_fwalk_reent+0x3e>
 80063a0:	220e      	movs	r2, #14
 80063a2:	5eab      	ldrsh	r3, [r5, r2]
 80063a4:	3301      	adds	r3, #1
 80063a6:	d004      	beq.n	80063b2 <_fwalk_reent+0x3e>
 80063a8:	0029      	movs	r1, r5
 80063aa:	0038      	movs	r0, r7
 80063ac:	9b01      	ldr	r3, [sp, #4]
 80063ae:	4798      	blx	r3
 80063b0:	4306      	orrs	r6, r0
 80063b2:	3568      	adds	r5, #104	; 0x68
 80063b4:	e7eb      	b.n	800638e <_fwalk_reent+0x1a>
	...

080063b8 <__libc_init_array>:
 80063b8:	b570      	push	{r4, r5, r6, lr}
 80063ba:	2600      	movs	r6, #0
 80063bc:	4d0c      	ldr	r5, [pc, #48]	; (80063f0 <__libc_init_array+0x38>)
 80063be:	4c0d      	ldr	r4, [pc, #52]	; (80063f4 <__libc_init_array+0x3c>)
 80063c0:	1b64      	subs	r4, r4, r5
 80063c2:	10a4      	asrs	r4, r4, #2
 80063c4:	42a6      	cmp	r6, r4
 80063c6:	d109      	bne.n	80063dc <__libc_init_array+0x24>
 80063c8:	2600      	movs	r6, #0
 80063ca:	f000 fe17 	bl	8006ffc <_init>
 80063ce:	4d0a      	ldr	r5, [pc, #40]	; (80063f8 <__libc_init_array+0x40>)
 80063d0:	4c0a      	ldr	r4, [pc, #40]	; (80063fc <__libc_init_array+0x44>)
 80063d2:	1b64      	subs	r4, r4, r5
 80063d4:	10a4      	asrs	r4, r4, #2
 80063d6:	42a6      	cmp	r6, r4
 80063d8:	d105      	bne.n	80063e6 <__libc_init_array+0x2e>
 80063da:	bd70      	pop	{r4, r5, r6, pc}
 80063dc:	00b3      	lsls	r3, r6, #2
 80063de:	58eb      	ldr	r3, [r5, r3]
 80063e0:	4798      	blx	r3
 80063e2:	3601      	adds	r6, #1
 80063e4:	e7ee      	b.n	80063c4 <__libc_init_array+0xc>
 80063e6:	00b3      	lsls	r3, r6, #2
 80063e8:	58eb      	ldr	r3, [r5, r3]
 80063ea:	4798      	blx	r3
 80063ec:	3601      	adds	r6, #1
 80063ee:	e7f2      	b.n	80063d6 <__libc_init_array+0x1e>
 80063f0:	080071f4 	.word	0x080071f4
 80063f4:	080071f4 	.word	0x080071f4
 80063f8:	080071f4 	.word	0x080071f4
 80063fc:	080071f8 	.word	0x080071f8

08006400 <__swhatbuf_r>:
 8006400:	b570      	push	{r4, r5, r6, lr}
 8006402:	000e      	movs	r6, r1
 8006404:	001d      	movs	r5, r3
 8006406:	230e      	movs	r3, #14
 8006408:	5ec9      	ldrsh	r1, [r1, r3]
 800640a:	b096      	sub	sp, #88	; 0x58
 800640c:	0014      	movs	r4, r2
 800640e:	2900      	cmp	r1, #0
 8006410:	da07      	bge.n	8006422 <__swhatbuf_r+0x22>
 8006412:	2300      	movs	r3, #0
 8006414:	602b      	str	r3, [r5, #0]
 8006416:	89b3      	ldrh	r3, [r6, #12]
 8006418:	061b      	lsls	r3, r3, #24
 800641a:	d411      	bmi.n	8006440 <__swhatbuf_r+0x40>
 800641c:	2380      	movs	r3, #128	; 0x80
 800641e:	00db      	lsls	r3, r3, #3
 8006420:	e00f      	b.n	8006442 <__swhatbuf_r+0x42>
 8006422:	466a      	mov	r2, sp
 8006424:	f000 fa10 	bl	8006848 <_fstat_r>
 8006428:	2800      	cmp	r0, #0
 800642a:	dbf2      	blt.n	8006412 <__swhatbuf_r+0x12>
 800642c:	22f0      	movs	r2, #240	; 0xf0
 800642e:	9b01      	ldr	r3, [sp, #4]
 8006430:	0212      	lsls	r2, r2, #8
 8006432:	4013      	ands	r3, r2
 8006434:	4a05      	ldr	r2, [pc, #20]	; (800644c <__swhatbuf_r+0x4c>)
 8006436:	189b      	adds	r3, r3, r2
 8006438:	425a      	negs	r2, r3
 800643a:	4153      	adcs	r3, r2
 800643c:	602b      	str	r3, [r5, #0]
 800643e:	e7ed      	b.n	800641c <__swhatbuf_r+0x1c>
 8006440:	2340      	movs	r3, #64	; 0x40
 8006442:	2000      	movs	r0, #0
 8006444:	6023      	str	r3, [r4, #0]
 8006446:	b016      	add	sp, #88	; 0x58
 8006448:	bd70      	pop	{r4, r5, r6, pc}
 800644a:	46c0      	nop			; (mov r8, r8)
 800644c:	ffffe000 	.word	0xffffe000

08006450 <__smakebuf_r>:
 8006450:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006452:	2602      	movs	r6, #2
 8006454:	898b      	ldrh	r3, [r1, #12]
 8006456:	0005      	movs	r5, r0
 8006458:	000c      	movs	r4, r1
 800645a:	4233      	tst	r3, r6
 800645c:	d006      	beq.n	800646c <__smakebuf_r+0x1c>
 800645e:	0023      	movs	r3, r4
 8006460:	3347      	adds	r3, #71	; 0x47
 8006462:	6023      	str	r3, [r4, #0]
 8006464:	6123      	str	r3, [r4, #16]
 8006466:	2301      	movs	r3, #1
 8006468:	6163      	str	r3, [r4, #20]
 800646a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800646c:	ab01      	add	r3, sp, #4
 800646e:	466a      	mov	r2, sp
 8006470:	f7ff ffc6 	bl	8006400 <__swhatbuf_r>
 8006474:	9900      	ldr	r1, [sp, #0]
 8006476:	0007      	movs	r7, r0
 8006478:	0028      	movs	r0, r5
 800647a:	f000 f893 	bl	80065a4 <_malloc_r>
 800647e:	2800      	cmp	r0, #0
 8006480:	d108      	bne.n	8006494 <__smakebuf_r+0x44>
 8006482:	220c      	movs	r2, #12
 8006484:	5ea3      	ldrsh	r3, [r4, r2]
 8006486:	059a      	lsls	r2, r3, #22
 8006488:	d4ef      	bmi.n	800646a <__smakebuf_r+0x1a>
 800648a:	2203      	movs	r2, #3
 800648c:	4393      	bics	r3, r2
 800648e:	431e      	orrs	r6, r3
 8006490:	81a6      	strh	r6, [r4, #12]
 8006492:	e7e4      	b.n	800645e <__smakebuf_r+0xe>
 8006494:	4b0f      	ldr	r3, [pc, #60]	; (80064d4 <__smakebuf_r+0x84>)
 8006496:	62ab      	str	r3, [r5, #40]	; 0x28
 8006498:	2380      	movs	r3, #128	; 0x80
 800649a:	89a2      	ldrh	r2, [r4, #12]
 800649c:	6020      	str	r0, [r4, #0]
 800649e:	4313      	orrs	r3, r2
 80064a0:	81a3      	strh	r3, [r4, #12]
 80064a2:	9b00      	ldr	r3, [sp, #0]
 80064a4:	6120      	str	r0, [r4, #16]
 80064a6:	6163      	str	r3, [r4, #20]
 80064a8:	9b01      	ldr	r3, [sp, #4]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d00d      	beq.n	80064ca <__smakebuf_r+0x7a>
 80064ae:	230e      	movs	r3, #14
 80064b0:	5ee1      	ldrsh	r1, [r4, r3]
 80064b2:	0028      	movs	r0, r5
 80064b4:	f000 f9da 	bl	800686c <_isatty_r>
 80064b8:	2800      	cmp	r0, #0
 80064ba:	d006      	beq.n	80064ca <__smakebuf_r+0x7a>
 80064bc:	2203      	movs	r2, #3
 80064be:	89a3      	ldrh	r3, [r4, #12]
 80064c0:	4393      	bics	r3, r2
 80064c2:	001a      	movs	r2, r3
 80064c4:	2301      	movs	r3, #1
 80064c6:	4313      	orrs	r3, r2
 80064c8:	81a3      	strh	r3, [r4, #12]
 80064ca:	89a0      	ldrh	r0, [r4, #12]
 80064cc:	4338      	orrs	r0, r7
 80064ce:	81a0      	strh	r0, [r4, #12]
 80064d0:	e7cb      	b.n	800646a <__smakebuf_r+0x1a>
 80064d2:	46c0      	nop			; (mov r8, r8)
 80064d4:	08005fb1 	.word	0x08005fb1

080064d8 <free>:
 80064d8:	b510      	push	{r4, lr}
 80064da:	4b03      	ldr	r3, [pc, #12]	; (80064e8 <free+0x10>)
 80064dc:	0001      	movs	r1, r0
 80064de:	6818      	ldr	r0, [r3, #0]
 80064e0:	f000 f816 	bl	8006510 <_free_r>
 80064e4:	bd10      	pop	{r4, pc}
 80064e6:	46c0      	nop			; (mov r8, r8)
 80064e8:	20000020 	.word	0x20000020

080064ec <memcpy>:
 80064ec:	2300      	movs	r3, #0
 80064ee:	b510      	push	{r4, lr}
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d100      	bne.n	80064f6 <memcpy+0xa>
 80064f4:	bd10      	pop	{r4, pc}
 80064f6:	5ccc      	ldrb	r4, [r1, r3]
 80064f8:	54c4      	strb	r4, [r0, r3]
 80064fa:	3301      	adds	r3, #1
 80064fc:	e7f8      	b.n	80064f0 <memcpy+0x4>

080064fe <memset>:
 80064fe:	0003      	movs	r3, r0
 8006500:	1812      	adds	r2, r2, r0
 8006502:	4293      	cmp	r3, r2
 8006504:	d100      	bne.n	8006508 <memset+0xa>
 8006506:	4770      	bx	lr
 8006508:	7019      	strb	r1, [r3, #0]
 800650a:	3301      	adds	r3, #1
 800650c:	e7f9      	b.n	8006502 <memset+0x4>
	...

08006510 <_free_r>:
 8006510:	b570      	push	{r4, r5, r6, lr}
 8006512:	0005      	movs	r5, r0
 8006514:	2900      	cmp	r1, #0
 8006516:	d010      	beq.n	800653a <_free_r+0x2a>
 8006518:	1f0c      	subs	r4, r1, #4
 800651a:	6823      	ldr	r3, [r4, #0]
 800651c:	2b00      	cmp	r3, #0
 800651e:	da00      	bge.n	8006522 <_free_r+0x12>
 8006520:	18e4      	adds	r4, r4, r3
 8006522:	0028      	movs	r0, r5
 8006524:	f000 f9c8 	bl	80068b8 <__malloc_lock>
 8006528:	4a1d      	ldr	r2, [pc, #116]	; (80065a0 <_free_r+0x90>)
 800652a:	6813      	ldr	r3, [r2, #0]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d105      	bne.n	800653c <_free_r+0x2c>
 8006530:	6063      	str	r3, [r4, #4]
 8006532:	6014      	str	r4, [r2, #0]
 8006534:	0028      	movs	r0, r5
 8006536:	f000 f9c0 	bl	80068ba <__malloc_unlock>
 800653a:	bd70      	pop	{r4, r5, r6, pc}
 800653c:	42a3      	cmp	r3, r4
 800653e:	d909      	bls.n	8006554 <_free_r+0x44>
 8006540:	6821      	ldr	r1, [r4, #0]
 8006542:	1860      	adds	r0, r4, r1
 8006544:	4283      	cmp	r3, r0
 8006546:	d1f3      	bne.n	8006530 <_free_r+0x20>
 8006548:	6818      	ldr	r0, [r3, #0]
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	1841      	adds	r1, r0, r1
 800654e:	6021      	str	r1, [r4, #0]
 8006550:	e7ee      	b.n	8006530 <_free_r+0x20>
 8006552:	0013      	movs	r3, r2
 8006554:	685a      	ldr	r2, [r3, #4]
 8006556:	2a00      	cmp	r2, #0
 8006558:	d001      	beq.n	800655e <_free_r+0x4e>
 800655a:	42a2      	cmp	r2, r4
 800655c:	d9f9      	bls.n	8006552 <_free_r+0x42>
 800655e:	6819      	ldr	r1, [r3, #0]
 8006560:	1858      	adds	r0, r3, r1
 8006562:	42a0      	cmp	r0, r4
 8006564:	d10b      	bne.n	800657e <_free_r+0x6e>
 8006566:	6820      	ldr	r0, [r4, #0]
 8006568:	1809      	adds	r1, r1, r0
 800656a:	1858      	adds	r0, r3, r1
 800656c:	6019      	str	r1, [r3, #0]
 800656e:	4282      	cmp	r2, r0
 8006570:	d1e0      	bne.n	8006534 <_free_r+0x24>
 8006572:	6810      	ldr	r0, [r2, #0]
 8006574:	6852      	ldr	r2, [r2, #4]
 8006576:	1841      	adds	r1, r0, r1
 8006578:	6019      	str	r1, [r3, #0]
 800657a:	605a      	str	r2, [r3, #4]
 800657c:	e7da      	b.n	8006534 <_free_r+0x24>
 800657e:	42a0      	cmp	r0, r4
 8006580:	d902      	bls.n	8006588 <_free_r+0x78>
 8006582:	230c      	movs	r3, #12
 8006584:	602b      	str	r3, [r5, #0]
 8006586:	e7d5      	b.n	8006534 <_free_r+0x24>
 8006588:	6821      	ldr	r1, [r4, #0]
 800658a:	1860      	adds	r0, r4, r1
 800658c:	4282      	cmp	r2, r0
 800658e:	d103      	bne.n	8006598 <_free_r+0x88>
 8006590:	6810      	ldr	r0, [r2, #0]
 8006592:	6852      	ldr	r2, [r2, #4]
 8006594:	1841      	adds	r1, r0, r1
 8006596:	6021      	str	r1, [r4, #0]
 8006598:	6062      	str	r2, [r4, #4]
 800659a:	605c      	str	r4, [r3, #4]
 800659c:	e7ca      	b.n	8006534 <_free_r+0x24>
 800659e:	46c0      	nop			; (mov r8, r8)
 80065a0:	200000d0 	.word	0x200000d0

080065a4 <_malloc_r>:
 80065a4:	2303      	movs	r3, #3
 80065a6:	b570      	push	{r4, r5, r6, lr}
 80065a8:	1ccd      	adds	r5, r1, #3
 80065aa:	439d      	bics	r5, r3
 80065ac:	3508      	adds	r5, #8
 80065ae:	0006      	movs	r6, r0
 80065b0:	2d0c      	cmp	r5, #12
 80065b2:	d21e      	bcs.n	80065f2 <_malloc_r+0x4e>
 80065b4:	250c      	movs	r5, #12
 80065b6:	42a9      	cmp	r1, r5
 80065b8:	d81d      	bhi.n	80065f6 <_malloc_r+0x52>
 80065ba:	0030      	movs	r0, r6
 80065bc:	f000 f97c 	bl	80068b8 <__malloc_lock>
 80065c0:	4a25      	ldr	r2, [pc, #148]	; (8006658 <_malloc_r+0xb4>)
 80065c2:	6814      	ldr	r4, [r2, #0]
 80065c4:	0021      	movs	r1, r4
 80065c6:	2900      	cmp	r1, #0
 80065c8:	d119      	bne.n	80065fe <_malloc_r+0x5a>
 80065ca:	4c24      	ldr	r4, [pc, #144]	; (800665c <_malloc_r+0xb8>)
 80065cc:	6823      	ldr	r3, [r4, #0]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d103      	bne.n	80065da <_malloc_r+0x36>
 80065d2:	0030      	movs	r0, r6
 80065d4:	f000 f872 	bl	80066bc <_sbrk_r>
 80065d8:	6020      	str	r0, [r4, #0]
 80065da:	0029      	movs	r1, r5
 80065dc:	0030      	movs	r0, r6
 80065de:	f000 f86d 	bl	80066bc <_sbrk_r>
 80065e2:	1c43      	adds	r3, r0, #1
 80065e4:	d12b      	bne.n	800663e <_malloc_r+0x9a>
 80065e6:	230c      	movs	r3, #12
 80065e8:	0030      	movs	r0, r6
 80065ea:	6033      	str	r3, [r6, #0]
 80065ec:	f000 f965 	bl	80068ba <__malloc_unlock>
 80065f0:	e003      	b.n	80065fa <_malloc_r+0x56>
 80065f2:	2d00      	cmp	r5, #0
 80065f4:	dadf      	bge.n	80065b6 <_malloc_r+0x12>
 80065f6:	230c      	movs	r3, #12
 80065f8:	6033      	str	r3, [r6, #0]
 80065fa:	2000      	movs	r0, #0
 80065fc:	bd70      	pop	{r4, r5, r6, pc}
 80065fe:	680b      	ldr	r3, [r1, #0]
 8006600:	1b5b      	subs	r3, r3, r5
 8006602:	d419      	bmi.n	8006638 <_malloc_r+0x94>
 8006604:	2b0b      	cmp	r3, #11
 8006606:	d903      	bls.n	8006610 <_malloc_r+0x6c>
 8006608:	600b      	str	r3, [r1, #0]
 800660a:	18cc      	adds	r4, r1, r3
 800660c:	6025      	str	r5, [r4, #0]
 800660e:	e003      	b.n	8006618 <_malloc_r+0x74>
 8006610:	684b      	ldr	r3, [r1, #4]
 8006612:	428c      	cmp	r4, r1
 8006614:	d10d      	bne.n	8006632 <_malloc_r+0x8e>
 8006616:	6013      	str	r3, [r2, #0]
 8006618:	0030      	movs	r0, r6
 800661a:	f000 f94e 	bl	80068ba <__malloc_unlock>
 800661e:	0020      	movs	r0, r4
 8006620:	2207      	movs	r2, #7
 8006622:	300b      	adds	r0, #11
 8006624:	1d23      	adds	r3, r4, #4
 8006626:	4390      	bics	r0, r2
 8006628:	1ac3      	subs	r3, r0, r3
 800662a:	d0e7      	beq.n	80065fc <_malloc_r+0x58>
 800662c:	425a      	negs	r2, r3
 800662e:	50e2      	str	r2, [r4, r3]
 8006630:	e7e4      	b.n	80065fc <_malloc_r+0x58>
 8006632:	6063      	str	r3, [r4, #4]
 8006634:	000c      	movs	r4, r1
 8006636:	e7ef      	b.n	8006618 <_malloc_r+0x74>
 8006638:	000c      	movs	r4, r1
 800663a:	6849      	ldr	r1, [r1, #4]
 800663c:	e7c3      	b.n	80065c6 <_malloc_r+0x22>
 800663e:	2303      	movs	r3, #3
 8006640:	1cc4      	adds	r4, r0, #3
 8006642:	439c      	bics	r4, r3
 8006644:	42a0      	cmp	r0, r4
 8006646:	d0e1      	beq.n	800660c <_malloc_r+0x68>
 8006648:	1a21      	subs	r1, r4, r0
 800664a:	0030      	movs	r0, r6
 800664c:	f000 f836 	bl	80066bc <_sbrk_r>
 8006650:	1c43      	adds	r3, r0, #1
 8006652:	d1db      	bne.n	800660c <_malloc_r+0x68>
 8006654:	e7c7      	b.n	80065e6 <_malloc_r+0x42>
 8006656:	46c0      	nop			; (mov r8, r8)
 8006658:	200000d0 	.word	0x200000d0
 800665c:	200000d4 	.word	0x200000d4

08006660 <_open_r>:
 8006660:	b570      	push	{r4, r5, r6, lr}
 8006662:	0005      	movs	r5, r0
 8006664:	0008      	movs	r0, r1
 8006666:	0011      	movs	r1, r2
 8006668:	2200      	movs	r2, #0
 800666a:	4c06      	ldr	r4, [pc, #24]	; (8006684 <_open_r+0x24>)
 800666c:	6022      	str	r2, [r4, #0]
 800666e:	001a      	movs	r2, r3
 8006670:	f7fa fc30 	bl	8000ed4 <_open>
 8006674:	1c43      	adds	r3, r0, #1
 8006676:	d103      	bne.n	8006680 <_open_r+0x20>
 8006678:	6823      	ldr	r3, [r4, #0]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d000      	beq.n	8006680 <_open_r+0x20>
 800667e:	602b      	str	r3, [r5, #0]
 8006680:	bd70      	pop	{r4, r5, r6, pc}
 8006682:	46c0      	nop			; (mov r8, r8)
 8006684:	20000628 	.word	0x20000628

08006688 <iprintf>:
 8006688:	b40f      	push	{r0, r1, r2, r3}
 800668a:	4b0b      	ldr	r3, [pc, #44]	; (80066b8 <iprintf+0x30>)
 800668c:	b513      	push	{r0, r1, r4, lr}
 800668e:	681c      	ldr	r4, [r3, #0]
 8006690:	2c00      	cmp	r4, #0
 8006692:	d005      	beq.n	80066a0 <iprintf+0x18>
 8006694:	69a3      	ldr	r3, [r4, #24]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d102      	bne.n	80066a0 <iprintf+0x18>
 800669a:	0020      	movs	r0, r4
 800669c:	f7ff fca6 	bl	8005fec <__sinit>
 80066a0:	ab05      	add	r3, sp, #20
 80066a2:	9a04      	ldr	r2, [sp, #16]
 80066a4:	68a1      	ldr	r1, [r4, #8]
 80066a6:	0020      	movs	r0, r4
 80066a8:	9301      	str	r3, [sp, #4]
 80066aa:	f000 f92f 	bl	800690c <_vfiprintf_r>
 80066ae:	bc16      	pop	{r1, r2, r4}
 80066b0:	bc08      	pop	{r3}
 80066b2:	b004      	add	sp, #16
 80066b4:	4718      	bx	r3
 80066b6:	46c0      	nop			; (mov r8, r8)
 80066b8:	20000020 	.word	0x20000020

080066bc <_sbrk_r>:
 80066bc:	2300      	movs	r3, #0
 80066be:	b570      	push	{r4, r5, r6, lr}
 80066c0:	4c06      	ldr	r4, [pc, #24]	; (80066dc <_sbrk_r+0x20>)
 80066c2:	0005      	movs	r5, r0
 80066c4:	0008      	movs	r0, r1
 80066c6:	6023      	str	r3, [r4, #0]
 80066c8:	f7fa fc12 	bl	8000ef0 <_sbrk>
 80066cc:	1c43      	adds	r3, r0, #1
 80066ce:	d103      	bne.n	80066d8 <_sbrk_r+0x1c>
 80066d0:	6823      	ldr	r3, [r4, #0]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d000      	beq.n	80066d8 <_sbrk_r+0x1c>
 80066d6:	602b      	str	r3, [r5, #0]
 80066d8:	bd70      	pop	{r4, r5, r6, pc}
 80066da:	46c0      	nop			; (mov r8, r8)
 80066dc:	20000628 	.word	0x20000628

080066e0 <__sread>:
 80066e0:	b570      	push	{r4, r5, r6, lr}
 80066e2:	000c      	movs	r4, r1
 80066e4:	250e      	movs	r5, #14
 80066e6:	5f49      	ldrsh	r1, [r1, r5]
 80066e8:	f000 fb9c 	bl	8006e24 <_read_r>
 80066ec:	2800      	cmp	r0, #0
 80066ee:	db03      	blt.n	80066f8 <__sread+0x18>
 80066f0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80066f2:	181b      	adds	r3, r3, r0
 80066f4:	6563      	str	r3, [r4, #84]	; 0x54
 80066f6:	bd70      	pop	{r4, r5, r6, pc}
 80066f8:	89a3      	ldrh	r3, [r4, #12]
 80066fa:	4a02      	ldr	r2, [pc, #8]	; (8006704 <__sread+0x24>)
 80066fc:	4013      	ands	r3, r2
 80066fe:	81a3      	strh	r3, [r4, #12]
 8006700:	e7f9      	b.n	80066f6 <__sread+0x16>
 8006702:	46c0      	nop			; (mov r8, r8)
 8006704:	ffffefff 	.word	0xffffefff

08006708 <__swrite>:
 8006708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800670a:	001f      	movs	r7, r3
 800670c:	898b      	ldrh	r3, [r1, #12]
 800670e:	0005      	movs	r5, r0
 8006710:	000c      	movs	r4, r1
 8006712:	0016      	movs	r6, r2
 8006714:	05db      	lsls	r3, r3, #23
 8006716:	d505      	bpl.n	8006724 <__swrite+0x1c>
 8006718:	230e      	movs	r3, #14
 800671a:	5ec9      	ldrsh	r1, [r1, r3]
 800671c:	2200      	movs	r2, #0
 800671e:	2302      	movs	r3, #2
 8006720:	f000 f8b6 	bl	8006890 <_lseek_r>
 8006724:	89a3      	ldrh	r3, [r4, #12]
 8006726:	4a05      	ldr	r2, [pc, #20]	; (800673c <__swrite+0x34>)
 8006728:	0028      	movs	r0, r5
 800672a:	4013      	ands	r3, r2
 800672c:	81a3      	strh	r3, [r4, #12]
 800672e:	0032      	movs	r2, r6
 8006730:	230e      	movs	r3, #14
 8006732:	5ee1      	ldrsh	r1, [r4, r3]
 8006734:	003b      	movs	r3, r7
 8006736:	f000 f827 	bl	8006788 <_write_r>
 800673a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800673c:	ffffefff 	.word	0xffffefff

08006740 <__sseek>:
 8006740:	b570      	push	{r4, r5, r6, lr}
 8006742:	000c      	movs	r4, r1
 8006744:	250e      	movs	r5, #14
 8006746:	5f49      	ldrsh	r1, [r1, r5]
 8006748:	f000 f8a2 	bl	8006890 <_lseek_r>
 800674c:	89a3      	ldrh	r3, [r4, #12]
 800674e:	1c42      	adds	r2, r0, #1
 8006750:	d103      	bne.n	800675a <__sseek+0x1a>
 8006752:	4a05      	ldr	r2, [pc, #20]	; (8006768 <__sseek+0x28>)
 8006754:	4013      	ands	r3, r2
 8006756:	81a3      	strh	r3, [r4, #12]
 8006758:	bd70      	pop	{r4, r5, r6, pc}
 800675a:	2280      	movs	r2, #128	; 0x80
 800675c:	0152      	lsls	r2, r2, #5
 800675e:	4313      	orrs	r3, r2
 8006760:	81a3      	strh	r3, [r4, #12]
 8006762:	6560      	str	r0, [r4, #84]	; 0x54
 8006764:	e7f8      	b.n	8006758 <__sseek+0x18>
 8006766:	46c0      	nop			; (mov r8, r8)
 8006768:	ffffefff 	.word	0xffffefff

0800676c <__sclose>:
 800676c:	b510      	push	{r4, lr}
 800676e:	230e      	movs	r3, #14
 8006770:	5ec9      	ldrsh	r1, [r1, r3]
 8006772:	f000 f81d 	bl	80067b0 <_close_r>
 8006776:	bd10      	pop	{r4, pc}

08006778 <strcpy>:
 8006778:	0003      	movs	r3, r0
 800677a:	780a      	ldrb	r2, [r1, #0]
 800677c:	3101      	adds	r1, #1
 800677e:	701a      	strb	r2, [r3, #0]
 8006780:	3301      	adds	r3, #1
 8006782:	2a00      	cmp	r2, #0
 8006784:	d1f9      	bne.n	800677a <strcpy+0x2>
 8006786:	4770      	bx	lr

08006788 <_write_r>:
 8006788:	b570      	push	{r4, r5, r6, lr}
 800678a:	0005      	movs	r5, r0
 800678c:	0008      	movs	r0, r1
 800678e:	0011      	movs	r1, r2
 8006790:	2200      	movs	r2, #0
 8006792:	4c06      	ldr	r4, [pc, #24]	; (80067ac <_write_r+0x24>)
 8006794:	6022      	str	r2, [r4, #0]
 8006796:	001a      	movs	r2, r3
 8006798:	f7fa fb54 	bl	8000e44 <_write>
 800679c:	1c43      	adds	r3, r0, #1
 800679e:	d103      	bne.n	80067a8 <_write_r+0x20>
 80067a0:	6823      	ldr	r3, [r4, #0]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d000      	beq.n	80067a8 <_write_r+0x20>
 80067a6:	602b      	str	r3, [r5, #0]
 80067a8:	bd70      	pop	{r4, r5, r6, pc}
 80067aa:	46c0      	nop			; (mov r8, r8)
 80067ac:	20000628 	.word	0x20000628

080067b0 <_close_r>:
 80067b0:	2300      	movs	r3, #0
 80067b2:	b570      	push	{r4, r5, r6, lr}
 80067b4:	4c06      	ldr	r4, [pc, #24]	; (80067d0 <_close_r+0x20>)
 80067b6:	0005      	movs	r5, r0
 80067b8:	0008      	movs	r0, r1
 80067ba:	6023      	str	r3, [r4, #0]
 80067bc:	f7fa fb5e 	bl	8000e7c <_close>
 80067c0:	1c43      	adds	r3, r0, #1
 80067c2:	d103      	bne.n	80067cc <_close_r+0x1c>
 80067c4:	6823      	ldr	r3, [r4, #0]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d000      	beq.n	80067cc <_close_r+0x1c>
 80067ca:	602b      	str	r3, [r5, #0]
 80067cc:	bd70      	pop	{r4, r5, r6, pc}
 80067ce:	46c0      	nop			; (mov r8, r8)
 80067d0:	20000628 	.word	0x20000628

080067d4 <__sflags>:
 80067d4:	780b      	ldrb	r3, [r1, #0]
 80067d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067d8:	2b72      	cmp	r3, #114	; 0x72
 80067da:	d030      	beq.n	800683e <__sflags+0x6a>
 80067dc:	2b77      	cmp	r3, #119	; 0x77
 80067de:	d007      	beq.n	80067f0 <__sflags+0x1c>
 80067e0:	2b61      	cmp	r3, #97	; 0x61
 80067e2:	d10f      	bne.n	8006804 <__sflags+0x30>
 80067e4:	2482      	movs	r4, #130	; 0x82
 80067e6:	2084      	movs	r0, #132	; 0x84
 80067e8:	00a4      	lsls	r4, r4, #2
 80067ea:	2301      	movs	r3, #1
 80067ec:	0040      	lsls	r0, r0, #1
 80067ee:	e003      	b.n	80067f8 <__sflags+0x24>
 80067f0:	24c0      	movs	r4, #192	; 0xc0
 80067f2:	2301      	movs	r3, #1
 80067f4:	2008      	movs	r0, #8
 80067f6:	00e4      	lsls	r4, r4, #3
 80067f8:	2680      	movs	r6, #128	; 0x80
 80067fa:	2510      	movs	r5, #16
 80067fc:	0136      	lsls	r6, r6, #4
 80067fe:	271c      	movs	r7, #28
 8006800:	46ac      	mov	ip, r5
 8006802:	e010      	b.n	8006826 <__sflags+0x52>
 8006804:	2316      	movs	r3, #22
 8006806:	6003      	str	r3, [r0, #0]
 8006808:	2000      	movs	r0, #0
 800680a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800680c:	2d62      	cmp	r5, #98	; 0x62
 800680e:	d011      	beq.n	8006834 <__sflags+0x60>
 8006810:	2d78      	cmp	r5, #120	; 0x78
 8006812:	d012      	beq.n	800683a <__sflags+0x66>
 8006814:	2d2b      	cmp	r5, #43	; 0x2b
 8006816:	d106      	bne.n	8006826 <__sflags+0x52>
 8006818:	4665      	mov	r5, ip
 800681a:	43b8      	bics	r0, r7
 800681c:	4328      	orrs	r0, r5
 800681e:	2503      	movs	r5, #3
 8006820:	43ab      	bics	r3, r5
 8006822:	3d01      	subs	r5, #1
 8006824:	432b      	orrs	r3, r5
 8006826:	3101      	adds	r1, #1
 8006828:	780d      	ldrb	r5, [r1, #0]
 800682a:	2d00      	cmp	r5, #0
 800682c:	d1ee      	bne.n	800680c <__sflags+0x38>
 800682e:	4323      	orrs	r3, r4
 8006830:	6013      	str	r3, [r2, #0]
 8006832:	e7ea      	b.n	800680a <__sflags+0x36>
 8006834:	2580      	movs	r5, #128	; 0x80
 8006836:	026d      	lsls	r5, r5, #9
 8006838:	e7f4      	b.n	8006824 <__sflags+0x50>
 800683a:	4333      	orrs	r3, r6
 800683c:	e7f3      	b.n	8006826 <__sflags+0x52>
 800683e:	2400      	movs	r4, #0
 8006840:	2004      	movs	r0, #4
 8006842:	0023      	movs	r3, r4
 8006844:	e7d8      	b.n	80067f8 <__sflags+0x24>
	...

08006848 <_fstat_r>:
 8006848:	2300      	movs	r3, #0
 800684a:	b570      	push	{r4, r5, r6, lr}
 800684c:	4c06      	ldr	r4, [pc, #24]	; (8006868 <_fstat_r+0x20>)
 800684e:	0005      	movs	r5, r0
 8006850:	0008      	movs	r0, r1
 8006852:	0011      	movs	r1, r2
 8006854:	6023      	str	r3, [r4, #0]
 8006856:	f7fa fb1b 	bl	8000e90 <_fstat>
 800685a:	1c43      	adds	r3, r0, #1
 800685c:	d103      	bne.n	8006866 <_fstat_r+0x1e>
 800685e:	6823      	ldr	r3, [r4, #0]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d000      	beq.n	8006866 <_fstat_r+0x1e>
 8006864:	602b      	str	r3, [r5, #0]
 8006866:	bd70      	pop	{r4, r5, r6, pc}
 8006868:	20000628 	.word	0x20000628

0800686c <_isatty_r>:
 800686c:	2300      	movs	r3, #0
 800686e:	b570      	push	{r4, r5, r6, lr}
 8006870:	4c06      	ldr	r4, [pc, #24]	; (800688c <_isatty_r+0x20>)
 8006872:	0005      	movs	r5, r0
 8006874:	0008      	movs	r0, r1
 8006876:	6023      	str	r3, [r4, #0]
 8006878:	f7fa fb18 	bl	8000eac <_isatty>
 800687c:	1c43      	adds	r3, r0, #1
 800687e:	d103      	bne.n	8006888 <_isatty_r+0x1c>
 8006880:	6823      	ldr	r3, [r4, #0]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d000      	beq.n	8006888 <_isatty_r+0x1c>
 8006886:	602b      	str	r3, [r5, #0]
 8006888:	bd70      	pop	{r4, r5, r6, pc}
 800688a:	46c0      	nop			; (mov r8, r8)
 800688c:	20000628 	.word	0x20000628

08006890 <_lseek_r>:
 8006890:	b570      	push	{r4, r5, r6, lr}
 8006892:	0005      	movs	r5, r0
 8006894:	0008      	movs	r0, r1
 8006896:	0011      	movs	r1, r2
 8006898:	2200      	movs	r2, #0
 800689a:	4c06      	ldr	r4, [pc, #24]	; (80068b4 <_lseek_r+0x24>)
 800689c:	6022      	str	r2, [r4, #0]
 800689e:	001a      	movs	r2, r3
 80068a0:	f7fa fb0d 	bl	8000ebe <_lseek>
 80068a4:	1c43      	adds	r3, r0, #1
 80068a6:	d103      	bne.n	80068b0 <_lseek_r+0x20>
 80068a8:	6823      	ldr	r3, [r4, #0]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d000      	beq.n	80068b0 <_lseek_r+0x20>
 80068ae:	602b      	str	r3, [r5, #0]
 80068b0:	bd70      	pop	{r4, r5, r6, pc}
 80068b2:	46c0      	nop			; (mov r8, r8)
 80068b4:	20000628 	.word	0x20000628

080068b8 <__malloc_lock>:
 80068b8:	4770      	bx	lr

080068ba <__malloc_unlock>:
 80068ba:	4770      	bx	lr

080068bc <__sfputc_r>:
 80068bc:	6893      	ldr	r3, [r2, #8]
 80068be:	b510      	push	{r4, lr}
 80068c0:	3b01      	subs	r3, #1
 80068c2:	6093      	str	r3, [r2, #8]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	da04      	bge.n	80068d2 <__sfputc_r+0x16>
 80068c8:	6994      	ldr	r4, [r2, #24]
 80068ca:	42a3      	cmp	r3, r4
 80068cc:	db07      	blt.n	80068de <__sfputc_r+0x22>
 80068ce:	290a      	cmp	r1, #10
 80068d0:	d005      	beq.n	80068de <__sfputc_r+0x22>
 80068d2:	6813      	ldr	r3, [r2, #0]
 80068d4:	1c58      	adds	r0, r3, #1
 80068d6:	6010      	str	r0, [r2, #0]
 80068d8:	7019      	strb	r1, [r3, #0]
 80068da:	0008      	movs	r0, r1
 80068dc:	bd10      	pop	{r4, pc}
 80068de:	f000 fab5 	bl	8006e4c <__swbuf_r>
 80068e2:	0001      	movs	r1, r0
 80068e4:	e7f9      	b.n	80068da <__sfputc_r+0x1e>

080068e6 <__sfputs_r>:
 80068e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068e8:	0006      	movs	r6, r0
 80068ea:	000f      	movs	r7, r1
 80068ec:	0014      	movs	r4, r2
 80068ee:	18d5      	adds	r5, r2, r3
 80068f0:	42ac      	cmp	r4, r5
 80068f2:	d101      	bne.n	80068f8 <__sfputs_r+0x12>
 80068f4:	2000      	movs	r0, #0
 80068f6:	e007      	b.n	8006908 <__sfputs_r+0x22>
 80068f8:	7821      	ldrb	r1, [r4, #0]
 80068fa:	003a      	movs	r2, r7
 80068fc:	0030      	movs	r0, r6
 80068fe:	f7ff ffdd 	bl	80068bc <__sfputc_r>
 8006902:	3401      	adds	r4, #1
 8006904:	1c43      	adds	r3, r0, #1
 8006906:	d1f3      	bne.n	80068f0 <__sfputs_r+0xa>
 8006908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800690c <_vfiprintf_r>:
 800690c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800690e:	b0a1      	sub	sp, #132	; 0x84
 8006910:	9003      	str	r0, [sp, #12]
 8006912:	000f      	movs	r7, r1
 8006914:	0016      	movs	r6, r2
 8006916:	001d      	movs	r5, r3
 8006918:	2800      	cmp	r0, #0
 800691a:	d005      	beq.n	8006928 <_vfiprintf_r+0x1c>
 800691c:	6983      	ldr	r3, [r0, #24]
 800691e:	9305      	str	r3, [sp, #20]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d101      	bne.n	8006928 <_vfiprintf_r+0x1c>
 8006924:	f7ff fb62 	bl	8005fec <__sinit>
 8006928:	4b7b      	ldr	r3, [pc, #492]	; (8006b18 <_vfiprintf_r+0x20c>)
 800692a:	429f      	cmp	r7, r3
 800692c:	d15c      	bne.n	80069e8 <_vfiprintf_r+0xdc>
 800692e:	9b03      	ldr	r3, [sp, #12]
 8006930:	685f      	ldr	r7, [r3, #4]
 8006932:	89bb      	ldrh	r3, [r7, #12]
 8006934:	071b      	lsls	r3, r3, #28
 8006936:	d563      	bpl.n	8006a00 <_vfiprintf_r+0xf4>
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d060      	beq.n	8006a00 <_vfiprintf_r+0xf4>
 800693e:	2300      	movs	r3, #0
 8006940:	ac08      	add	r4, sp, #32
 8006942:	6163      	str	r3, [r4, #20]
 8006944:	3320      	adds	r3, #32
 8006946:	7663      	strb	r3, [r4, #25]
 8006948:	3310      	adds	r3, #16
 800694a:	76a3      	strb	r3, [r4, #26]
 800694c:	9507      	str	r5, [sp, #28]
 800694e:	0035      	movs	r5, r6
 8006950:	782b      	ldrb	r3, [r5, #0]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d001      	beq.n	800695a <_vfiprintf_r+0x4e>
 8006956:	2b25      	cmp	r3, #37	; 0x25
 8006958:	d15c      	bne.n	8006a14 <_vfiprintf_r+0x108>
 800695a:	1bab      	subs	r3, r5, r6
 800695c:	9305      	str	r3, [sp, #20]
 800695e:	d00c      	beq.n	800697a <_vfiprintf_r+0x6e>
 8006960:	0032      	movs	r2, r6
 8006962:	0039      	movs	r1, r7
 8006964:	9803      	ldr	r0, [sp, #12]
 8006966:	f7ff ffbe 	bl	80068e6 <__sfputs_r>
 800696a:	1c43      	adds	r3, r0, #1
 800696c:	d100      	bne.n	8006970 <_vfiprintf_r+0x64>
 800696e:	e0c4      	b.n	8006afa <_vfiprintf_r+0x1ee>
 8006970:	6962      	ldr	r2, [r4, #20]
 8006972:	9b05      	ldr	r3, [sp, #20]
 8006974:	4694      	mov	ip, r2
 8006976:	4463      	add	r3, ip
 8006978:	6163      	str	r3, [r4, #20]
 800697a:	782b      	ldrb	r3, [r5, #0]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d100      	bne.n	8006982 <_vfiprintf_r+0x76>
 8006980:	e0bb      	b.n	8006afa <_vfiprintf_r+0x1ee>
 8006982:	2201      	movs	r2, #1
 8006984:	2300      	movs	r3, #0
 8006986:	4252      	negs	r2, r2
 8006988:	6062      	str	r2, [r4, #4]
 800698a:	a904      	add	r1, sp, #16
 800698c:	3254      	adds	r2, #84	; 0x54
 800698e:	1852      	adds	r2, r2, r1
 8006990:	1c6e      	adds	r6, r5, #1
 8006992:	6023      	str	r3, [r4, #0]
 8006994:	60e3      	str	r3, [r4, #12]
 8006996:	60a3      	str	r3, [r4, #8]
 8006998:	7013      	strb	r3, [r2, #0]
 800699a:	65a3      	str	r3, [r4, #88]	; 0x58
 800699c:	7831      	ldrb	r1, [r6, #0]
 800699e:	2205      	movs	r2, #5
 80069a0:	485e      	ldr	r0, [pc, #376]	; (8006b1c <_vfiprintf_r+0x210>)
 80069a2:	f000 fb1f 	bl	8006fe4 <memchr>
 80069a6:	1c75      	adds	r5, r6, #1
 80069a8:	2800      	cmp	r0, #0
 80069aa:	d135      	bne.n	8006a18 <_vfiprintf_r+0x10c>
 80069ac:	6822      	ldr	r2, [r4, #0]
 80069ae:	06d3      	lsls	r3, r2, #27
 80069b0:	d504      	bpl.n	80069bc <_vfiprintf_r+0xb0>
 80069b2:	2353      	movs	r3, #83	; 0x53
 80069b4:	a904      	add	r1, sp, #16
 80069b6:	185b      	adds	r3, r3, r1
 80069b8:	2120      	movs	r1, #32
 80069ba:	7019      	strb	r1, [r3, #0]
 80069bc:	0713      	lsls	r3, r2, #28
 80069be:	d504      	bpl.n	80069ca <_vfiprintf_r+0xbe>
 80069c0:	2353      	movs	r3, #83	; 0x53
 80069c2:	a904      	add	r1, sp, #16
 80069c4:	185b      	adds	r3, r3, r1
 80069c6:	212b      	movs	r1, #43	; 0x2b
 80069c8:	7019      	strb	r1, [r3, #0]
 80069ca:	7833      	ldrb	r3, [r6, #0]
 80069cc:	2b2a      	cmp	r3, #42	; 0x2a
 80069ce:	d02c      	beq.n	8006a2a <_vfiprintf_r+0x11e>
 80069d0:	0035      	movs	r5, r6
 80069d2:	2100      	movs	r1, #0
 80069d4:	200a      	movs	r0, #10
 80069d6:	68e3      	ldr	r3, [r4, #12]
 80069d8:	782a      	ldrb	r2, [r5, #0]
 80069da:	1c6e      	adds	r6, r5, #1
 80069dc:	3a30      	subs	r2, #48	; 0x30
 80069de:	2a09      	cmp	r2, #9
 80069e0:	d964      	bls.n	8006aac <_vfiprintf_r+0x1a0>
 80069e2:	2900      	cmp	r1, #0
 80069e4:	d02e      	beq.n	8006a44 <_vfiprintf_r+0x138>
 80069e6:	e026      	b.n	8006a36 <_vfiprintf_r+0x12a>
 80069e8:	4b4d      	ldr	r3, [pc, #308]	; (8006b20 <_vfiprintf_r+0x214>)
 80069ea:	429f      	cmp	r7, r3
 80069ec:	d102      	bne.n	80069f4 <_vfiprintf_r+0xe8>
 80069ee:	9b03      	ldr	r3, [sp, #12]
 80069f0:	689f      	ldr	r7, [r3, #8]
 80069f2:	e79e      	b.n	8006932 <_vfiprintf_r+0x26>
 80069f4:	4b4b      	ldr	r3, [pc, #300]	; (8006b24 <_vfiprintf_r+0x218>)
 80069f6:	429f      	cmp	r7, r3
 80069f8:	d19b      	bne.n	8006932 <_vfiprintf_r+0x26>
 80069fa:	9b03      	ldr	r3, [sp, #12]
 80069fc:	68df      	ldr	r7, [r3, #12]
 80069fe:	e798      	b.n	8006932 <_vfiprintf_r+0x26>
 8006a00:	0039      	movs	r1, r7
 8006a02:	9803      	ldr	r0, [sp, #12]
 8006a04:	f000 fa78 	bl	8006ef8 <__swsetup_r>
 8006a08:	2800      	cmp	r0, #0
 8006a0a:	d098      	beq.n	800693e <_vfiprintf_r+0x32>
 8006a0c:	2001      	movs	r0, #1
 8006a0e:	4240      	negs	r0, r0
 8006a10:	b021      	add	sp, #132	; 0x84
 8006a12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a14:	3501      	adds	r5, #1
 8006a16:	e79b      	b.n	8006950 <_vfiprintf_r+0x44>
 8006a18:	4b40      	ldr	r3, [pc, #256]	; (8006b1c <_vfiprintf_r+0x210>)
 8006a1a:	6822      	ldr	r2, [r4, #0]
 8006a1c:	1ac0      	subs	r0, r0, r3
 8006a1e:	2301      	movs	r3, #1
 8006a20:	4083      	lsls	r3, r0
 8006a22:	4313      	orrs	r3, r2
 8006a24:	6023      	str	r3, [r4, #0]
 8006a26:	002e      	movs	r6, r5
 8006a28:	e7b8      	b.n	800699c <_vfiprintf_r+0x90>
 8006a2a:	9b07      	ldr	r3, [sp, #28]
 8006a2c:	1d19      	adds	r1, r3, #4
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	9107      	str	r1, [sp, #28]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	db01      	blt.n	8006a3a <_vfiprintf_r+0x12e>
 8006a36:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a38:	e004      	b.n	8006a44 <_vfiprintf_r+0x138>
 8006a3a:	425b      	negs	r3, r3
 8006a3c:	60e3      	str	r3, [r4, #12]
 8006a3e:	2302      	movs	r3, #2
 8006a40:	4313      	orrs	r3, r2
 8006a42:	6023      	str	r3, [r4, #0]
 8006a44:	782b      	ldrb	r3, [r5, #0]
 8006a46:	2b2e      	cmp	r3, #46	; 0x2e
 8006a48:	d10a      	bne.n	8006a60 <_vfiprintf_r+0x154>
 8006a4a:	786b      	ldrb	r3, [r5, #1]
 8006a4c:	2b2a      	cmp	r3, #42	; 0x2a
 8006a4e:	d135      	bne.n	8006abc <_vfiprintf_r+0x1b0>
 8006a50:	9b07      	ldr	r3, [sp, #28]
 8006a52:	3502      	adds	r5, #2
 8006a54:	1d1a      	adds	r2, r3, #4
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	9207      	str	r2, [sp, #28]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	db2b      	blt.n	8006ab6 <_vfiprintf_r+0x1aa>
 8006a5e:	9309      	str	r3, [sp, #36]	; 0x24
 8006a60:	4e31      	ldr	r6, [pc, #196]	; (8006b28 <_vfiprintf_r+0x21c>)
 8006a62:	7829      	ldrb	r1, [r5, #0]
 8006a64:	2203      	movs	r2, #3
 8006a66:	0030      	movs	r0, r6
 8006a68:	f000 fabc 	bl	8006fe4 <memchr>
 8006a6c:	2800      	cmp	r0, #0
 8006a6e:	d006      	beq.n	8006a7e <_vfiprintf_r+0x172>
 8006a70:	2340      	movs	r3, #64	; 0x40
 8006a72:	1b80      	subs	r0, r0, r6
 8006a74:	4083      	lsls	r3, r0
 8006a76:	6822      	ldr	r2, [r4, #0]
 8006a78:	3501      	adds	r5, #1
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	6023      	str	r3, [r4, #0]
 8006a7e:	7829      	ldrb	r1, [r5, #0]
 8006a80:	2206      	movs	r2, #6
 8006a82:	482a      	ldr	r0, [pc, #168]	; (8006b2c <_vfiprintf_r+0x220>)
 8006a84:	1c6e      	adds	r6, r5, #1
 8006a86:	7621      	strb	r1, [r4, #24]
 8006a88:	f000 faac 	bl	8006fe4 <memchr>
 8006a8c:	2800      	cmp	r0, #0
 8006a8e:	d03a      	beq.n	8006b06 <_vfiprintf_r+0x1fa>
 8006a90:	4b27      	ldr	r3, [pc, #156]	; (8006b30 <_vfiprintf_r+0x224>)
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d125      	bne.n	8006ae2 <_vfiprintf_r+0x1d6>
 8006a96:	2207      	movs	r2, #7
 8006a98:	9b07      	ldr	r3, [sp, #28]
 8006a9a:	3307      	adds	r3, #7
 8006a9c:	4393      	bics	r3, r2
 8006a9e:	3308      	adds	r3, #8
 8006aa0:	9307      	str	r3, [sp, #28]
 8006aa2:	6963      	ldr	r3, [r4, #20]
 8006aa4:	9a04      	ldr	r2, [sp, #16]
 8006aa6:	189b      	adds	r3, r3, r2
 8006aa8:	6163      	str	r3, [r4, #20]
 8006aaa:	e750      	b.n	800694e <_vfiprintf_r+0x42>
 8006aac:	4343      	muls	r3, r0
 8006aae:	2101      	movs	r1, #1
 8006ab0:	189b      	adds	r3, r3, r2
 8006ab2:	0035      	movs	r5, r6
 8006ab4:	e790      	b.n	80069d8 <_vfiprintf_r+0xcc>
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	425b      	negs	r3, r3
 8006aba:	e7d0      	b.n	8006a5e <_vfiprintf_r+0x152>
 8006abc:	2300      	movs	r3, #0
 8006abe:	200a      	movs	r0, #10
 8006ac0:	001a      	movs	r2, r3
 8006ac2:	3501      	adds	r5, #1
 8006ac4:	6063      	str	r3, [r4, #4]
 8006ac6:	7829      	ldrb	r1, [r5, #0]
 8006ac8:	1c6e      	adds	r6, r5, #1
 8006aca:	3930      	subs	r1, #48	; 0x30
 8006acc:	2909      	cmp	r1, #9
 8006ace:	d903      	bls.n	8006ad8 <_vfiprintf_r+0x1cc>
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d0c5      	beq.n	8006a60 <_vfiprintf_r+0x154>
 8006ad4:	9209      	str	r2, [sp, #36]	; 0x24
 8006ad6:	e7c3      	b.n	8006a60 <_vfiprintf_r+0x154>
 8006ad8:	4342      	muls	r2, r0
 8006ada:	2301      	movs	r3, #1
 8006adc:	1852      	adds	r2, r2, r1
 8006ade:	0035      	movs	r5, r6
 8006ae0:	e7f1      	b.n	8006ac6 <_vfiprintf_r+0x1ba>
 8006ae2:	ab07      	add	r3, sp, #28
 8006ae4:	9300      	str	r3, [sp, #0]
 8006ae6:	003a      	movs	r2, r7
 8006ae8:	4b12      	ldr	r3, [pc, #72]	; (8006b34 <_vfiprintf_r+0x228>)
 8006aea:	0021      	movs	r1, r4
 8006aec:	9803      	ldr	r0, [sp, #12]
 8006aee:	e000      	b.n	8006af2 <_vfiprintf_r+0x1e6>
 8006af0:	bf00      	nop
 8006af2:	9004      	str	r0, [sp, #16]
 8006af4:	9b04      	ldr	r3, [sp, #16]
 8006af6:	3301      	adds	r3, #1
 8006af8:	d1d3      	bne.n	8006aa2 <_vfiprintf_r+0x196>
 8006afa:	89bb      	ldrh	r3, [r7, #12]
 8006afc:	065b      	lsls	r3, r3, #25
 8006afe:	d500      	bpl.n	8006b02 <_vfiprintf_r+0x1f6>
 8006b00:	e784      	b.n	8006a0c <_vfiprintf_r+0x100>
 8006b02:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006b04:	e784      	b.n	8006a10 <_vfiprintf_r+0x104>
 8006b06:	ab07      	add	r3, sp, #28
 8006b08:	9300      	str	r3, [sp, #0]
 8006b0a:	003a      	movs	r2, r7
 8006b0c:	4b09      	ldr	r3, [pc, #36]	; (8006b34 <_vfiprintf_r+0x228>)
 8006b0e:	0021      	movs	r1, r4
 8006b10:	9803      	ldr	r0, [sp, #12]
 8006b12:	f000 f87f 	bl	8006c14 <_printf_i>
 8006b16:	e7ec      	b.n	8006af2 <_vfiprintf_r+0x1e6>
 8006b18:	0800717c 	.word	0x0800717c
 8006b1c:	080071c0 	.word	0x080071c0
 8006b20:	0800719c 	.word	0x0800719c
 8006b24:	0800715c 	.word	0x0800715c
 8006b28:	080071c6 	.word	0x080071c6
 8006b2c:	080071ca 	.word	0x080071ca
 8006b30:	00000000 	.word	0x00000000
 8006b34:	080068e7 	.word	0x080068e7

08006b38 <_printf_common>:
 8006b38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b3a:	0015      	movs	r5, r2
 8006b3c:	9301      	str	r3, [sp, #4]
 8006b3e:	688a      	ldr	r2, [r1, #8]
 8006b40:	690b      	ldr	r3, [r1, #16]
 8006b42:	9000      	str	r0, [sp, #0]
 8006b44:	000c      	movs	r4, r1
 8006b46:	4293      	cmp	r3, r2
 8006b48:	da00      	bge.n	8006b4c <_printf_common+0x14>
 8006b4a:	0013      	movs	r3, r2
 8006b4c:	0022      	movs	r2, r4
 8006b4e:	602b      	str	r3, [r5, #0]
 8006b50:	3243      	adds	r2, #67	; 0x43
 8006b52:	7812      	ldrb	r2, [r2, #0]
 8006b54:	2a00      	cmp	r2, #0
 8006b56:	d001      	beq.n	8006b5c <_printf_common+0x24>
 8006b58:	3301      	adds	r3, #1
 8006b5a:	602b      	str	r3, [r5, #0]
 8006b5c:	6823      	ldr	r3, [r4, #0]
 8006b5e:	069b      	lsls	r3, r3, #26
 8006b60:	d502      	bpl.n	8006b68 <_printf_common+0x30>
 8006b62:	682b      	ldr	r3, [r5, #0]
 8006b64:	3302      	adds	r3, #2
 8006b66:	602b      	str	r3, [r5, #0]
 8006b68:	2706      	movs	r7, #6
 8006b6a:	6823      	ldr	r3, [r4, #0]
 8006b6c:	401f      	ands	r7, r3
 8006b6e:	d027      	beq.n	8006bc0 <_printf_common+0x88>
 8006b70:	0023      	movs	r3, r4
 8006b72:	3343      	adds	r3, #67	; 0x43
 8006b74:	781b      	ldrb	r3, [r3, #0]
 8006b76:	1e5a      	subs	r2, r3, #1
 8006b78:	4193      	sbcs	r3, r2
 8006b7a:	6822      	ldr	r2, [r4, #0]
 8006b7c:	0692      	lsls	r2, r2, #26
 8006b7e:	d430      	bmi.n	8006be2 <_printf_common+0xaa>
 8006b80:	0022      	movs	r2, r4
 8006b82:	9901      	ldr	r1, [sp, #4]
 8006b84:	3243      	adds	r2, #67	; 0x43
 8006b86:	9800      	ldr	r0, [sp, #0]
 8006b88:	9e08      	ldr	r6, [sp, #32]
 8006b8a:	47b0      	blx	r6
 8006b8c:	1c43      	adds	r3, r0, #1
 8006b8e:	d025      	beq.n	8006bdc <_printf_common+0xa4>
 8006b90:	2306      	movs	r3, #6
 8006b92:	6820      	ldr	r0, [r4, #0]
 8006b94:	682a      	ldr	r2, [r5, #0]
 8006b96:	68e1      	ldr	r1, [r4, #12]
 8006b98:	4003      	ands	r3, r0
 8006b9a:	2500      	movs	r5, #0
 8006b9c:	2b04      	cmp	r3, #4
 8006b9e:	d103      	bne.n	8006ba8 <_printf_common+0x70>
 8006ba0:	1a8d      	subs	r5, r1, r2
 8006ba2:	43eb      	mvns	r3, r5
 8006ba4:	17db      	asrs	r3, r3, #31
 8006ba6:	401d      	ands	r5, r3
 8006ba8:	68a3      	ldr	r3, [r4, #8]
 8006baa:	6922      	ldr	r2, [r4, #16]
 8006bac:	4293      	cmp	r3, r2
 8006bae:	dd01      	ble.n	8006bb4 <_printf_common+0x7c>
 8006bb0:	1a9b      	subs	r3, r3, r2
 8006bb2:	18ed      	adds	r5, r5, r3
 8006bb4:	2700      	movs	r7, #0
 8006bb6:	42bd      	cmp	r5, r7
 8006bb8:	d120      	bne.n	8006bfc <_printf_common+0xc4>
 8006bba:	2000      	movs	r0, #0
 8006bbc:	e010      	b.n	8006be0 <_printf_common+0xa8>
 8006bbe:	3701      	adds	r7, #1
 8006bc0:	68e3      	ldr	r3, [r4, #12]
 8006bc2:	682a      	ldr	r2, [r5, #0]
 8006bc4:	1a9b      	subs	r3, r3, r2
 8006bc6:	42bb      	cmp	r3, r7
 8006bc8:	ddd2      	ble.n	8006b70 <_printf_common+0x38>
 8006bca:	0022      	movs	r2, r4
 8006bcc:	2301      	movs	r3, #1
 8006bce:	3219      	adds	r2, #25
 8006bd0:	9901      	ldr	r1, [sp, #4]
 8006bd2:	9800      	ldr	r0, [sp, #0]
 8006bd4:	9e08      	ldr	r6, [sp, #32]
 8006bd6:	47b0      	blx	r6
 8006bd8:	1c43      	adds	r3, r0, #1
 8006bda:	d1f0      	bne.n	8006bbe <_printf_common+0x86>
 8006bdc:	2001      	movs	r0, #1
 8006bde:	4240      	negs	r0, r0
 8006be0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006be2:	2030      	movs	r0, #48	; 0x30
 8006be4:	18e1      	adds	r1, r4, r3
 8006be6:	3143      	adds	r1, #67	; 0x43
 8006be8:	7008      	strb	r0, [r1, #0]
 8006bea:	0021      	movs	r1, r4
 8006bec:	1c5a      	adds	r2, r3, #1
 8006bee:	3145      	adds	r1, #69	; 0x45
 8006bf0:	7809      	ldrb	r1, [r1, #0]
 8006bf2:	18a2      	adds	r2, r4, r2
 8006bf4:	3243      	adds	r2, #67	; 0x43
 8006bf6:	3302      	adds	r3, #2
 8006bf8:	7011      	strb	r1, [r2, #0]
 8006bfa:	e7c1      	b.n	8006b80 <_printf_common+0x48>
 8006bfc:	0022      	movs	r2, r4
 8006bfe:	2301      	movs	r3, #1
 8006c00:	321a      	adds	r2, #26
 8006c02:	9901      	ldr	r1, [sp, #4]
 8006c04:	9800      	ldr	r0, [sp, #0]
 8006c06:	9e08      	ldr	r6, [sp, #32]
 8006c08:	47b0      	blx	r6
 8006c0a:	1c43      	adds	r3, r0, #1
 8006c0c:	d0e6      	beq.n	8006bdc <_printf_common+0xa4>
 8006c0e:	3701      	adds	r7, #1
 8006c10:	e7d1      	b.n	8006bb6 <_printf_common+0x7e>
	...

08006c14 <_printf_i>:
 8006c14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c16:	b089      	sub	sp, #36	; 0x24
 8006c18:	9204      	str	r2, [sp, #16]
 8006c1a:	000a      	movs	r2, r1
 8006c1c:	3243      	adds	r2, #67	; 0x43
 8006c1e:	9305      	str	r3, [sp, #20]
 8006c20:	9003      	str	r0, [sp, #12]
 8006c22:	9202      	str	r2, [sp, #8]
 8006c24:	7e0a      	ldrb	r2, [r1, #24]
 8006c26:	000c      	movs	r4, r1
 8006c28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c2a:	2a6e      	cmp	r2, #110	; 0x6e
 8006c2c:	d100      	bne.n	8006c30 <_printf_i+0x1c>
 8006c2e:	e086      	b.n	8006d3e <_printf_i+0x12a>
 8006c30:	d81f      	bhi.n	8006c72 <_printf_i+0x5e>
 8006c32:	2a63      	cmp	r2, #99	; 0x63
 8006c34:	d033      	beq.n	8006c9e <_printf_i+0x8a>
 8006c36:	d808      	bhi.n	8006c4a <_printf_i+0x36>
 8006c38:	2a00      	cmp	r2, #0
 8006c3a:	d100      	bne.n	8006c3e <_printf_i+0x2a>
 8006c3c:	e08c      	b.n	8006d58 <_printf_i+0x144>
 8006c3e:	2a58      	cmp	r2, #88	; 0x58
 8006c40:	d04d      	beq.n	8006cde <_printf_i+0xca>
 8006c42:	0025      	movs	r5, r4
 8006c44:	3542      	adds	r5, #66	; 0x42
 8006c46:	702a      	strb	r2, [r5, #0]
 8006c48:	e030      	b.n	8006cac <_printf_i+0x98>
 8006c4a:	2a64      	cmp	r2, #100	; 0x64
 8006c4c:	d001      	beq.n	8006c52 <_printf_i+0x3e>
 8006c4e:	2a69      	cmp	r2, #105	; 0x69
 8006c50:	d1f7      	bne.n	8006c42 <_printf_i+0x2e>
 8006c52:	6819      	ldr	r1, [r3, #0]
 8006c54:	6825      	ldr	r5, [r4, #0]
 8006c56:	1d0a      	adds	r2, r1, #4
 8006c58:	0628      	lsls	r0, r5, #24
 8006c5a:	d529      	bpl.n	8006cb0 <_printf_i+0x9c>
 8006c5c:	6808      	ldr	r0, [r1, #0]
 8006c5e:	601a      	str	r2, [r3, #0]
 8006c60:	2800      	cmp	r0, #0
 8006c62:	da03      	bge.n	8006c6c <_printf_i+0x58>
 8006c64:	232d      	movs	r3, #45	; 0x2d
 8006c66:	9a02      	ldr	r2, [sp, #8]
 8006c68:	4240      	negs	r0, r0
 8006c6a:	7013      	strb	r3, [r2, #0]
 8006c6c:	4e6b      	ldr	r6, [pc, #428]	; (8006e1c <_printf_i+0x208>)
 8006c6e:	270a      	movs	r7, #10
 8006c70:	e04f      	b.n	8006d12 <_printf_i+0xfe>
 8006c72:	2a73      	cmp	r2, #115	; 0x73
 8006c74:	d074      	beq.n	8006d60 <_printf_i+0x14c>
 8006c76:	d808      	bhi.n	8006c8a <_printf_i+0x76>
 8006c78:	2a6f      	cmp	r2, #111	; 0x6f
 8006c7a:	d01f      	beq.n	8006cbc <_printf_i+0xa8>
 8006c7c:	2a70      	cmp	r2, #112	; 0x70
 8006c7e:	d1e0      	bne.n	8006c42 <_printf_i+0x2e>
 8006c80:	2220      	movs	r2, #32
 8006c82:	6809      	ldr	r1, [r1, #0]
 8006c84:	430a      	orrs	r2, r1
 8006c86:	6022      	str	r2, [r4, #0]
 8006c88:	e003      	b.n	8006c92 <_printf_i+0x7e>
 8006c8a:	2a75      	cmp	r2, #117	; 0x75
 8006c8c:	d016      	beq.n	8006cbc <_printf_i+0xa8>
 8006c8e:	2a78      	cmp	r2, #120	; 0x78
 8006c90:	d1d7      	bne.n	8006c42 <_printf_i+0x2e>
 8006c92:	0022      	movs	r2, r4
 8006c94:	2178      	movs	r1, #120	; 0x78
 8006c96:	3245      	adds	r2, #69	; 0x45
 8006c98:	7011      	strb	r1, [r2, #0]
 8006c9a:	4e61      	ldr	r6, [pc, #388]	; (8006e20 <_printf_i+0x20c>)
 8006c9c:	e022      	b.n	8006ce4 <_printf_i+0xd0>
 8006c9e:	0025      	movs	r5, r4
 8006ca0:	681a      	ldr	r2, [r3, #0]
 8006ca2:	3542      	adds	r5, #66	; 0x42
 8006ca4:	1d11      	adds	r1, r2, #4
 8006ca6:	6019      	str	r1, [r3, #0]
 8006ca8:	6813      	ldr	r3, [r2, #0]
 8006caa:	702b      	strb	r3, [r5, #0]
 8006cac:	2301      	movs	r3, #1
 8006cae:	e065      	b.n	8006d7c <_printf_i+0x168>
 8006cb0:	6808      	ldr	r0, [r1, #0]
 8006cb2:	601a      	str	r2, [r3, #0]
 8006cb4:	0669      	lsls	r1, r5, #25
 8006cb6:	d5d3      	bpl.n	8006c60 <_printf_i+0x4c>
 8006cb8:	b200      	sxth	r0, r0
 8006cba:	e7d1      	b.n	8006c60 <_printf_i+0x4c>
 8006cbc:	6819      	ldr	r1, [r3, #0]
 8006cbe:	6825      	ldr	r5, [r4, #0]
 8006cc0:	1d08      	adds	r0, r1, #4
 8006cc2:	6018      	str	r0, [r3, #0]
 8006cc4:	6808      	ldr	r0, [r1, #0]
 8006cc6:	062e      	lsls	r6, r5, #24
 8006cc8:	d505      	bpl.n	8006cd6 <_printf_i+0xc2>
 8006cca:	4e54      	ldr	r6, [pc, #336]	; (8006e1c <_printf_i+0x208>)
 8006ccc:	2708      	movs	r7, #8
 8006cce:	2a6f      	cmp	r2, #111	; 0x6f
 8006cd0:	d01b      	beq.n	8006d0a <_printf_i+0xf6>
 8006cd2:	270a      	movs	r7, #10
 8006cd4:	e019      	b.n	8006d0a <_printf_i+0xf6>
 8006cd6:	066d      	lsls	r5, r5, #25
 8006cd8:	d5f7      	bpl.n	8006cca <_printf_i+0xb6>
 8006cda:	b280      	uxth	r0, r0
 8006cdc:	e7f5      	b.n	8006cca <_printf_i+0xb6>
 8006cde:	3145      	adds	r1, #69	; 0x45
 8006ce0:	4e4e      	ldr	r6, [pc, #312]	; (8006e1c <_printf_i+0x208>)
 8006ce2:	700a      	strb	r2, [r1, #0]
 8006ce4:	6818      	ldr	r0, [r3, #0]
 8006ce6:	6822      	ldr	r2, [r4, #0]
 8006ce8:	1d01      	adds	r1, r0, #4
 8006cea:	6800      	ldr	r0, [r0, #0]
 8006cec:	6019      	str	r1, [r3, #0]
 8006cee:	0615      	lsls	r5, r2, #24
 8006cf0:	d521      	bpl.n	8006d36 <_printf_i+0x122>
 8006cf2:	07d3      	lsls	r3, r2, #31
 8006cf4:	d502      	bpl.n	8006cfc <_printf_i+0xe8>
 8006cf6:	2320      	movs	r3, #32
 8006cf8:	431a      	orrs	r2, r3
 8006cfa:	6022      	str	r2, [r4, #0]
 8006cfc:	2710      	movs	r7, #16
 8006cfe:	2800      	cmp	r0, #0
 8006d00:	d103      	bne.n	8006d0a <_printf_i+0xf6>
 8006d02:	2320      	movs	r3, #32
 8006d04:	6822      	ldr	r2, [r4, #0]
 8006d06:	439a      	bics	r2, r3
 8006d08:	6022      	str	r2, [r4, #0]
 8006d0a:	0023      	movs	r3, r4
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	3343      	adds	r3, #67	; 0x43
 8006d10:	701a      	strb	r2, [r3, #0]
 8006d12:	6863      	ldr	r3, [r4, #4]
 8006d14:	60a3      	str	r3, [r4, #8]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	db58      	blt.n	8006dcc <_printf_i+0x1b8>
 8006d1a:	2204      	movs	r2, #4
 8006d1c:	6821      	ldr	r1, [r4, #0]
 8006d1e:	4391      	bics	r1, r2
 8006d20:	6021      	str	r1, [r4, #0]
 8006d22:	2800      	cmp	r0, #0
 8006d24:	d154      	bne.n	8006dd0 <_printf_i+0x1bc>
 8006d26:	9d02      	ldr	r5, [sp, #8]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d05a      	beq.n	8006de2 <_printf_i+0x1ce>
 8006d2c:	0025      	movs	r5, r4
 8006d2e:	7833      	ldrb	r3, [r6, #0]
 8006d30:	3542      	adds	r5, #66	; 0x42
 8006d32:	702b      	strb	r3, [r5, #0]
 8006d34:	e055      	b.n	8006de2 <_printf_i+0x1ce>
 8006d36:	0655      	lsls	r5, r2, #25
 8006d38:	d5db      	bpl.n	8006cf2 <_printf_i+0xde>
 8006d3a:	b280      	uxth	r0, r0
 8006d3c:	e7d9      	b.n	8006cf2 <_printf_i+0xde>
 8006d3e:	681a      	ldr	r2, [r3, #0]
 8006d40:	680d      	ldr	r5, [r1, #0]
 8006d42:	1d10      	adds	r0, r2, #4
 8006d44:	6949      	ldr	r1, [r1, #20]
 8006d46:	6018      	str	r0, [r3, #0]
 8006d48:	6813      	ldr	r3, [r2, #0]
 8006d4a:	062e      	lsls	r6, r5, #24
 8006d4c:	d501      	bpl.n	8006d52 <_printf_i+0x13e>
 8006d4e:	6019      	str	r1, [r3, #0]
 8006d50:	e002      	b.n	8006d58 <_printf_i+0x144>
 8006d52:	066d      	lsls	r5, r5, #25
 8006d54:	d5fb      	bpl.n	8006d4e <_printf_i+0x13a>
 8006d56:	8019      	strh	r1, [r3, #0]
 8006d58:	2300      	movs	r3, #0
 8006d5a:	9d02      	ldr	r5, [sp, #8]
 8006d5c:	6123      	str	r3, [r4, #16]
 8006d5e:	e04f      	b.n	8006e00 <_printf_i+0x1ec>
 8006d60:	681a      	ldr	r2, [r3, #0]
 8006d62:	1d11      	adds	r1, r2, #4
 8006d64:	6019      	str	r1, [r3, #0]
 8006d66:	6815      	ldr	r5, [r2, #0]
 8006d68:	2100      	movs	r1, #0
 8006d6a:	6862      	ldr	r2, [r4, #4]
 8006d6c:	0028      	movs	r0, r5
 8006d6e:	f000 f939 	bl	8006fe4 <memchr>
 8006d72:	2800      	cmp	r0, #0
 8006d74:	d001      	beq.n	8006d7a <_printf_i+0x166>
 8006d76:	1b40      	subs	r0, r0, r5
 8006d78:	6060      	str	r0, [r4, #4]
 8006d7a:	6863      	ldr	r3, [r4, #4]
 8006d7c:	6123      	str	r3, [r4, #16]
 8006d7e:	2300      	movs	r3, #0
 8006d80:	9a02      	ldr	r2, [sp, #8]
 8006d82:	7013      	strb	r3, [r2, #0]
 8006d84:	e03c      	b.n	8006e00 <_printf_i+0x1ec>
 8006d86:	6923      	ldr	r3, [r4, #16]
 8006d88:	002a      	movs	r2, r5
 8006d8a:	9904      	ldr	r1, [sp, #16]
 8006d8c:	9803      	ldr	r0, [sp, #12]
 8006d8e:	9d05      	ldr	r5, [sp, #20]
 8006d90:	47a8      	blx	r5
 8006d92:	1c43      	adds	r3, r0, #1
 8006d94:	d03e      	beq.n	8006e14 <_printf_i+0x200>
 8006d96:	6823      	ldr	r3, [r4, #0]
 8006d98:	079b      	lsls	r3, r3, #30
 8006d9a:	d415      	bmi.n	8006dc8 <_printf_i+0x1b4>
 8006d9c:	9b07      	ldr	r3, [sp, #28]
 8006d9e:	68e0      	ldr	r0, [r4, #12]
 8006da0:	4298      	cmp	r0, r3
 8006da2:	da39      	bge.n	8006e18 <_printf_i+0x204>
 8006da4:	0018      	movs	r0, r3
 8006da6:	e037      	b.n	8006e18 <_printf_i+0x204>
 8006da8:	0022      	movs	r2, r4
 8006daa:	2301      	movs	r3, #1
 8006dac:	3219      	adds	r2, #25
 8006dae:	9904      	ldr	r1, [sp, #16]
 8006db0:	9803      	ldr	r0, [sp, #12]
 8006db2:	9e05      	ldr	r6, [sp, #20]
 8006db4:	47b0      	blx	r6
 8006db6:	1c43      	adds	r3, r0, #1
 8006db8:	d02c      	beq.n	8006e14 <_printf_i+0x200>
 8006dba:	3501      	adds	r5, #1
 8006dbc:	68e3      	ldr	r3, [r4, #12]
 8006dbe:	9a07      	ldr	r2, [sp, #28]
 8006dc0:	1a9b      	subs	r3, r3, r2
 8006dc2:	42ab      	cmp	r3, r5
 8006dc4:	dcf0      	bgt.n	8006da8 <_printf_i+0x194>
 8006dc6:	e7e9      	b.n	8006d9c <_printf_i+0x188>
 8006dc8:	2500      	movs	r5, #0
 8006dca:	e7f7      	b.n	8006dbc <_printf_i+0x1a8>
 8006dcc:	2800      	cmp	r0, #0
 8006dce:	d0ad      	beq.n	8006d2c <_printf_i+0x118>
 8006dd0:	9d02      	ldr	r5, [sp, #8]
 8006dd2:	0039      	movs	r1, r7
 8006dd4:	f7f9 fa26 	bl	8000224 <__aeabi_uidivmod>
 8006dd8:	5c73      	ldrb	r3, [r6, r1]
 8006dda:	3d01      	subs	r5, #1
 8006ddc:	702b      	strb	r3, [r5, #0]
 8006dde:	2800      	cmp	r0, #0
 8006de0:	d1f7      	bne.n	8006dd2 <_printf_i+0x1be>
 8006de2:	2f08      	cmp	r7, #8
 8006de4:	d109      	bne.n	8006dfa <_printf_i+0x1e6>
 8006de6:	6823      	ldr	r3, [r4, #0]
 8006de8:	07db      	lsls	r3, r3, #31
 8006dea:	d506      	bpl.n	8006dfa <_printf_i+0x1e6>
 8006dec:	6863      	ldr	r3, [r4, #4]
 8006dee:	6922      	ldr	r2, [r4, #16]
 8006df0:	4293      	cmp	r3, r2
 8006df2:	dc02      	bgt.n	8006dfa <_printf_i+0x1e6>
 8006df4:	2330      	movs	r3, #48	; 0x30
 8006df6:	3d01      	subs	r5, #1
 8006df8:	702b      	strb	r3, [r5, #0]
 8006dfa:	9b02      	ldr	r3, [sp, #8]
 8006dfc:	1b5b      	subs	r3, r3, r5
 8006dfe:	6123      	str	r3, [r4, #16]
 8006e00:	9b05      	ldr	r3, [sp, #20]
 8006e02:	aa07      	add	r2, sp, #28
 8006e04:	9300      	str	r3, [sp, #0]
 8006e06:	0021      	movs	r1, r4
 8006e08:	9b04      	ldr	r3, [sp, #16]
 8006e0a:	9803      	ldr	r0, [sp, #12]
 8006e0c:	f7ff fe94 	bl	8006b38 <_printf_common>
 8006e10:	1c43      	adds	r3, r0, #1
 8006e12:	d1b8      	bne.n	8006d86 <_printf_i+0x172>
 8006e14:	2001      	movs	r0, #1
 8006e16:	4240      	negs	r0, r0
 8006e18:	b009      	add	sp, #36	; 0x24
 8006e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e1c:	080071d1 	.word	0x080071d1
 8006e20:	080071e2 	.word	0x080071e2

08006e24 <_read_r>:
 8006e24:	b570      	push	{r4, r5, r6, lr}
 8006e26:	0005      	movs	r5, r0
 8006e28:	0008      	movs	r0, r1
 8006e2a:	0011      	movs	r1, r2
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	4c06      	ldr	r4, [pc, #24]	; (8006e48 <_read_r+0x24>)
 8006e30:	6022      	str	r2, [r4, #0]
 8006e32:	001a      	movs	r2, r3
 8006e34:	f7f9 ffe9 	bl	8000e0a <_read>
 8006e38:	1c43      	adds	r3, r0, #1
 8006e3a:	d103      	bne.n	8006e44 <_read_r+0x20>
 8006e3c:	6823      	ldr	r3, [r4, #0]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d000      	beq.n	8006e44 <_read_r+0x20>
 8006e42:	602b      	str	r3, [r5, #0]
 8006e44:	bd70      	pop	{r4, r5, r6, pc}
 8006e46:	46c0      	nop			; (mov r8, r8)
 8006e48:	20000628 	.word	0x20000628

08006e4c <__swbuf_r>:
 8006e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e4e:	0005      	movs	r5, r0
 8006e50:	000e      	movs	r6, r1
 8006e52:	0014      	movs	r4, r2
 8006e54:	2800      	cmp	r0, #0
 8006e56:	d004      	beq.n	8006e62 <__swbuf_r+0x16>
 8006e58:	6983      	ldr	r3, [r0, #24]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d101      	bne.n	8006e62 <__swbuf_r+0x16>
 8006e5e:	f7ff f8c5 	bl	8005fec <__sinit>
 8006e62:	4b22      	ldr	r3, [pc, #136]	; (8006eec <__swbuf_r+0xa0>)
 8006e64:	429c      	cmp	r4, r3
 8006e66:	d12d      	bne.n	8006ec4 <__swbuf_r+0x78>
 8006e68:	686c      	ldr	r4, [r5, #4]
 8006e6a:	69a3      	ldr	r3, [r4, #24]
 8006e6c:	60a3      	str	r3, [r4, #8]
 8006e6e:	89a3      	ldrh	r3, [r4, #12]
 8006e70:	071b      	lsls	r3, r3, #28
 8006e72:	d531      	bpl.n	8006ed8 <__swbuf_r+0x8c>
 8006e74:	6923      	ldr	r3, [r4, #16]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d02e      	beq.n	8006ed8 <__swbuf_r+0x8c>
 8006e7a:	6823      	ldr	r3, [r4, #0]
 8006e7c:	6922      	ldr	r2, [r4, #16]
 8006e7e:	b2f7      	uxtb	r7, r6
 8006e80:	1a98      	subs	r0, r3, r2
 8006e82:	6963      	ldr	r3, [r4, #20]
 8006e84:	b2f6      	uxtb	r6, r6
 8006e86:	4283      	cmp	r3, r0
 8006e88:	dc05      	bgt.n	8006e96 <__swbuf_r+0x4a>
 8006e8a:	0021      	movs	r1, r4
 8006e8c:	0028      	movs	r0, r5
 8006e8e:	f7ff f83f 	bl	8005f10 <_fflush_r>
 8006e92:	2800      	cmp	r0, #0
 8006e94:	d126      	bne.n	8006ee4 <__swbuf_r+0x98>
 8006e96:	68a3      	ldr	r3, [r4, #8]
 8006e98:	3001      	adds	r0, #1
 8006e9a:	3b01      	subs	r3, #1
 8006e9c:	60a3      	str	r3, [r4, #8]
 8006e9e:	6823      	ldr	r3, [r4, #0]
 8006ea0:	1c5a      	adds	r2, r3, #1
 8006ea2:	6022      	str	r2, [r4, #0]
 8006ea4:	701f      	strb	r7, [r3, #0]
 8006ea6:	6963      	ldr	r3, [r4, #20]
 8006ea8:	4283      	cmp	r3, r0
 8006eaa:	d004      	beq.n	8006eb6 <__swbuf_r+0x6a>
 8006eac:	89a3      	ldrh	r3, [r4, #12]
 8006eae:	07db      	lsls	r3, r3, #31
 8006eb0:	d51a      	bpl.n	8006ee8 <__swbuf_r+0x9c>
 8006eb2:	2e0a      	cmp	r6, #10
 8006eb4:	d118      	bne.n	8006ee8 <__swbuf_r+0x9c>
 8006eb6:	0021      	movs	r1, r4
 8006eb8:	0028      	movs	r0, r5
 8006eba:	f7ff f829 	bl	8005f10 <_fflush_r>
 8006ebe:	2800      	cmp	r0, #0
 8006ec0:	d012      	beq.n	8006ee8 <__swbuf_r+0x9c>
 8006ec2:	e00f      	b.n	8006ee4 <__swbuf_r+0x98>
 8006ec4:	4b0a      	ldr	r3, [pc, #40]	; (8006ef0 <__swbuf_r+0xa4>)
 8006ec6:	429c      	cmp	r4, r3
 8006ec8:	d101      	bne.n	8006ece <__swbuf_r+0x82>
 8006eca:	68ac      	ldr	r4, [r5, #8]
 8006ecc:	e7cd      	b.n	8006e6a <__swbuf_r+0x1e>
 8006ece:	4b09      	ldr	r3, [pc, #36]	; (8006ef4 <__swbuf_r+0xa8>)
 8006ed0:	429c      	cmp	r4, r3
 8006ed2:	d1ca      	bne.n	8006e6a <__swbuf_r+0x1e>
 8006ed4:	68ec      	ldr	r4, [r5, #12]
 8006ed6:	e7c8      	b.n	8006e6a <__swbuf_r+0x1e>
 8006ed8:	0021      	movs	r1, r4
 8006eda:	0028      	movs	r0, r5
 8006edc:	f000 f80c 	bl	8006ef8 <__swsetup_r>
 8006ee0:	2800      	cmp	r0, #0
 8006ee2:	d0ca      	beq.n	8006e7a <__swbuf_r+0x2e>
 8006ee4:	2601      	movs	r6, #1
 8006ee6:	4276      	negs	r6, r6
 8006ee8:	0030      	movs	r0, r6
 8006eea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006eec:	0800717c 	.word	0x0800717c
 8006ef0:	0800719c 	.word	0x0800719c
 8006ef4:	0800715c 	.word	0x0800715c

08006ef8 <__swsetup_r>:
 8006ef8:	4b36      	ldr	r3, [pc, #216]	; (8006fd4 <__swsetup_r+0xdc>)
 8006efa:	b570      	push	{r4, r5, r6, lr}
 8006efc:	681d      	ldr	r5, [r3, #0]
 8006efe:	0006      	movs	r6, r0
 8006f00:	000c      	movs	r4, r1
 8006f02:	2d00      	cmp	r5, #0
 8006f04:	d005      	beq.n	8006f12 <__swsetup_r+0x1a>
 8006f06:	69ab      	ldr	r3, [r5, #24]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d102      	bne.n	8006f12 <__swsetup_r+0x1a>
 8006f0c:	0028      	movs	r0, r5
 8006f0e:	f7ff f86d 	bl	8005fec <__sinit>
 8006f12:	4b31      	ldr	r3, [pc, #196]	; (8006fd8 <__swsetup_r+0xe0>)
 8006f14:	429c      	cmp	r4, r3
 8006f16:	d10f      	bne.n	8006f38 <__swsetup_r+0x40>
 8006f18:	686c      	ldr	r4, [r5, #4]
 8006f1a:	230c      	movs	r3, #12
 8006f1c:	5ee2      	ldrsh	r2, [r4, r3]
 8006f1e:	b293      	uxth	r3, r2
 8006f20:	0719      	lsls	r1, r3, #28
 8006f22:	d42d      	bmi.n	8006f80 <__swsetup_r+0x88>
 8006f24:	06d9      	lsls	r1, r3, #27
 8006f26:	d411      	bmi.n	8006f4c <__swsetup_r+0x54>
 8006f28:	2309      	movs	r3, #9
 8006f2a:	2001      	movs	r0, #1
 8006f2c:	6033      	str	r3, [r6, #0]
 8006f2e:	3337      	adds	r3, #55	; 0x37
 8006f30:	4313      	orrs	r3, r2
 8006f32:	81a3      	strh	r3, [r4, #12]
 8006f34:	4240      	negs	r0, r0
 8006f36:	bd70      	pop	{r4, r5, r6, pc}
 8006f38:	4b28      	ldr	r3, [pc, #160]	; (8006fdc <__swsetup_r+0xe4>)
 8006f3a:	429c      	cmp	r4, r3
 8006f3c:	d101      	bne.n	8006f42 <__swsetup_r+0x4a>
 8006f3e:	68ac      	ldr	r4, [r5, #8]
 8006f40:	e7eb      	b.n	8006f1a <__swsetup_r+0x22>
 8006f42:	4b27      	ldr	r3, [pc, #156]	; (8006fe0 <__swsetup_r+0xe8>)
 8006f44:	429c      	cmp	r4, r3
 8006f46:	d1e8      	bne.n	8006f1a <__swsetup_r+0x22>
 8006f48:	68ec      	ldr	r4, [r5, #12]
 8006f4a:	e7e6      	b.n	8006f1a <__swsetup_r+0x22>
 8006f4c:	075b      	lsls	r3, r3, #29
 8006f4e:	d513      	bpl.n	8006f78 <__swsetup_r+0x80>
 8006f50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f52:	2900      	cmp	r1, #0
 8006f54:	d008      	beq.n	8006f68 <__swsetup_r+0x70>
 8006f56:	0023      	movs	r3, r4
 8006f58:	3344      	adds	r3, #68	; 0x44
 8006f5a:	4299      	cmp	r1, r3
 8006f5c:	d002      	beq.n	8006f64 <__swsetup_r+0x6c>
 8006f5e:	0030      	movs	r0, r6
 8006f60:	f7ff fad6 	bl	8006510 <_free_r>
 8006f64:	2300      	movs	r3, #0
 8006f66:	6363      	str	r3, [r4, #52]	; 0x34
 8006f68:	2224      	movs	r2, #36	; 0x24
 8006f6a:	89a3      	ldrh	r3, [r4, #12]
 8006f6c:	4393      	bics	r3, r2
 8006f6e:	81a3      	strh	r3, [r4, #12]
 8006f70:	2300      	movs	r3, #0
 8006f72:	6063      	str	r3, [r4, #4]
 8006f74:	6923      	ldr	r3, [r4, #16]
 8006f76:	6023      	str	r3, [r4, #0]
 8006f78:	2308      	movs	r3, #8
 8006f7a:	89a2      	ldrh	r2, [r4, #12]
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	81a3      	strh	r3, [r4, #12]
 8006f80:	6923      	ldr	r3, [r4, #16]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d10b      	bne.n	8006f9e <__swsetup_r+0xa6>
 8006f86:	21a0      	movs	r1, #160	; 0xa0
 8006f88:	2280      	movs	r2, #128	; 0x80
 8006f8a:	89a3      	ldrh	r3, [r4, #12]
 8006f8c:	0089      	lsls	r1, r1, #2
 8006f8e:	0092      	lsls	r2, r2, #2
 8006f90:	400b      	ands	r3, r1
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d003      	beq.n	8006f9e <__swsetup_r+0xa6>
 8006f96:	0021      	movs	r1, r4
 8006f98:	0030      	movs	r0, r6
 8006f9a:	f7ff fa59 	bl	8006450 <__smakebuf_r>
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	89a2      	ldrh	r2, [r4, #12]
 8006fa2:	4013      	ands	r3, r2
 8006fa4:	d011      	beq.n	8006fca <__swsetup_r+0xd2>
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	60a3      	str	r3, [r4, #8]
 8006faa:	6963      	ldr	r3, [r4, #20]
 8006fac:	425b      	negs	r3, r3
 8006fae:	61a3      	str	r3, [r4, #24]
 8006fb0:	2000      	movs	r0, #0
 8006fb2:	6923      	ldr	r3, [r4, #16]
 8006fb4:	4283      	cmp	r3, r0
 8006fb6:	d1be      	bne.n	8006f36 <__swsetup_r+0x3e>
 8006fb8:	230c      	movs	r3, #12
 8006fba:	5ee2      	ldrsh	r2, [r4, r3]
 8006fbc:	0613      	lsls	r3, r2, #24
 8006fbe:	d5ba      	bpl.n	8006f36 <__swsetup_r+0x3e>
 8006fc0:	2340      	movs	r3, #64	; 0x40
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	81a3      	strh	r3, [r4, #12]
 8006fc6:	3801      	subs	r0, #1
 8006fc8:	e7b5      	b.n	8006f36 <__swsetup_r+0x3e>
 8006fca:	0792      	lsls	r2, r2, #30
 8006fcc:	d400      	bmi.n	8006fd0 <__swsetup_r+0xd8>
 8006fce:	6963      	ldr	r3, [r4, #20]
 8006fd0:	60a3      	str	r3, [r4, #8]
 8006fd2:	e7ed      	b.n	8006fb0 <__swsetup_r+0xb8>
 8006fd4:	20000020 	.word	0x20000020
 8006fd8:	0800717c 	.word	0x0800717c
 8006fdc:	0800719c 	.word	0x0800719c
 8006fe0:	0800715c 	.word	0x0800715c

08006fe4 <memchr>:
 8006fe4:	b2c9      	uxtb	r1, r1
 8006fe6:	1882      	adds	r2, r0, r2
 8006fe8:	4290      	cmp	r0, r2
 8006fea:	d101      	bne.n	8006ff0 <memchr+0xc>
 8006fec:	2000      	movs	r0, #0
 8006fee:	4770      	bx	lr
 8006ff0:	7803      	ldrb	r3, [r0, #0]
 8006ff2:	428b      	cmp	r3, r1
 8006ff4:	d0fb      	beq.n	8006fee <memchr+0xa>
 8006ff6:	3001      	adds	r0, #1
 8006ff8:	e7f6      	b.n	8006fe8 <memchr+0x4>
	...

08006ffc <_init>:
 8006ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ffe:	46c0      	nop			; (mov r8, r8)
 8007000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007002:	bc08      	pop	{r3}
 8007004:	469e      	mov	lr, r3
 8007006:	4770      	bx	lr

08007008 <_fini>:
 8007008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800700a:	46c0      	nop			; (mov r8, r8)
 800700c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800700e:	bc08      	pop	{r3}
 8007010:	469e      	mov	lr, r3
 8007012:	4770      	bx	lr
