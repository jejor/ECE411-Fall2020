
TSAR2.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076b8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  08007778  08007778  00017778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007950  08007950  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  08007950  08007950  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007950  08007950  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007950  08007950  00017950  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007954  08007954  00017954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08007958  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000534  20000088  080079e0  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005bc  080079e0  000205bc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b8f8  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000020b2  00000000  00000000  0002b9a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009d0  00000000  00000000  0002da60  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008b8  00000000  00000000  0002e430  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a5b2  00000000  00000000  0002ece8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a29f  00000000  00000000  0004929a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008a72f  00000000  00000000  00053539  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ddc68  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002aa4  00000000  00000000  000ddce4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000088 	.word	0x20000088
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007760 	.word	0x08007760

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000008c 	.word	0x2000008c
 8000104:	08007760 	.word	0x08007760

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000230:	b590      	push	{r4, r7, lr}
 8000232:	4c60      	ldr	r4, [pc, #384]	; (80003b4 <main+0x184>)
 8000234:	44a5      	add	sp, r4
 8000236:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000238:	f000 fdf2 	bl	8000e20 <HAL_Init>

  /* USER CODE BEGIN Init */

	int safetyState[] = {0, 0, 1, 1, 1, 1, 1, 1, 1};
 800023c:	238c      	movs	r3, #140	; 0x8c
 800023e:	009b      	lsls	r3, r3, #2
 8000240:	18fb      	adds	r3, r7, r3
 8000242:	4a5d      	ldr	r2, [pc, #372]	; (80003b8 <main+0x188>)
 8000244:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000246:	c313      	stmia	r3!, {r0, r1, r4}
 8000248:	ca13      	ldmia	r2!, {r0, r1, r4}
 800024a:	c313      	stmia	r3!, {r0, r1, r4}
 800024c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800024e:	c313      	stmia	r3!, {r0, r1, r4}

	char *file = "valveStateData.txt";
 8000250:	4b5a      	ldr	r3, [pc, #360]	; (80003bc <main+0x18c>)
 8000252:	22a2      	movs	r2, #162	; 0xa2
 8000254:	0092      	lsls	r2, r2, #2
 8000256:	18ba      	adds	r2, r7, r2
 8000258:	6013      	str	r3, [r2, #0]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800025a:	f000 f8b5 	bl	80003c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800025e:	f000 f931 	bl	80004c4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000262:	f000 f8f1 	bl	8000448 <MX_SPI1_Init>
  MX_FATFS_Init();
 8000266:	f002 f98b 	bl	8002580 <MX_FATFS_Init>

  /* USER CODE BEGIN 2 */

	HAL_Delay(1000); //a short delay is important to let the SD card settle
 800026a:	23fa      	movs	r3, #250	; 0xfa
 800026c:	009b      	lsls	r3, r3, #2
 800026e:	0018      	movs	r0, r3
 8000270:	f000 fe3a 	bl	8000ee8 <HAL_Delay>

	//some variables for FatFs
	FATFS FatFs; 	//Fatfs handle

	//Open the file system
	f_mount(&FatFs, "", 1); // 1=mount now
 8000274:	4952      	ldr	r1, [pc, #328]	; (80003c0 <main+0x190>)
 8000276:	003b      	movs	r3, r7
 8000278:	2201      	movs	r2, #1
 800027a:	0018      	movs	r0, r3
 800027c:	f005 f806 	bl	800528c <f_mount>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		// Begin Tiffani's main program

		sensorState[0] = HAL_GPIO_ReadPin(GPIOA, Hall_Effect_Sensor_One_Pin);
 8000280:	2390      	movs	r3, #144	; 0x90
 8000282:	05db      	lsls	r3, r3, #23
 8000284:	2102      	movs	r1, #2
 8000286:	0018      	movs	r0, r3
 8000288:	f001 f86c 	bl	8001364 <HAL_GPIO_ReadPin>
 800028c:	0003      	movs	r3, r0
 800028e:	001a      	movs	r2, r3
 8000290:	2498      	movs	r4, #152	; 0x98
 8000292:	00a4      	lsls	r4, r4, #2
 8000294:	193b      	adds	r3, r7, r4
 8000296:	601a      	str	r2, [r3, #0]

		sensorState[1] = HAL_GPIO_ReadPin(GPIOA, Hall_Effect_Sensor_Two_Pin);
 8000298:	2390      	movs	r3, #144	; 0x90
 800029a:	05db      	lsls	r3, r3, #23
 800029c:	2104      	movs	r1, #4
 800029e:	0018      	movs	r0, r3
 80002a0:	f001 f860 	bl	8001364 <HAL_GPIO_ReadPin>
 80002a4:	0003      	movs	r3, r0
 80002a6:	001a      	movs	r2, r3
 80002a8:	193b      	adds	r3, r7, r4
 80002aa:	605a      	str	r2, [r3, #4]

		sensorState[2] = HAL_GPIO_ReadPin(GPIOA, Hall_Effect_Sensor_Three_Pin);
 80002ac:	2390      	movs	r3, #144	; 0x90
 80002ae:	05db      	lsls	r3, r3, #23
 80002b0:	2108      	movs	r1, #8
 80002b2:	0018      	movs	r0, r3
 80002b4:	f001 f856 	bl	8001364 <HAL_GPIO_ReadPin>
 80002b8:	0003      	movs	r3, r0
 80002ba:	001a      	movs	r2, r3
 80002bc:	193b      	adds	r3, r7, r4
 80002be:	609a      	str	r2, [r3, #8]

		sensorState[3] = HAL_GPIO_ReadPin(GPIOA, Hall_Effect_Sensor_Four_Pin);
 80002c0:	2390      	movs	r3, #144	; 0x90
 80002c2:	05db      	lsls	r3, r3, #23
 80002c4:	2110      	movs	r1, #16
 80002c6:	0018      	movs	r0, r3
 80002c8:	f001 f84c 	bl	8001364 <HAL_GPIO_ReadPin>
 80002cc:	0003      	movs	r3, r0
 80002ce:	001a      	movs	r2, r3
 80002d0:	193b      	adds	r3, r7, r4
 80002d2:	60da      	str	r2, [r3, #12]

		sensorState[4] = HAL_GPIO_ReadPin(GPIOB, Hall_Effect_Sensor_Five_Pin);
 80002d4:	4b3b      	ldr	r3, [pc, #236]	; (80003c4 <main+0x194>)
 80002d6:	2180      	movs	r1, #128	; 0x80
 80002d8:	0018      	movs	r0, r3
 80002da:	f001 f843 	bl	8001364 <HAL_GPIO_ReadPin>
 80002de:	0003      	movs	r3, r0
 80002e0:	001a      	movs	r2, r3
 80002e2:	193b      	adds	r3, r7, r4
 80002e4:	611a      	str	r2, [r3, #16]

		sensorState[5] = HAL_GPIO_ReadPin(GPIOB, Hall_Effect_Sensor_Six_Pin);
 80002e6:	4b37      	ldr	r3, [pc, #220]	; (80003c4 <main+0x194>)
 80002e8:	2140      	movs	r1, #64	; 0x40
 80002ea:	0018      	movs	r0, r3
 80002ec:	f001 f83a 	bl	8001364 <HAL_GPIO_ReadPin>
 80002f0:	0003      	movs	r3, r0
 80002f2:	001a      	movs	r2, r3
 80002f4:	193b      	adds	r3, r7, r4
 80002f6:	615a      	str	r2, [r3, #20]

		sensorState[6] = HAL_GPIO_ReadPin(GPIOA, Hall_Effect_Sensor_Seven_Pin);
 80002f8:	2380      	movs	r3, #128	; 0x80
 80002fa:	021a      	lsls	r2, r3, #8
 80002fc:	2390      	movs	r3, #144	; 0x90
 80002fe:	05db      	lsls	r3, r3, #23
 8000300:	0011      	movs	r1, r2
 8000302:	0018      	movs	r0, r3
 8000304:	f001 f82e 	bl	8001364 <HAL_GPIO_ReadPin>
 8000308:	0003      	movs	r3, r0
 800030a:	001a      	movs	r2, r3
 800030c:	193b      	adds	r3, r7, r4
 800030e:	619a      	str	r2, [r3, #24]

		sensorState[7] = HAL_GPIO_ReadPin(GPIOA, Hall_Effect_Sensor_Eight_Pin);
 8000310:	2380      	movs	r3, #128	; 0x80
 8000312:	005a      	lsls	r2, r3, #1
 8000314:	2390      	movs	r3, #144	; 0x90
 8000316:	05db      	lsls	r3, r3, #23
 8000318:	0011      	movs	r1, r2
 800031a:	0018      	movs	r0, r3
 800031c:	f001 f822 	bl	8001364 <HAL_GPIO_ReadPin>
 8000320:	0003      	movs	r3, r0
 8000322:	001a      	movs	r2, r3
 8000324:	193b      	adds	r3, r7, r4
 8000326:	61da      	str	r2, [r3, #28]

		sensorState[8] = HAL_GPIO_ReadPin(GPIOA, Hall_Effect_Sensor_Nine_Pin);
 8000328:	2390      	movs	r3, #144	; 0x90
 800032a:	05db      	lsls	r3, r3, #23
 800032c:	2101      	movs	r1, #1
 800032e:	0018      	movs	r0, r3
 8000330:	f001 f818 	bl	8001364 <HAL_GPIO_ReadPin>
 8000334:	0003      	movs	r3, r0
 8000336:	001a      	movs	r2, r3
 8000338:	193b      	adds	r3, r7, r4
 800033a:	621a      	str	r2, [r3, #32]

		sensorState[9] = 0;
 800033c:	193b      	adds	r3, r7, r4
 800033e:	2200      	movs	r2, #0
 8000340:	625a      	str	r2, [r3, #36]	; 0x24

		mainCheck(sensorState, safetyState, 0);
 8000342:	238c      	movs	r3, #140	; 0x8c
 8000344:	009b      	lsls	r3, r3, #2
 8000346:	18f9      	adds	r1, r7, r3
 8000348:	193b      	adds	r3, r7, r4
 800034a:	2200      	movs	r2, #0
 800034c:	0018      	movs	r0, r3
 800034e:	f000 f939 	bl	80005c4 <mainCheck>

		for (int i = 0; i <= 9; i++)
 8000352:	2300      	movs	r3, #0
 8000354:	22a3      	movs	r2, #163	; 0xa3
 8000356:	0092      	lsls	r2, r2, #2
 8000358:	18ba      	adds	r2, r7, r2
 800035a:	6013      	str	r3, [r2, #0]
 800035c:	e018      	b.n	8000390 <main+0x160>
		{
			writeBuffer[i] = (char)(sensorState[i] + 48);
 800035e:	2398      	movs	r3, #152	; 0x98
 8000360:	009b      	lsls	r3, r3, #2
 8000362:	18fb      	adds	r3, r7, r3
 8000364:	20a3      	movs	r0, #163	; 0xa3
 8000366:	0080      	lsls	r0, r0, #2
 8000368:	183a      	adds	r2, r7, r0
 800036a:	6812      	ldr	r2, [r2, #0]
 800036c:	0092      	lsls	r2, r2, #2
 800036e:	58d3      	ldr	r3, [r2, r3]
 8000370:	b2db      	uxtb	r3, r3
 8000372:	3330      	adds	r3, #48	; 0x30
 8000374:	b2d9      	uxtb	r1, r3
 8000376:	2395      	movs	r3, #149	; 0x95
 8000378:	009b      	lsls	r3, r3, #2
 800037a:	18fa      	adds	r2, r7, r3
 800037c:	183b      	adds	r3, r7, r0
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	18d3      	adds	r3, r2, r3
 8000382:	1c0a      	adds	r2, r1, #0
 8000384:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i <= 9; i++)
 8000386:	183b      	adds	r3, r7, r0
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	3301      	adds	r3, #1
 800038c:	183a      	adds	r2, r7, r0
 800038e:	6013      	str	r3, [r2, #0]
 8000390:	23a3      	movs	r3, #163	; 0xa3
 8000392:	009b      	lsls	r3, r3, #2
 8000394:	18fb      	adds	r3, r7, r3
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	2b09      	cmp	r3, #9
 800039a:	dde0      	ble.n	800035e <main+0x12e>
		}

		WriteFile(file, writeBuffer, sizeof(writeBuffer));
 800039c:	2395      	movs	r3, #149	; 0x95
 800039e:	009b      	lsls	r3, r3, #2
 80003a0:	18f9      	adds	r1, r7, r3
 80003a2:	23a2      	movs	r3, #162	; 0xa2
 80003a4:	009b      	lsls	r3, r3, #2
 80003a6:	18fb      	adds	r3, r7, r3
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	220b      	movs	r2, #11
 80003ac:	0018      	movs	r0, r3
 80003ae:	f000 fb67 	bl	8000a80 <WriteFile>
		sensorState[0] = HAL_GPIO_ReadPin(GPIOA, Hall_Effect_Sensor_One_Pin);
 80003b2:	e765      	b.n	8000280 <main+0x50>
 80003b4:	fffffd6c 	.word	0xfffffd6c
 80003b8:	08007790 	.word	0x08007790
 80003bc:	08007778 	.word	0x08007778
 80003c0:	0800778c 	.word	0x0800778c
 80003c4:	48000400 	.word	0x48000400

080003c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003c8:	b590      	push	{r4, r7, lr}
 80003ca:	b093      	sub	sp, #76	; 0x4c
 80003cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ce:	2414      	movs	r4, #20
 80003d0:	193b      	adds	r3, r7, r4
 80003d2:	0018      	movs	r0, r3
 80003d4:	2334      	movs	r3, #52	; 0x34
 80003d6:	001a      	movs	r2, r3
 80003d8:	2100      	movs	r1, #0
 80003da:	f006 fc4a 	bl	8006c72 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003de:	1d3b      	adds	r3, r7, #4
 80003e0:	0018      	movs	r0, r3
 80003e2:	2310      	movs	r3, #16
 80003e4:	001a      	movs	r2, r3
 80003e6:	2100      	movs	r1, #0
 80003e8:	f006 fc43 	bl	8006c72 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003ec:	0021      	movs	r1, r4
 80003ee:	187b      	adds	r3, r7, r1
 80003f0:	2202      	movs	r2, #2
 80003f2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003f4:	187b      	adds	r3, r7, r1
 80003f6:	2201      	movs	r2, #1
 80003f8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003fa:	187b      	adds	r3, r7, r1
 80003fc:	2210      	movs	r2, #16
 80003fe:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000400:	187b      	adds	r3, r7, r1
 8000402:	2200      	movs	r2, #0
 8000404:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000406:	187b      	adds	r3, r7, r1
 8000408:	0018      	movs	r0, r3
 800040a:	f000 ffe5 	bl	80013d8 <HAL_RCC_OscConfig>
 800040e:	1e03      	subs	r3, r0, #0
 8000410:	d001      	beq.n	8000416 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8000412:	f000 fb85 	bl	8000b20 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000416:	1d3b      	adds	r3, r7, #4
 8000418:	2207      	movs	r2, #7
 800041a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800041c:	1d3b      	adds	r3, r7, #4
 800041e:	2200      	movs	r2, #0
 8000420:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000422:	1d3b      	adds	r3, r7, #4
 8000424:	2200      	movs	r2, #0
 8000426:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000428:	1d3b      	adds	r3, r7, #4
 800042a:	2200      	movs	r2, #0
 800042c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800042e:	1d3b      	adds	r3, r7, #4
 8000430:	2100      	movs	r1, #0
 8000432:	0018      	movs	r0, r3
 8000434:	f001 fb56 	bl	8001ae4 <HAL_RCC_ClockConfig>
 8000438:	1e03      	subs	r3, r0, #0
 800043a:	d001      	beq.n	8000440 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800043c:	f000 fb70 	bl	8000b20 <Error_Handler>
  }
}
 8000440:	46c0      	nop			; (mov r8, r8)
 8000442:	46bd      	mov	sp, r7
 8000444:	b013      	add	sp, #76	; 0x4c
 8000446:	bd90      	pop	{r4, r7, pc}

08000448 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800044c:	4b1b      	ldr	r3, [pc, #108]	; (80004bc <MX_SPI1_Init+0x74>)
 800044e:	4a1c      	ldr	r2, [pc, #112]	; (80004c0 <MX_SPI1_Init+0x78>)
 8000450:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000452:	4b1a      	ldr	r3, [pc, #104]	; (80004bc <MX_SPI1_Init+0x74>)
 8000454:	2282      	movs	r2, #130	; 0x82
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800045a:	4b18      	ldr	r3, [pc, #96]	; (80004bc <MX_SPI1_Init+0x74>)
 800045c:	2200      	movs	r2, #0
 800045e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000460:	4b16      	ldr	r3, [pc, #88]	; (80004bc <MX_SPI1_Init+0x74>)
 8000462:	22e0      	movs	r2, #224	; 0xe0
 8000464:	00d2      	lsls	r2, r2, #3
 8000466:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000468:	4b14      	ldr	r3, [pc, #80]	; (80004bc <MX_SPI1_Init+0x74>)
 800046a:	2200      	movs	r2, #0
 800046c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800046e:	4b13      	ldr	r3, [pc, #76]	; (80004bc <MX_SPI1_Init+0x74>)
 8000470:	2200      	movs	r2, #0
 8000472:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000474:	4b11      	ldr	r3, [pc, #68]	; (80004bc <MX_SPI1_Init+0x74>)
 8000476:	2280      	movs	r2, #128	; 0x80
 8000478:	0092      	lsls	r2, r2, #2
 800047a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800047c:	4b0f      	ldr	r3, [pc, #60]	; (80004bc <MX_SPI1_Init+0x74>)
 800047e:	2230      	movs	r2, #48	; 0x30
 8000480:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000482:	4b0e      	ldr	r3, [pc, #56]	; (80004bc <MX_SPI1_Init+0x74>)
 8000484:	2200      	movs	r2, #0
 8000486:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000488:	4b0c      	ldr	r3, [pc, #48]	; (80004bc <MX_SPI1_Init+0x74>)
 800048a:	2200      	movs	r2, #0
 800048c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800048e:	4b0b      	ldr	r3, [pc, #44]	; (80004bc <MX_SPI1_Init+0x74>)
 8000490:	2200      	movs	r2, #0
 8000492:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000494:	4b09      	ldr	r3, [pc, #36]	; (80004bc <MX_SPI1_Init+0x74>)
 8000496:	2207      	movs	r2, #7
 8000498:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800049a:	4b08      	ldr	r3, [pc, #32]	; (80004bc <MX_SPI1_Init+0x74>)
 800049c:	2200      	movs	r2, #0
 800049e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80004a0:	4b06      	ldr	r3, [pc, #24]	; (80004bc <MX_SPI1_Init+0x74>)
 80004a2:	2208      	movs	r2, #8
 80004a4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80004a6:	4b05      	ldr	r3, [pc, #20]	; (80004bc <MX_SPI1_Init+0x74>)
 80004a8:	0018      	movs	r0, r3
 80004aa:	f001 fc73 	bl	8001d94 <HAL_SPI_Init>
 80004ae:	1e03      	subs	r3, r0, #0
 80004b0:	d001      	beq.n	80004b6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80004b2:	f000 fb35 	bl	8000b20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80004b6:	46c0      	nop			; (mov r8, r8)
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bd80      	pop	{r7, pc}
 80004bc:	200000e4 	.word	0x200000e4
 80004c0:	40013000 	.word	0x40013000

080004c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004c4:	b590      	push	{r4, r7, lr}
 80004c6:	b089      	sub	sp, #36	; 0x24
 80004c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ca:	240c      	movs	r4, #12
 80004cc:	193b      	adds	r3, r7, r4
 80004ce:	0018      	movs	r0, r3
 80004d0:	2314      	movs	r3, #20
 80004d2:	001a      	movs	r2, r3
 80004d4:	2100      	movs	r1, #0
 80004d6:	f006 fbcc 	bl	8006c72 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004da:	4b37      	ldr	r3, [pc, #220]	; (80005b8 <MX_GPIO_Init+0xf4>)
 80004dc:	695a      	ldr	r2, [r3, #20]
 80004de:	4b36      	ldr	r3, [pc, #216]	; (80005b8 <MX_GPIO_Init+0xf4>)
 80004e0:	2180      	movs	r1, #128	; 0x80
 80004e2:	0289      	lsls	r1, r1, #10
 80004e4:	430a      	orrs	r2, r1
 80004e6:	615a      	str	r2, [r3, #20]
 80004e8:	4b33      	ldr	r3, [pc, #204]	; (80005b8 <MX_GPIO_Init+0xf4>)
 80004ea:	695a      	ldr	r2, [r3, #20]
 80004ec:	2380      	movs	r3, #128	; 0x80
 80004ee:	029b      	lsls	r3, r3, #10
 80004f0:	4013      	ands	r3, r2
 80004f2:	60bb      	str	r3, [r7, #8]
 80004f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004f6:	4b30      	ldr	r3, [pc, #192]	; (80005b8 <MX_GPIO_Init+0xf4>)
 80004f8:	695a      	ldr	r2, [r3, #20]
 80004fa:	4b2f      	ldr	r3, [pc, #188]	; (80005b8 <MX_GPIO_Init+0xf4>)
 80004fc:	2180      	movs	r1, #128	; 0x80
 80004fe:	02c9      	lsls	r1, r1, #11
 8000500:	430a      	orrs	r2, r1
 8000502:	615a      	str	r2, [r3, #20]
 8000504:	4b2c      	ldr	r3, [pc, #176]	; (80005b8 <MX_GPIO_Init+0xf4>)
 8000506:	695a      	ldr	r2, [r3, #20]
 8000508:	2380      	movs	r3, #128	; 0x80
 800050a:	02db      	lsls	r3, r3, #11
 800050c:	4013      	ands	r3, r2
 800050e:	607b      	str	r3, [r7, #4]
 8000510:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Buzzer_Pin|SD_CS_Pin|LED_Three_Pin|LED_Two_Pin
 8000512:	4b2a      	ldr	r3, [pc, #168]	; (80005bc <MX_GPIO_Init+0xf8>)
 8000514:	2201      	movs	r2, #1
 8000516:	213b      	movs	r1, #59	; 0x3b
 8000518:	0018      	movs	r0, r3
 800051a:	f000 ff40 	bl	800139e <HAL_GPIO_WritePin>
                          |LED_One_Pin, GPIO_PIN_SET);

  /*Configure GPIO pins : Hall_Effect_Sensor_Nine_Pin Hall_Effect_Sensor_One_Pin Hall_Effect_Sensor_Two_Pin Hall_Effect_Sensor_Three_Pin
                           Hall_Effect_Sensor_Four_Pin Hall_Effect_Sensor_Eight_Pin Hall_Effect_Sensor_Seven_Pin */
  GPIO_InitStruct.Pin = Hall_Effect_Sensor_Nine_Pin|Hall_Effect_Sensor_One_Pin|Hall_Effect_Sensor_Two_Pin|Hall_Effect_Sensor_Three_Pin
 800051e:	193b      	adds	r3, r7, r4
 8000520:	4a27      	ldr	r2, [pc, #156]	; (80005c0 <MX_GPIO_Init+0xfc>)
 8000522:	601a      	str	r2, [r3, #0]
                          |Hall_Effect_Sensor_Four_Pin|Hall_Effect_Sensor_Eight_Pin|Hall_Effect_Sensor_Seven_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000524:	193b      	adds	r3, r7, r4
 8000526:	2200      	movs	r2, #0
 8000528:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800052a:	193b      	adds	r3, r7, r4
 800052c:	2201      	movs	r2, #1
 800052e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000530:	193a      	adds	r2, r7, r4
 8000532:	2390      	movs	r3, #144	; 0x90
 8000534:	05db      	lsls	r3, r3, #23
 8000536:	0011      	movs	r1, r2
 8000538:	0018      	movs	r0, r3
 800053a:	f000 fdab 	bl	8001094 <HAL_GPIO_Init>

  /*Configure GPIO pins : Buzzer_Pin LED_Three_Pin LED_Two_Pin LED_One_Pin */
  GPIO_InitStruct.Pin = Buzzer_Pin|LED_Three_Pin|LED_Two_Pin|LED_One_Pin;
 800053e:	0021      	movs	r1, r4
 8000540:	187b      	adds	r3, r7, r1
 8000542:	2239      	movs	r2, #57	; 0x39
 8000544:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000546:	187b      	adds	r3, r7, r1
 8000548:	2201      	movs	r2, #1
 800054a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800054c:	187b      	adds	r3, r7, r1
 800054e:	2202      	movs	r2, #2
 8000550:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000552:	187b      	adds	r3, r7, r1
 8000554:	2200      	movs	r2, #0
 8000556:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000558:	000c      	movs	r4, r1
 800055a:	187b      	adds	r3, r7, r1
 800055c:	4a17      	ldr	r2, [pc, #92]	; (80005bc <MX_GPIO_Init+0xf8>)
 800055e:	0019      	movs	r1, r3
 8000560:	0010      	movs	r0, r2
 8000562:	f000 fd97 	bl	8001094 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8000566:	0021      	movs	r1, r4
 8000568:	187b      	adds	r3, r7, r1
 800056a:	2202      	movs	r2, #2
 800056c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800056e:	187b      	adds	r3, r7, r1
 8000570:	2201      	movs	r2, #1
 8000572:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000574:	187b      	adds	r3, r7, r1
 8000576:	2200      	movs	r2, #0
 8000578:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800057a:	187b      	adds	r3, r7, r1
 800057c:	2200      	movs	r2, #0
 800057e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8000580:	000c      	movs	r4, r1
 8000582:	187b      	adds	r3, r7, r1
 8000584:	4a0d      	ldr	r2, [pc, #52]	; (80005bc <MX_GPIO_Init+0xf8>)
 8000586:	0019      	movs	r1, r3
 8000588:	0010      	movs	r0, r2
 800058a:	f000 fd83 	bl	8001094 <HAL_GPIO_Init>

  /*Configure GPIO pins : Hall_Effect_Sensor_Six_Pin Hall_Effect_Sensor_Five_Pin */
  GPIO_InitStruct.Pin = Hall_Effect_Sensor_Six_Pin|Hall_Effect_Sensor_Five_Pin;
 800058e:	0021      	movs	r1, r4
 8000590:	187b      	adds	r3, r7, r1
 8000592:	22c0      	movs	r2, #192	; 0xc0
 8000594:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000596:	187b      	adds	r3, r7, r1
 8000598:	2200      	movs	r2, #0
 800059a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800059c:	187b      	adds	r3, r7, r1
 800059e:	2201      	movs	r2, #1
 80005a0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005a2:	187b      	adds	r3, r7, r1
 80005a4:	4a05      	ldr	r2, [pc, #20]	; (80005bc <MX_GPIO_Init+0xf8>)
 80005a6:	0019      	movs	r1, r3
 80005a8:	0010      	movs	r0, r2
 80005aa:	f000 fd73 	bl	8001094 <HAL_GPIO_Init>

}
 80005ae:	46c0      	nop			; (mov r8, r8)
 80005b0:	46bd      	mov	sp, r7
 80005b2:	b009      	add	sp, #36	; 0x24
 80005b4:	bd90      	pop	{r4, r7, pc}
 80005b6:	46c0      	nop			; (mov r8, r8)
 80005b8:	40021000 	.word	0x40021000
 80005bc:	48000400 	.word	0x48000400
 80005c0:	0000811f 	.word	0x0000811f

080005c4 <mainCheck>:
/* USER CODE BEGIN 4 */

// Begin Katie's PF's

int mainCheck(int valveCState[], int valveExState[], int batteryState)
{
 80005c4:	b590      	push	{r4, r7, lr}
 80005c6:	b091      	sub	sp, #68	; 0x44
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	60f8      	str	r0, [r7, #12]
 80005cc:	60b9      	str	r1, [r7, #8]
 80005ce:	607a      	str	r2, [r7, #4]
	//For tracking error status, only says that we have an error
	int errorButton = 0;
 80005d0:	2300      	movs	r3, #0
 80005d2:	63bb      	str	r3, [r7, #56]	; 0x38

	//Keeps track of which state of error that we are in
	//0 = all good, 1 = minor error, 2 = bigger error, 3 = major error, 4 = power failure
	int errorState = 0;
 80005d4:	2300      	movs	r3, #0
 80005d6:	63fb      	str	r3, [r7, #60]	; 0x3c

	//array keeps track of which valves are in error
	int valvesInError[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}; //0 = good, 1 = error
 80005d8:	2410      	movs	r4, #16
 80005da:	193b      	adds	r3, r7, r4
 80005dc:	0018      	movs	r0, r3
 80005de:	2328      	movs	r3, #40	; 0x28
 80005e0:	001a      	movs	r2, r3
 80005e2:	2100      	movs	r1, #0
 80005e4:	f006 fb45 	bl	8006c72 <memset>

	valvesInError[9] = batteryState;
 80005e8:	193b      	adds	r3, r7, r4
 80005ea:	687a      	ldr	r2, [r7, #4]
 80005ec:	625a      	str	r2, [r3, #36]	; 0x24

	errorButton = checkState(valveCState, valveExState, valvesInError);
 80005ee:	193a      	adds	r2, r7, r4
 80005f0:	68b9      	ldr	r1, [r7, #8]
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	0018      	movs	r0, r3
 80005f6:	f000 f820 	bl	800063a <checkState>
 80005fa:	0003      	movs	r3, r0
 80005fc:	63bb      	str	r3, [r7, #56]	; 0x38

	if(errorButton == 1)
 80005fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000600:	2b01      	cmp	r3, #1
 8000602:	d10c      	bne.n	800061e <mainCheck+0x5a>
		{
			errorState = errorFound(valvesInError);
 8000604:	2410      	movs	r4, #16
 8000606:	193b      	adds	r3, r7, r4
 8000608:	0018      	movs	r0, r3
 800060a:	f000 f8a5 	bl	8000758 <errorFound>
 800060e:	0003      	movs	r3, r0
 8000610:	63fb      	str	r3, [r7, #60]	; 0x3c
			isError(valvesInError, errorState);
 8000612:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000614:	193b      	adds	r3, r7, r4
 8000616:	0011      	movs	r1, r2
 8000618:	0018      	movs	r0, r3
 800061a:	f000 f8ed 	bl	80007f8 <isError>
		}
		//clear any errors that may have been occurring
		if(errorButton == 0)
 800061e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000620:	2b00      	cmp	r3, #0
 8000622:	d105      	bne.n	8000630 <mainCheck+0x6c>
		{
			buzzOff();
 8000624:	f000 f944 	bl	80008b0 <buzzOff>
			ledOff();
 8000628:	f000 f9ca 	bl	80009c0 <ledOff>
			errorState = 0;
 800062c:	2300      	movs	r3, #0
 800062e:	63fb      	str	r3, [r7, #60]	; 0x3c
		}

		return errorState;
 8000630:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
	}
 8000632:	0018      	movs	r0, r3
 8000634:	46bd      	mov	sp, r7
 8000636:	b011      	add	sp, #68	; 0x44
 8000638:	bd90      	pop	{r4, r7, pc}

0800063a <checkState>:

//returns error level (0-4)
int checkState(int valveCState[], int valveExState[], int valvesInError[]) {
 800063a:	b580      	push	{r7, lr}
 800063c:	b086      	sub	sp, #24
 800063e:	af00      	add	r7, sp, #0
 8000640:	60f8      	str	r0, [r7, #12]
 8000642:	60b9      	str	r1, [r7, #8]
 8000644:	607a      	str	r2, [r7, #4]
	//If 1, then an error has occured
	int errorButton = 0;
 8000646:	2300      	movs	r3, #0
 8000648:	617b      	str	r3, [r7, #20]

	//checking each valve for an error
	if (valveCState[0] != valveExState[0]) {
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	681a      	ldr	r2, [r3, #0]
 800064e:	68bb      	ldr	r3, [r7, #8]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	429a      	cmp	r2, r3
 8000654:	d004      	beq.n	8000660 <checkState+0x26>
		errorButton = 1;
 8000656:	2301      	movs	r3, #1
 8000658:	617b      	str	r3, [r7, #20]
		valvesInError[0] = 1;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	2201      	movs	r2, #1
 800065e:	601a      	str	r2, [r3, #0]
	}
	if (valveCState[1] != valveExState[1]) {
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	3304      	adds	r3, #4
 8000664:	681a      	ldr	r2, [r3, #0]
 8000666:	68bb      	ldr	r3, [r7, #8]
 8000668:	3304      	adds	r3, #4
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	429a      	cmp	r2, r3
 800066e:	d005      	beq.n	800067c <checkState+0x42>
		errorButton = 1;
 8000670:	2301      	movs	r3, #1
 8000672:	617b      	str	r3, [r7, #20]
		valvesInError[1] = 1;
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	3304      	adds	r3, #4
 8000678:	2201      	movs	r2, #1
 800067a:	601a      	str	r2, [r3, #0]
	}
	if (valveCState[2] != valveExState[2]) {
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	3308      	adds	r3, #8
 8000680:	681a      	ldr	r2, [r3, #0]
 8000682:	68bb      	ldr	r3, [r7, #8]
 8000684:	3308      	adds	r3, #8
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	429a      	cmp	r2, r3
 800068a:	d005      	beq.n	8000698 <checkState+0x5e>
		errorButton = 1;
 800068c:	2301      	movs	r3, #1
 800068e:	617b      	str	r3, [r7, #20]
		valvesInError[2] = 1;
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	3308      	adds	r3, #8
 8000694:	2201      	movs	r2, #1
 8000696:	601a      	str	r2, [r3, #0]
	}
	if (valveCState[3] != valveExState[3]) {
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	330c      	adds	r3, #12
 800069c:	681a      	ldr	r2, [r3, #0]
 800069e:	68bb      	ldr	r3, [r7, #8]
 80006a0:	330c      	adds	r3, #12
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	429a      	cmp	r2, r3
 80006a6:	d005      	beq.n	80006b4 <checkState+0x7a>
		errorButton = 1;
 80006a8:	2301      	movs	r3, #1
 80006aa:	617b      	str	r3, [r7, #20]
		valvesInError[3] = 1;
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	330c      	adds	r3, #12
 80006b0:	2201      	movs	r2, #1
 80006b2:	601a      	str	r2, [r3, #0]
	}
	if (valveCState[4] != valveExState[4]) {
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	3310      	adds	r3, #16
 80006b8:	681a      	ldr	r2, [r3, #0]
 80006ba:	68bb      	ldr	r3, [r7, #8]
 80006bc:	3310      	adds	r3, #16
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	429a      	cmp	r2, r3
 80006c2:	d005      	beq.n	80006d0 <checkState+0x96>
		errorButton = 1;
 80006c4:	2301      	movs	r3, #1
 80006c6:	617b      	str	r3, [r7, #20]
		valvesInError[4] = 1;
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	3310      	adds	r3, #16
 80006cc:	2201      	movs	r2, #1
 80006ce:	601a      	str	r2, [r3, #0]
	}
	if (valveCState[5] != valveExState[5]) {
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	3314      	adds	r3, #20
 80006d4:	681a      	ldr	r2, [r3, #0]
 80006d6:	68bb      	ldr	r3, [r7, #8]
 80006d8:	3314      	adds	r3, #20
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	429a      	cmp	r2, r3
 80006de:	d005      	beq.n	80006ec <checkState+0xb2>
		errorButton = 1;
 80006e0:	2301      	movs	r3, #1
 80006e2:	617b      	str	r3, [r7, #20]
		valvesInError[5] = 1;
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	3314      	adds	r3, #20
 80006e8:	2201      	movs	r2, #1
 80006ea:	601a      	str	r2, [r3, #0]
	}
	if (valveCState[6] != valveExState[6]) {
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	3318      	adds	r3, #24
 80006f0:	681a      	ldr	r2, [r3, #0]
 80006f2:	68bb      	ldr	r3, [r7, #8]
 80006f4:	3318      	adds	r3, #24
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	429a      	cmp	r2, r3
 80006fa:	d005      	beq.n	8000708 <checkState+0xce>
		errorButton = 1;
 80006fc:	2301      	movs	r3, #1
 80006fe:	617b      	str	r3, [r7, #20]
		valvesInError[6] = 1;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	3318      	adds	r3, #24
 8000704:	2201      	movs	r2, #1
 8000706:	601a      	str	r2, [r3, #0]
	}
	if (valveCState[7] != valveExState[7]) {
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	331c      	adds	r3, #28
 800070c:	681a      	ldr	r2, [r3, #0]
 800070e:	68bb      	ldr	r3, [r7, #8]
 8000710:	331c      	adds	r3, #28
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	429a      	cmp	r2, r3
 8000716:	d005      	beq.n	8000724 <checkState+0xea>
		errorButton = 1;
 8000718:	2301      	movs	r3, #1
 800071a:	617b      	str	r3, [r7, #20]
		valvesInError[7] = 1;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	331c      	adds	r3, #28
 8000720:	2201      	movs	r2, #1
 8000722:	601a      	str	r2, [r3, #0]
	}
	if (valveCState[8] != valveExState[8]) {
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	3320      	adds	r3, #32
 8000728:	681a      	ldr	r2, [r3, #0]
 800072a:	68bb      	ldr	r3, [r7, #8]
 800072c:	3320      	adds	r3, #32
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	429a      	cmp	r2, r3
 8000732:	d005      	beq.n	8000740 <checkState+0x106>
		errorButton = 1;
 8000734:	2301      	movs	r3, #1
 8000736:	617b      	str	r3, [r7, #20]
		valvesInError[8] = 1;
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	3320      	adds	r3, #32
 800073c:	2201      	movs	r2, #1
 800073e:	601a      	str	r2, [r3, #0]
	}
	if (valvesInError[9] == 1) {
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	3324      	adds	r3, #36	; 0x24
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	2b01      	cmp	r3, #1
 8000748:	d101      	bne.n	800074e <checkState+0x114>
		errorButton = 1;
 800074a:	2301      	movs	r3, #1
 800074c:	617b      	str	r3, [r7, #20]
	}

	return errorButton;
 800074e:	697b      	ldr	r3, [r7, #20]
}
 8000750:	0018      	movs	r0, r3
 8000752:	46bd      	mov	sp, r7
 8000754:	b006      	add	sp, #24
 8000756:	bd80      	pop	{r7, pc}

08000758 <errorFound>:

//when in doubt, error out
//returns a value depending on which level of error is found
int errorFound(int valvesInError[]) {
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
	int errorLevel = 0;
 8000760:	2300      	movs	r3, #0
 8000762:	60fb      	str	r3, [r7, #12]
// SOV_F01		//0 - 6
// PV_LF01		//8 - 7
// PV_P01		//6 - 8
// PV_P02		//7 - 9
//Error level is set to highest prior valve
	if (valvesInError[7])
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	331c      	adds	r3, #28
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <errorFound+0x1a>
		errorLevel = 1;
 800076e:	2301      	movs	r3, #1
 8000770:	60fb      	str	r3, [r7, #12]
	if (valvesInError[6])
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	3318      	adds	r3, #24
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <errorFound+0x28>
		errorLevel = 1;
 800077c:	2301      	movs	r3, #1
 800077e:	60fb      	str	r3, [r7, #12]
	if (valvesInError[8])
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	3320      	adds	r3, #32
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <errorFound+0x36>
		errorLevel = 1;
 800078a:	2301      	movs	r3, #1
 800078c:	60fb      	str	r3, [r7, #12]
	if (valvesInError[0])
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <errorFound+0x42>
		errorLevel = 1;
 8000796:	2301      	movs	r3, #1
 8000798:	60fb      	str	r3, [r7, #12]
	if (valvesInError[1])
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	3304      	adds	r3, #4
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <errorFound+0x50>
		errorLevel = 2;
 80007a4:	2302      	movs	r3, #2
 80007a6:	60fb      	str	r3, [r7, #12]
	if (valvesInError[3])
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	330c      	adds	r3, #12
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <errorFound+0x5e>
		errorLevel = 2;
 80007b2:	2302      	movs	r3, #2
 80007b4:	60fb      	str	r3, [r7, #12]
	if (valvesInError[2])
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	3308      	adds	r3, #8
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <errorFound+0x6c>
		errorLevel = 2;
 80007c0:	2302      	movs	r3, #2
 80007c2:	60fb      	str	r3, [r7, #12]
	if (valvesInError[5])
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	3314      	adds	r3, #20
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <errorFound+0x7a>
		errorLevel = 3;
 80007ce:	2303      	movs	r3, #3
 80007d0:	60fb      	str	r3, [r7, #12]
	if (valvesInError[4])
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	3310      	adds	r3, #16
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <errorFound+0x88>
		errorLevel = 3;
 80007dc:	2303      	movs	r3, #3
 80007de:	60fb      	str	r3, [r7, #12]
	if (valvesInError[9]) //power failure on battery, nothing else matters
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	3324      	adds	r3, #36	; 0x24
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <errorFound+0x96>
		errorLevel = 4;
 80007ea:	2304      	movs	r3, #4
 80007ec:	60fb      	str	r3, [r7, #12]

	return errorLevel;
 80007ee:	68fb      	ldr	r3, [r7, #12]
}
 80007f0:	0018      	movs	r0, r3
 80007f2:	46bd      	mov	sp, r7
 80007f4:	b004      	add	sp, #16
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <isError>:

int isError(int valvesInError[], int errorLevel) {
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b084      	sub	sp, #16
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
 8000800:	6039      	str	r1, [r7, #0]
	//The buzzer doesn't get turned off until error is cleared
	buzzOn();
 8000802:	f000 f847 	bl	8000894 <buzzOn>

	if (errorLevel == 4) {
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	2b04      	cmp	r3, #4
 800080a:	d103      	bne.n	8000814 <isError+0x1c>
		powerFailureState(); //It is currently not expected that we can return from this state without a restart
 800080c:	f000 f8f2 	bl	80009f4 <powerFailureState>
		return 1;
 8000810:	2301      	movs	r3, #1
 8000812:	e03a      	b.n	800088a <isError+0x92>
	}

	int i = 0;
 8000814:	2300      	movs	r3, #0
 8000816:	60fb      	str	r3, [r7, #12]
	for (i = 0; i < 6; ++i) {
 8000818:	2300      	movs	r3, #0
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	e012      	b.n	8000844 <isError+0x4c>
		ledOn(errorLevel);
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	0018      	movs	r0, r3
 8000822:	f000 f853 	bl	80008cc <ledOn>
		HAL_Delay(1000);
 8000826:	23fa      	movs	r3, #250	; 0xfa
 8000828:	009b      	lsls	r3, r3, #2
 800082a:	0018      	movs	r0, r3
 800082c:	f000 fb5c 	bl	8000ee8 <HAL_Delay>
		ledOff();
 8000830:	f000 f8c6 	bl	80009c0 <ledOff>
		HAL_Delay(1000);
 8000834:	23fa      	movs	r3, #250	; 0xfa
 8000836:	009b      	lsls	r3, r3, #2
 8000838:	0018      	movs	r0, r3
 800083a:	f000 fb55 	bl	8000ee8 <HAL_Delay>
	for (i = 0; i < 6; ++i) {
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	3301      	adds	r3, #1
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	2b05      	cmp	r3, #5
 8000848:	dde9      	ble.n	800081e <isError+0x26>
	}

	for (i = 0; i < 9; ++i) {
 800084a:	2300      	movs	r3, #0
 800084c:	60fb      	str	r3, [r7, #12]
 800084e:	e014      	b.n	800087a <isError+0x82>
		if (valvesInError[i] == 1) {
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	009b      	lsls	r3, r3, #2
 8000854:	687a      	ldr	r2, [r7, #4]
 8000856:	18d3      	adds	r3, r2, r3
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	2b01      	cmp	r3, #1
 800085c:	d10a      	bne.n	8000874 <isError+0x7c>
			ledOn(i);
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	0018      	movs	r0, r3
 8000862:	f000 f833 	bl	80008cc <ledOn>
			HAL_Delay(1000);
 8000866:	23fa      	movs	r3, #250	; 0xfa
 8000868:	009b      	lsls	r3, r3, #2
 800086a:	0018      	movs	r0, r3
 800086c:	f000 fb3c 	bl	8000ee8 <HAL_Delay>
			ledOff();
 8000870:	f000 f8a6 	bl	80009c0 <ledOff>
	for (i = 0; i < 9; ++i) {
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	3301      	adds	r3, #1
 8000878:	60fb      	str	r3, [r7, #12]
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	2b08      	cmp	r3, #8
 800087e:	dde7      	ble.n	8000850 <isError+0x58>
		}
	}
	ledOn(errorLevel);
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	0018      	movs	r0, r3
 8000884:	f000 f822 	bl	80008cc <ledOn>
	return 0;
 8000888:	2300      	movs	r3, #0
}
 800088a:	0018      	movs	r0, r3
 800088c:	46bd      	mov	sp, r7
 800088e:	b004      	add	sp, #16
 8000890:	bd80      	pop	{r7, pc}
	...

08000894 <buzzOn>:

void buzzOn() {
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, Buzzer_Pin, GPIO_PIN_SET);
 8000898:	4b04      	ldr	r3, [pc, #16]	; (80008ac <buzzOn+0x18>)
 800089a:	2201      	movs	r2, #1
 800089c:	2101      	movs	r1, #1
 800089e:	0018      	movs	r0, r3
 80008a0:	f000 fd7d 	bl	800139e <HAL_GPIO_WritePin>
}
 80008a4:	46c0      	nop			; (mov r8, r8)
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	46c0      	nop			; (mov r8, r8)
 80008ac:	48000400 	.word	0x48000400

080008b0 <buzzOff>:

void buzzOff() {
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, Buzzer_Pin, GPIO_PIN_RESET);
 80008b4:	4b04      	ldr	r3, [pc, #16]	; (80008c8 <buzzOff+0x18>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	2101      	movs	r1, #1
 80008ba:	0018      	movs	r0, r3
 80008bc:	f000 fd6f 	bl	800139e <HAL_GPIO_WritePin>
}
 80008c0:	46c0      	nop			; (mov r8, r8)
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	46c0      	nop			; (mov r8, r8)
 80008c8:	48000400 	.word	0x48000400

080008cc <ledOn>:

void ledOn(int whichOn) {
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
	//6,7,8 all have same light error
	if ((whichOn == 7) || (whichOn == 8))
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	2b07      	cmp	r3, #7
 80008d8:	d002      	beq.n	80008e0 <ledOn+0x14>
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	2b08      	cmp	r3, #8
 80008de:	d101      	bne.n	80008e4 <ledOn+0x18>
		whichOn = 6;
 80008e0:	2306      	movs	r3, #6
 80008e2:	607b      	str	r3, [r7, #4]
	++whichOn; //change from index to actual number displayed in binary on LEDs
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	3301      	adds	r3, #1
 80008e8:	607b      	str	r3, [r7, #4]

	//add a check for bottom 3 prio as they all get same code
	//printf for debugging outside of board
	//will comment out in board testing
	printf("LED %d ON\n", whichOn);
 80008ea:	687a      	ldr	r2, [r7, #4]
 80008ec:	4b32      	ldr	r3, [pc, #200]	; (80009b8 <ledOn+0xec>)
 80008ee:	0011      	movs	r1, r2
 80008f0:	0018      	movs	r0, r3
 80008f2:	f006 fa83 	bl	8006dfc <iprintf>
	if (whichOn == 7) {
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	2b07      	cmp	r3, #7
 80008fa:	d111      	bne.n	8000920 <ledOn+0x54>
		HAL_GPIO_WritePin(GPIOB, LED_Three_Pin, GPIO_PIN_SET);
 80008fc:	4b2f      	ldr	r3, [pc, #188]	; (80009bc <ledOn+0xf0>)
 80008fe:	2201      	movs	r2, #1
 8000900:	2108      	movs	r1, #8
 8000902:	0018      	movs	r0, r3
 8000904:	f000 fd4b 	bl	800139e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, LED_Two_Pin, GPIO_PIN_SET);
 8000908:	4b2c      	ldr	r3, [pc, #176]	; (80009bc <ledOn+0xf0>)
 800090a:	2201      	movs	r2, #1
 800090c:	2110      	movs	r1, #16
 800090e:	0018      	movs	r0, r3
 8000910:	f000 fd45 	bl	800139e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, LED_One_Pin, GPIO_PIN_SET);
 8000914:	4b29      	ldr	r3, [pc, #164]	; (80009bc <ledOn+0xf0>)
 8000916:	2201      	movs	r2, #1
 8000918:	2120      	movs	r1, #32
 800091a:	0018      	movs	r0, r3
 800091c:	f000 fd3f 	bl	800139e <HAL_GPIO_WritePin>
	}
	if (whichOn == 6) {
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	2b06      	cmp	r3, #6
 8000924:	d10b      	bne.n	800093e <ledOn+0x72>
		HAL_GPIO_WritePin(GPIOB, LED_Three_Pin, GPIO_PIN_SET);
 8000926:	4b25      	ldr	r3, [pc, #148]	; (80009bc <ledOn+0xf0>)
 8000928:	2201      	movs	r2, #1
 800092a:	2108      	movs	r1, #8
 800092c:	0018      	movs	r0, r3
 800092e:	f000 fd36 	bl	800139e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, LED_Two_Pin, GPIO_PIN_SET);
 8000932:	4b22      	ldr	r3, [pc, #136]	; (80009bc <ledOn+0xf0>)
 8000934:	2201      	movs	r2, #1
 8000936:	2110      	movs	r1, #16
 8000938:	0018      	movs	r0, r3
 800093a:	f000 fd30 	bl	800139e <HAL_GPIO_WritePin>
	}
	if (whichOn == 5) {
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	2b05      	cmp	r3, #5
 8000942:	d10b      	bne.n	800095c <ledOn+0x90>
		HAL_GPIO_WritePin(GPIOB, LED_Three_Pin, GPIO_PIN_SET);
 8000944:	4b1d      	ldr	r3, [pc, #116]	; (80009bc <ledOn+0xf0>)
 8000946:	2201      	movs	r2, #1
 8000948:	2108      	movs	r1, #8
 800094a:	0018      	movs	r0, r3
 800094c:	f000 fd27 	bl	800139e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, LED_One_Pin, GPIO_PIN_SET);
 8000950:	4b1a      	ldr	r3, [pc, #104]	; (80009bc <ledOn+0xf0>)
 8000952:	2201      	movs	r2, #1
 8000954:	2120      	movs	r1, #32
 8000956:	0018      	movs	r0, r3
 8000958:	f000 fd21 	bl	800139e <HAL_GPIO_WritePin>
	}
	if (whichOn == 4) {
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	2b04      	cmp	r3, #4
 8000960:	d105      	bne.n	800096e <ledOn+0xa2>
		HAL_GPIO_WritePin(GPIOB, LED_Three_Pin, GPIO_PIN_SET);
 8000962:	4b16      	ldr	r3, [pc, #88]	; (80009bc <ledOn+0xf0>)
 8000964:	2201      	movs	r2, #1
 8000966:	2108      	movs	r1, #8
 8000968:	0018      	movs	r0, r3
 800096a:	f000 fd18 	bl	800139e <HAL_GPIO_WritePin>
	}
	if (whichOn == 3) {
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	2b03      	cmp	r3, #3
 8000972:	d10b      	bne.n	800098c <ledOn+0xc0>
		HAL_GPIO_WritePin(GPIOB, LED_Two_Pin, GPIO_PIN_SET);
 8000974:	4b11      	ldr	r3, [pc, #68]	; (80009bc <ledOn+0xf0>)
 8000976:	2201      	movs	r2, #1
 8000978:	2110      	movs	r1, #16
 800097a:	0018      	movs	r0, r3
 800097c:	f000 fd0f 	bl	800139e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, LED_One_Pin, GPIO_PIN_SET);
 8000980:	4b0e      	ldr	r3, [pc, #56]	; (80009bc <ledOn+0xf0>)
 8000982:	2201      	movs	r2, #1
 8000984:	2120      	movs	r1, #32
 8000986:	0018      	movs	r0, r3
 8000988:	f000 fd09 	bl	800139e <HAL_GPIO_WritePin>
	}
	if (whichOn == 2) {
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	2b02      	cmp	r3, #2
 8000990:	d105      	bne.n	800099e <ledOn+0xd2>
		HAL_GPIO_WritePin(GPIOB, LED_Two_Pin, GPIO_PIN_SET);
 8000992:	4b0a      	ldr	r3, [pc, #40]	; (80009bc <ledOn+0xf0>)
 8000994:	2201      	movs	r2, #1
 8000996:	2110      	movs	r1, #16
 8000998:	0018      	movs	r0, r3
 800099a:	f000 fd00 	bl	800139e <HAL_GPIO_WritePin>
	}
	if (whichOn == 1) {
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	2b01      	cmp	r3, #1
 80009a2:	d105      	bne.n	80009b0 <ledOn+0xe4>
		HAL_GPIO_WritePin(GPIOB, LED_One_Pin, GPIO_PIN_SET);
 80009a4:	4b05      	ldr	r3, [pc, #20]	; (80009bc <ledOn+0xf0>)
 80009a6:	2201      	movs	r2, #1
 80009a8:	2120      	movs	r1, #32
 80009aa:	0018      	movs	r0, r3
 80009ac:	f000 fcf7 	bl	800139e <HAL_GPIO_WritePin>
	}
}
 80009b0:	46c0      	nop			; (mov r8, r8)
 80009b2:	46bd      	mov	sp, r7
 80009b4:	b002      	add	sp, #8
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	080077b4 	.word	0x080077b4
 80009bc:	48000400 	.word	0x48000400

080009c0 <ledOff>:

void ledOff() {
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, LED_One_Pin, GPIO_PIN_RESET);
 80009c4:	4b0a      	ldr	r3, [pc, #40]	; (80009f0 <ledOff+0x30>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	2120      	movs	r1, #32
 80009ca:	0018      	movs	r0, r3
 80009cc:	f000 fce7 	bl	800139e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LED_Two_Pin, GPIO_PIN_RESET);
 80009d0:	4b07      	ldr	r3, [pc, #28]	; (80009f0 <ledOff+0x30>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	2110      	movs	r1, #16
 80009d6:	0018      	movs	r0, r3
 80009d8:	f000 fce1 	bl	800139e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LED_Three_Pin, GPIO_PIN_RESET);
 80009dc:	4b04      	ldr	r3, [pc, #16]	; (80009f0 <ledOff+0x30>)
 80009de:	2200      	movs	r2, #0
 80009e0:	2108      	movs	r1, #8
 80009e2:	0018      	movs	r0, r3
 80009e4:	f000 fcdb 	bl	800139e <HAL_GPIO_WritePin>

}
 80009e8:	46c0      	nop			; (mov r8, r8)
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	46c0      	nop			; (mov r8, r8)
 80009f0:	48000400 	.word	0x48000400

080009f4 <powerFailureState>:

//goes down 3-2-1 continually
void powerFailureState() {
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
	while (1) {
		ledOn(2);
 80009f8:	2002      	movs	r0, #2
 80009fa:	f7ff ff67 	bl	80008cc <ledOn>
		HAL_Delay(1000);
 80009fe:	23fa      	movs	r3, #250	; 0xfa
 8000a00:	009b      	lsls	r3, r3, #2
 8000a02:	0018      	movs	r0, r3
 8000a04:	f000 fa70 	bl	8000ee8 <HAL_Delay>
		ledOff();
 8000a08:	f7ff ffda 	bl	80009c0 <ledOff>

		ledOn(1);
 8000a0c:	2001      	movs	r0, #1
 8000a0e:	f7ff ff5d 	bl	80008cc <ledOn>
		HAL_Delay(1000);
 8000a12:	23fa      	movs	r3, #250	; 0xfa
 8000a14:	009b      	lsls	r3, r3, #2
 8000a16:	0018      	movs	r0, r3
 8000a18:	f000 fa66 	bl	8000ee8 <HAL_Delay>
		ledOff();
 8000a1c:	f7ff ffd0 	bl	80009c0 <ledOff>

		ledOn(0);
 8000a20:	2000      	movs	r0, #0
 8000a22:	f7ff ff53 	bl	80008cc <ledOn>
		HAL_Delay(1000);
 8000a26:	23fa      	movs	r3, #250	; 0xfa
 8000a28:	009b      	lsls	r3, r3, #2
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	f000 fa5c 	bl	8000ee8 <HAL_Delay>
		ledOff();
 8000a30:	f7ff ffc6 	bl	80009c0 <ledOff>
		ledOn(2);
 8000a34:	e7e0      	b.n	80009f8 <powerFailureState+0x4>
	...

08000a38 <SizeOfFile>:
// End Katie's PF's

// Begin Tiffani's PF's

size_t SizeOfFile(char const *path)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
    FILE *fp = fopen(path, "r");
 8000a40:	4a0e      	ldr	r2, [pc, #56]	; (8000a7c <SizeOfFile+0x44>)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	0011      	movs	r1, r2
 8000a46:	0018      	movs	r0, r3
 8000a48:	f005 ff46 	bl	80068d8 <fopen>
 8000a4c:	0003      	movs	r3, r0
 8000a4e:	60fb      	str	r3, [r7, #12]
    fseek(fp, 0, SEEK_END);
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	2202      	movs	r2, #2
 8000a54:	2100      	movs	r1, #0
 8000a56:	0018      	movs	r0, r3
 8000a58:	f005 ff4c 	bl	80068f4 <fseek>
    size_t fsize = (size_t) ftell(fp);
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	0018      	movs	r0, r3
 8000a60:	f005 ffea 	bl	8006a38 <ftell>
 8000a64:	0003      	movs	r3, r0
 8000a66:	60bb      	str	r3, [r7, #8]
    fclose(fp);
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	f005 fd80 	bl	8006570 <fclose>
    return fsize;
 8000a70:	68bb      	ldr	r3, [r7, #8]
}
 8000a72:	0018      	movs	r0, r3
 8000a74:	46bd      	mov	sp, r7
 8000a76:	b004      	add	sp, #16
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	46c0      	nop			; (mov r8, r8)
 8000a7c:	080077c0 	.word	0x080077c0

08000a80 <WriteFile>:

void WriteFile(char const* fileName, char* buffer, size_t size)
{
 8000a80:	b5b0      	push	{r4, r5, r7, lr}
 8000a82:	4c25      	ldr	r4, [pc, #148]	; (8000b18 <WriteFile+0x98>)
 8000a84:	44a5      	add	sp, r4
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	60f8      	str	r0, [r7, #12]
 8000a8a:	60b9      	str	r1, [r7, #8]
 8000a8c:	607a      	str	r2, [r7, #4]
    char Buffer_logger[11];
    memcpy(Buffer_logger, buffer, size);
 8000a8e:	687a      	ldr	r2, [r7, #4]
 8000a90:	68b9      	ldr	r1, [r7, #8]
 8000a92:	2391      	movs	r3, #145	; 0x91
 8000a94:	009b      	lsls	r3, r3, #2
 8000a96:	18fb      	adds	r3, r7, r3
 8000a98:	0018      	movs	r0, r3
 8000a9a:	f006 f8e1 	bl	8006c60 <memcpy>

    unsigned int BytesWr;
    FIL file; 		//File handle
    f_open(&file, fileName, FA_CREATE_ALWAYS | FA_WRITE | FA_CREATE_ALWAYS);
 8000a9e:	68f9      	ldr	r1, [r7, #12]
 8000aa0:	2314      	movs	r3, #20
 8000aa2:	18fb      	adds	r3, r7, r3
 8000aa4:	220a      	movs	r2, #10
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	f004 fc40 	bl	800532c <f_open>

    //sprintf(Buffer_logger, "%s", buffer);

    while (SizeOfFile(fileName) == 0)
 8000aac:	e028      	b.n	8000b00 <WriteFile+0x80>
    {
        // Open log for writing
        f_open(&file, fileName, FA_WRITE);
 8000aae:	68f9      	ldr	r1, [r7, #12]
 8000ab0:	2414      	movs	r4, #20
 8000ab2:	193b      	adds	r3, r7, r4
 8000ab4:	2202      	movs	r2, #2
 8000ab6:	0018      	movs	r0, r3
 8000ab8:	f004 fc38 	bl	800532c <f_open>

        // Point to the EOF
        f_lseek(&file, accum);
 8000abc:	4b17      	ldr	r3, [pc, #92]	; (8000b1c <WriteFile+0x9c>)
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	193b      	adds	r3, r7, r4
 8000ac2:	0011      	movs	r1, r2
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	f005 f9e3 	bl	8005e90 <f_lseek>

        // Write to log
        f_write(&file, (const void*) Buffer_logger, size, &BytesWr);
 8000aca:	2390      	movs	r3, #144	; 0x90
 8000acc:	009b      	lsls	r3, r3, #2
 8000ace:	18fb      	adds	r3, r7, r3
 8000ad0:	687a      	ldr	r2, [r7, #4]
 8000ad2:	2591      	movs	r5, #145	; 0x91
 8000ad4:	00ad      	lsls	r5, r5, #2
 8000ad6:	1979      	adds	r1, r7, r5
 8000ad8:	1938      	adds	r0, r7, r4
 8000ada:	f004 fedf 	bl	800589c <f_write>

        accum += accum + strlen(Buffer_logger);
 8000ade:	197b      	adds	r3, r7, r5
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	f7ff fb11 	bl	8000108 <strlen>
 8000ae6:	0002      	movs	r2, r0
 8000ae8:	4b0c      	ldr	r3, [pc, #48]	; (8000b1c <WriteFile+0x9c>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	18d2      	adds	r2, r2, r3
 8000aee:	4b0b      	ldr	r3, [pc, #44]	; (8000b1c <WriteFile+0x9c>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	18d2      	adds	r2, r2, r3
 8000af4:	4b09      	ldr	r3, [pc, #36]	; (8000b1c <WriteFile+0x9c>)
 8000af6:	601a      	str	r2, [r3, #0]

        //Close file.
        f_close(&file);
 8000af8:	193b      	adds	r3, r7, r4
 8000afa:	0018      	movs	r0, r3
 8000afc:	f005 f990 	bl	8005e20 <f_close>
    while (SizeOfFile(fileName) == 0)
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	0018      	movs	r0, r3
 8000b04:	f7ff ff98 	bl	8000a38 <SizeOfFile>
 8000b08:	1e03      	subs	r3, r0, #0
 8000b0a:	d0d0      	beq.n	8000aae <WriteFile+0x2e>
    }
}
 8000b0c:	46c0      	nop			; (mov r8, r8)
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	2394      	movs	r3, #148	; 0x94
 8000b12:	009b      	lsls	r3, r3, #2
 8000b14:	449d      	add	sp, r3
 8000b16:	bdb0      	pop	{r4, r5, r7, pc}
 8000b18:	fffffdb0 	.word	0xfffffdb0
 8000b1c:	200000a4 	.word	0x200000a4

08000b20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b24:	46c0      	nop			; (mov r8, r8)
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
	...

08000b2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b32:	4b0f      	ldr	r3, [pc, #60]	; (8000b70 <HAL_MspInit+0x44>)
 8000b34:	699a      	ldr	r2, [r3, #24]
 8000b36:	4b0e      	ldr	r3, [pc, #56]	; (8000b70 <HAL_MspInit+0x44>)
 8000b38:	2101      	movs	r1, #1
 8000b3a:	430a      	orrs	r2, r1
 8000b3c:	619a      	str	r2, [r3, #24]
 8000b3e:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <HAL_MspInit+0x44>)
 8000b40:	699b      	ldr	r3, [r3, #24]
 8000b42:	2201      	movs	r2, #1
 8000b44:	4013      	ands	r3, r2
 8000b46:	607b      	str	r3, [r7, #4]
 8000b48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b4a:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <HAL_MspInit+0x44>)
 8000b4c:	69da      	ldr	r2, [r3, #28]
 8000b4e:	4b08      	ldr	r3, [pc, #32]	; (8000b70 <HAL_MspInit+0x44>)
 8000b50:	2180      	movs	r1, #128	; 0x80
 8000b52:	0549      	lsls	r1, r1, #21
 8000b54:	430a      	orrs	r2, r1
 8000b56:	61da      	str	r2, [r3, #28]
 8000b58:	4b05      	ldr	r3, [pc, #20]	; (8000b70 <HAL_MspInit+0x44>)
 8000b5a:	69da      	ldr	r2, [r3, #28]
 8000b5c:	2380      	movs	r3, #128	; 0x80
 8000b5e:	055b      	lsls	r3, r3, #21
 8000b60:	4013      	ands	r3, r2
 8000b62:	603b      	str	r3, [r7, #0]
 8000b64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b66:	46c0      	nop			; (mov r8, r8)
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	b002      	add	sp, #8
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	46c0      	nop			; (mov r8, r8)
 8000b70:	40021000 	.word	0x40021000

08000b74 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08a      	sub	sp, #40	; 0x28
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7c:	2314      	movs	r3, #20
 8000b7e:	18fb      	adds	r3, r7, r3
 8000b80:	0018      	movs	r0, r3
 8000b82:	2314      	movs	r3, #20
 8000b84:	001a      	movs	r2, r3
 8000b86:	2100      	movs	r1, #0
 8000b88:	f006 f873 	bl	8006c72 <memset>
  if(hspi->Instance==SPI1)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a1c      	ldr	r2, [pc, #112]	; (8000c04 <HAL_SPI_MspInit+0x90>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d132      	bne.n	8000bfc <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b96:	4b1c      	ldr	r3, [pc, #112]	; (8000c08 <HAL_SPI_MspInit+0x94>)
 8000b98:	699a      	ldr	r2, [r3, #24]
 8000b9a:	4b1b      	ldr	r3, [pc, #108]	; (8000c08 <HAL_SPI_MspInit+0x94>)
 8000b9c:	2180      	movs	r1, #128	; 0x80
 8000b9e:	0149      	lsls	r1, r1, #5
 8000ba0:	430a      	orrs	r2, r1
 8000ba2:	619a      	str	r2, [r3, #24]
 8000ba4:	4b18      	ldr	r3, [pc, #96]	; (8000c08 <HAL_SPI_MspInit+0x94>)
 8000ba6:	699a      	ldr	r2, [r3, #24]
 8000ba8:	2380      	movs	r3, #128	; 0x80
 8000baa:	015b      	lsls	r3, r3, #5
 8000bac:	4013      	ands	r3, r2
 8000bae:	613b      	str	r3, [r7, #16]
 8000bb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb2:	4b15      	ldr	r3, [pc, #84]	; (8000c08 <HAL_SPI_MspInit+0x94>)
 8000bb4:	695a      	ldr	r2, [r3, #20]
 8000bb6:	4b14      	ldr	r3, [pc, #80]	; (8000c08 <HAL_SPI_MspInit+0x94>)
 8000bb8:	2180      	movs	r1, #128	; 0x80
 8000bba:	0289      	lsls	r1, r1, #10
 8000bbc:	430a      	orrs	r2, r1
 8000bbe:	615a      	str	r2, [r3, #20]
 8000bc0:	4b11      	ldr	r3, [pc, #68]	; (8000c08 <HAL_SPI_MspInit+0x94>)
 8000bc2:	695a      	ldr	r2, [r3, #20]
 8000bc4:	2380      	movs	r3, #128	; 0x80
 8000bc6:	029b      	lsls	r3, r3, #10
 8000bc8:	4013      	ands	r3, r2
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000bce:	2114      	movs	r1, #20
 8000bd0:	187b      	adds	r3, r7, r1
 8000bd2:	22e0      	movs	r2, #224	; 0xe0
 8000bd4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd6:	187b      	adds	r3, r7, r1
 8000bd8:	2202      	movs	r2, #2
 8000bda:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	187b      	adds	r3, r7, r1
 8000bde:	2200      	movs	r2, #0
 8000be0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000be2:	187b      	adds	r3, r7, r1
 8000be4:	2203      	movs	r2, #3
 8000be6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000be8:	187b      	adds	r3, r7, r1
 8000bea:	2200      	movs	r2, #0
 8000bec:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bee:	187a      	adds	r2, r7, r1
 8000bf0:	2390      	movs	r3, #144	; 0x90
 8000bf2:	05db      	lsls	r3, r3, #23
 8000bf4:	0011      	movs	r1, r2
 8000bf6:	0018      	movs	r0, r3
 8000bf8:	f000 fa4c 	bl	8001094 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000bfc:	46c0      	nop			; (mov r8, r8)
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	b00a      	add	sp, #40	; 0x28
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	40013000 	.word	0x40013000
 8000c08:	40021000 	.word	0x40021000

08000c0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c10:	46c0      	nop			; (mov r8, r8)
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}

08000c16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c16:	b580      	push	{r7, lr}
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c1a:	e7fe      	b.n	8000c1a <HardFault_Handler+0x4>

08000c1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c20:	46c0      	nop			; (mov r8, r8)
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c2a:	46c0      	nop			; (mov r8, r8)
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c34:	f000 f93c 	bl	8000eb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c38:	46c0      	nop			; (mov r8, r8)
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	b086      	sub	sp, #24
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	60f8      	str	r0, [r7, #12]
 8000c46:	60b9      	str	r1, [r7, #8]
 8000c48:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	617b      	str	r3, [r7, #20]
 8000c4e:	e00a      	b.n	8000c66 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c50:	e000      	b.n	8000c54 <_read+0x16>
 8000c52:	bf00      	nop
 8000c54:	0001      	movs	r1, r0
 8000c56:	68bb      	ldr	r3, [r7, #8]
 8000c58:	1c5a      	adds	r2, r3, #1
 8000c5a:	60ba      	str	r2, [r7, #8]
 8000c5c:	b2ca      	uxtb	r2, r1
 8000c5e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	3301      	adds	r3, #1
 8000c64:	617b      	str	r3, [r7, #20]
 8000c66:	697a      	ldr	r2, [r7, #20]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	429a      	cmp	r2, r3
 8000c6c:	dbf0      	blt.n	8000c50 <_read+0x12>
	}

return len;
 8000c6e:	687b      	ldr	r3, [r7, #4]
}
 8000c70:	0018      	movs	r0, r3
 8000c72:	46bd      	mov	sp, r7
 8000c74:	b006      	add	sp, #24
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b086      	sub	sp, #24
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	60f8      	str	r0, [r7, #12]
 8000c80:	60b9      	str	r1, [r7, #8]
 8000c82:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c84:	2300      	movs	r3, #0
 8000c86:	617b      	str	r3, [r7, #20]
 8000c88:	e009      	b.n	8000c9e <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000c8a:	68bb      	ldr	r3, [r7, #8]
 8000c8c:	1c5a      	adds	r2, r3, #1
 8000c8e:	60ba      	str	r2, [r7, #8]
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	0018      	movs	r0, r3
 8000c94:	e000      	b.n	8000c98 <_write+0x20>
 8000c96:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	617b      	str	r3, [r7, #20]
 8000c9e:	697a      	ldr	r2, [r7, #20]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	429a      	cmp	r2, r3
 8000ca4:	dbf1      	blt.n	8000c8a <_write+0x12>
	}
	return len;
 8000ca6:	687b      	ldr	r3, [r7, #4]
}
 8000ca8:	0018      	movs	r0, r3
 8000caa:	46bd      	mov	sp, r7
 8000cac:	b006      	add	sp, #24
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <_close>:

int _close(int file)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
	return -1;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	425b      	negs	r3, r3
}
 8000cbc:	0018      	movs	r0, r3
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	b002      	add	sp, #8
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	2280      	movs	r2, #128	; 0x80
 8000cd2:	0192      	lsls	r2, r2, #6
 8000cd4:	605a      	str	r2, [r3, #4]
	return 0;
 8000cd6:	2300      	movs	r3, #0
}
 8000cd8:	0018      	movs	r0, r3
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	b002      	add	sp, #8
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <_isatty>:

int _isatty(int file)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
	return 1;
 8000ce8:	2301      	movs	r3, #1
}
 8000cea:	0018      	movs	r0, r3
 8000cec:	46bd      	mov	sp, r7
 8000cee:	b002      	add	sp, #8
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b084      	sub	sp, #16
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	60f8      	str	r0, [r7, #12]
 8000cfa:	60b9      	str	r1, [r7, #8]
 8000cfc:	607a      	str	r2, [r7, #4]
	return 0;
 8000cfe:	2300      	movs	r3, #0
}
 8000d00:	0018      	movs	r0, r3
 8000d02:	46bd      	mov	sp, r7
 8000d04:	b004      	add	sp, #16
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <_open>:

int _open(char *path, int flags, ...)
{
 8000d08:	b40e      	push	{r1, r2, r3}
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b083      	sub	sp, #12
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
	/* Pretend like we always fail */
	return -1;
 8000d12:	2301      	movs	r3, #1
 8000d14:	425b      	negs	r3, r3
}
 8000d16:	0018      	movs	r0, r3
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	b003      	add	sp, #12
 8000d1c:	bc80      	pop	{r7}
 8000d1e:	bc08      	pop	{r3}
 8000d20:	b003      	add	sp, #12
 8000d22:	4718      	bx	r3

08000d24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b086      	sub	sp, #24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d2c:	4a14      	ldr	r2, [pc, #80]	; (8000d80 <_sbrk+0x5c>)
 8000d2e:	4b15      	ldr	r3, [pc, #84]	; (8000d84 <_sbrk+0x60>)
 8000d30:	1ad3      	subs	r3, r2, r3
 8000d32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d38:	4b13      	ldr	r3, [pc, #76]	; (8000d88 <_sbrk+0x64>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d102      	bne.n	8000d46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d40:	4b11      	ldr	r3, [pc, #68]	; (8000d88 <_sbrk+0x64>)
 8000d42:	4a12      	ldr	r2, [pc, #72]	; (8000d8c <_sbrk+0x68>)
 8000d44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d46:	4b10      	ldr	r3, [pc, #64]	; (8000d88 <_sbrk+0x64>)
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	18d3      	adds	r3, r2, r3
 8000d4e:	693a      	ldr	r2, [r7, #16]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	d207      	bcs.n	8000d64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d54:	f005 fbae 	bl	80064b4 <__errno>
 8000d58:	0003      	movs	r3, r0
 8000d5a:	220c      	movs	r2, #12
 8000d5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	425b      	negs	r3, r3
 8000d62:	e009      	b.n	8000d78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d64:	4b08      	ldr	r3, [pc, #32]	; (8000d88 <_sbrk+0x64>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d6a:	4b07      	ldr	r3, [pc, #28]	; (8000d88 <_sbrk+0x64>)
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	18d2      	adds	r2, r2, r3
 8000d72:	4b05      	ldr	r3, [pc, #20]	; (8000d88 <_sbrk+0x64>)
 8000d74:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000d76:	68fb      	ldr	r3, [r7, #12]
}
 8000d78:	0018      	movs	r0, r3
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	b006      	add	sp, #24
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	20001800 	.word	0x20001800
 8000d84:	00000400 	.word	0x00000400
 8000d88:	200000a8 	.word	0x200000a8
 8000d8c:	200005c0 	.word	0x200005c0

08000d90 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000d94:	46c0      	nop			; (mov r8, r8)
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
	...

08000d9c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d9c:	4813      	ldr	r0, [pc, #76]	; (8000dec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d9e:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8000da0:	4813      	ldr	r0, [pc, #76]	; (8000df0 <LoopForever+0x6>)
    LDR R1, [R0]
 8000da2:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000da4:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000da6:	4a13      	ldr	r2, [pc, #76]	; (8000df4 <LoopForever+0xa>)
    CMP R1, R2
 8000da8:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000daa:	d105      	bne.n	8000db8 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8000dac:	4812      	ldr	r0, [pc, #72]	; (8000df8 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000dae:	4913      	ldr	r1, [pc, #76]	; (8000dfc <LoopForever+0x12>)
    STR R1, [R0]
 8000db0:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000db2:	4813      	ldr	r0, [pc, #76]	; (8000e00 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000db4:	4913      	ldr	r1, [pc, #76]	; (8000e04 <LoopForever+0x1a>)
    STR R1, [R0]
 8000db6:	6001      	str	r1, [r0, #0]

08000db8 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000db8:	4813      	ldr	r0, [pc, #76]	; (8000e08 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000dba:	4914      	ldr	r1, [pc, #80]	; (8000e0c <LoopForever+0x22>)
  ldr r2, =_sidata
 8000dbc:	4a14      	ldr	r2, [pc, #80]	; (8000e10 <LoopForever+0x26>)
  movs r3, #0
 8000dbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dc0:	e002      	b.n	8000dc8 <LoopCopyDataInit>

08000dc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dc6:	3304      	adds	r3, #4

08000dc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dcc:	d3f9      	bcc.n	8000dc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dce:	4a11      	ldr	r2, [pc, #68]	; (8000e14 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000dd0:	4c11      	ldr	r4, [pc, #68]	; (8000e18 <LoopForever+0x2e>)
  movs r3, #0
 8000dd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dd4:	e001      	b.n	8000dda <LoopFillZerobss>

08000dd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dd8:	3204      	adds	r2, #4

08000dda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ddc:	d3fb      	bcc.n	8000dd6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000dde:	f7ff ffd7 	bl	8000d90 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000de2:	f005 fead 	bl	8006b40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000de6:	f7ff fa23 	bl	8000230 <main>

08000dea <LoopForever>:

LoopForever:
    b LoopForever
 8000dea:	e7fe      	b.n	8000dea <LoopForever>
  ldr   r0, =_estack
 8000dec:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8000df0:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000df4:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8000df8:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8000dfc:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000e00:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000e04:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000e08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e0c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000e10:	08007958 	.word	0x08007958
  ldr r2, =_sbss
 8000e14:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000e18:	200005bc 	.word	0x200005bc

08000e1c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e1c:	e7fe      	b.n	8000e1c <ADC1_IRQHandler>
	...

08000e20 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e24:	4b07      	ldr	r3, [pc, #28]	; (8000e44 <HAL_Init+0x24>)
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <HAL_Init+0x24>)
 8000e2a:	2110      	movs	r1, #16
 8000e2c:	430a      	orrs	r2, r1
 8000e2e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000e30:	2000      	movs	r0, #0
 8000e32:	f000 f809 	bl	8000e48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e36:	f7ff fe79 	bl	8000b2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e3a:	2300      	movs	r3, #0
}
 8000e3c:	0018      	movs	r0, r3
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	46c0      	nop			; (mov r8, r8)
 8000e44:	40022000 	.word	0x40022000

08000e48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e48:	b590      	push	{r4, r7, lr}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e50:	4b14      	ldr	r3, [pc, #80]	; (8000ea4 <HAL_InitTick+0x5c>)
 8000e52:	681c      	ldr	r4, [r3, #0]
 8000e54:	4b14      	ldr	r3, [pc, #80]	; (8000ea8 <HAL_InitTick+0x60>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	0019      	movs	r1, r3
 8000e5a:	23fa      	movs	r3, #250	; 0xfa
 8000e5c:	0098      	lsls	r0, r3, #2
 8000e5e:	f7ff f95b 	bl	8000118 <__udivsi3>
 8000e62:	0003      	movs	r3, r0
 8000e64:	0019      	movs	r1, r3
 8000e66:	0020      	movs	r0, r4
 8000e68:	f7ff f956 	bl	8000118 <__udivsi3>
 8000e6c:	0003      	movs	r3, r0
 8000e6e:	0018      	movs	r0, r3
 8000e70:	f000 f903 	bl	800107a <HAL_SYSTICK_Config>
 8000e74:	1e03      	subs	r3, r0, #0
 8000e76:	d001      	beq.n	8000e7c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	e00f      	b.n	8000e9c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2b03      	cmp	r3, #3
 8000e80:	d80b      	bhi.n	8000e9a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e82:	6879      	ldr	r1, [r7, #4]
 8000e84:	2301      	movs	r3, #1
 8000e86:	425b      	negs	r3, r3
 8000e88:	2200      	movs	r2, #0
 8000e8a:	0018      	movs	r0, r3
 8000e8c:	f000 f8e0 	bl	8001050 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e90:	4b06      	ldr	r3, [pc, #24]	; (8000eac <HAL_InitTick+0x64>)
 8000e92:	687a      	ldr	r2, [r7, #4]
 8000e94:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000e96:	2300      	movs	r3, #0
 8000e98:	e000      	b.n	8000e9c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
}
 8000e9c:	0018      	movs	r0, r3
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	b003      	add	sp, #12
 8000ea2:	bd90      	pop	{r4, r7, pc}
 8000ea4:	20000000 	.word	0x20000000
 8000ea8:	20000008 	.word	0x20000008
 8000eac:	20000004 	.word	0x20000004

08000eb0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eb4:	4b05      	ldr	r3, [pc, #20]	; (8000ecc <HAL_IncTick+0x1c>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	001a      	movs	r2, r3
 8000eba:	4b05      	ldr	r3, [pc, #20]	; (8000ed0 <HAL_IncTick+0x20>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	18d2      	adds	r2, r2, r3
 8000ec0:	4b03      	ldr	r3, [pc, #12]	; (8000ed0 <HAL_IncTick+0x20>)
 8000ec2:	601a      	str	r2, [r3, #0]
}
 8000ec4:	46c0      	nop			; (mov r8, r8)
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	46c0      	nop			; (mov r8, r8)
 8000ecc:	20000008 	.word	0x20000008
 8000ed0:	20000148 	.word	0x20000148

08000ed4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ed8:	4b02      	ldr	r3, [pc, #8]	; (8000ee4 <HAL_GetTick+0x10>)
 8000eda:	681b      	ldr	r3, [r3, #0]
}
 8000edc:	0018      	movs	r0, r3
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	46c0      	nop			; (mov r8, r8)
 8000ee4:	20000148 	.word	0x20000148

08000ee8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ef0:	f7ff fff0 	bl	8000ed4 <HAL_GetTick>
 8000ef4:	0003      	movs	r3, r0
 8000ef6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	3301      	adds	r3, #1
 8000f00:	d005      	beq.n	8000f0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f02:	4b09      	ldr	r3, [pc, #36]	; (8000f28 <HAL_Delay+0x40>)
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	001a      	movs	r2, r3
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	189b      	adds	r3, r3, r2
 8000f0c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000f0e:	46c0      	nop			; (mov r8, r8)
 8000f10:	f7ff ffe0 	bl	8000ed4 <HAL_GetTick>
 8000f14:	0002      	movs	r2, r0
 8000f16:	68bb      	ldr	r3, [r7, #8]
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	68fa      	ldr	r2, [r7, #12]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d8f7      	bhi.n	8000f10 <HAL_Delay+0x28>
  {
  }
}
 8000f20:	46c0      	nop			; (mov r8, r8)
 8000f22:	46bd      	mov	sp, r7
 8000f24:	b004      	add	sp, #16
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	20000008 	.word	0x20000008

08000f2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f2c:	b590      	push	{r4, r7, lr}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	0002      	movs	r2, r0
 8000f34:	6039      	str	r1, [r7, #0]
 8000f36:	1dfb      	adds	r3, r7, #7
 8000f38:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f3a:	1dfb      	adds	r3, r7, #7
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	2b7f      	cmp	r3, #127	; 0x7f
 8000f40:	d828      	bhi.n	8000f94 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f42:	4a2f      	ldr	r2, [pc, #188]	; (8001000 <__NVIC_SetPriority+0xd4>)
 8000f44:	1dfb      	adds	r3, r7, #7
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	b25b      	sxtb	r3, r3
 8000f4a:	089b      	lsrs	r3, r3, #2
 8000f4c:	33c0      	adds	r3, #192	; 0xc0
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	589b      	ldr	r3, [r3, r2]
 8000f52:	1dfa      	adds	r2, r7, #7
 8000f54:	7812      	ldrb	r2, [r2, #0]
 8000f56:	0011      	movs	r1, r2
 8000f58:	2203      	movs	r2, #3
 8000f5a:	400a      	ands	r2, r1
 8000f5c:	00d2      	lsls	r2, r2, #3
 8000f5e:	21ff      	movs	r1, #255	; 0xff
 8000f60:	4091      	lsls	r1, r2
 8000f62:	000a      	movs	r2, r1
 8000f64:	43d2      	mvns	r2, r2
 8000f66:	401a      	ands	r2, r3
 8000f68:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	019b      	lsls	r3, r3, #6
 8000f6e:	22ff      	movs	r2, #255	; 0xff
 8000f70:	401a      	ands	r2, r3
 8000f72:	1dfb      	adds	r3, r7, #7
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	0018      	movs	r0, r3
 8000f78:	2303      	movs	r3, #3
 8000f7a:	4003      	ands	r3, r0
 8000f7c:	00db      	lsls	r3, r3, #3
 8000f7e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f80:	481f      	ldr	r0, [pc, #124]	; (8001000 <__NVIC_SetPriority+0xd4>)
 8000f82:	1dfb      	adds	r3, r7, #7
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	b25b      	sxtb	r3, r3
 8000f88:	089b      	lsrs	r3, r3, #2
 8000f8a:	430a      	orrs	r2, r1
 8000f8c:	33c0      	adds	r3, #192	; 0xc0
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000f92:	e031      	b.n	8000ff8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f94:	4a1b      	ldr	r2, [pc, #108]	; (8001004 <__NVIC_SetPriority+0xd8>)
 8000f96:	1dfb      	adds	r3, r7, #7
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	0019      	movs	r1, r3
 8000f9c:	230f      	movs	r3, #15
 8000f9e:	400b      	ands	r3, r1
 8000fa0:	3b08      	subs	r3, #8
 8000fa2:	089b      	lsrs	r3, r3, #2
 8000fa4:	3306      	adds	r3, #6
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	18d3      	adds	r3, r2, r3
 8000faa:	3304      	adds	r3, #4
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	1dfa      	adds	r2, r7, #7
 8000fb0:	7812      	ldrb	r2, [r2, #0]
 8000fb2:	0011      	movs	r1, r2
 8000fb4:	2203      	movs	r2, #3
 8000fb6:	400a      	ands	r2, r1
 8000fb8:	00d2      	lsls	r2, r2, #3
 8000fba:	21ff      	movs	r1, #255	; 0xff
 8000fbc:	4091      	lsls	r1, r2
 8000fbe:	000a      	movs	r2, r1
 8000fc0:	43d2      	mvns	r2, r2
 8000fc2:	401a      	ands	r2, r3
 8000fc4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	019b      	lsls	r3, r3, #6
 8000fca:	22ff      	movs	r2, #255	; 0xff
 8000fcc:	401a      	ands	r2, r3
 8000fce:	1dfb      	adds	r3, r7, #7
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	0018      	movs	r0, r3
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	4003      	ands	r3, r0
 8000fd8:	00db      	lsls	r3, r3, #3
 8000fda:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fdc:	4809      	ldr	r0, [pc, #36]	; (8001004 <__NVIC_SetPriority+0xd8>)
 8000fde:	1dfb      	adds	r3, r7, #7
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	001c      	movs	r4, r3
 8000fe4:	230f      	movs	r3, #15
 8000fe6:	4023      	ands	r3, r4
 8000fe8:	3b08      	subs	r3, #8
 8000fea:	089b      	lsrs	r3, r3, #2
 8000fec:	430a      	orrs	r2, r1
 8000fee:	3306      	adds	r3, #6
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	18c3      	adds	r3, r0, r3
 8000ff4:	3304      	adds	r3, #4
 8000ff6:	601a      	str	r2, [r3, #0]
}
 8000ff8:	46c0      	nop			; (mov r8, r8)
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	b003      	add	sp, #12
 8000ffe:	bd90      	pop	{r4, r7, pc}
 8001000:	e000e100 	.word	0xe000e100
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	3b01      	subs	r3, #1
 8001014:	4a0c      	ldr	r2, [pc, #48]	; (8001048 <SysTick_Config+0x40>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d901      	bls.n	800101e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800101a:	2301      	movs	r3, #1
 800101c:	e010      	b.n	8001040 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800101e:	4b0b      	ldr	r3, [pc, #44]	; (800104c <SysTick_Config+0x44>)
 8001020:	687a      	ldr	r2, [r7, #4]
 8001022:	3a01      	subs	r2, #1
 8001024:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001026:	2301      	movs	r3, #1
 8001028:	425b      	negs	r3, r3
 800102a:	2103      	movs	r1, #3
 800102c:	0018      	movs	r0, r3
 800102e:	f7ff ff7d 	bl	8000f2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001032:	4b06      	ldr	r3, [pc, #24]	; (800104c <SysTick_Config+0x44>)
 8001034:	2200      	movs	r2, #0
 8001036:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001038:	4b04      	ldr	r3, [pc, #16]	; (800104c <SysTick_Config+0x44>)
 800103a:	2207      	movs	r2, #7
 800103c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800103e:	2300      	movs	r3, #0
}
 8001040:	0018      	movs	r0, r3
 8001042:	46bd      	mov	sp, r7
 8001044:	b002      	add	sp, #8
 8001046:	bd80      	pop	{r7, pc}
 8001048:	00ffffff 	.word	0x00ffffff
 800104c:	e000e010 	.word	0xe000e010

08001050 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	60b9      	str	r1, [r7, #8]
 8001058:	607a      	str	r2, [r7, #4]
 800105a:	210f      	movs	r1, #15
 800105c:	187b      	adds	r3, r7, r1
 800105e:	1c02      	adds	r2, r0, #0
 8001060:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001062:	68ba      	ldr	r2, [r7, #8]
 8001064:	187b      	adds	r3, r7, r1
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	b25b      	sxtb	r3, r3
 800106a:	0011      	movs	r1, r2
 800106c:	0018      	movs	r0, r3
 800106e:	f7ff ff5d 	bl	8000f2c <__NVIC_SetPriority>
}
 8001072:	46c0      	nop			; (mov r8, r8)
 8001074:	46bd      	mov	sp, r7
 8001076:	b004      	add	sp, #16
 8001078:	bd80      	pop	{r7, pc}

0800107a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800107a:	b580      	push	{r7, lr}
 800107c:	b082      	sub	sp, #8
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	0018      	movs	r0, r3
 8001086:	f7ff ffbf 	bl	8001008 <SysTick_Config>
 800108a:	0003      	movs	r3, r0
}
 800108c:	0018      	movs	r0, r3
 800108e:	46bd      	mov	sp, r7
 8001090:	b002      	add	sp, #8
 8001092:	bd80      	pop	{r7, pc}

08001094 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800109e:	2300      	movs	r3, #0
 80010a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010a2:	e149      	b.n	8001338 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2101      	movs	r1, #1
 80010aa:	697a      	ldr	r2, [r7, #20]
 80010ac:	4091      	lsls	r1, r2
 80010ae:	000a      	movs	r2, r1
 80010b0:	4013      	ands	r3, r2
 80010b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d100      	bne.n	80010bc <HAL_GPIO_Init+0x28>
 80010ba:	e13a      	b.n	8001332 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d00b      	beq.n	80010dc <HAL_GPIO_Init+0x48>
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	d007      	beq.n	80010dc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010d0:	2b11      	cmp	r3, #17
 80010d2:	d003      	beq.n	80010dc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	2b12      	cmp	r3, #18
 80010da:	d130      	bne.n	800113e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	689b      	ldr	r3, [r3, #8]
 80010e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	2203      	movs	r2, #3
 80010e8:	409a      	lsls	r2, r3
 80010ea:	0013      	movs	r3, r2
 80010ec:	43da      	mvns	r2, r3
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	4013      	ands	r3, r2
 80010f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	68da      	ldr	r2, [r3, #12]
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	409a      	lsls	r2, r3
 80010fe:	0013      	movs	r3, r2
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	4313      	orrs	r3, r2
 8001104:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	693a      	ldr	r2, [r7, #16]
 800110a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001112:	2201      	movs	r2, #1
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	409a      	lsls	r2, r3
 8001118:	0013      	movs	r3, r2
 800111a:	43da      	mvns	r2, r3
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	4013      	ands	r3, r2
 8001120:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	091b      	lsrs	r3, r3, #4
 8001128:	2201      	movs	r2, #1
 800112a:	401a      	ands	r2, r3
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	409a      	lsls	r2, r3
 8001130:	0013      	movs	r3, r2
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	4313      	orrs	r3, r2
 8001136:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	68db      	ldr	r3, [r3, #12]
 8001142:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	2203      	movs	r2, #3
 800114a:	409a      	lsls	r2, r3
 800114c:	0013      	movs	r3, r2
 800114e:	43da      	mvns	r2, r3
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	4013      	ands	r3, r2
 8001154:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	689a      	ldr	r2, [r3, #8]
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	409a      	lsls	r2, r3
 8001160:	0013      	movs	r3, r2
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	4313      	orrs	r3, r2
 8001166:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	2b02      	cmp	r3, #2
 8001174:	d003      	beq.n	800117e <HAL_GPIO_Init+0xea>
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	2b12      	cmp	r3, #18
 800117c:	d123      	bne.n	80011c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	08da      	lsrs	r2, r3, #3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	3208      	adds	r2, #8
 8001186:	0092      	lsls	r2, r2, #2
 8001188:	58d3      	ldr	r3, [r2, r3]
 800118a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	2207      	movs	r2, #7
 8001190:	4013      	ands	r3, r2
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	220f      	movs	r2, #15
 8001196:	409a      	lsls	r2, r3
 8001198:	0013      	movs	r3, r2
 800119a:	43da      	mvns	r2, r3
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	4013      	ands	r3, r2
 80011a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	691a      	ldr	r2, [r3, #16]
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	2107      	movs	r1, #7
 80011aa:	400b      	ands	r3, r1
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	409a      	lsls	r2, r3
 80011b0:	0013      	movs	r3, r2
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	08da      	lsrs	r2, r3, #3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	3208      	adds	r2, #8
 80011c0:	0092      	lsls	r2, r2, #2
 80011c2:	6939      	ldr	r1, [r7, #16]
 80011c4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	2203      	movs	r2, #3
 80011d2:	409a      	lsls	r2, r3
 80011d4:	0013      	movs	r3, r2
 80011d6:	43da      	mvns	r2, r3
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	4013      	ands	r3, r2
 80011dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	2203      	movs	r2, #3
 80011e4:	401a      	ands	r2, r3
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	409a      	lsls	r2, r3
 80011ec:	0013      	movs	r3, r2
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685a      	ldr	r2, [r3, #4]
 80011fe:	2380      	movs	r3, #128	; 0x80
 8001200:	055b      	lsls	r3, r3, #21
 8001202:	4013      	ands	r3, r2
 8001204:	d100      	bne.n	8001208 <HAL_GPIO_Init+0x174>
 8001206:	e094      	b.n	8001332 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001208:	4b51      	ldr	r3, [pc, #324]	; (8001350 <HAL_GPIO_Init+0x2bc>)
 800120a:	699a      	ldr	r2, [r3, #24]
 800120c:	4b50      	ldr	r3, [pc, #320]	; (8001350 <HAL_GPIO_Init+0x2bc>)
 800120e:	2101      	movs	r1, #1
 8001210:	430a      	orrs	r2, r1
 8001212:	619a      	str	r2, [r3, #24]
 8001214:	4b4e      	ldr	r3, [pc, #312]	; (8001350 <HAL_GPIO_Init+0x2bc>)
 8001216:	699b      	ldr	r3, [r3, #24]
 8001218:	2201      	movs	r2, #1
 800121a:	4013      	ands	r3, r2
 800121c:	60bb      	str	r3, [r7, #8]
 800121e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001220:	4a4c      	ldr	r2, [pc, #304]	; (8001354 <HAL_GPIO_Init+0x2c0>)
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	089b      	lsrs	r3, r3, #2
 8001226:	3302      	adds	r3, #2
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	589b      	ldr	r3, [r3, r2]
 800122c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	2203      	movs	r2, #3
 8001232:	4013      	ands	r3, r2
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	220f      	movs	r2, #15
 8001238:	409a      	lsls	r2, r3
 800123a:	0013      	movs	r3, r2
 800123c:	43da      	mvns	r2, r3
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	4013      	ands	r3, r2
 8001242:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	2390      	movs	r3, #144	; 0x90
 8001248:	05db      	lsls	r3, r3, #23
 800124a:	429a      	cmp	r2, r3
 800124c:	d00d      	beq.n	800126a <HAL_GPIO_Init+0x1d6>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a41      	ldr	r2, [pc, #260]	; (8001358 <HAL_GPIO_Init+0x2c4>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d007      	beq.n	8001266 <HAL_GPIO_Init+0x1d2>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a40      	ldr	r2, [pc, #256]	; (800135c <HAL_GPIO_Init+0x2c8>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d101      	bne.n	8001262 <HAL_GPIO_Init+0x1ce>
 800125e:	2302      	movs	r3, #2
 8001260:	e004      	b.n	800126c <HAL_GPIO_Init+0x1d8>
 8001262:	2305      	movs	r3, #5
 8001264:	e002      	b.n	800126c <HAL_GPIO_Init+0x1d8>
 8001266:	2301      	movs	r3, #1
 8001268:	e000      	b.n	800126c <HAL_GPIO_Init+0x1d8>
 800126a:	2300      	movs	r3, #0
 800126c:	697a      	ldr	r2, [r7, #20]
 800126e:	2103      	movs	r1, #3
 8001270:	400a      	ands	r2, r1
 8001272:	0092      	lsls	r2, r2, #2
 8001274:	4093      	lsls	r3, r2
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	4313      	orrs	r3, r2
 800127a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800127c:	4935      	ldr	r1, [pc, #212]	; (8001354 <HAL_GPIO_Init+0x2c0>)
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	089b      	lsrs	r3, r3, #2
 8001282:	3302      	adds	r3, #2
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800128a:	4b35      	ldr	r3, [pc, #212]	; (8001360 <HAL_GPIO_Init+0x2cc>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	43da      	mvns	r2, r3
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	4013      	ands	r3, r2
 8001298:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685a      	ldr	r2, [r3, #4]
 800129e:	2380      	movs	r3, #128	; 0x80
 80012a0:	025b      	lsls	r3, r3, #9
 80012a2:	4013      	ands	r3, r2
 80012a4:	d003      	beq.n	80012ae <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80012ae:	4b2c      	ldr	r3, [pc, #176]	; (8001360 <HAL_GPIO_Init+0x2cc>)
 80012b0:	693a      	ldr	r2, [r7, #16]
 80012b2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80012b4:	4b2a      	ldr	r3, [pc, #168]	; (8001360 <HAL_GPIO_Init+0x2cc>)
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	43da      	mvns	r2, r3
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	4013      	ands	r3, r2
 80012c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685a      	ldr	r2, [r3, #4]
 80012c8:	2380      	movs	r3, #128	; 0x80
 80012ca:	029b      	lsls	r3, r3, #10
 80012cc:	4013      	ands	r3, r2
 80012ce:	d003      	beq.n	80012d8 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80012d0:	693a      	ldr	r2, [r7, #16]
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80012d8:	4b21      	ldr	r3, [pc, #132]	; (8001360 <HAL_GPIO_Init+0x2cc>)
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012de:	4b20      	ldr	r3, [pc, #128]	; (8001360 <HAL_GPIO_Init+0x2cc>)
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	43da      	mvns	r2, r3
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	4013      	ands	r3, r2
 80012ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685a      	ldr	r2, [r3, #4]
 80012f2:	2380      	movs	r3, #128	; 0x80
 80012f4:	035b      	lsls	r3, r3, #13
 80012f6:	4013      	ands	r3, r2
 80012f8:	d003      	beq.n	8001302 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	4313      	orrs	r3, r2
 8001300:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001302:	4b17      	ldr	r3, [pc, #92]	; (8001360 <HAL_GPIO_Init+0x2cc>)
 8001304:	693a      	ldr	r2, [r7, #16]
 8001306:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001308:	4b15      	ldr	r3, [pc, #84]	; (8001360 <HAL_GPIO_Init+0x2cc>)
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	43da      	mvns	r2, r3
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	4013      	ands	r3, r2
 8001316:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685a      	ldr	r2, [r3, #4]
 800131c:	2380      	movs	r3, #128	; 0x80
 800131e:	039b      	lsls	r3, r3, #14
 8001320:	4013      	ands	r3, r2
 8001322:	d003      	beq.n	800132c <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8001324:	693a      	ldr	r2, [r7, #16]
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	4313      	orrs	r3, r2
 800132a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800132c:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <HAL_GPIO_Init+0x2cc>)
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	3301      	adds	r3, #1
 8001336:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	40da      	lsrs	r2, r3
 8001340:	1e13      	subs	r3, r2, #0
 8001342:	d000      	beq.n	8001346 <HAL_GPIO_Init+0x2b2>
 8001344:	e6ae      	b.n	80010a4 <HAL_GPIO_Init+0x10>
  } 
}
 8001346:	46c0      	nop			; (mov r8, r8)
 8001348:	46bd      	mov	sp, r7
 800134a:	b006      	add	sp, #24
 800134c:	bd80      	pop	{r7, pc}
 800134e:	46c0      	nop			; (mov r8, r8)
 8001350:	40021000 	.word	0x40021000
 8001354:	40010000 	.word	0x40010000
 8001358:	48000400 	.word	0x48000400
 800135c:	48000800 	.word	0x48000800
 8001360:	40010400 	.word	0x40010400

08001364 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	000a      	movs	r2, r1
 800136e:	1cbb      	adds	r3, r7, #2
 8001370:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	691b      	ldr	r3, [r3, #16]
 8001376:	1cba      	adds	r2, r7, #2
 8001378:	8812      	ldrh	r2, [r2, #0]
 800137a:	4013      	ands	r3, r2
 800137c:	d004      	beq.n	8001388 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800137e:	230f      	movs	r3, #15
 8001380:	18fb      	adds	r3, r7, r3
 8001382:	2201      	movs	r2, #1
 8001384:	701a      	strb	r2, [r3, #0]
 8001386:	e003      	b.n	8001390 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001388:	230f      	movs	r3, #15
 800138a:	18fb      	adds	r3, r7, r3
 800138c:	2200      	movs	r2, #0
 800138e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001390:	230f      	movs	r3, #15
 8001392:	18fb      	adds	r3, r7, r3
 8001394:	781b      	ldrb	r3, [r3, #0]
  }
 8001396:	0018      	movs	r0, r3
 8001398:	46bd      	mov	sp, r7
 800139a:	b004      	add	sp, #16
 800139c:	bd80      	pop	{r7, pc}

0800139e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	b082      	sub	sp, #8
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
 80013a6:	0008      	movs	r0, r1
 80013a8:	0011      	movs	r1, r2
 80013aa:	1cbb      	adds	r3, r7, #2
 80013ac:	1c02      	adds	r2, r0, #0
 80013ae:	801a      	strh	r2, [r3, #0]
 80013b0:	1c7b      	adds	r3, r7, #1
 80013b2:	1c0a      	adds	r2, r1, #0
 80013b4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013b6:	1c7b      	adds	r3, r7, #1
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d004      	beq.n	80013c8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013be:	1cbb      	adds	r3, r7, #2
 80013c0:	881a      	ldrh	r2, [r3, #0]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013c6:	e003      	b.n	80013d0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013c8:	1cbb      	adds	r3, r7, #2
 80013ca:	881a      	ldrh	r2, [r3, #0]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013d0:	46c0      	nop			; (mov r8, r8)
 80013d2:	46bd      	mov	sp, r7
 80013d4:	b002      	add	sp, #8
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b088      	sub	sp, #32
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d102      	bne.n	80013ec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	f000 fb76 	bl	8001ad8 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2201      	movs	r2, #1
 80013f2:	4013      	ands	r3, r2
 80013f4:	d100      	bne.n	80013f8 <HAL_RCC_OscConfig+0x20>
 80013f6:	e08e      	b.n	8001516 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80013f8:	4bc5      	ldr	r3, [pc, #788]	; (8001710 <HAL_RCC_OscConfig+0x338>)
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	220c      	movs	r2, #12
 80013fe:	4013      	ands	r3, r2
 8001400:	2b04      	cmp	r3, #4
 8001402:	d00e      	beq.n	8001422 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001404:	4bc2      	ldr	r3, [pc, #776]	; (8001710 <HAL_RCC_OscConfig+0x338>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	220c      	movs	r2, #12
 800140a:	4013      	ands	r3, r2
 800140c:	2b08      	cmp	r3, #8
 800140e:	d117      	bne.n	8001440 <HAL_RCC_OscConfig+0x68>
 8001410:	4bbf      	ldr	r3, [pc, #764]	; (8001710 <HAL_RCC_OscConfig+0x338>)
 8001412:	685a      	ldr	r2, [r3, #4]
 8001414:	23c0      	movs	r3, #192	; 0xc0
 8001416:	025b      	lsls	r3, r3, #9
 8001418:	401a      	ands	r2, r3
 800141a:	2380      	movs	r3, #128	; 0x80
 800141c:	025b      	lsls	r3, r3, #9
 800141e:	429a      	cmp	r2, r3
 8001420:	d10e      	bne.n	8001440 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001422:	4bbb      	ldr	r3, [pc, #748]	; (8001710 <HAL_RCC_OscConfig+0x338>)
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	2380      	movs	r3, #128	; 0x80
 8001428:	029b      	lsls	r3, r3, #10
 800142a:	4013      	ands	r3, r2
 800142c:	d100      	bne.n	8001430 <HAL_RCC_OscConfig+0x58>
 800142e:	e071      	b.n	8001514 <HAL_RCC_OscConfig+0x13c>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d000      	beq.n	800143a <HAL_RCC_OscConfig+0x62>
 8001438:	e06c      	b.n	8001514 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	f000 fb4c 	bl	8001ad8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	2b01      	cmp	r3, #1
 8001446:	d107      	bne.n	8001458 <HAL_RCC_OscConfig+0x80>
 8001448:	4bb1      	ldr	r3, [pc, #708]	; (8001710 <HAL_RCC_OscConfig+0x338>)
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	4bb0      	ldr	r3, [pc, #704]	; (8001710 <HAL_RCC_OscConfig+0x338>)
 800144e:	2180      	movs	r1, #128	; 0x80
 8001450:	0249      	lsls	r1, r1, #9
 8001452:	430a      	orrs	r2, r1
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	e02f      	b.n	80014b8 <HAL_RCC_OscConfig+0xe0>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d10c      	bne.n	800147a <HAL_RCC_OscConfig+0xa2>
 8001460:	4bab      	ldr	r3, [pc, #684]	; (8001710 <HAL_RCC_OscConfig+0x338>)
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	4baa      	ldr	r3, [pc, #680]	; (8001710 <HAL_RCC_OscConfig+0x338>)
 8001466:	49ab      	ldr	r1, [pc, #684]	; (8001714 <HAL_RCC_OscConfig+0x33c>)
 8001468:	400a      	ands	r2, r1
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	4ba8      	ldr	r3, [pc, #672]	; (8001710 <HAL_RCC_OscConfig+0x338>)
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	4ba7      	ldr	r3, [pc, #668]	; (8001710 <HAL_RCC_OscConfig+0x338>)
 8001472:	49a9      	ldr	r1, [pc, #676]	; (8001718 <HAL_RCC_OscConfig+0x340>)
 8001474:	400a      	ands	r2, r1
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	e01e      	b.n	80014b8 <HAL_RCC_OscConfig+0xe0>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	2b05      	cmp	r3, #5
 8001480:	d10e      	bne.n	80014a0 <HAL_RCC_OscConfig+0xc8>
 8001482:	4ba3      	ldr	r3, [pc, #652]	; (8001710 <HAL_RCC_OscConfig+0x338>)
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	4ba2      	ldr	r3, [pc, #648]	; (8001710 <HAL_RCC_OscConfig+0x338>)
 8001488:	2180      	movs	r1, #128	; 0x80
 800148a:	02c9      	lsls	r1, r1, #11
 800148c:	430a      	orrs	r2, r1
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	4b9f      	ldr	r3, [pc, #636]	; (8001710 <HAL_RCC_OscConfig+0x338>)
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	4b9e      	ldr	r3, [pc, #632]	; (8001710 <HAL_RCC_OscConfig+0x338>)
 8001496:	2180      	movs	r1, #128	; 0x80
 8001498:	0249      	lsls	r1, r1, #9
 800149a:	430a      	orrs	r2, r1
 800149c:	601a      	str	r2, [r3, #0]
 800149e:	e00b      	b.n	80014b8 <HAL_RCC_OscConfig+0xe0>
 80014a0:	4b9b      	ldr	r3, [pc, #620]	; (8001710 <HAL_RCC_OscConfig+0x338>)
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	4b9a      	ldr	r3, [pc, #616]	; (8001710 <HAL_RCC_OscConfig+0x338>)
 80014a6:	499b      	ldr	r1, [pc, #620]	; (8001714 <HAL_RCC_OscConfig+0x33c>)
 80014a8:	400a      	ands	r2, r1
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	4b98      	ldr	r3, [pc, #608]	; (8001710 <HAL_RCC_OscConfig+0x338>)
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	4b97      	ldr	r3, [pc, #604]	; (8001710 <HAL_RCC_OscConfig+0x338>)
 80014b2:	4999      	ldr	r1, [pc, #612]	; (8001718 <HAL_RCC_OscConfig+0x340>)
 80014b4:	400a      	ands	r2, r1
 80014b6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d014      	beq.n	80014ea <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c0:	f7ff fd08 	bl	8000ed4 <HAL_GetTick>
 80014c4:	0003      	movs	r3, r0
 80014c6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014c8:	e008      	b.n	80014dc <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014ca:	f7ff fd03 	bl	8000ed4 <HAL_GetTick>
 80014ce:	0002      	movs	r2, r0
 80014d0:	69bb      	ldr	r3, [r7, #24]
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	2b64      	cmp	r3, #100	; 0x64
 80014d6:	d901      	bls.n	80014dc <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80014d8:	2303      	movs	r3, #3
 80014da:	e2fd      	b.n	8001ad8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014dc:	4b8c      	ldr	r3, [pc, #560]	; (8001710 <HAL_RCC_OscConfig+0x338>)
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	2380      	movs	r3, #128	; 0x80
 80014e2:	029b      	lsls	r3, r3, #10
 80014e4:	4013      	ands	r3, r2
 80014e6:	d0f0      	beq.n	80014ca <HAL_RCC_OscConfig+0xf2>
 80014e8:	e015      	b.n	8001516 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ea:	f7ff fcf3 	bl	8000ed4 <HAL_GetTick>
 80014ee:	0003      	movs	r3, r0
 80014f0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014f2:	e008      	b.n	8001506 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014f4:	f7ff fcee 	bl	8000ed4 <HAL_GetTick>
 80014f8:	0002      	movs	r2, r0
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	2b64      	cmp	r3, #100	; 0x64
 8001500:	d901      	bls.n	8001506 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e2e8      	b.n	8001ad8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001506:	4b82      	ldr	r3, [pc, #520]	; (8001710 <HAL_RCC_OscConfig+0x338>)
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	2380      	movs	r3, #128	; 0x80
 800150c:	029b      	lsls	r3, r3, #10
 800150e:	4013      	ands	r3, r2
 8001510:	d1f0      	bne.n	80014f4 <HAL_RCC_OscConfig+0x11c>
 8001512:	e000      	b.n	8001516 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001514:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	2202      	movs	r2, #2
 800151c:	4013      	ands	r3, r2
 800151e:	d100      	bne.n	8001522 <HAL_RCC_OscConfig+0x14a>
 8001520:	e06c      	b.n	80015fc <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001522:	4b7b      	ldr	r3, [pc, #492]	; (8001710 <HAL_RCC_OscConfig+0x338>)
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	220c      	movs	r2, #12
 8001528:	4013      	ands	r3, r2
 800152a:	d00e      	beq.n	800154a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800152c:	4b78      	ldr	r3, [pc, #480]	; (8001710 <HAL_RCC_OscConfig+0x338>)
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	220c      	movs	r2, #12
 8001532:	4013      	ands	r3, r2
 8001534:	2b08      	cmp	r3, #8
 8001536:	d11f      	bne.n	8001578 <HAL_RCC_OscConfig+0x1a0>
 8001538:	4b75      	ldr	r3, [pc, #468]	; (8001710 <HAL_RCC_OscConfig+0x338>)
 800153a:	685a      	ldr	r2, [r3, #4]
 800153c:	23c0      	movs	r3, #192	; 0xc0
 800153e:	025b      	lsls	r3, r3, #9
 8001540:	401a      	ands	r2, r3
 8001542:	2380      	movs	r3, #128	; 0x80
 8001544:	021b      	lsls	r3, r3, #8
 8001546:	429a      	cmp	r2, r3
 8001548:	d116      	bne.n	8001578 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800154a:	4b71      	ldr	r3, [pc, #452]	; (8001710 <HAL_RCC_OscConfig+0x338>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2202      	movs	r2, #2
 8001550:	4013      	ands	r3, r2
 8001552:	d005      	beq.n	8001560 <HAL_RCC_OscConfig+0x188>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	2b01      	cmp	r3, #1
 800155a:	d001      	beq.n	8001560 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e2bb      	b.n	8001ad8 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001560:	4b6b      	ldr	r3, [pc, #428]	; (8001710 <HAL_RCC_OscConfig+0x338>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	22f8      	movs	r2, #248	; 0xf8
 8001566:	4393      	bics	r3, r2
 8001568:	0019      	movs	r1, r3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	691b      	ldr	r3, [r3, #16]
 800156e:	00da      	lsls	r2, r3, #3
 8001570:	4b67      	ldr	r3, [pc, #412]	; (8001710 <HAL_RCC_OscConfig+0x338>)
 8001572:	430a      	orrs	r2, r1
 8001574:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001576:	e041      	b.n	80015fc <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d024      	beq.n	80015ca <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001580:	4b63      	ldr	r3, [pc, #396]	; (8001710 <HAL_RCC_OscConfig+0x338>)
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	4b62      	ldr	r3, [pc, #392]	; (8001710 <HAL_RCC_OscConfig+0x338>)
 8001586:	2101      	movs	r1, #1
 8001588:	430a      	orrs	r2, r1
 800158a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800158c:	f7ff fca2 	bl	8000ed4 <HAL_GetTick>
 8001590:	0003      	movs	r3, r0
 8001592:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001594:	e008      	b.n	80015a8 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001596:	f7ff fc9d 	bl	8000ed4 <HAL_GetTick>
 800159a:	0002      	movs	r2, r0
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d901      	bls.n	80015a8 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80015a4:	2303      	movs	r3, #3
 80015a6:	e297      	b.n	8001ad8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015a8:	4b59      	ldr	r3, [pc, #356]	; (8001710 <HAL_RCC_OscConfig+0x338>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2202      	movs	r2, #2
 80015ae:	4013      	ands	r3, r2
 80015b0:	d0f1      	beq.n	8001596 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015b2:	4b57      	ldr	r3, [pc, #348]	; (8001710 <HAL_RCC_OscConfig+0x338>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	22f8      	movs	r2, #248	; 0xf8
 80015b8:	4393      	bics	r3, r2
 80015ba:	0019      	movs	r1, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	691b      	ldr	r3, [r3, #16]
 80015c0:	00da      	lsls	r2, r3, #3
 80015c2:	4b53      	ldr	r3, [pc, #332]	; (8001710 <HAL_RCC_OscConfig+0x338>)
 80015c4:	430a      	orrs	r2, r1
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	e018      	b.n	80015fc <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015ca:	4b51      	ldr	r3, [pc, #324]	; (8001710 <HAL_RCC_OscConfig+0x338>)
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	4b50      	ldr	r3, [pc, #320]	; (8001710 <HAL_RCC_OscConfig+0x338>)
 80015d0:	2101      	movs	r1, #1
 80015d2:	438a      	bics	r2, r1
 80015d4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d6:	f7ff fc7d 	bl	8000ed4 <HAL_GetTick>
 80015da:	0003      	movs	r3, r0
 80015dc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015de:	e008      	b.n	80015f2 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015e0:	f7ff fc78 	bl	8000ed4 <HAL_GetTick>
 80015e4:	0002      	movs	r2, r0
 80015e6:	69bb      	ldr	r3, [r7, #24]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d901      	bls.n	80015f2 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e272      	b.n	8001ad8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015f2:	4b47      	ldr	r3, [pc, #284]	; (8001710 <HAL_RCC_OscConfig+0x338>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	2202      	movs	r2, #2
 80015f8:	4013      	ands	r3, r2
 80015fa:	d1f1      	bne.n	80015e0 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2208      	movs	r2, #8
 8001602:	4013      	ands	r3, r2
 8001604:	d036      	beq.n	8001674 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	69db      	ldr	r3, [r3, #28]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d019      	beq.n	8001642 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800160e:	4b40      	ldr	r3, [pc, #256]	; (8001710 <HAL_RCC_OscConfig+0x338>)
 8001610:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001612:	4b3f      	ldr	r3, [pc, #252]	; (8001710 <HAL_RCC_OscConfig+0x338>)
 8001614:	2101      	movs	r1, #1
 8001616:	430a      	orrs	r2, r1
 8001618:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800161a:	f7ff fc5b 	bl	8000ed4 <HAL_GetTick>
 800161e:	0003      	movs	r3, r0
 8001620:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001622:	e008      	b.n	8001636 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001624:	f7ff fc56 	bl	8000ed4 <HAL_GetTick>
 8001628:	0002      	movs	r2, r0
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	2b02      	cmp	r3, #2
 8001630:	d901      	bls.n	8001636 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e250      	b.n	8001ad8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001636:	4b36      	ldr	r3, [pc, #216]	; (8001710 <HAL_RCC_OscConfig+0x338>)
 8001638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800163a:	2202      	movs	r2, #2
 800163c:	4013      	ands	r3, r2
 800163e:	d0f1      	beq.n	8001624 <HAL_RCC_OscConfig+0x24c>
 8001640:	e018      	b.n	8001674 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001642:	4b33      	ldr	r3, [pc, #204]	; (8001710 <HAL_RCC_OscConfig+0x338>)
 8001644:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001646:	4b32      	ldr	r3, [pc, #200]	; (8001710 <HAL_RCC_OscConfig+0x338>)
 8001648:	2101      	movs	r1, #1
 800164a:	438a      	bics	r2, r1
 800164c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800164e:	f7ff fc41 	bl	8000ed4 <HAL_GetTick>
 8001652:	0003      	movs	r3, r0
 8001654:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001656:	e008      	b.n	800166a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001658:	f7ff fc3c 	bl	8000ed4 <HAL_GetTick>
 800165c:	0002      	movs	r2, r0
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	2b02      	cmp	r3, #2
 8001664:	d901      	bls.n	800166a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e236      	b.n	8001ad8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800166a:	4b29      	ldr	r3, [pc, #164]	; (8001710 <HAL_RCC_OscConfig+0x338>)
 800166c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166e:	2202      	movs	r2, #2
 8001670:	4013      	ands	r3, r2
 8001672:	d1f1      	bne.n	8001658 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2204      	movs	r2, #4
 800167a:	4013      	ands	r3, r2
 800167c:	d100      	bne.n	8001680 <HAL_RCC_OscConfig+0x2a8>
 800167e:	e0b5      	b.n	80017ec <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001680:	231f      	movs	r3, #31
 8001682:	18fb      	adds	r3, r7, r3
 8001684:	2200      	movs	r2, #0
 8001686:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001688:	4b21      	ldr	r3, [pc, #132]	; (8001710 <HAL_RCC_OscConfig+0x338>)
 800168a:	69da      	ldr	r2, [r3, #28]
 800168c:	2380      	movs	r3, #128	; 0x80
 800168e:	055b      	lsls	r3, r3, #21
 8001690:	4013      	ands	r3, r2
 8001692:	d111      	bne.n	80016b8 <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001694:	4b1e      	ldr	r3, [pc, #120]	; (8001710 <HAL_RCC_OscConfig+0x338>)
 8001696:	69da      	ldr	r2, [r3, #28]
 8001698:	4b1d      	ldr	r3, [pc, #116]	; (8001710 <HAL_RCC_OscConfig+0x338>)
 800169a:	2180      	movs	r1, #128	; 0x80
 800169c:	0549      	lsls	r1, r1, #21
 800169e:	430a      	orrs	r2, r1
 80016a0:	61da      	str	r2, [r3, #28]
 80016a2:	4b1b      	ldr	r3, [pc, #108]	; (8001710 <HAL_RCC_OscConfig+0x338>)
 80016a4:	69da      	ldr	r2, [r3, #28]
 80016a6:	2380      	movs	r3, #128	; 0x80
 80016a8:	055b      	lsls	r3, r3, #21
 80016aa:	4013      	ands	r3, r2
 80016ac:	60fb      	str	r3, [r7, #12]
 80016ae:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80016b0:	231f      	movs	r3, #31
 80016b2:	18fb      	adds	r3, r7, r3
 80016b4:	2201      	movs	r2, #1
 80016b6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016b8:	4b18      	ldr	r3, [pc, #96]	; (800171c <HAL_RCC_OscConfig+0x344>)
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	2380      	movs	r3, #128	; 0x80
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	4013      	ands	r3, r2
 80016c2:	d11a      	bne.n	80016fa <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016c4:	4b15      	ldr	r3, [pc, #84]	; (800171c <HAL_RCC_OscConfig+0x344>)
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	4b14      	ldr	r3, [pc, #80]	; (800171c <HAL_RCC_OscConfig+0x344>)
 80016ca:	2180      	movs	r1, #128	; 0x80
 80016cc:	0049      	lsls	r1, r1, #1
 80016ce:	430a      	orrs	r2, r1
 80016d0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016d2:	f7ff fbff 	bl	8000ed4 <HAL_GetTick>
 80016d6:	0003      	movs	r3, r0
 80016d8:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016da:	e008      	b.n	80016ee <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016dc:	f7ff fbfa 	bl	8000ed4 <HAL_GetTick>
 80016e0:	0002      	movs	r2, r0
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	2b64      	cmp	r3, #100	; 0x64
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e1f4      	b.n	8001ad8 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ee:	4b0b      	ldr	r3, [pc, #44]	; (800171c <HAL_RCC_OscConfig+0x344>)
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	2380      	movs	r3, #128	; 0x80
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	4013      	ands	r3, r2
 80016f8:	d0f0      	beq.n	80016dc <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d10e      	bne.n	8001720 <HAL_RCC_OscConfig+0x348>
 8001702:	4b03      	ldr	r3, [pc, #12]	; (8001710 <HAL_RCC_OscConfig+0x338>)
 8001704:	6a1a      	ldr	r2, [r3, #32]
 8001706:	4b02      	ldr	r3, [pc, #8]	; (8001710 <HAL_RCC_OscConfig+0x338>)
 8001708:	2101      	movs	r1, #1
 800170a:	430a      	orrs	r2, r1
 800170c:	621a      	str	r2, [r3, #32]
 800170e:	e035      	b.n	800177c <HAL_RCC_OscConfig+0x3a4>
 8001710:	40021000 	.word	0x40021000
 8001714:	fffeffff 	.word	0xfffeffff
 8001718:	fffbffff 	.word	0xfffbffff
 800171c:	40007000 	.word	0x40007000
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d10c      	bne.n	8001742 <HAL_RCC_OscConfig+0x36a>
 8001728:	4bca      	ldr	r3, [pc, #808]	; (8001a54 <HAL_RCC_OscConfig+0x67c>)
 800172a:	6a1a      	ldr	r2, [r3, #32]
 800172c:	4bc9      	ldr	r3, [pc, #804]	; (8001a54 <HAL_RCC_OscConfig+0x67c>)
 800172e:	2101      	movs	r1, #1
 8001730:	438a      	bics	r2, r1
 8001732:	621a      	str	r2, [r3, #32]
 8001734:	4bc7      	ldr	r3, [pc, #796]	; (8001a54 <HAL_RCC_OscConfig+0x67c>)
 8001736:	6a1a      	ldr	r2, [r3, #32]
 8001738:	4bc6      	ldr	r3, [pc, #792]	; (8001a54 <HAL_RCC_OscConfig+0x67c>)
 800173a:	2104      	movs	r1, #4
 800173c:	438a      	bics	r2, r1
 800173e:	621a      	str	r2, [r3, #32]
 8001740:	e01c      	b.n	800177c <HAL_RCC_OscConfig+0x3a4>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	2b05      	cmp	r3, #5
 8001748:	d10c      	bne.n	8001764 <HAL_RCC_OscConfig+0x38c>
 800174a:	4bc2      	ldr	r3, [pc, #776]	; (8001a54 <HAL_RCC_OscConfig+0x67c>)
 800174c:	6a1a      	ldr	r2, [r3, #32]
 800174e:	4bc1      	ldr	r3, [pc, #772]	; (8001a54 <HAL_RCC_OscConfig+0x67c>)
 8001750:	2104      	movs	r1, #4
 8001752:	430a      	orrs	r2, r1
 8001754:	621a      	str	r2, [r3, #32]
 8001756:	4bbf      	ldr	r3, [pc, #764]	; (8001a54 <HAL_RCC_OscConfig+0x67c>)
 8001758:	6a1a      	ldr	r2, [r3, #32]
 800175a:	4bbe      	ldr	r3, [pc, #760]	; (8001a54 <HAL_RCC_OscConfig+0x67c>)
 800175c:	2101      	movs	r1, #1
 800175e:	430a      	orrs	r2, r1
 8001760:	621a      	str	r2, [r3, #32]
 8001762:	e00b      	b.n	800177c <HAL_RCC_OscConfig+0x3a4>
 8001764:	4bbb      	ldr	r3, [pc, #748]	; (8001a54 <HAL_RCC_OscConfig+0x67c>)
 8001766:	6a1a      	ldr	r2, [r3, #32]
 8001768:	4bba      	ldr	r3, [pc, #744]	; (8001a54 <HAL_RCC_OscConfig+0x67c>)
 800176a:	2101      	movs	r1, #1
 800176c:	438a      	bics	r2, r1
 800176e:	621a      	str	r2, [r3, #32]
 8001770:	4bb8      	ldr	r3, [pc, #736]	; (8001a54 <HAL_RCC_OscConfig+0x67c>)
 8001772:	6a1a      	ldr	r2, [r3, #32]
 8001774:	4bb7      	ldr	r3, [pc, #732]	; (8001a54 <HAL_RCC_OscConfig+0x67c>)
 8001776:	2104      	movs	r1, #4
 8001778:	438a      	bics	r2, r1
 800177a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d014      	beq.n	80017ae <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001784:	f7ff fba6 	bl	8000ed4 <HAL_GetTick>
 8001788:	0003      	movs	r3, r0
 800178a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800178c:	e009      	b.n	80017a2 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800178e:	f7ff fba1 	bl	8000ed4 <HAL_GetTick>
 8001792:	0002      	movs	r2, r0
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	4aaf      	ldr	r2, [pc, #700]	; (8001a58 <HAL_RCC_OscConfig+0x680>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e19a      	b.n	8001ad8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017a2:	4bac      	ldr	r3, [pc, #688]	; (8001a54 <HAL_RCC_OscConfig+0x67c>)
 80017a4:	6a1b      	ldr	r3, [r3, #32]
 80017a6:	2202      	movs	r2, #2
 80017a8:	4013      	ands	r3, r2
 80017aa:	d0f0      	beq.n	800178e <HAL_RCC_OscConfig+0x3b6>
 80017ac:	e013      	b.n	80017d6 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ae:	f7ff fb91 	bl	8000ed4 <HAL_GetTick>
 80017b2:	0003      	movs	r3, r0
 80017b4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017b6:	e009      	b.n	80017cc <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017b8:	f7ff fb8c 	bl	8000ed4 <HAL_GetTick>
 80017bc:	0002      	movs	r2, r0
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	4aa5      	ldr	r2, [pc, #660]	; (8001a58 <HAL_RCC_OscConfig+0x680>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d901      	bls.n	80017cc <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80017c8:	2303      	movs	r3, #3
 80017ca:	e185      	b.n	8001ad8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017cc:	4ba1      	ldr	r3, [pc, #644]	; (8001a54 <HAL_RCC_OscConfig+0x67c>)
 80017ce:	6a1b      	ldr	r3, [r3, #32]
 80017d0:	2202      	movs	r2, #2
 80017d2:	4013      	ands	r3, r2
 80017d4:	d1f0      	bne.n	80017b8 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80017d6:	231f      	movs	r3, #31
 80017d8:	18fb      	adds	r3, r7, r3
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d105      	bne.n	80017ec <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017e0:	4b9c      	ldr	r3, [pc, #624]	; (8001a54 <HAL_RCC_OscConfig+0x67c>)
 80017e2:	69da      	ldr	r2, [r3, #28]
 80017e4:	4b9b      	ldr	r3, [pc, #620]	; (8001a54 <HAL_RCC_OscConfig+0x67c>)
 80017e6:	499d      	ldr	r1, [pc, #628]	; (8001a5c <HAL_RCC_OscConfig+0x684>)
 80017e8:	400a      	ands	r2, r1
 80017ea:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2210      	movs	r2, #16
 80017f2:	4013      	ands	r3, r2
 80017f4:	d063      	beq.n	80018be <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	695b      	ldr	r3, [r3, #20]
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d12a      	bne.n	8001854 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80017fe:	4b95      	ldr	r3, [pc, #596]	; (8001a54 <HAL_RCC_OscConfig+0x67c>)
 8001800:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001802:	4b94      	ldr	r3, [pc, #592]	; (8001a54 <HAL_RCC_OscConfig+0x67c>)
 8001804:	2104      	movs	r1, #4
 8001806:	430a      	orrs	r2, r1
 8001808:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800180a:	4b92      	ldr	r3, [pc, #584]	; (8001a54 <HAL_RCC_OscConfig+0x67c>)
 800180c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800180e:	4b91      	ldr	r3, [pc, #580]	; (8001a54 <HAL_RCC_OscConfig+0x67c>)
 8001810:	2101      	movs	r1, #1
 8001812:	430a      	orrs	r2, r1
 8001814:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001816:	f7ff fb5d 	bl	8000ed4 <HAL_GetTick>
 800181a:	0003      	movs	r3, r0
 800181c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800181e:	e008      	b.n	8001832 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001820:	f7ff fb58 	bl	8000ed4 <HAL_GetTick>
 8001824:	0002      	movs	r2, r0
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	2b02      	cmp	r3, #2
 800182c:	d901      	bls.n	8001832 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e152      	b.n	8001ad8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001832:	4b88      	ldr	r3, [pc, #544]	; (8001a54 <HAL_RCC_OscConfig+0x67c>)
 8001834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001836:	2202      	movs	r2, #2
 8001838:	4013      	ands	r3, r2
 800183a:	d0f1      	beq.n	8001820 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800183c:	4b85      	ldr	r3, [pc, #532]	; (8001a54 <HAL_RCC_OscConfig+0x67c>)
 800183e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001840:	22f8      	movs	r2, #248	; 0xf8
 8001842:	4393      	bics	r3, r2
 8001844:	0019      	movs	r1, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	699b      	ldr	r3, [r3, #24]
 800184a:	00da      	lsls	r2, r3, #3
 800184c:	4b81      	ldr	r3, [pc, #516]	; (8001a54 <HAL_RCC_OscConfig+0x67c>)
 800184e:	430a      	orrs	r2, r1
 8001850:	635a      	str	r2, [r3, #52]	; 0x34
 8001852:	e034      	b.n	80018be <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	695b      	ldr	r3, [r3, #20]
 8001858:	3305      	adds	r3, #5
 800185a:	d111      	bne.n	8001880 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800185c:	4b7d      	ldr	r3, [pc, #500]	; (8001a54 <HAL_RCC_OscConfig+0x67c>)
 800185e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001860:	4b7c      	ldr	r3, [pc, #496]	; (8001a54 <HAL_RCC_OscConfig+0x67c>)
 8001862:	2104      	movs	r1, #4
 8001864:	438a      	bics	r2, r1
 8001866:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001868:	4b7a      	ldr	r3, [pc, #488]	; (8001a54 <HAL_RCC_OscConfig+0x67c>)
 800186a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800186c:	22f8      	movs	r2, #248	; 0xf8
 800186e:	4393      	bics	r3, r2
 8001870:	0019      	movs	r1, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	699b      	ldr	r3, [r3, #24]
 8001876:	00da      	lsls	r2, r3, #3
 8001878:	4b76      	ldr	r3, [pc, #472]	; (8001a54 <HAL_RCC_OscConfig+0x67c>)
 800187a:	430a      	orrs	r2, r1
 800187c:	635a      	str	r2, [r3, #52]	; 0x34
 800187e:	e01e      	b.n	80018be <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001880:	4b74      	ldr	r3, [pc, #464]	; (8001a54 <HAL_RCC_OscConfig+0x67c>)
 8001882:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001884:	4b73      	ldr	r3, [pc, #460]	; (8001a54 <HAL_RCC_OscConfig+0x67c>)
 8001886:	2104      	movs	r1, #4
 8001888:	430a      	orrs	r2, r1
 800188a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800188c:	4b71      	ldr	r3, [pc, #452]	; (8001a54 <HAL_RCC_OscConfig+0x67c>)
 800188e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001890:	4b70      	ldr	r3, [pc, #448]	; (8001a54 <HAL_RCC_OscConfig+0x67c>)
 8001892:	2101      	movs	r1, #1
 8001894:	438a      	bics	r2, r1
 8001896:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001898:	f7ff fb1c 	bl	8000ed4 <HAL_GetTick>
 800189c:	0003      	movs	r3, r0
 800189e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80018a0:	e008      	b.n	80018b4 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80018a2:	f7ff fb17 	bl	8000ed4 <HAL_GetTick>
 80018a6:	0002      	movs	r2, r0
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d901      	bls.n	80018b4 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	e111      	b.n	8001ad8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80018b4:	4b67      	ldr	r3, [pc, #412]	; (8001a54 <HAL_RCC_OscConfig+0x67c>)
 80018b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018b8:	2202      	movs	r2, #2
 80018ba:	4013      	ands	r3, r2
 80018bc:	d1f1      	bne.n	80018a2 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2220      	movs	r2, #32
 80018c4:	4013      	ands	r3, r2
 80018c6:	d05c      	beq.n	8001982 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80018c8:	4b62      	ldr	r3, [pc, #392]	; (8001a54 <HAL_RCC_OscConfig+0x67c>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	220c      	movs	r2, #12
 80018ce:	4013      	ands	r3, r2
 80018d0:	2b0c      	cmp	r3, #12
 80018d2:	d00e      	beq.n	80018f2 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80018d4:	4b5f      	ldr	r3, [pc, #380]	; (8001a54 <HAL_RCC_OscConfig+0x67c>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	220c      	movs	r2, #12
 80018da:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80018dc:	2b08      	cmp	r3, #8
 80018de:	d114      	bne.n	800190a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80018e0:	4b5c      	ldr	r3, [pc, #368]	; (8001a54 <HAL_RCC_OscConfig+0x67c>)
 80018e2:	685a      	ldr	r2, [r3, #4]
 80018e4:	23c0      	movs	r3, #192	; 0xc0
 80018e6:	025b      	lsls	r3, r3, #9
 80018e8:	401a      	ands	r2, r3
 80018ea:	23c0      	movs	r3, #192	; 0xc0
 80018ec:	025b      	lsls	r3, r3, #9
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d10b      	bne.n	800190a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80018f2:	4b58      	ldr	r3, [pc, #352]	; (8001a54 <HAL_RCC_OscConfig+0x67c>)
 80018f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018f6:	2380      	movs	r3, #128	; 0x80
 80018f8:	025b      	lsls	r3, r3, #9
 80018fa:	4013      	ands	r3, r2
 80018fc:	d040      	beq.n	8001980 <HAL_RCC_OscConfig+0x5a8>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6a1b      	ldr	r3, [r3, #32]
 8001902:	2b01      	cmp	r3, #1
 8001904:	d03c      	beq.n	8001980 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e0e6      	b.n	8001ad8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6a1b      	ldr	r3, [r3, #32]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d01b      	beq.n	800194a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001912:	4b50      	ldr	r3, [pc, #320]	; (8001a54 <HAL_RCC_OscConfig+0x67c>)
 8001914:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001916:	4b4f      	ldr	r3, [pc, #316]	; (8001a54 <HAL_RCC_OscConfig+0x67c>)
 8001918:	2180      	movs	r1, #128	; 0x80
 800191a:	0249      	lsls	r1, r1, #9
 800191c:	430a      	orrs	r2, r1
 800191e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001920:	f7ff fad8 	bl	8000ed4 <HAL_GetTick>
 8001924:	0003      	movs	r3, r0
 8001926:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001928:	e008      	b.n	800193c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800192a:	f7ff fad3 	bl	8000ed4 <HAL_GetTick>
 800192e:	0002      	movs	r2, r0
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	2b02      	cmp	r3, #2
 8001936:	d901      	bls.n	800193c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001938:	2303      	movs	r3, #3
 800193a:	e0cd      	b.n	8001ad8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800193c:	4b45      	ldr	r3, [pc, #276]	; (8001a54 <HAL_RCC_OscConfig+0x67c>)
 800193e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001940:	2380      	movs	r3, #128	; 0x80
 8001942:	025b      	lsls	r3, r3, #9
 8001944:	4013      	ands	r3, r2
 8001946:	d0f0      	beq.n	800192a <HAL_RCC_OscConfig+0x552>
 8001948:	e01b      	b.n	8001982 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800194a:	4b42      	ldr	r3, [pc, #264]	; (8001a54 <HAL_RCC_OscConfig+0x67c>)
 800194c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800194e:	4b41      	ldr	r3, [pc, #260]	; (8001a54 <HAL_RCC_OscConfig+0x67c>)
 8001950:	4943      	ldr	r1, [pc, #268]	; (8001a60 <HAL_RCC_OscConfig+0x688>)
 8001952:	400a      	ands	r2, r1
 8001954:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001956:	f7ff fabd 	bl	8000ed4 <HAL_GetTick>
 800195a:	0003      	movs	r3, r0
 800195c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800195e:	e008      	b.n	8001972 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001960:	f7ff fab8 	bl	8000ed4 <HAL_GetTick>
 8001964:	0002      	movs	r2, r0
 8001966:	69bb      	ldr	r3, [r7, #24]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	2b02      	cmp	r3, #2
 800196c:	d901      	bls.n	8001972 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e0b2      	b.n	8001ad8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001972:	4b38      	ldr	r3, [pc, #224]	; (8001a54 <HAL_RCC_OscConfig+0x67c>)
 8001974:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001976:	2380      	movs	r3, #128	; 0x80
 8001978:	025b      	lsls	r3, r3, #9
 800197a:	4013      	ands	r3, r2
 800197c:	d1f0      	bne.n	8001960 <HAL_RCC_OscConfig+0x588>
 800197e:	e000      	b.n	8001982 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001980:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001986:	2b00      	cmp	r3, #0
 8001988:	d100      	bne.n	800198c <HAL_RCC_OscConfig+0x5b4>
 800198a:	e0a4      	b.n	8001ad6 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800198c:	4b31      	ldr	r3, [pc, #196]	; (8001a54 <HAL_RCC_OscConfig+0x67c>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	220c      	movs	r2, #12
 8001992:	4013      	ands	r3, r2
 8001994:	2b08      	cmp	r3, #8
 8001996:	d100      	bne.n	800199a <HAL_RCC_OscConfig+0x5c2>
 8001998:	e078      	b.n	8001a8c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d14c      	bne.n	8001a3c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019a2:	4b2c      	ldr	r3, [pc, #176]	; (8001a54 <HAL_RCC_OscConfig+0x67c>)
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	4b2b      	ldr	r3, [pc, #172]	; (8001a54 <HAL_RCC_OscConfig+0x67c>)
 80019a8:	492e      	ldr	r1, [pc, #184]	; (8001a64 <HAL_RCC_OscConfig+0x68c>)
 80019aa:	400a      	ands	r2, r1
 80019ac:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ae:	f7ff fa91 	bl	8000ed4 <HAL_GetTick>
 80019b2:	0003      	movs	r3, r0
 80019b4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019b6:	e008      	b.n	80019ca <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019b8:	f7ff fa8c 	bl	8000ed4 <HAL_GetTick>
 80019bc:	0002      	movs	r2, r0
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d901      	bls.n	80019ca <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e086      	b.n	8001ad8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019ca:	4b22      	ldr	r3, [pc, #136]	; (8001a54 <HAL_RCC_OscConfig+0x67c>)
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	2380      	movs	r3, #128	; 0x80
 80019d0:	049b      	lsls	r3, r3, #18
 80019d2:	4013      	ands	r3, r2
 80019d4:	d1f0      	bne.n	80019b8 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019d6:	4b1f      	ldr	r3, [pc, #124]	; (8001a54 <HAL_RCC_OscConfig+0x67c>)
 80019d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019da:	220f      	movs	r2, #15
 80019dc:	4393      	bics	r3, r2
 80019de:	0019      	movs	r1, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019e4:	4b1b      	ldr	r3, [pc, #108]	; (8001a54 <HAL_RCC_OscConfig+0x67c>)
 80019e6:	430a      	orrs	r2, r1
 80019e8:	62da      	str	r2, [r3, #44]	; 0x2c
 80019ea:	4b1a      	ldr	r3, [pc, #104]	; (8001a54 <HAL_RCC_OscConfig+0x67c>)
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	4a1e      	ldr	r2, [pc, #120]	; (8001a68 <HAL_RCC_OscConfig+0x690>)
 80019f0:	4013      	ands	r3, r2
 80019f2:	0019      	movs	r1, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019fc:	431a      	orrs	r2, r3
 80019fe:	4b15      	ldr	r3, [pc, #84]	; (8001a54 <HAL_RCC_OscConfig+0x67c>)
 8001a00:	430a      	orrs	r2, r1
 8001a02:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a04:	4b13      	ldr	r3, [pc, #76]	; (8001a54 <HAL_RCC_OscConfig+0x67c>)
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	4b12      	ldr	r3, [pc, #72]	; (8001a54 <HAL_RCC_OscConfig+0x67c>)
 8001a0a:	2180      	movs	r1, #128	; 0x80
 8001a0c:	0449      	lsls	r1, r1, #17
 8001a0e:	430a      	orrs	r2, r1
 8001a10:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a12:	f7ff fa5f 	bl	8000ed4 <HAL_GetTick>
 8001a16:	0003      	movs	r3, r0
 8001a18:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a1a:	e008      	b.n	8001a2e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a1c:	f7ff fa5a 	bl	8000ed4 <HAL_GetTick>
 8001a20:	0002      	movs	r2, r0
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d901      	bls.n	8001a2e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e054      	b.n	8001ad8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a2e:	4b09      	ldr	r3, [pc, #36]	; (8001a54 <HAL_RCC_OscConfig+0x67c>)
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	2380      	movs	r3, #128	; 0x80
 8001a34:	049b      	lsls	r3, r3, #18
 8001a36:	4013      	ands	r3, r2
 8001a38:	d0f0      	beq.n	8001a1c <HAL_RCC_OscConfig+0x644>
 8001a3a:	e04c      	b.n	8001ad6 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a3c:	4b05      	ldr	r3, [pc, #20]	; (8001a54 <HAL_RCC_OscConfig+0x67c>)
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	4b04      	ldr	r3, [pc, #16]	; (8001a54 <HAL_RCC_OscConfig+0x67c>)
 8001a42:	4908      	ldr	r1, [pc, #32]	; (8001a64 <HAL_RCC_OscConfig+0x68c>)
 8001a44:	400a      	ands	r2, r1
 8001a46:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a48:	f7ff fa44 	bl	8000ed4 <HAL_GetTick>
 8001a4c:	0003      	movs	r3, r0
 8001a4e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a50:	e015      	b.n	8001a7e <HAL_RCC_OscConfig+0x6a6>
 8001a52:	46c0      	nop			; (mov r8, r8)
 8001a54:	40021000 	.word	0x40021000
 8001a58:	00001388 	.word	0x00001388
 8001a5c:	efffffff 	.word	0xefffffff
 8001a60:	fffeffff 	.word	0xfffeffff
 8001a64:	feffffff 	.word	0xfeffffff
 8001a68:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a6c:	f7ff fa32 	bl	8000ed4 <HAL_GetTick>
 8001a70:	0002      	movs	r2, r0
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e02c      	b.n	8001ad8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a7e:	4b18      	ldr	r3, [pc, #96]	; (8001ae0 <HAL_RCC_OscConfig+0x708>)
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	2380      	movs	r3, #128	; 0x80
 8001a84:	049b      	lsls	r3, r3, #18
 8001a86:	4013      	ands	r3, r2
 8001a88:	d1f0      	bne.n	8001a6c <HAL_RCC_OscConfig+0x694>
 8001a8a:	e024      	b.n	8001ad6 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d101      	bne.n	8001a98 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e01f      	b.n	8001ad8 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001a98:	4b11      	ldr	r3, [pc, #68]	; (8001ae0 <HAL_RCC_OscConfig+0x708>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001a9e:	4b10      	ldr	r3, [pc, #64]	; (8001ae0 <HAL_RCC_OscConfig+0x708>)
 8001aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa2:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aa4:	697a      	ldr	r2, [r7, #20]
 8001aa6:	23c0      	movs	r3, #192	; 0xc0
 8001aa8:	025b      	lsls	r3, r3, #9
 8001aaa:	401a      	ands	r2, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d10e      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	220f      	movs	r2, #15
 8001ab8:	401a      	ands	r2, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d107      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001ac2:	697a      	ldr	r2, [r7, #20]
 8001ac4:	23f0      	movs	r3, #240	; 0xf0
 8001ac6:	039b      	lsls	r3, r3, #14
 8001ac8:	401a      	ands	r2, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d001      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e000      	b.n	8001ad8 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001ad6:	2300      	movs	r3, #0
}
 8001ad8:	0018      	movs	r0, r3
 8001ada:	46bd      	mov	sp, r7
 8001adc:	b008      	add	sp, #32
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	40021000 	.word	0x40021000

08001ae4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d101      	bne.n	8001af8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e0bf      	b.n	8001c78 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001af8:	4b61      	ldr	r3, [pc, #388]	; (8001c80 <HAL_RCC_ClockConfig+0x19c>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2201      	movs	r2, #1
 8001afe:	4013      	ands	r3, r2
 8001b00:	683a      	ldr	r2, [r7, #0]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d911      	bls.n	8001b2a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b06:	4b5e      	ldr	r3, [pc, #376]	; (8001c80 <HAL_RCC_ClockConfig+0x19c>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	4393      	bics	r3, r2
 8001b0e:	0019      	movs	r1, r3
 8001b10:	4b5b      	ldr	r3, [pc, #364]	; (8001c80 <HAL_RCC_ClockConfig+0x19c>)
 8001b12:	683a      	ldr	r2, [r7, #0]
 8001b14:	430a      	orrs	r2, r1
 8001b16:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b18:	4b59      	ldr	r3, [pc, #356]	; (8001c80 <HAL_RCC_ClockConfig+0x19c>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	4013      	ands	r3, r2
 8001b20:	683a      	ldr	r2, [r7, #0]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d001      	beq.n	8001b2a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e0a6      	b.n	8001c78 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2202      	movs	r2, #2
 8001b30:	4013      	ands	r3, r2
 8001b32:	d015      	beq.n	8001b60 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2204      	movs	r2, #4
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	d006      	beq.n	8001b4c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001b3e:	4b51      	ldr	r3, [pc, #324]	; (8001c84 <HAL_RCC_ClockConfig+0x1a0>)
 8001b40:	685a      	ldr	r2, [r3, #4]
 8001b42:	4b50      	ldr	r3, [pc, #320]	; (8001c84 <HAL_RCC_ClockConfig+0x1a0>)
 8001b44:	21e0      	movs	r1, #224	; 0xe0
 8001b46:	00c9      	lsls	r1, r1, #3
 8001b48:	430a      	orrs	r2, r1
 8001b4a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b4c:	4b4d      	ldr	r3, [pc, #308]	; (8001c84 <HAL_RCC_ClockConfig+0x1a0>)
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	22f0      	movs	r2, #240	; 0xf0
 8001b52:	4393      	bics	r3, r2
 8001b54:	0019      	movs	r1, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	689a      	ldr	r2, [r3, #8]
 8001b5a:	4b4a      	ldr	r3, [pc, #296]	; (8001c84 <HAL_RCC_ClockConfig+0x1a0>)
 8001b5c:	430a      	orrs	r2, r1
 8001b5e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2201      	movs	r2, #1
 8001b66:	4013      	ands	r3, r2
 8001b68:	d04c      	beq.n	8001c04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d107      	bne.n	8001b82 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b72:	4b44      	ldr	r3, [pc, #272]	; (8001c84 <HAL_RCC_ClockConfig+0x1a0>)
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	2380      	movs	r3, #128	; 0x80
 8001b78:	029b      	lsls	r3, r3, #10
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	d120      	bne.n	8001bc0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e07a      	b.n	8001c78 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d107      	bne.n	8001b9a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b8a:	4b3e      	ldr	r3, [pc, #248]	; (8001c84 <HAL_RCC_ClockConfig+0x1a0>)
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	2380      	movs	r3, #128	; 0x80
 8001b90:	049b      	lsls	r3, r3, #18
 8001b92:	4013      	ands	r3, r2
 8001b94:	d114      	bne.n	8001bc0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e06e      	b.n	8001c78 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	2b03      	cmp	r3, #3
 8001ba0:	d107      	bne.n	8001bb2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001ba2:	4b38      	ldr	r3, [pc, #224]	; (8001c84 <HAL_RCC_ClockConfig+0x1a0>)
 8001ba4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ba6:	2380      	movs	r3, #128	; 0x80
 8001ba8:	025b      	lsls	r3, r3, #9
 8001baa:	4013      	ands	r3, r2
 8001bac:	d108      	bne.n	8001bc0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e062      	b.n	8001c78 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bb2:	4b34      	ldr	r3, [pc, #208]	; (8001c84 <HAL_RCC_ClockConfig+0x1a0>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	2202      	movs	r2, #2
 8001bb8:	4013      	ands	r3, r2
 8001bba:	d101      	bne.n	8001bc0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e05b      	b.n	8001c78 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bc0:	4b30      	ldr	r3, [pc, #192]	; (8001c84 <HAL_RCC_ClockConfig+0x1a0>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	2203      	movs	r2, #3
 8001bc6:	4393      	bics	r3, r2
 8001bc8:	0019      	movs	r1, r3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685a      	ldr	r2, [r3, #4]
 8001bce:	4b2d      	ldr	r3, [pc, #180]	; (8001c84 <HAL_RCC_ClockConfig+0x1a0>)
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bd4:	f7ff f97e 	bl	8000ed4 <HAL_GetTick>
 8001bd8:	0003      	movs	r3, r0
 8001bda:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bdc:	e009      	b.n	8001bf2 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bde:	f7ff f979 	bl	8000ed4 <HAL_GetTick>
 8001be2:	0002      	movs	r2, r0
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	4a27      	ldr	r2, [pc, #156]	; (8001c88 <HAL_RCC_ClockConfig+0x1a4>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d901      	bls.n	8001bf2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e042      	b.n	8001c78 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bf2:	4b24      	ldr	r3, [pc, #144]	; (8001c84 <HAL_RCC_ClockConfig+0x1a0>)
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	220c      	movs	r2, #12
 8001bf8:	401a      	ands	r2, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d1ec      	bne.n	8001bde <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c04:	4b1e      	ldr	r3, [pc, #120]	; (8001c80 <HAL_RCC_ClockConfig+0x19c>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2201      	movs	r2, #1
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	683a      	ldr	r2, [r7, #0]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d211      	bcs.n	8001c36 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c12:	4b1b      	ldr	r3, [pc, #108]	; (8001c80 <HAL_RCC_ClockConfig+0x19c>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	2201      	movs	r2, #1
 8001c18:	4393      	bics	r3, r2
 8001c1a:	0019      	movs	r1, r3
 8001c1c:	4b18      	ldr	r3, [pc, #96]	; (8001c80 <HAL_RCC_ClockConfig+0x19c>)
 8001c1e:	683a      	ldr	r2, [r7, #0]
 8001c20:	430a      	orrs	r2, r1
 8001c22:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c24:	4b16      	ldr	r3, [pc, #88]	; (8001c80 <HAL_RCC_ClockConfig+0x19c>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2201      	movs	r2, #1
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	683a      	ldr	r2, [r7, #0]
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d001      	beq.n	8001c36 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e020      	b.n	8001c78 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2204      	movs	r2, #4
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	d009      	beq.n	8001c54 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001c40:	4b10      	ldr	r3, [pc, #64]	; (8001c84 <HAL_RCC_ClockConfig+0x1a0>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	4a11      	ldr	r2, [pc, #68]	; (8001c8c <HAL_RCC_ClockConfig+0x1a8>)
 8001c46:	4013      	ands	r3, r2
 8001c48:	0019      	movs	r1, r3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	68da      	ldr	r2, [r3, #12]
 8001c4e:	4b0d      	ldr	r3, [pc, #52]	; (8001c84 <HAL_RCC_ClockConfig+0x1a0>)
 8001c50:	430a      	orrs	r2, r1
 8001c52:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001c54:	f000 f820 	bl	8001c98 <HAL_RCC_GetSysClockFreq>
 8001c58:	0001      	movs	r1, r0
 8001c5a:	4b0a      	ldr	r3, [pc, #40]	; (8001c84 <HAL_RCC_ClockConfig+0x1a0>)
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	091b      	lsrs	r3, r3, #4
 8001c60:	220f      	movs	r2, #15
 8001c62:	4013      	ands	r3, r2
 8001c64:	4a0a      	ldr	r2, [pc, #40]	; (8001c90 <HAL_RCC_ClockConfig+0x1ac>)
 8001c66:	5cd3      	ldrb	r3, [r2, r3]
 8001c68:	000a      	movs	r2, r1
 8001c6a:	40da      	lsrs	r2, r3
 8001c6c:	4b09      	ldr	r3, [pc, #36]	; (8001c94 <HAL_RCC_ClockConfig+0x1b0>)
 8001c6e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001c70:	2000      	movs	r0, #0
 8001c72:	f7ff f8e9 	bl	8000e48 <HAL_InitTick>
  
  return HAL_OK;
 8001c76:	2300      	movs	r3, #0
}
 8001c78:	0018      	movs	r0, r3
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	b004      	add	sp, #16
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	40022000 	.word	0x40022000
 8001c84:	40021000 	.word	0x40021000
 8001c88:	00001388 	.word	0x00001388
 8001c8c:	fffff8ff 	.word	0xfffff8ff
 8001c90:	08007828 	.word	0x08007828
 8001c94:	20000000 	.word	0x20000000

08001c98 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c98:	b590      	push	{r4, r7, lr}
 8001c9a:	b08f      	sub	sp, #60	; 0x3c
 8001c9c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001c9e:	2314      	movs	r3, #20
 8001ca0:	18fb      	adds	r3, r7, r3
 8001ca2:	4a37      	ldr	r2, [pc, #220]	; (8001d80 <HAL_RCC_GetSysClockFreq+0xe8>)
 8001ca4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001ca6:	c313      	stmia	r3!, {r0, r1, r4}
 8001ca8:	6812      	ldr	r2, [r2, #0]
 8001caa:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001cac:	1d3b      	adds	r3, r7, #4
 8001cae:	4a35      	ldr	r2, [pc, #212]	; (8001d84 <HAL_RCC_GetSysClockFreq+0xec>)
 8001cb0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001cb2:	c313      	stmia	r3!, {r0, r1, r4}
 8001cb4:	6812      	ldr	r2, [r2, #0]
 8001cb6:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	637b      	str	r3, [r7, #52]	; 0x34
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001ccc:	4b2e      	ldr	r3, [pc, #184]	; (8001d88 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cd4:	220c      	movs	r2, #12
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	2b08      	cmp	r3, #8
 8001cda:	d006      	beq.n	8001cea <HAL_RCC_GetSysClockFreq+0x52>
 8001cdc:	2b0c      	cmp	r3, #12
 8001cde:	d043      	beq.n	8001d68 <HAL_RCC_GetSysClockFreq+0xd0>
 8001ce0:	2b04      	cmp	r3, #4
 8001ce2:	d144      	bne.n	8001d6e <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ce4:	4b29      	ldr	r3, [pc, #164]	; (8001d8c <HAL_RCC_GetSysClockFreq+0xf4>)
 8001ce6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001ce8:	e044      	b.n	8001d74 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cec:	0c9b      	lsrs	r3, r3, #18
 8001cee:	220f      	movs	r2, #15
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	2214      	movs	r2, #20
 8001cf4:	18ba      	adds	r2, r7, r2
 8001cf6:	5cd3      	ldrb	r3, [r2, r3]
 8001cf8:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001cfa:	4b23      	ldr	r3, [pc, #140]	; (8001d88 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cfe:	220f      	movs	r2, #15
 8001d00:	4013      	ands	r3, r2
 8001d02:	1d3a      	adds	r2, r7, #4
 8001d04:	5cd3      	ldrb	r3, [r2, r3]
 8001d06:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001d08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d0a:	23c0      	movs	r3, #192	; 0xc0
 8001d0c:	025b      	lsls	r3, r3, #9
 8001d0e:	401a      	ands	r2, r3
 8001d10:	2380      	movs	r3, #128	; 0x80
 8001d12:	025b      	lsls	r3, r3, #9
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d109      	bne.n	8001d2c <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001d18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d1a:	481c      	ldr	r0, [pc, #112]	; (8001d8c <HAL_RCC_GetSysClockFreq+0xf4>)
 8001d1c:	f7fe f9fc 	bl	8000118 <__udivsi3>
 8001d20:	0003      	movs	r3, r0
 8001d22:	001a      	movs	r2, r3
 8001d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d26:	4353      	muls	r3, r2
 8001d28:	637b      	str	r3, [r7, #52]	; 0x34
 8001d2a:	e01a      	b.n	8001d62 <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001d2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d2e:	23c0      	movs	r3, #192	; 0xc0
 8001d30:	025b      	lsls	r3, r3, #9
 8001d32:	401a      	ands	r2, r3
 8001d34:	23c0      	movs	r3, #192	; 0xc0
 8001d36:	025b      	lsls	r3, r3, #9
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d109      	bne.n	8001d50 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001d3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d3e:	4814      	ldr	r0, [pc, #80]	; (8001d90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d40:	f7fe f9ea 	bl	8000118 <__udivsi3>
 8001d44:	0003      	movs	r3, r0
 8001d46:	001a      	movs	r2, r3
 8001d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4a:	4353      	muls	r3, r2
 8001d4c:	637b      	str	r3, [r7, #52]	; 0x34
 8001d4e:	e008      	b.n	8001d62 <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001d50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d52:	480e      	ldr	r0, [pc, #56]	; (8001d8c <HAL_RCC_GetSysClockFreq+0xf4>)
 8001d54:	f7fe f9e0 	bl	8000118 <__udivsi3>
 8001d58:	0003      	movs	r3, r0
 8001d5a:	001a      	movs	r2, r3
 8001d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5e:	4353      	muls	r3, r2
 8001d60:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d64:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d66:	e005      	b.n	8001d74 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001d68:	4b09      	ldr	r3, [pc, #36]	; (8001d90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d6a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d6c:	e002      	b.n	8001d74 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d6e:	4b07      	ldr	r3, [pc, #28]	; (8001d8c <HAL_RCC_GetSysClockFreq+0xf4>)
 8001d70:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d72:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001d76:	0018      	movs	r0, r3
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	b00f      	add	sp, #60	; 0x3c
 8001d7c:	bd90      	pop	{r4, r7, pc}
 8001d7e:	46c0      	nop			; (mov r8, r8)
 8001d80:	080077c4 	.word	0x080077c4
 8001d84:	080077d4 	.word	0x080077d4
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	007a1200 	.word	0x007a1200
 8001d90:	02dc6c00 	.word	0x02dc6c00

08001d94 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d101      	bne.n	8001da6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e0a8      	b.n	8001ef8 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d109      	bne.n	8001dc2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685a      	ldr	r2, [r3, #4]
 8001db2:	2382      	movs	r3, #130	; 0x82
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d009      	beq.n	8001dce <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	61da      	str	r2, [r3, #28]
 8001dc0:	e005      	b.n	8001dce <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	225d      	movs	r2, #93	; 0x5d
 8001dd8:	5c9b      	ldrb	r3, [r3, r2]
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d107      	bne.n	8001df0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	225c      	movs	r2, #92	; 0x5c
 8001de4:	2100      	movs	r1, #0
 8001de6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	0018      	movs	r0, r3
 8001dec:	f7fe fec2 	bl	8000b74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	225d      	movs	r2, #93	; 0x5d
 8001df4:	2102      	movs	r1, #2
 8001df6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2140      	movs	r1, #64	; 0x40
 8001e04:	438a      	bics	r2, r1
 8001e06:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	68da      	ldr	r2, [r3, #12]
 8001e0c:	23e0      	movs	r3, #224	; 0xe0
 8001e0e:	00db      	lsls	r3, r3, #3
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d902      	bls.n	8001e1a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001e14:	2300      	movs	r3, #0
 8001e16:	60fb      	str	r3, [r7, #12]
 8001e18:	e002      	b.n	8001e20 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001e1a:	2380      	movs	r3, #128	; 0x80
 8001e1c:	015b      	lsls	r3, r3, #5
 8001e1e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	68da      	ldr	r2, [r3, #12]
 8001e24:	23f0      	movs	r3, #240	; 0xf0
 8001e26:	011b      	lsls	r3, r3, #4
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d008      	beq.n	8001e3e <HAL_SPI_Init+0xaa>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	68da      	ldr	r2, [r3, #12]
 8001e30:	23e0      	movs	r3, #224	; 0xe0
 8001e32:	00db      	lsls	r3, r3, #3
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d002      	beq.n	8001e3e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685a      	ldr	r2, [r3, #4]
 8001e42:	2382      	movs	r3, #130	; 0x82
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	401a      	ands	r2, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6899      	ldr	r1, [r3, #8]
 8001e4c:	2384      	movs	r3, #132	; 0x84
 8001e4e:	021b      	lsls	r3, r3, #8
 8001e50:	400b      	ands	r3, r1
 8001e52:	431a      	orrs	r2, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	691b      	ldr	r3, [r3, #16]
 8001e58:	2102      	movs	r1, #2
 8001e5a:	400b      	ands	r3, r1
 8001e5c:	431a      	orrs	r2, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	695b      	ldr	r3, [r3, #20]
 8001e62:	2101      	movs	r1, #1
 8001e64:	400b      	ands	r3, r1
 8001e66:	431a      	orrs	r2, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6999      	ldr	r1, [r3, #24]
 8001e6c:	2380      	movs	r3, #128	; 0x80
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	400b      	ands	r3, r1
 8001e72:	431a      	orrs	r2, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	69db      	ldr	r3, [r3, #28]
 8001e78:	2138      	movs	r1, #56	; 0x38
 8001e7a:	400b      	ands	r3, r1
 8001e7c:	431a      	orrs	r2, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6a1b      	ldr	r3, [r3, #32]
 8001e82:	2180      	movs	r1, #128	; 0x80
 8001e84:	400b      	ands	r3, r1
 8001e86:	431a      	orrs	r2, r3
 8001e88:	0011      	movs	r1, r2
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e8e:	2380      	movs	r3, #128	; 0x80
 8001e90:	019b      	lsls	r3, r3, #6
 8001e92:	401a      	ands	r2, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	0c1b      	lsrs	r3, r3, #16
 8001ea2:	2204      	movs	r2, #4
 8001ea4:	401a      	ands	r2, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eaa:	2110      	movs	r1, #16
 8001eac:	400b      	ands	r3, r1
 8001eae:	431a      	orrs	r2, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eb4:	2108      	movs	r1, #8
 8001eb6:	400b      	ands	r3, r1
 8001eb8:	431a      	orrs	r2, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	68d9      	ldr	r1, [r3, #12]
 8001ebe:	23f0      	movs	r3, #240	; 0xf0
 8001ec0:	011b      	lsls	r3, r3, #4
 8001ec2:	400b      	ands	r3, r1
 8001ec4:	431a      	orrs	r2, r3
 8001ec6:	0011      	movs	r1, r2
 8001ec8:	68fa      	ldr	r2, [r7, #12]
 8001eca:	2380      	movs	r3, #128	; 0x80
 8001ecc:	015b      	lsls	r3, r3, #5
 8001ece:	401a      	ands	r2, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	69da      	ldr	r2, [r3, #28]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4907      	ldr	r1, [pc, #28]	; (8001f00 <HAL_SPI_Init+0x16c>)
 8001ee4:	400a      	ands	r2, r1
 8001ee6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	225d      	movs	r2, #93	; 0x5d
 8001ef2:	2101      	movs	r1, #1
 8001ef4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001ef6:	2300      	movs	r3, #0
}
 8001ef8:	0018      	movs	r0, r3
 8001efa:	46bd      	mov	sp, r7
 8001efc:	b004      	add	sp, #16
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	fffff7ff 	.word	0xfffff7ff

08001f04 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b08a      	sub	sp, #40	; 0x28
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	60f8      	str	r0, [r7, #12]
 8001f0c:	60b9      	str	r1, [r7, #8]
 8001f0e:	607a      	str	r2, [r7, #4]
 8001f10:	001a      	movs	r2, r3
 8001f12:	1cbb      	adds	r3, r7, #2
 8001f14:	801a      	strh	r2, [r3, #0]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001f16:	2301      	movs	r3, #1
 8001f18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001f1a:	2323      	movs	r3, #35	; 0x23
 8001f1c:	18fb      	adds	r3, r7, r3
 8001f1e:	2200      	movs	r2, #0
 8001f20:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	225c      	movs	r2, #92	; 0x5c
 8001f26:	5c9b      	ldrb	r3, [r3, r2]
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d101      	bne.n	8001f30 <HAL_SPI_TransmitReceive+0x2c>
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	e1b6      	b.n	800229e <HAL_SPI_TransmitReceive+0x39a>
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	225c      	movs	r2, #92	; 0x5c
 8001f34:	2101      	movs	r1, #1
 8001f36:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001f38:	f7fe ffcc 	bl	8000ed4 <HAL_GetTick>
 8001f3c:	0003      	movs	r3, r0
 8001f3e:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001f40:	201b      	movs	r0, #27
 8001f42:	183b      	adds	r3, r7, r0
 8001f44:	68fa      	ldr	r2, [r7, #12]
 8001f46:	215d      	movs	r1, #93	; 0x5d
 8001f48:	5c52      	ldrb	r2, [r2, r1]
 8001f4a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8001f52:	2312      	movs	r3, #18
 8001f54:	18fb      	adds	r3, r7, r3
 8001f56:	1cba      	adds	r2, r7, #2
 8001f58:	8812      	ldrh	r2, [r2, #0]
 8001f5a:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001f5c:	183b      	adds	r3, r7, r0
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d012      	beq.n	8001f8a <HAL_SPI_TransmitReceive+0x86>
 8001f64:	697a      	ldr	r2, [r7, #20]
 8001f66:	2382      	movs	r3, #130	; 0x82
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d108      	bne.n	8001f80 <HAL_SPI_TransmitReceive+0x7c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d104      	bne.n	8001f80 <HAL_SPI_TransmitReceive+0x7c>
 8001f76:	231b      	movs	r3, #27
 8001f78:	18fb      	adds	r3, r7, r3
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	2b04      	cmp	r3, #4
 8001f7e:	d004      	beq.n	8001f8a <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 8001f80:	2323      	movs	r3, #35	; 0x23
 8001f82:	18fb      	adds	r3, r7, r3
 8001f84:	2202      	movs	r2, #2
 8001f86:	701a      	strb	r2, [r3, #0]
    goto error;
 8001f88:	e17e      	b.n	8002288 <HAL_SPI_TransmitReceive+0x384>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d006      	beq.n	8001f9e <HAL_SPI_TransmitReceive+0x9a>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d003      	beq.n	8001f9e <HAL_SPI_TransmitReceive+0x9a>
 8001f96:	1cbb      	adds	r3, r7, #2
 8001f98:	881b      	ldrh	r3, [r3, #0]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d104      	bne.n	8001fa8 <HAL_SPI_TransmitReceive+0xa4>
  {
    errorcode = HAL_ERROR;
 8001f9e:	2323      	movs	r3, #35	; 0x23
 8001fa0:	18fb      	adds	r3, r7, r3
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	701a      	strb	r2, [r3, #0]
    goto error;
 8001fa6:	e16f      	b.n	8002288 <HAL_SPI_TransmitReceive+0x384>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	225d      	movs	r2, #93	; 0x5d
 8001fac:	5c9b      	ldrb	r3, [r3, r2]
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	2b04      	cmp	r3, #4
 8001fb2:	d003      	beq.n	8001fbc <HAL_SPI_TransmitReceive+0xb8>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	225d      	movs	r2, #93	; 0x5d
 8001fb8:	2105      	movs	r1, #5
 8001fba:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	1cba      	adds	r2, r7, #2
 8001fcc:	2146      	movs	r1, #70	; 0x46
 8001fce:	8812      	ldrh	r2, [r2, #0]
 8001fd0:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	1cba      	adds	r2, r7, #2
 8001fd6:	2144      	movs	r1, #68	; 0x44
 8001fd8:	8812      	ldrh	r2, [r2, #0]
 8001fda:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	68ba      	ldr	r2, [r7, #8]
 8001fe0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	1cba      	adds	r2, r7, #2
 8001fe6:	8812      	ldrh	r2, [r2, #0]
 8001fe8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	1cba      	adds	r2, r7, #2
 8001fee:	8812      	ldrh	r2, [r2, #0]
 8001ff0:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	68da      	ldr	r2, [r3, #12]
 8002002:	23e0      	movs	r3, #224	; 0xe0
 8002004:	00db      	lsls	r3, r3, #3
 8002006:	429a      	cmp	r2, r3
 8002008:	d908      	bls.n	800201c <HAL_SPI_TransmitReceive+0x118>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	685a      	ldr	r2, [r3, #4]
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	49a4      	ldr	r1, [pc, #656]	; (80022a8 <HAL_SPI_TransmitReceive+0x3a4>)
 8002016:	400a      	ands	r2, r1
 8002018:	605a      	str	r2, [r3, #4]
 800201a:	e008      	b.n	800202e <HAL_SPI_TransmitReceive+0x12a>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	685a      	ldr	r2, [r3, #4]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2180      	movs	r1, #128	; 0x80
 8002028:	0149      	lsls	r1, r1, #5
 800202a:	430a      	orrs	r2, r1
 800202c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2240      	movs	r2, #64	; 0x40
 8002036:	4013      	ands	r3, r2
 8002038:	2b40      	cmp	r3, #64	; 0x40
 800203a:	d007      	beq.n	800204c <HAL_SPI_TransmitReceive+0x148>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	2140      	movs	r1, #64	; 0x40
 8002048:	430a      	orrs	r2, r1
 800204a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	68da      	ldr	r2, [r3, #12]
 8002050:	23e0      	movs	r3, #224	; 0xe0
 8002052:	00db      	lsls	r3, r3, #3
 8002054:	429a      	cmp	r2, r3
 8002056:	d800      	bhi.n	800205a <HAL_SPI_TransmitReceive+0x156>
 8002058:	e07f      	b.n	800215a <HAL_SPI_TransmitReceive+0x256>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d005      	beq.n	800206e <HAL_SPI_TransmitReceive+0x16a>
 8002062:	2312      	movs	r3, #18
 8002064:	18fb      	adds	r3, r7, r3
 8002066:	881b      	ldrh	r3, [r3, #0]
 8002068:	2b01      	cmp	r3, #1
 800206a:	d000      	beq.n	800206e <HAL_SPI_TransmitReceive+0x16a>
 800206c:	e069      	b.n	8002142 <HAL_SPI_TransmitReceive+0x23e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002072:	881a      	ldrh	r2, [r3, #0]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800207e:	1c9a      	adds	r2, r3, #2
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002088:	b29b      	uxth	r3, r3
 800208a:	3b01      	subs	r3, #1
 800208c:	b29a      	uxth	r2, r3
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002092:	e056      	b.n	8002142 <HAL_SPI_TransmitReceive+0x23e>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	2202      	movs	r2, #2
 800209c:	4013      	ands	r3, r2
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d11b      	bne.n	80020da <HAL_SPI_TransmitReceive+0x1d6>
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d016      	beq.n	80020da <HAL_SPI_TransmitReceive+0x1d6>
 80020ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d113      	bne.n	80020da <HAL_SPI_TransmitReceive+0x1d6>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020b6:	881a      	ldrh	r2, [r3, #0]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020c2:	1c9a      	adds	r2, r3, #2
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	3b01      	subs	r3, #1
 80020d0:	b29a      	uxth	r2, r3
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80020d6:	2300      	movs	r3, #0
 80020d8:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	2201      	movs	r2, #1
 80020e2:	4013      	ands	r3, r2
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d11c      	bne.n	8002122 <HAL_SPI_TransmitReceive+0x21e>
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2246      	movs	r2, #70	; 0x46
 80020ec:	5a9b      	ldrh	r3, [r3, r2]
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d016      	beq.n	8002122 <HAL_SPI_TransmitReceive+0x21e>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	68da      	ldr	r2, [r3, #12]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fe:	b292      	uxth	r2, r2
 8002100:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002106:	1c9a      	adds	r2, r3, #2
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2246      	movs	r2, #70	; 0x46
 8002110:	5a9b      	ldrh	r3, [r3, r2]
 8002112:	b29b      	uxth	r3, r3
 8002114:	3b01      	subs	r3, #1
 8002116:	b299      	uxth	r1, r3
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2246      	movs	r2, #70	; 0x46
 800211c:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800211e:	2301      	movs	r3, #1
 8002120:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002122:	f7fe fed7 	bl	8000ed4 <HAL_GetTick>
 8002126:	0002      	movs	r2, r0
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800212e:	429a      	cmp	r2, r3
 8002130:	d807      	bhi.n	8002142 <HAL_SPI_TransmitReceive+0x23e>
 8002132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002134:	3301      	adds	r3, #1
 8002136:	d004      	beq.n	8002142 <HAL_SPI_TransmitReceive+0x23e>
      {
        errorcode = HAL_TIMEOUT;
 8002138:	2323      	movs	r3, #35	; 0x23
 800213a:	18fb      	adds	r3, r7, r3
 800213c:	2203      	movs	r2, #3
 800213e:	701a      	strb	r2, [r3, #0]
        goto error;
 8002140:	e0a2      	b.n	8002288 <HAL_SPI_TransmitReceive+0x384>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002146:	b29b      	uxth	r3, r3
 8002148:	2b00      	cmp	r3, #0
 800214a:	d1a3      	bne.n	8002094 <HAL_SPI_TransmitReceive+0x190>
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2246      	movs	r2, #70	; 0x46
 8002150:	5a9b      	ldrh	r3, [r3, r2]
 8002152:	b29b      	uxth	r3, r3
 8002154:	2b00      	cmp	r3, #0
 8002156:	d19d      	bne.n	8002094 <HAL_SPI_TransmitReceive+0x190>
 8002158:	e085      	b.n	8002266 <HAL_SPI_TransmitReceive+0x362>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d005      	beq.n	800216e <HAL_SPI_TransmitReceive+0x26a>
 8002162:	2312      	movs	r3, #18
 8002164:	18fb      	adds	r3, r7, r3
 8002166:	881b      	ldrh	r3, [r3, #0]
 8002168:	2b01      	cmp	r3, #1
 800216a:	d000      	beq.n	800216e <HAL_SPI_TransmitReceive+0x26a>
 800216c:	e070      	b.n	8002250 <HAL_SPI_TransmitReceive+0x34c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	330c      	adds	r3, #12
 8002178:	7812      	ldrb	r2, [r2, #0]
 800217a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002180:	1c5a      	adds	r2, r3, #1
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800218a:	b29b      	uxth	r3, r3
 800218c:	3b01      	subs	r3, #1
 800218e:	b29a      	uxth	r2, r3
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002194:	e05c      	b.n	8002250 <HAL_SPI_TransmitReceive+0x34c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	2202      	movs	r2, #2
 800219e:	4013      	ands	r3, r2
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d11c      	bne.n	80021de <HAL_SPI_TransmitReceive+0x2da>
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d017      	beq.n	80021de <HAL_SPI_TransmitReceive+0x2da>
 80021ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d114      	bne.n	80021de <HAL_SPI_TransmitReceive+0x2da>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	330c      	adds	r3, #12
 80021be:	7812      	ldrb	r2, [r2, #0]
 80021c0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021c6:	1c5a      	adds	r2, r3, #1
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	3b01      	subs	r3, #1
 80021d4:	b29a      	uxth	r2, r3
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80021da:	2300      	movs	r3, #0
 80021dc:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	2201      	movs	r2, #1
 80021e6:	4013      	ands	r3, r2
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d11e      	bne.n	800222a <HAL_SPI_TransmitReceive+0x326>
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2246      	movs	r2, #70	; 0x46
 80021f0:	5a9b      	ldrh	r3, [r3, r2]
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d018      	beq.n	800222a <HAL_SPI_TransmitReceive+0x326>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	330c      	adds	r3, #12
 80021fe:	001a      	movs	r2, r3
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002204:	7812      	ldrb	r2, [r2, #0]
 8002206:	b2d2      	uxtb	r2, r2
 8002208:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220e:	1c5a      	adds	r2, r3, #1
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2246      	movs	r2, #70	; 0x46
 8002218:	5a9b      	ldrh	r3, [r3, r2]
 800221a:	b29b      	uxth	r3, r3
 800221c:	3b01      	subs	r3, #1
 800221e:	b299      	uxth	r1, r3
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2246      	movs	r2, #70	; 0x46
 8002224:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002226:	2301      	movs	r3, #1
 8002228:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800222a:	f7fe fe53 	bl	8000ed4 <HAL_GetTick>
 800222e:	0002      	movs	r2, r0
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002236:	429a      	cmp	r2, r3
 8002238:	d802      	bhi.n	8002240 <HAL_SPI_TransmitReceive+0x33c>
 800223a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800223c:	3301      	adds	r3, #1
 800223e:	d102      	bne.n	8002246 <HAL_SPI_TransmitReceive+0x342>
 8002240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002242:	2b00      	cmp	r3, #0
 8002244:	d104      	bne.n	8002250 <HAL_SPI_TransmitReceive+0x34c>
      {
        errorcode = HAL_TIMEOUT;
 8002246:	2323      	movs	r3, #35	; 0x23
 8002248:	18fb      	adds	r3, r7, r3
 800224a:	2203      	movs	r2, #3
 800224c:	701a      	strb	r2, [r3, #0]
        goto error;
 800224e:	e01b      	b.n	8002288 <HAL_SPI_TransmitReceive+0x384>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002254:	b29b      	uxth	r3, r3
 8002256:	2b00      	cmp	r3, #0
 8002258:	d19d      	bne.n	8002196 <HAL_SPI_TransmitReceive+0x292>
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2246      	movs	r2, #70	; 0x46
 800225e:	5a9b      	ldrh	r3, [r3, r2]
 8002260:	b29b      	uxth	r3, r3
 8002262:	2b00      	cmp	r3, #0
 8002264:	d197      	bne.n	8002196 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002266:	69fa      	ldr	r2, [r7, #28]
 8002268:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	0018      	movs	r0, r3
 800226e:	f000 f941 	bl	80024f4 <SPI_EndRxTxTransaction>
 8002272:	1e03      	subs	r3, r0, #0
 8002274:	d007      	beq.n	8002286 <HAL_SPI_TransmitReceive+0x382>
  {
    errorcode = HAL_ERROR;
 8002276:	2323      	movs	r3, #35	; 0x23
 8002278:	18fb      	adds	r3, r7, r3
 800227a:	2201      	movs	r2, #1
 800227c:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2220      	movs	r2, #32
 8002282:	661a      	str	r2, [r3, #96]	; 0x60
 8002284:	e000      	b.n	8002288 <HAL_SPI_TransmitReceive+0x384>
  }

error :
 8002286:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	225d      	movs	r2, #93	; 0x5d
 800228c:	2101      	movs	r1, #1
 800228e:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	225c      	movs	r2, #92	; 0x5c
 8002294:	2100      	movs	r1, #0
 8002296:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002298:	2323      	movs	r3, #35	; 0x23
 800229a:	18fb      	adds	r3, r7, r3
 800229c:	781b      	ldrb	r3, [r3, #0]
}
 800229e:	0018      	movs	r0, r3
 80022a0:	46bd      	mov	sp, r7
 80022a2:	b00a      	add	sp, #40	; 0x28
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	46c0      	nop			; (mov r8, r8)
 80022a8:	ffffefff 	.word	0xffffefff

080022ac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b088      	sub	sp, #32
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	603b      	str	r3, [r7, #0]
 80022b8:	1dfb      	adds	r3, r7, #7
 80022ba:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80022bc:	f7fe fe0a 	bl	8000ed4 <HAL_GetTick>
 80022c0:	0002      	movs	r2, r0
 80022c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022c4:	1a9b      	subs	r3, r3, r2
 80022c6:	683a      	ldr	r2, [r7, #0]
 80022c8:	18d3      	adds	r3, r2, r3
 80022ca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80022cc:	f7fe fe02 	bl	8000ed4 <HAL_GetTick>
 80022d0:	0003      	movs	r3, r0
 80022d2:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80022d4:	4b3a      	ldr	r3, [pc, #232]	; (80023c0 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	015b      	lsls	r3, r3, #5
 80022da:	0d1b      	lsrs	r3, r3, #20
 80022dc:	69fa      	ldr	r2, [r7, #28]
 80022de:	4353      	muls	r3, r2
 80022e0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80022e2:	e058      	b.n	8002396 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	3301      	adds	r3, #1
 80022e8:	d055      	beq.n	8002396 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80022ea:	f7fe fdf3 	bl	8000ed4 <HAL_GetTick>
 80022ee:	0002      	movs	r2, r0
 80022f0:	69bb      	ldr	r3, [r7, #24]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	69fa      	ldr	r2, [r7, #28]
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d902      	bls.n	8002300 <SPI_WaitFlagStateUntilTimeout+0x54>
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d142      	bne.n	8002386 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	685a      	ldr	r2, [r3, #4]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	21e0      	movs	r1, #224	; 0xe0
 800230c:	438a      	bics	r2, r1
 800230e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	685a      	ldr	r2, [r3, #4]
 8002314:	2382      	movs	r3, #130	; 0x82
 8002316:	005b      	lsls	r3, r3, #1
 8002318:	429a      	cmp	r2, r3
 800231a:	d113      	bne.n	8002344 <SPI_WaitFlagStateUntilTimeout+0x98>
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	689a      	ldr	r2, [r3, #8]
 8002320:	2380      	movs	r3, #128	; 0x80
 8002322:	021b      	lsls	r3, r3, #8
 8002324:	429a      	cmp	r2, r3
 8002326:	d005      	beq.n	8002334 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	689a      	ldr	r2, [r3, #8]
 800232c:	2380      	movs	r3, #128	; 0x80
 800232e:	00db      	lsls	r3, r3, #3
 8002330:	429a      	cmp	r2, r3
 8002332:	d107      	bne.n	8002344 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2140      	movs	r1, #64	; 0x40
 8002340:	438a      	bics	r2, r1
 8002342:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002348:	2380      	movs	r3, #128	; 0x80
 800234a:	019b      	lsls	r3, r3, #6
 800234c:	429a      	cmp	r2, r3
 800234e:	d110      	bne.n	8002372 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	491a      	ldr	r1, [pc, #104]	; (80023c4 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800235c:	400a      	ands	r2, r1
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	2180      	movs	r1, #128	; 0x80
 800236c:	0189      	lsls	r1, r1, #6
 800236e:	430a      	orrs	r2, r1
 8002370:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	225d      	movs	r2, #93	; 0x5d
 8002376:	2101      	movs	r1, #1
 8002378:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	225c      	movs	r2, #92	; 0x5c
 800237e:	2100      	movs	r1, #0
 8002380:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e017      	b.n	80023b6 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d101      	bne.n	8002390 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800238c:	2300      	movs	r3, #0
 800238e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	3b01      	subs	r3, #1
 8002394:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	68ba      	ldr	r2, [r7, #8]
 800239e:	4013      	ands	r3, r2
 80023a0:	68ba      	ldr	r2, [r7, #8]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	425a      	negs	r2, r3
 80023a6:	4153      	adcs	r3, r2
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	001a      	movs	r2, r3
 80023ac:	1dfb      	adds	r3, r7, #7
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d197      	bne.n	80022e4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	0018      	movs	r0, r3
 80023b8:	46bd      	mov	sp, r7
 80023ba:	b008      	add	sp, #32
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	46c0      	nop			; (mov r8, r8)
 80023c0:	20000000 	.word	0x20000000
 80023c4:	ffffdfff 	.word	0xffffdfff

080023c8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b088      	sub	sp, #32
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	60b9      	str	r1, [r7, #8]
 80023d2:	607a      	str	r2, [r7, #4]
 80023d4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80023d6:	f7fe fd7d 	bl	8000ed4 <HAL_GetTick>
 80023da:	0002      	movs	r2, r0
 80023dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023de:	1a9b      	subs	r3, r3, r2
 80023e0:	683a      	ldr	r2, [r7, #0]
 80023e2:	18d3      	adds	r3, r2, r3
 80023e4:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80023e6:	f7fe fd75 	bl	8000ed4 <HAL_GetTick>
 80023ea:	0003      	movs	r3, r0
 80023ec:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80023ee:	4b3f      	ldr	r3, [pc, #252]	; (80024ec <SPI_WaitFifoStateUntilTimeout+0x124>)
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	0013      	movs	r3, r2
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	189b      	adds	r3, r3, r2
 80023f8:	00da      	lsls	r2, r3, #3
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	0d1b      	lsrs	r3, r3, #20
 80023fe:	69fa      	ldr	r2, [r7, #28]
 8002400:	4353      	muls	r3, r2
 8002402:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8002404:	e064      	b.n	80024d0 <SPI_WaitFifoStateUntilTimeout+0x108>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002406:	68ba      	ldr	r2, [r7, #8]
 8002408:	23c0      	movs	r3, #192	; 0xc0
 800240a:	00db      	lsls	r3, r3, #3
 800240c:	429a      	cmp	r2, r3
 800240e:	d106      	bne.n	800241e <SPI_WaitFifoStateUntilTimeout+0x56>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d103      	bne.n	800241e <SPI_WaitFifoStateUntilTimeout+0x56>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	330c      	adds	r3, #12
 800241c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	3301      	adds	r3, #1
 8002422:	d055      	beq.n	80024d0 <SPI_WaitFifoStateUntilTimeout+0x108>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002424:	f7fe fd56 	bl	8000ed4 <HAL_GetTick>
 8002428:	0002      	movs	r2, r0
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	69fa      	ldr	r2, [r7, #28]
 8002430:	429a      	cmp	r2, r3
 8002432:	d902      	bls.n	800243a <SPI_WaitFifoStateUntilTimeout+0x72>
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d142      	bne.n	80024c0 <SPI_WaitFifoStateUntilTimeout+0xf8>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	685a      	ldr	r2, [r3, #4]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	21e0      	movs	r1, #224	; 0xe0
 8002446:	438a      	bics	r2, r1
 8002448:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	685a      	ldr	r2, [r3, #4]
 800244e:	2382      	movs	r3, #130	; 0x82
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	429a      	cmp	r2, r3
 8002454:	d113      	bne.n	800247e <SPI_WaitFifoStateUntilTimeout+0xb6>
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	689a      	ldr	r2, [r3, #8]
 800245a:	2380      	movs	r3, #128	; 0x80
 800245c:	021b      	lsls	r3, r3, #8
 800245e:	429a      	cmp	r2, r3
 8002460:	d005      	beq.n	800246e <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	689a      	ldr	r2, [r3, #8]
 8002466:	2380      	movs	r3, #128	; 0x80
 8002468:	00db      	lsls	r3, r3, #3
 800246a:	429a      	cmp	r2, r3
 800246c:	d107      	bne.n	800247e <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2140      	movs	r1, #64	; 0x40
 800247a:	438a      	bics	r2, r1
 800247c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002482:	2380      	movs	r3, #128	; 0x80
 8002484:	019b      	lsls	r3, r3, #6
 8002486:	429a      	cmp	r2, r3
 8002488:	d110      	bne.n	80024ac <SPI_WaitFifoStateUntilTimeout+0xe4>
        {
          SPI_RESET_CRC(hspi);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4916      	ldr	r1, [pc, #88]	; (80024f0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002496:	400a      	ands	r2, r1
 8002498:	601a      	str	r2, [r3, #0]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2180      	movs	r1, #128	; 0x80
 80024a6:	0189      	lsls	r1, r1, #6
 80024a8:	430a      	orrs	r2, r1
 80024aa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	225d      	movs	r2, #93	; 0x5d
 80024b0:	2101      	movs	r1, #1
 80024b2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	225c      	movs	r2, #92	; 0x5c
 80024b8:	2100      	movs	r1, #0
 80024ba:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	e010      	b.n	80024e2 <SPI_WaitFifoStateUntilTimeout+0x11a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d101      	bne.n	80024ca <SPI_WaitFifoStateUntilTimeout+0x102>
      {
        tmp_timeout = 0U;
 80024c6:	2300      	movs	r3, #0
 80024c8:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	3b01      	subs	r3, #1
 80024ce:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	68ba      	ldr	r2, [r7, #8]
 80024d8:	4013      	ands	r3, r2
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d192      	bne.n	8002406 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 80024e0:	2300      	movs	r3, #0
}
 80024e2:	0018      	movs	r0, r3
 80024e4:	46bd      	mov	sp, r7
 80024e6:	b008      	add	sp, #32
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	46c0      	nop			; (mov r8, r8)
 80024ec:	20000000 	.word	0x20000000
 80024f0:	ffffdfff 	.word	0xffffdfff

080024f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b086      	sub	sp, #24
 80024f8:	af02      	add	r7, sp, #8
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002500:	68ba      	ldr	r2, [r7, #8]
 8002502:	23c0      	movs	r3, #192	; 0xc0
 8002504:	0159      	lsls	r1, r3, #5
 8002506:	68f8      	ldr	r0, [r7, #12]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	9300      	str	r3, [sp, #0]
 800250c:	0013      	movs	r3, r2
 800250e:	2200      	movs	r2, #0
 8002510:	f7ff ff5a 	bl	80023c8 <SPI_WaitFifoStateUntilTimeout>
 8002514:	1e03      	subs	r3, r0, #0
 8002516:	d007      	beq.n	8002528 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800251c:	2220      	movs	r2, #32
 800251e:	431a      	orrs	r2, r3
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e027      	b.n	8002578 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002528:	68ba      	ldr	r2, [r7, #8]
 800252a:	68f8      	ldr	r0, [r7, #12]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	9300      	str	r3, [sp, #0]
 8002530:	0013      	movs	r3, r2
 8002532:	2200      	movs	r2, #0
 8002534:	2180      	movs	r1, #128	; 0x80
 8002536:	f7ff feb9 	bl	80022ac <SPI_WaitFlagStateUntilTimeout>
 800253a:	1e03      	subs	r3, r0, #0
 800253c:	d007      	beq.n	800254e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002542:	2220      	movs	r2, #32
 8002544:	431a      	orrs	r2, r3
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e014      	b.n	8002578 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800254e:	68ba      	ldr	r2, [r7, #8]
 8002550:	23c0      	movs	r3, #192	; 0xc0
 8002552:	00d9      	lsls	r1, r3, #3
 8002554:	68f8      	ldr	r0, [r7, #12]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	9300      	str	r3, [sp, #0]
 800255a:	0013      	movs	r3, r2
 800255c:	2200      	movs	r2, #0
 800255e:	f7ff ff33 	bl	80023c8 <SPI_WaitFifoStateUntilTimeout>
 8002562:	1e03      	subs	r3, r0, #0
 8002564:	d007      	beq.n	8002576 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800256a:	2220      	movs	r2, #32
 800256c:	431a      	orrs	r2, r3
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e000      	b.n	8002578 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002576:	2300      	movs	r3, #0
}
 8002578:	0018      	movs	r0, r3
 800257a:	46bd      	mov	sp, r7
 800257c:	b004      	add	sp, #16
 800257e:	bd80      	pop	{r7, pc}

08002580 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8002584:	4a06      	ldr	r2, [pc, #24]	; (80025a0 <MX_FATFS_Init+0x20>)
 8002586:	4b07      	ldr	r3, [pc, #28]	; (80025a4 <MX_FATFS_Init+0x24>)
 8002588:	0011      	movs	r1, r2
 800258a:	0018      	movs	r0, r3
 800258c:	f003 ff82 	bl	8006494 <FATFS_LinkDriver>
 8002590:	0003      	movs	r3, r0
 8002592:	001a      	movs	r2, r3
 8002594:	4b04      	ldr	r3, [pc, #16]	; (80025a8 <MX_FATFS_Init+0x28>)
 8002596:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8002598:	46c0      	nop			; (mov r8, r8)
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	46c0      	nop			; (mov r8, r8)
 80025a0:	2000014c 	.word	0x2000014c
 80025a4:	2000000c 	.word	0x2000000c
 80025a8:	20000150 	.word	0x20000150

080025ac <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80025b0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80025b2:	0018      	movs	r0, r3
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	0002      	movs	r2, r0
 80025c0:	1dfb      	adds	r3, r7, #7
 80025c2:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv); //ADD THIS LINE
 80025c4:	1dfb      	adds	r3, r7, #7
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	0018      	movs	r0, r3
 80025ca:	f000 fa1f 	bl	8002a0c <USER_SPI_initialize>
 80025ce:	0003      	movs	r3, r0
  /* USER CODE END INIT */
}
 80025d0:	0018      	movs	r0, r3
 80025d2:	46bd      	mov	sp, r7
 80025d4:	b002      	add	sp, #8
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	0002      	movs	r2, r0
 80025e0:	1dfb      	adds	r3, r7, #7
 80025e2:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv); //ADD THIS LINE
 80025e4:	1dfb      	adds	r3, r7, #7
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	0018      	movs	r0, r3
 80025ea:	f000 fb1b 	bl	8002c24 <USER_SPI_status>
 80025ee:	0003      	movs	r3, r0
  /* USER CODE END STATUS */
}
 80025f0:	0018      	movs	r0, r3
 80025f2:	46bd      	mov	sp, r7
 80025f4:	b002      	add	sp, #8
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80025f8:	b5b0      	push	{r4, r5, r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60b9      	str	r1, [r7, #8]
 8002600:	607a      	str	r2, [r7, #4]
 8002602:	603b      	str	r3, [r7, #0]
 8002604:	250f      	movs	r5, #15
 8002606:	197b      	adds	r3, r7, r5
 8002608:	1c02      	adds	r2, r0, #0
 800260a:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count); //ADD THIS LINE
 800260c:	683c      	ldr	r4, [r7, #0]
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	68b9      	ldr	r1, [r7, #8]
 8002612:	197b      	adds	r3, r7, r5
 8002614:	7818      	ldrb	r0, [r3, #0]
 8002616:	0023      	movs	r3, r4
 8002618:	f000 fb1a 	bl	8002c50 <USER_SPI_read>
 800261c:	0003      	movs	r3, r0
  /* USER CODE END READ */
}
 800261e:	0018      	movs	r0, r3
 8002620:	46bd      	mov	sp, r7
 8002622:	b004      	add	sp, #16
 8002624:	bdb0      	pop	{r4, r5, r7, pc}

08002626 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8002626:	b5b0      	push	{r4, r5, r7, lr}
 8002628:	b084      	sub	sp, #16
 800262a:	af00      	add	r7, sp, #0
 800262c:	60b9      	str	r1, [r7, #8]
 800262e:	607a      	str	r2, [r7, #4]
 8002630:	603b      	str	r3, [r7, #0]
 8002632:	250f      	movs	r5, #15
 8002634:	197b      	adds	r3, r7, r5
 8002636:	1c02      	adds	r2, r0, #0
 8002638:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count); //ADD THIS LINE
 800263a:	683c      	ldr	r4, [r7, #0]
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	68b9      	ldr	r1, [r7, #8]
 8002640:	197b      	adds	r3, r7, r5
 8002642:	7818      	ldrb	r0, [r3, #0]
 8002644:	0023      	movs	r3, r4
 8002646:	f000 fb6f 	bl	8002d28 <USER_SPI_write>
 800264a:	0003      	movs	r3, r0
  /* USER CODE END WRITE */
}
 800264c:	0018      	movs	r0, r3
 800264e:	46bd      	mov	sp, r7
 8002650:	b004      	add	sp, #16
 8002652:	bdb0      	pop	{r4, r5, r7, pc}

08002654 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	603a      	str	r2, [r7, #0]
 800265c:	1dfb      	adds	r3, r7, #7
 800265e:	1c02      	adds	r2, r0, #0
 8002660:	701a      	strb	r2, [r3, #0]
 8002662:	1dbb      	adds	r3, r7, #6
 8002664:	1c0a      	adds	r2, r1, #0
 8002666:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff); //ADD THIS LINE
 8002668:	683a      	ldr	r2, [r7, #0]
 800266a:	1dbb      	adds	r3, r7, #6
 800266c:	7819      	ldrb	r1, [r3, #0]
 800266e:	1dfb      	adds	r3, r7, #7
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	0018      	movs	r0, r3
 8002674:	f000 fbd8 	bl	8002e28 <USER_SPI_ioctl>
 8002678:	0003      	movs	r3, r0
  /* USER CODE END IOCTL */
}
 800267a:	0018      	movs	r0, r3
 800267c:	46bd      	mov	sp, r7
 800267e:	b002      	add	sp, #8
 8002680:	bd80      	pop	{r7, pc}
	...

08002684 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800268c:	f7fe fc22 	bl	8000ed4 <HAL_GetTick>
 8002690:	0002      	movs	r2, r0
 8002692:	4b04      	ldr	r3, [pc, #16]	; (80026a4 <SPI_Timer_On+0x20>)
 8002694:	601a      	str	r2, [r3, #0]
    spiTimerTickDelay = waitTicks;
 8002696:	4b04      	ldr	r3, [pc, #16]	; (80026a8 <SPI_Timer_On+0x24>)
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	601a      	str	r2, [r3, #0]
}
 800269c:	46c0      	nop			; (mov r8, r8)
 800269e:	46bd      	mov	sp, r7
 80026a0:	b002      	add	sp, #8
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	200005b0 	.word	0x200005b0
 80026a8:	200005b4 	.word	0x200005b4

080026ac <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 80026b0:	f7fe fc10 	bl	8000ed4 <HAL_GetTick>
 80026b4:	0002      	movs	r2, r0
 80026b6:	4b06      	ldr	r3, [pc, #24]	; (80026d0 <SPI_Timer_Status+0x24>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	1ad2      	subs	r2, r2, r3
 80026bc:	4b05      	ldr	r3, [pc, #20]	; (80026d4 <SPI_Timer_Status+0x28>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	419b      	sbcs	r3, r3
 80026c4:	425b      	negs	r3, r3
 80026c6:	b2db      	uxtb	r3, r3
}
 80026c8:	0018      	movs	r0, r3
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	46c0      	nop			; (mov r8, r8)
 80026d0:	200005b0 	.word	0x200005b0
 80026d4:	200005b4 	.word	0x200005b4

080026d8 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 80026d8:	b590      	push	{r4, r7, lr}
 80026da:	b087      	sub	sp, #28
 80026dc:	af02      	add	r7, sp, #8
 80026de:	0002      	movs	r2, r0
 80026e0:	1dfb      	adds	r3, r7, #7
 80026e2:	701a      	strb	r2, [r3, #0]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 80026e4:	240f      	movs	r4, #15
 80026e6:	193a      	adds	r2, r7, r4
 80026e8:	1df9      	adds	r1, r7, #7
 80026ea:	4806      	ldr	r0, [pc, #24]	; (8002704 <xchg_spi+0x2c>)
 80026ec:	2332      	movs	r3, #50	; 0x32
 80026ee:	9300      	str	r3, [sp, #0]
 80026f0:	2301      	movs	r3, #1
 80026f2:	f7ff fc07 	bl	8001f04 <HAL_SPI_TransmitReceive>
    return rxDat;
 80026f6:	193b      	adds	r3, r7, r4
 80026f8:	781b      	ldrb	r3, [r3, #0]
}
 80026fa:	0018      	movs	r0, r3
 80026fc:	46bd      	mov	sp, r7
 80026fe:	b005      	add	sp, #20
 8002700:	bd90      	pop	{r4, r7, pc}
 8002702:	46c0      	nop			; (mov r8, r8)
 8002704:	200000e4 	.word	0x200000e4

08002708 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8002708:	b590      	push	{r4, r7, lr}
 800270a:	b085      	sub	sp, #20
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8002712:	2300      	movs	r3, #0
 8002714:	60fb      	str	r3, [r7, #12]
 8002716:	e00a      	b.n	800272e <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	18d4      	adds	r4, r2, r3
 800271e:	20ff      	movs	r0, #255	; 0xff
 8002720:	f7ff ffda 	bl	80026d8 <xchg_spi>
 8002724:	0003      	movs	r3, r0
 8002726:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	3301      	adds	r3, #1
 800272c:	60fb      	str	r3, [r7, #12]
 800272e:	68fa      	ldr	r2, [r7, #12]
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	429a      	cmp	r2, r3
 8002734:	d3f0      	bcc.n	8002718 <rcvr_spi_multi+0x10>
	}
}
 8002736:	46c0      	nop			; (mov r8, r8)
 8002738:	46bd      	mov	sp, r7
 800273a:	b005      	add	sp, #20
 800273c:	bd90      	pop	{r4, r7, pc}

0800273e <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800273e:	b580      	push	{r7, lr}
 8002740:	b084      	sub	sp, #16
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
 8002746:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8002748:	2300      	movs	r3, #0
 800274a:	60fb      	str	r3, [r7, #12]
 800274c:	e009      	b.n	8002762 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	18d3      	adds	r3, r2, r3
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	0018      	movs	r0, r3
 8002758:	f7ff ffbe 	bl	80026d8 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	3301      	adds	r3, #1
 8002760:	60fb      	str	r3, [r7, #12]
 8002762:	68fa      	ldr	r2, [r7, #12]
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	429a      	cmp	r2, r3
 8002768:	d3f1      	bcc.n	800274e <xmit_spi_multi+0x10>
	}
}
 800276a:	46c0      	nop			; (mov r8, r8)
 800276c:	46bd      	mov	sp, r7
 800276e:	b004      	add	sp, #16
 8002770:	bd80      	pop	{r7, pc}

08002772 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8002772:	b5b0      	push	{r4, r5, r7, lr}
 8002774:	b086      	sub	sp, #24
 8002776:	af00      	add	r7, sp, #0
 8002778:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800277a:	f7fe fbab 	bl	8000ed4 <HAL_GetTick>
 800277e:	0003      	movs	r3, r0
 8002780:	617b      	str	r3, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8002786:	250f      	movs	r5, #15
 8002788:	197c      	adds	r4, r7, r5
 800278a:	20ff      	movs	r0, #255	; 0xff
 800278c:	f7ff ffa4 	bl	80026d8 <xchg_spi>
 8002790:	0003      	movs	r3, r0
 8002792:	7023      	strb	r3, [r4, #0]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8002794:	197b      	adds	r3, r7, r5
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	2bff      	cmp	r3, #255	; 0xff
 800279a:	d007      	beq.n	80027ac <wait_ready+0x3a>
 800279c:	f7fe fb9a 	bl	8000ed4 <HAL_GetTick>
 80027a0:	0002      	movs	r2, r0
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	693a      	ldr	r2, [r7, #16]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d8ec      	bhi.n	8002786 <wait_ready+0x14>

	return (d == 0xFF) ? 1 : 0;
 80027ac:	230f      	movs	r3, #15
 80027ae:	18fb      	adds	r3, r7, r3
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	3bff      	subs	r3, #255	; 0xff
 80027b4:	425a      	negs	r2, r3
 80027b6:	4153      	adcs	r3, r2
 80027b8:	b2db      	uxtb	r3, r3
}
 80027ba:	0018      	movs	r0, r3
 80027bc:	46bd      	mov	sp, r7
 80027be:	b006      	add	sp, #24
 80027c0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080027c4 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 80027c8:	4b05      	ldr	r3, [pc, #20]	; (80027e0 <despiselect+0x1c>)
 80027ca:	2201      	movs	r2, #1
 80027cc:	2102      	movs	r1, #2
 80027ce:	0018      	movs	r0, r3
 80027d0:	f7fe fde5 	bl	800139e <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 80027d4:	20ff      	movs	r0, #255	; 0xff
 80027d6:	f7ff ff7f 	bl	80026d8 <xchg_spi>

}
 80027da:	46c0      	nop			; (mov r8, r8)
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	48000400 	.word	0x48000400

080027e4 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 80027e8:	4b0b      	ldr	r3, [pc, #44]	; (8002818 <spiselect+0x34>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	2102      	movs	r1, #2
 80027ee:	0018      	movs	r0, r3
 80027f0:	f7fe fdd5 	bl	800139e <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 80027f4:	20ff      	movs	r0, #255	; 0xff
 80027f6:	f7ff ff6f 	bl	80026d8 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 80027fa:	23fa      	movs	r3, #250	; 0xfa
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	0018      	movs	r0, r3
 8002800:	f7ff ffb7 	bl	8002772 <wait_ready>
 8002804:	1e03      	subs	r3, r0, #0
 8002806:	d001      	beq.n	800280c <spiselect+0x28>
 8002808:	2301      	movs	r3, #1
 800280a:	e002      	b.n	8002812 <spiselect+0x2e>

	despiselect();
 800280c:	f7ff ffda 	bl	80027c4 <despiselect>
	return 0;	/* Timeout */
 8002810:	2300      	movs	r3, #0
}
 8002812:	0018      	movs	r0, r3
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	48000400 	.word	0x48000400

0800281c <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 800281c:	b5b0      	push	{r4, r5, r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8002826:	20c8      	movs	r0, #200	; 0xc8
 8002828:	f7ff ff2c 	bl	8002684 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 800282c:	250f      	movs	r5, #15
 800282e:	197c      	adds	r4, r7, r5
 8002830:	20ff      	movs	r0, #255	; 0xff
 8002832:	f7ff ff51 	bl	80026d8 <xchg_spi>
 8002836:	0003      	movs	r3, r0
 8002838:	7023      	strb	r3, [r4, #0]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800283a:	197b      	adds	r3, r7, r5
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	2bff      	cmp	r3, #255	; 0xff
 8002840:	d103      	bne.n	800284a <rcvr_datablock+0x2e>
 8002842:	f7ff ff33 	bl	80026ac <SPI_Timer_Status>
 8002846:	1e03      	subs	r3, r0, #0
 8002848:	d1f0      	bne.n	800282c <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800284a:	230f      	movs	r3, #15
 800284c:	18fb      	adds	r3, r7, r3
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	2bfe      	cmp	r3, #254	; 0xfe
 8002852:	d001      	beq.n	8002858 <rcvr_datablock+0x3c>
 8002854:	2300      	movs	r3, #0
 8002856:	e00c      	b.n	8002872 <rcvr_datablock+0x56>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8002858:	683a      	ldr	r2, [r7, #0]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	0011      	movs	r1, r2
 800285e:	0018      	movs	r0, r3
 8002860:	f7ff ff52 	bl	8002708 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8002864:	20ff      	movs	r0, #255	; 0xff
 8002866:	f7ff ff37 	bl	80026d8 <xchg_spi>
 800286a:	20ff      	movs	r0, #255	; 0xff
 800286c:	f7ff ff34 	bl	80026d8 <xchg_spi>

	return 1;						/* Function succeeded */
 8002870:	2301      	movs	r3, #1
}
 8002872:	0018      	movs	r0, r3
 8002874:	46bd      	mov	sp, r7
 8002876:	b004      	add	sp, #16
 8002878:	bdb0      	pop	{r4, r5, r7, pc}

0800287a <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800287a:	b5b0      	push	{r4, r5, r7, lr}
 800287c:	b084      	sub	sp, #16
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
 8002882:	000a      	movs	r2, r1
 8002884:	1cfb      	adds	r3, r7, #3
 8002886:	701a      	strb	r2, [r3, #0]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8002888:	23fa      	movs	r3, #250	; 0xfa
 800288a:	005b      	lsls	r3, r3, #1
 800288c:	0018      	movs	r0, r3
 800288e:	f7ff ff70 	bl	8002772 <wait_ready>
 8002892:	1e03      	subs	r3, r0, #0
 8002894:	d101      	bne.n	800289a <xmit_datablock+0x20>
 8002896:	2300      	movs	r3, #0
 8002898:	e025      	b.n	80028e6 <xmit_datablock+0x6c>

	xchg_spi(token);					/* Send token */
 800289a:	1cfb      	adds	r3, r7, #3
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	0018      	movs	r0, r3
 80028a0:	f7ff ff1a 	bl	80026d8 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 80028a4:	1cfb      	adds	r3, r7, #3
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	2bfd      	cmp	r3, #253	; 0xfd
 80028aa:	d01b      	beq.n	80028e4 <xmit_datablock+0x6a>
		xmit_spi_multi(buff, 512);		/* Data */
 80028ac:	2380      	movs	r3, #128	; 0x80
 80028ae:	009a      	lsls	r2, r3, #2
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	0011      	movs	r1, r2
 80028b4:	0018      	movs	r0, r3
 80028b6:	f7ff ff42 	bl	800273e <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 80028ba:	20ff      	movs	r0, #255	; 0xff
 80028bc:	f7ff ff0c 	bl	80026d8 <xchg_spi>
 80028c0:	20ff      	movs	r0, #255	; 0xff
 80028c2:	f7ff ff09 	bl	80026d8 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 80028c6:	250f      	movs	r5, #15
 80028c8:	197c      	adds	r4, r7, r5
 80028ca:	20ff      	movs	r0, #255	; 0xff
 80028cc:	f7ff ff04 	bl	80026d8 <xchg_spi>
 80028d0:	0003      	movs	r3, r0
 80028d2:	7023      	strb	r3, [r4, #0]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 80028d4:	197b      	adds	r3, r7, r5
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	221f      	movs	r2, #31
 80028da:	4013      	ands	r3, r2
 80028dc:	2b05      	cmp	r3, #5
 80028de:	d001      	beq.n	80028e4 <xmit_datablock+0x6a>
 80028e0:	2300      	movs	r3, #0
 80028e2:	e000      	b.n	80028e6 <xmit_datablock+0x6c>
	}
	return 1;
 80028e4:	2301      	movs	r3, #1
}
 80028e6:	0018      	movs	r0, r3
 80028e8:	46bd      	mov	sp, r7
 80028ea:	b004      	add	sp, #16
 80028ec:	bdb0      	pop	{r4, r5, r7, pc}

080028ee <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 80028ee:	b5b0      	push	{r4, r5, r7, lr}
 80028f0:	b084      	sub	sp, #16
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	0002      	movs	r2, r0
 80028f6:	6039      	str	r1, [r7, #0]
 80028f8:	1dfb      	adds	r3, r7, #7
 80028fa:	701a      	strb	r2, [r3, #0]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 80028fc:	1dfb      	adds	r3, r7, #7
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	b25b      	sxtb	r3, r3
 8002902:	2b00      	cmp	r3, #0
 8002904:	da15      	bge.n	8002932 <send_cmd+0x44>
		cmd &= 0x7F;
 8002906:	1dfb      	adds	r3, r7, #7
 8002908:	1dfa      	adds	r2, r7, #7
 800290a:	7812      	ldrb	r2, [r2, #0]
 800290c:	217f      	movs	r1, #127	; 0x7f
 800290e:	400a      	ands	r2, r1
 8002910:	701a      	strb	r2, [r3, #0]
		res = send_cmd(CMD55, 0);
 8002912:	250e      	movs	r5, #14
 8002914:	197c      	adds	r4, r7, r5
 8002916:	2100      	movs	r1, #0
 8002918:	2037      	movs	r0, #55	; 0x37
 800291a:	f7ff ffe8 	bl	80028ee <send_cmd>
 800291e:	0003      	movs	r3, r0
 8002920:	7023      	strb	r3, [r4, #0]
		if (res > 1) return res;
 8002922:	197b      	adds	r3, r7, r5
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	2b01      	cmp	r3, #1
 8002928:	d903      	bls.n	8002932 <send_cmd+0x44>
 800292a:	230e      	movs	r3, #14
 800292c:	18fb      	adds	r3, r7, r3
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	e068      	b.n	8002a04 <send_cmd+0x116>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8002932:	1dfb      	adds	r3, r7, #7
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	2b0c      	cmp	r3, #12
 8002938:	d007      	beq.n	800294a <send_cmd+0x5c>
		despiselect();
 800293a:	f7ff ff43 	bl	80027c4 <despiselect>
		if (!spiselect()) return 0xFF;
 800293e:	f7ff ff51 	bl	80027e4 <spiselect>
 8002942:	1e03      	subs	r3, r0, #0
 8002944:	d101      	bne.n	800294a <send_cmd+0x5c>
 8002946:	23ff      	movs	r3, #255	; 0xff
 8002948:	e05c      	b.n	8002a04 <send_cmd+0x116>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800294a:	1dfb      	adds	r3, r7, #7
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	2240      	movs	r2, #64	; 0x40
 8002950:	4313      	orrs	r3, r2
 8002952:	b2db      	uxtb	r3, r3
 8002954:	0018      	movs	r0, r3
 8002956:	f7ff febf 	bl	80026d8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	0e1b      	lsrs	r3, r3, #24
 800295e:	b2db      	uxtb	r3, r3
 8002960:	0018      	movs	r0, r3
 8002962:	f7ff feb9 	bl	80026d8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	0c1b      	lsrs	r3, r3, #16
 800296a:	b2db      	uxtb	r3, r3
 800296c:	0018      	movs	r0, r3
 800296e:	f7ff feb3 	bl	80026d8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	0a1b      	lsrs	r3, r3, #8
 8002976:	b2db      	uxtb	r3, r3
 8002978:	0018      	movs	r0, r3
 800297a:	f7ff fead 	bl	80026d8 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	b2db      	uxtb	r3, r3
 8002982:	0018      	movs	r0, r3
 8002984:	f7ff fea8 	bl	80026d8 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8002988:	230f      	movs	r3, #15
 800298a:	18fb      	adds	r3, r7, r3
 800298c:	2201      	movs	r2, #1
 800298e:	701a      	strb	r2, [r3, #0]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8002990:	1dfb      	adds	r3, r7, #7
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d103      	bne.n	80029a0 <send_cmd+0xb2>
 8002998:	230f      	movs	r3, #15
 800299a:	18fb      	adds	r3, r7, r3
 800299c:	2295      	movs	r2, #149	; 0x95
 800299e:	701a      	strb	r2, [r3, #0]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80029a0:	1dfb      	adds	r3, r7, #7
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	2b08      	cmp	r3, #8
 80029a6:	d103      	bne.n	80029b0 <send_cmd+0xc2>
 80029a8:	230f      	movs	r3, #15
 80029aa:	18fb      	adds	r3, r7, r3
 80029ac:	2287      	movs	r2, #135	; 0x87
 80029ae:	701a      	strb	r2, [r3, #0]
	xchg_spi(n);
 80029b0:	230f      	movs	r3, #15
 80029b2:	18fb      	adds	r3, r7, r3
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	0018      	movs	r0, r3
 80029b8:	f7ff fe8e 	bl	80026d8 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 80029bc:	1dfb      	adds	r3, r7, #7
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	2b0c      	cmp	r3, #12
 80029c2:	d102      	bne.n	80029ca <send_cmd+0xdc>
 80029c4:	20ff      	movs	r0, #255	; 0xff
 80029c6:	f7ff fe87 	bl	80026d8 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 80029ca:	230f      	movs	r3, #15
 80029cc:	18fb      	adds	r3, r7, r3
 80029ce:	220a      	movs	r2, #10
 80029d0:	701a      	strb	r2, [r3, #0]
	do {
		res = xchg_spi(0xFF);
 80029d2:	250e      	movs	r5, #14
 80029d4:	197c      	adds	r4, r7, r5
 80029d6:	20ff      	movs	r0, #255	; 0xff
 80029d8:	f7ff fe7e 	bl	80026d8 <xchg_spi>
 80029dc:	0003      	movs	r3, r0
 80029de:	7023      	strb	r3, [r4, #0]
	} while ((res & 0x80) && --n);
 80029e0:	197b      	adds	r3, r7, r5
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	b25b      	sxtb	r3, r3
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	da09      	bge.n	80029fe <send_cmd+0x110>
 80029ea:	210f      	movs	r1, #15
 80029ec:	187b      	adds	r3, r7, r1
 80029ee:	187a      	adds	r2, r7, r1
 80029f0:	7812      	ldrb	r2, [r2, #0]
 80029f2:	3a01      	subs	r2, #1
 80029f4:	701a      	strb	r2, [r3, #0]
 80029f6:	187b      	adds	r3, r7, r1
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d1e9      	bne.n	80029d2 <send_cmd+0xe4>

	return res;							/* Return received response */
 80029fe:	230e      	movs	r3, #14
 8002a00:	18fb      	adds	r3, r7, r3
 8002a02:	781b      	ldrb	r3, [r3, #0]
}
 8002a04:	0018      	movs	r0, r3
 8002a06:	46bd      	mov	sp, r7
 8002a08:	b004      	add	sp, #16
 8002a0a:	bdb0      	pop	{r4, r5, r7, pc}

08002a0c <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8002a0c:	b5b0      	push	{r4, r5, r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	0002      	movs	r2, r0
 8002a14:	1dfb      	adds	r3, r7, #7
 8002a16:	701a      	strb	r2, [r3, #0]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8002a18:	1dfb      	adds	r3, r7, #7
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d001      	beq.n	8002a24 <USER_SPI_initialize+0x18>
 8002a20:	2301      	movs	r3, #1
 8002a22:	e0f4      	b.n	8002c0e <USER_SPI_initialize+0x202>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8002a24:	4b7c      	ldr	r3, [pc, #496]	; (8002c18 <USER_SPI_initialize+0x20c>)
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	001a      	movs	r2, r3
 8002a2c:	2302      	movs	r3, #2
 8002a2e:	4013      	ands	r3, r2
 8002a30:	d003      	beq.n	8002a3a <USER_SPI_initialize+0x2e>
 8002a32:	4b79      	ldr	r3, [pc, #484]	; (8002c18 <USER_SPI_initialize+0x20c>)
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	e0e9      	b.n	8002c0e <USER_SPI_initialize+0x202>

	FCLK_SLOW();
 8002a3a:	4b78      	ldr	r3, [pc, #480]	; (8002c1c <USER_SPI_initialize+0x210>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	2280      	movs	r2, #128	; 0x80
 8002a40:	621a      	str	r2, [r3, #32]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8002a42:	230f      	movs	r3, #15
 8002a44:	18fb      	adds	r3, r7, r3
 8002a46:	220a      	movs	r2, #10
 8002a48:	701a      	strb	r2, [r3, #0]
 8002a4a:	e008      	b.n	8002a5e <USER_SPI_initialize+0x52>
 8002a4c:	20ff      	movs	r0, #255	; 0xff
 8002a4e:	f7ff fe43 	bl	80026d8 <xchg_spi>
 8002a52:	210f      	movs	r1, #15
 8002a54:	187b      	adds	r3, r7, r1
 8002a56:	781a      	ldrb	r2, [r3, #0]
 8002a58:	187b      	adds	r3, r7, r1
 8002a5a:	3a01      	subs	r2, #1
 8002a5c:	701a      	strb	r2, [r3, #0]
 8002a5e:	230f      	movs	r3, #15
 8002a60:	18fb      	adds	r3, r7, r3
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d1f1      	bne.n	8002a4c <USER_SPI_initialize+0x40>

	ty = 0;
 8002a68:	230d      	movs	r3, #13
 8002a6a:	18fb      	adds	r3, r7, r3
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	701a      	strb	r2, [r3, #0]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8002a70:	2100      	movs	r1, #0
 8002a72:	2000      	movs	r0, #0
 8002a74:	f7ff ff3b 	bl	80028ee <send_cmd>
 8002a78:	0003      	movs	r3, r0
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d000      	beq.n	8002a80 <USER_SPI_initialize+0x74>
 8002a7e:	e0a8      	b.n	8002bd2 <USER_SPI_initialize+0x1c6>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8002a80:	23fa      	movs	r3, #250	; 0xfa
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	0018      	movs	r0, r3
 8002a86:	f7ff fdfd 	bl	8002684 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8002a8a:	23d5      	movs	r3, #213	; 0xd5
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	0019      	movs	r1, r3
 8002a90:	2008      	movs	r0, #8
 8002a92:	f7ff ff2c 	bl	80028ee <send_cmd>
 8002a96:	0003      	movs	r3, r0
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d164      	bne.n	8002b66 <USER_SPI_initialize+0x15a>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8002a9c:	230f      	movs	r3, #15
 8002a9e:	18fb      	adds	r3, r7, r3
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	701a      	strb	r2, [r3, #0]
 8002aa4:	e00f      	b.n	8002ac6 <USER_SPI_initialize+0xba>
 8002aa6:	250f      	movs	r5, #15
 8002aa8:	197b      	adds	r3, r7, r5
 8002aaa:	781c      	ldrb	r4, [r3, #0]
 8002aac:	20ff      	movs	r0, #255	; 0xff
 8002aae:	f7ff fe13 	bl	80026d8 <xchg_spi>
 8002ab2:	0003      	movs	r3, r0
 8002ab4:	001a      	movs	r2, r3
 8002ab6:	2308      	movs	r3, #8
 8002ab8:	18fb      	adds	r3, r7, r3
 8002aba:	551a      	strb	r2, [r3, r4]
 8002abc:	197b      	adds	r3, r7, r5
 8002abe:	781a      	ldrb	r2, [r3, #0]
 8002ac0:	197b      	adds	r3, r7, r5
 8002ac2:	3201      	adds	r2, #1
 8002ac4:	701a      	strb	r2, [r3, #0]
 8002ac6:	230f      	movs	r3, #15
 8002ac8:	18fb      	adds	r3, r7, r3
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	2b03      	cmp	r3, #3
 8002ace:	d9ea      	bls.n	8002aa6 <USER_SPI_initialize+0x9a>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8002ad0:	2308      	movs	r3, #8
 8002ad2:	18fb      	adds	r3, r7, r3
 8002ad4:	789b      	ldrb	r3, [r3, #2]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d000      	beq.n	8002adc <USER_SPI_initialize+0xd0>
 8002ada:	e07a      	b.n	8002bd2 <USER_SPI_initialize+0x1c6>
 8002adc:	2308      	movs	r3, #8
 8002ade:	18fb      	adds	r3, r7, r3
 8002ae0:	78db      	ldrb	r3, [r3, #3]
 8002ae2:	2baa      	cmp	r3, #170	; 0xaa
 8002ae4:	d000      	beq.n	8002ae8 <USER_SPI_initialize+0xdc>
 8002ae6:	e074      	b.n	8002bd2 <USER_SPI_initialize+0x1c6>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8002ae8:	46c0      	nop			; (mov r8, r8)
 8002aea:	f7ff fddf 	bl	80026ac <SPI_Timer_Status>
 8002aee:	1e03      	subs	r3, r0, #0
 8002af0:	d007      	beq.n	8002b02 <USER_SPI_initialize+0xf6>
 8002af2:	2380      	movs	r3, #128	; 0x80
 8002af4:	05db      	lsls	r3, r3, #23
 8002af6:	0019      	movs	r1, r3
 8002af8:	20a9      	movs	r0, #169	; 0xa9
 8002afa:	f7ff fef8 	bl	80028ee <send_cmd>
 8002afe:	1e03      	subs	r3, r0, #0
 8002b00:	d1f3      	bne.n	8002aea <USER_SPI_initialize+0xde>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8002b02:	f7ff fdd3 	bl	80026ac <SPI_Timer_Status>
 8002b06:	1e03      	subs	r3, r0, #0
 8002b08:	d063      	beq.n	8002bd2 <USER_SPI_initialize+0x1c6>
 8002b0a:	2100      	movs	r1, #0
 8002b0c:	203a      	movs	r0, #58	; 0x3a
 8002b0e:	f7ff feee 	bl	80028ee <send_cmd>
 8002b12:	1e03      	subs	r3, r0, #0
 8002b14:	d15d      	bne.n	8002bd2 <USER_SPI_initialize+0x1c6>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8002b16:	230f      	movs	r3, #15
 8002b18:	18fb      	adds	r3, r7, r3
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	701a      	strb	r2, [r3, #0]
 8002b1e:	e00f      	b.n	8002b40 <USER_SPI_initialize+0x134>
 8002b20:	250f      	movs	r5, #15
 8002b22:	197b      	adds	r3, r7, r5
 8002b24:	781c      	ldrb	r4, [r3, #0]
 8002b26:	20ff      	movs	r0, #255	; 0xff
 8002b28:	f7ff fdd6 	bl	80026d8 <xchg_spi>
 8002b2c:	0003      	movs	r3, r0
 8002b2e:	001a      	movs	r2, r3
 8002b30:	2308      	movs	r3, #8
 8002b32:	18fb      	adds	r3, r7, r3
 8002b34:	551a      	strb	r2, [r3, r4]
 8002b36:	197b      	adds	r3, r7, r5
 8002b38:	781a      	ldrb	r2, [r3, #0]
 8002b3a:	197b      	adds	r3, r7, r5
 8002b3c:	3201      	adds	r2, #1
 8002b3e:	701a      	strb	r2, [r3, #0]
 8002b40:	230f      	movs	r3, #15
 8002b42:	18fb      	adds	r3, r7, r3
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	2b03      	cmp	r3, #3
 8002b48:	d9ea      	bls.n	8002b20 <USER_SPI_initialize+0x114>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8002b4a:	2308      	movs	r3, #8
 8002b4c:	18fb      	adds	r3, r7, r3
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	001a      	movs	r2, r3
 8002b52:	2340      	movs	r3, #64	; 0x40
 8002b54:	4013      	ands	r3, r2
 8002b56:	d001      	beq.n	8002b5c <USER_SPI_initialize+0x150>
 8002b58:	220c      	movs	r2, #12
 8002b5a:	e000      	b.n	8002b5e <USER_SPI_initialize+0x152>
 8002b5c:	2204      	movs	r2, #4
 8002b5e:	230d      	movs	r3, #13
 8002b60:	18fb      	adds	r3, r7, r3
 8002b62:	701a      	strb	r2, [r3, #0]
 8002b64:	e035      	b.n	8002bd2 <USER_SPI_initialize+0x1c6>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8002b66:	2100      	movs	r1, #0
 8002b68:	20a9      	movs	r0, #169	; 0xa9
 8002b6a:	f7ff fec0 	bl	80028ee <send_cmd>
 8002b6e:	0003      	movs	r3, r0
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d808      	bhi.n	8002b86 <USER_SPI_initialize+0x17a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8002b74:	230d      	movs	r3, #13
 8002b76:	18fb      	adds	r3, r7, r3
 8002b78:	2202      	movs	r2, #2
 8002b7a:	701a      	strb	r2, [r3, #0]
 8002b7c:	230e      	movs	r3, #14
 8002b7e:	18fb      	adds	r3, r7, r3
 8002b80:	22a9      	movs	r2, #169	; 0xa9
 8002b82:	701a      	strb	r2, [r3, #0]
 8002b84:	e007      	b.n	8002b96 <USER_SPI_initialize+0x18a>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8002b86:	230d      	movs	r3, #13
 8002b88:	18fb      	adds	r3, r7, r3
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	701a      	strb	r2, [r3, #0]
 8002b8e:	230e      	movs	r3, #14
 8002b90:	18fb      	adds	r3, r7, r3
 8002b92:	2201      	movs	r2, #1
 8002b94:	701a      	strb	r2, [r3, #0]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8002b96:	46c0      	nop			; (mov r8, r8)
 8002b98:	f7ff fd88 	bl	80026ac <SPI_Timer_Status>
 8002b9c:	1e03      	subs	r3, r0, #0
 8002b9e:	d008      	beq.n	8002bb2 <USER_SPI_initialize+0x1a6>
 8002ba0:	230e      	movs	r3, #14
 8002ba2:	18fb      	adds	r3, r7, r3
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	2100      	movs	r1, #0
 8002ba8:	0018      	movs	r0, r3
 8002baa:	f7ff fea0 	bl	80028ee <send_cmd>
 8002bae:	1e03      	subs	r3, r0, #0
 8002bb0:	d1f2      	bne.n	8002b98 <USER_SPI_initialize+0x18c>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8002bb2:	f7ff fd7b 	bl	80026ac <SPI_Timer_Status>
 8002bb6:	1e03      	subs	r3, r0, #0
 8002bb8:	d007      	beq.n	8002bca <USER_SPI_initialize+0x1be>
 8002bba:	2380      	movs	r3, #128	; 0x80
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	0019      	movs	r1, r3
 8002bc0:	2010      	movs	r0, #16
 8002bc2:	f7ff fe94 	bl	80028ee <send_cmd>
 8002bc6:	1e03      	subs	r3, r0, #0
 8002bc8:	d003      	beq.n	8002bd2 <USER_SPI_initialize+0x1c6>
				ty = 0;
 8002bca:	230d      	movs	r3, #13
 8002bcc:	18fb      	adds	r3, r7, r3
 8002bce:	2200      	movs	r2, #0
 8002bd0:	701a      	strb	r2, [r3, #0]
		}
	}
	CardType = ty;	/* Card type */
 8002bd2:	4b13      	ldr	r3, [pc, #76]	; (8002c20 <USER_SPI_initialize+0x214>)
 8002bd4:	240d      	movs	r4, #13
 8002bd6:	193a      	adds	r2, r7, r4
 8002bd8:	7812      	ldrb	r2, [r2, #0]
 8002bda:	701a      	strb	r2, [r3, #0]
	despiselect();
 8002bdc:	f7ff fdf2 	bl	80027c4 <despiselect>

	if (ty) {			/* OK */
 8002be0:	193b      	adds	r3, r7, r4
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d00c      	beq.n	8002c02 <USER_SPI_initialize+0x1f6>
		FCLK_FAST();			/* Set fast clock */
 8002be8:	4b0c      	ldr	r3, [pc, #48]	; (8002c1c <USER_SPI_initialize+0x210>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2208      	movs	r2, #8
 8002bee:	621a      	str	r2, [r3, #32]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8002bf0:	4b09      	ldr	r3, [pc, #36]	; (8002c18 <USER_SPI_initialize+0x20c>)
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	4393      	bics	r3, r2
 8002bfa:	b2da      	uxtb	r2, r3
 8002bfc:	4b06      	ldr	r3, [pc, #24]	; (8002c18 <USER_SPI_initialize+0x20c>)
 8002bfe:	701a      	strb	r2, [r3, #0]
 8002c00:	e002      	b.n	8002c08 <USER_SPI_initialize+0x1fc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8002c02:	4b05      	ldr	r3, [pc, #20]	; (8002c18 <USER_SPI_initialize+0x20c>)
 8002c04:	2201      	movs	r2, #1
 8002c06:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8002c08:	4b03      	ldr	r3, [pc, #12]	; (8002c18 <USER_SPI_initialize+0x20c>)
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	b2db      	uxtb	r3, r3
}
 8002c0e:	0018      	movs	r0, r3
 8002c10:	46bd      	mov	sp, r7
 8002c12:	b004      	add	sp, #16
 8002c14:	bdb0      	pop	{r4, r5, r7, pc}
 8002c16:	46c0      	nop			; (mov r8, r8)
 8002c18:	20000020 	.word	0x20000020
 8002c1c:	200000e4 	.word	0x200000e4
 8002c20:	200000ac 	.word	0x200000ac

08002c24 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	0002      	movs	r2, r0
 8002c2c:	1dfb      	adds	r3, r7, #7
 8002c2e:	701a      	strb	r2, [r3, #0]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8002c30:	1dfb      	adds	r3, r7, #7
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d001      	beq.n	8002c3c <USER_SPI_status+0x18>
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e002      	b.n	8002c42 <USER_SPI_status+0x1e>

	return Stat;	/* Return disk status */
 8002c3c:	4b03      	ldr	r3, [pc, #12]	; (8002c4c <USER_SPI_status+0x28>)
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	b2db      	uxtb	r3, r3
}
 8002c42:	0018      	movs	r0, r3
 8002c44:	46bd      	mov	sp, r7
 8002c46:	b002      	add	sp, #8
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	46c0      	nop			; (mov r8, r8)
 8002c4c:	20000020 	.word	0x20000020

08002c50 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	60b9      	str	r1, [r7, #8]
 8002c58:	607a      	str	r2, [r7, #4]
 8002c5a:	603b      	str	r3, [r7, #0]
 8002c5c:	210f      	movs	r1, #15
 8002c5e:	187b      	adds	r3, r7, r1
 8002c60:	1c02      	adds	r2, r0, #0
 8002c62:	701a      	strb	r2, [r3, #0]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8002c64:	187b      	adds	r3, r7, r1
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d102      	bne.n	8002c72 <USER_SPI_read+0x22>
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d101      	bne.n	8002c76 <USER_SPI_read+0x26>
 8002c72:	2304      	movs	r3, #4
 8002c74:	e04f      	b.n	8002d16 <USER_SPI_read+0xc6>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8002c76:	4b2a      	ldr	r3, [pc, #168]	; (8002d20 <USER_SPI_read+0xd0>)
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	001a      	movs	r2, r3
 8002c7e:	2301      	movs	r3, #1
 8002c80:	4013      	ands	r3, r2
 8002c82:	d001      	beq.n	8002c88 <USER_SPI_read+0x38>
 8002c84:	2303      	movs	r3, #3
 8002c86:	e046      	b.n	8002d16 <USER_SPI_read+0xc6>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8002c88:	4b26      	ldr	r3, [pc, #152]	; (8002d24 <USER_SPI_read+0xd4>)
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	001a      	movs	r2, r3
 8002c8e:	2308      	movs	r3, #8
 8002c90:	4013      	ands	r3, r2
 8002c92:	d102      	bne.n	8002c9a <USER_SPI_read+0x4a>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	025b      	lsls	r3, r3, #9
 8002c98:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d112      	bne.n	8002cc6 <USER_SPI_read+0x76>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	0019      	movs	r1, r3
 8002ca4:	2011      	movs	r0, #17
 8002ca6:	f7ff fe22 	bl	80028ee <send_cmd>
 8002caa:	1e03      	subs	r3, r0, #0
 8002cac:	d12d      	bne.n	8002d0a <USER_SPI_read+0xba>
			&& rcvr_datablock(buff, 512)) {
 8002cae:	2380      	movs	r3, #128	; 0x80
 8002cb0:	009a      	lsls	r2, r3, #2
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	0011      	movs	r1, r2
 8002cb6:	0018      	movs	r0, r3
 8002cb8:	f7ff fdb0 	bl	800281c <rcvr_datablock>
 8002cbc:	1e03      	subs	r3, r0, #0
 8002cbe:	d024      	beq.n	8002d0a <USER_SPI_read+0xba>
			count = 0;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	603b      	str	r3, [r7, #0]
 8002cc4:	e021      	b.n	8002d0a <USER_SPI_read+0xba>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	0019      	movs	r1, r3
 8002cca:	2012      	movs	r0, #18
 8002ccc:	f7ff fe0f 	bl	80028ee <send_cmd>
 8002cd0:	1e03      	subs	r3, r0, #0
 8002cd2:	d11a      	bne.n	8002d0a <USER_SPI_read+0xba>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8002cd4:	2380      	movs	r3, #128	; 0x80
 8002cd6:	009a      	lsls	r2, r3, #2
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	0011      	movs	r1, r2
 8002cdc:	0018      	movs	r0, r3
 8002cde:	f7ff fd9d 	bl	800281c <rcvr_datablock>
 8002ce2:	1e03      	subs	r3, r0, #0
 8002ce4:	d00c      	beq.n	8002d00 <USER_SPI_read+0xb0>
				buff += 512;
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	2280      	movs	r2, #128	; 0x80
 8002cea:	0092      	lsls	r2, r2, #2
 8002cec:	4694      	mov	ip, r2
 8002cee:	4463      	add	r3, ip
 8002cf0:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	3b01      	subs	r3, #1
 8002cf6:	603b      	str	r3, [r7, #0]
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d1ea      	bne.n	8002cd4 <USER_SPI_read+0x84>
 8002cfe:	e000      	b.n	8002d02 <USER_SPI_read+0xb2>
				if (!rcvr_datablock(buff, 512)) break;
 8002d00:	46c0      	nop			; (mov r8, r8)
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8002d02:	2100      	movs	r1, #0
 8002d04:	200c      	movs	r0, #12
 8002d06:	f7ff fdf2 	bl	80028ee <send_cmd>
		}
	}
	despiselect();
 8002d0a:	f7ff fd5b 	bl	80027c4 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	1e5a      	subs	r2, r3, #1
 8002d12:	4193      	sbcs	r3, r2
 8002d14:	b2db      	uxtb	r3, r3
}
 8002d16:	0018      	movs	r0, r3
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	b004      	add	sp, #16
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	46c0      	nop			; (mov r8, r8)
 8002d20:	20000020 	.word	0x20000020
 8002d24:	200000ac 	.word	0x200000ac

08002d28 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60b9      	str	r1, [r7, #8]
 8002d30:	607a      	str	r2, [r7, #4]
 8002d32:	603b      	str	r3, [r7, #0]
 8002d34:	210f      	movs	r1, #15
 8002d36:	187b      	adds	r3, r7, r1
 8002d38:	1c02      	adds	r2, r0, #0
 8002d3a:	701a      	strb	r2, [r3, #0]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8002d3c:	187b      	adds	r3, r7, r1
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d102      	bne.n	8002d4a <USER_SPI_write+0x22>
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d101      	bne.n	8002d4e <USER_SPI_write+0x26>
 8002d4a:	2304      	movs	r3, #4
 8002d4c:	e063      	b.n	8002e16 <USER_SPI_write+0xee>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8002d4e:	4b34      	ldr	r3, [pc, #208]	; (8002e20 <USER_SPI_write+0xf8>)
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	001a      	movs	r2, r3
 8002d56:	2301      	movs	r3, #1
 8002d58:	4013      	ands	r3, r2
 8002d5a:	d001      	beq.n	8002d60 <USER_SPI_write+0x38>
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e05a      	b.n	8002e16 <USER_SPI_write+0xee>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8002d60:	4b2f      	ldr	r3, [pc, #188]	; (8002e20 <USER_SPI_write+0xf8>)
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	001a      	movs	r2, r3
 8002d68:	2304      	movs	r3, #4
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	d001      	beq.n	8002d72 <USER_SPI_write+0x4a>
 8002d6e:	2302      	movs	r3, #2
 8002d70:	e051      	b.n	8002e16 <USER_SPI_write+0xee>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8002d72:	4b2c      	ldr	r3, [pc, #176]	; (8002e24 <USER_SPI_write+0xfc>)
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	001a      	movs	r2, r3
 8002d78:	2308      	movs	r3, #8
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	d102      	bne.n	8002d84 <USER_SPI_write+0x5c>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	025b      	lsls	r3, r3, #9
 8002d82:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d110      	bne.n	8002dac <USER_SPI_write+0x84>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	0019      	movs	r1, r3
 8002d8e:	2018      	movs	r0, #24
 8002d90:	f7ff fdad 	bl	80028ee <send_cmd>
 8002d94:	1e03      	subs	r3, r0, #0
 8002d96:	d138      	bne.n	8002e0a <USER_SPI_write+0xe2>
			&& xmit_datablock(buff, 0xFE)) {
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	21fe      	movs	r1, #254	; 0xfe
 8002d9c:	0018      	movs	r0, r3
 8002d9e:	f7ff fd6c 	bl	800287a <xmit_datablock>
 8002da2:	1e03      	subs	r3, r0, #0
 8002da4:	d031      	beq.n	8002e0a <USER_SPI_write+0xe2>
			count = 0;
 8002da6:	2300      	movs	r3, #0
 8002da8:	603b      	str	r3, [r7, #0]
 8002daa:	e02e      	b.n	8002e0a <USER_SPI_write+0xe2>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8002dac:	4b1d      	ldr	r3, [pc, #116]	; (8002e24 <USER_SPI_write+0xfc>)
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	001a      	movs	r2, r3
 8002db2:	2306      	movs	r3, #6
 8002db4:	4013      	ands	r3, r2
 8002db6:	d004      	beq.n	8002dc2 <USER_SPI_write+0x9a>
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	0019      	movs	r1, r3
 8002dbc:	2097      	movs	r0, #151	; 0x97
 8002dbe:	f7ff fd96 	bl	80028ee <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	0019      	movs	r1, r3
 8002dc6:	2019      	movs	r0, #25
 8002dc8:	f7ff fd91 	bl	80028ee <send_cmd>
 8002dcc:	1e03      	subs	r3, r0, #0
 8002dce:	d11c      	bne.n	8002e0a <USER_SPI_write+0xe2>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	21fc      	movs	r1, #252	; 0xfc
 8002dd4:	0018      	movs	r0, r3
 8002dd6:	f7ff fd50 	bl	800287a <xmit_datablock>
 8002dda:	1e03      	subs	r3, r0, #0
 8002ddc:	d00c      	beq.n	8002df8 <USER_SPI_write+0xd0>
				buff += 512;
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	2280      	movs	r2, #128	; 0x80
 8002de2:	0092      	lsls	r2, r2, #2
 8002de4:	4694      	mov	ip, r2
 8002de6:	4463      	add	r3, ip
 8002de8:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	3b01      	subs	r3, #1
 8002dee:	603b      	str	r3, [r7, #0]
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d1ec      	bne.n	8002dd0 <USER_SPI_write+0xa8>
 8002df6:	e000      	b.n	8002dfa <USER_SPI_write+0xd2>
				if (!xmit_datablock(buff, 0xFC)) break;
 8002df8:	46c0      	nop			; (mov r8, r8)
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8002dfa:	21fd      	movs	r1, #253	; 0xfd
 8002dfc:	2000      	movs	r0, #0
 8002dfe:	f7ff fd3c 	bl	800287a <xmit_datablock>
 8002e02:	1e03      	subs	r3, r0, #0
 8002e04:	d101      	bne.n	8002e0a <USER_SPI_write+0xe2>
 8002e06:	2301      	movs	r3, #1
 8002e08:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8002e0a:	f7ff fcdb 	bl	80027c4 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	1e5a      	subs	r2, r3, #1
 8002e12:	4193      	sbcs	r3, r2
 8002e14:	b2db      	uxtb	r3, r3
}
 8002e16:	0018      	movs	r0, r3
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	b004      	add	sp, #16
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	46c0      	nop			; (mov r8, r8)
 8002e20:	20000020 	.word	0x20000020
 8002e24:	200000ac 	.word	0x200000ac

08002e28 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8002e28:	b590      	push	{r4, r7, lr}
 8002e2a:	b08d      	sub	sp, #52	; 0x34
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	603a      	str	r2, [r7, #0]
 8002e30:	1dfb      	adds	r3, r7, #7
 8002e32:	1c02      	adds	r2, r0, #0
 8002e34:	701a      	strb	r2, [r3, #0]
 8002e36:	1dbb      	adds	r3, r7, #6
 8002e38:	1c0a      	adds	r2, r1, #0
 8002e3a:	701a      	strb	r2, [r3, #0]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8002e3c:	1dfb      	adds	r3, r7, #7
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d001      	beq.n	8002e48 <USER_SPI_ioctl+0x20>
 8002e44:	2304      	movs	r3, #4
 8002e46:	e179      	b.n	800313c <USER_SPI_ioctl+0x314>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8002e48:	4bbe      	ldr	r3, [pc, #760]	; (8003144 <USER_SPI_ioctl+0x31c>)
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	001a      	movs	r2, r3
 8002e50:	2301      	movs	r3, #1
 8002e52:	4013      	ands	r3, r2
 8002e54:	d001      	beq.n	8002e5a <USER_SPI_ioctl+0x32>
 8002e56:	2303      	movs	r3, #3
 8002e58:	e170      	b.n	800313c <USER_SPI_ioctl+0x314>

	res = RES_ERROR;
 8002e5a:	232f      	movs	r3, #47	; 0x2f
 8002e5c:	18fb      	adds	r3, r7, r3
 8002e5e:	2201      	movs	r2, #1
 8002e60:	701a      	strb	r2, [r3, #0]

	switch (cmd) {
 8002e62:	1dbb      	adds	r3, r7, #6
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d013      	beq.n	8002e92 <USER_SPI_ioctl+0x6a>
 8002e6a:	dc02      	bgt.n	8002e72 <USER_SPI_ioctl+0x4a>
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d006      	beq.n	8002e7e <USER_SPI_ioctl+0x56>
 8002e70:	e14d      	b.n	800310e <USER_SPI_ioctl+0x2e6>
 8002e72:	2b03      	cmp	r3, #3
 8002e74:	d072      	beq.n	8002f5c <USER_SPI_ioctl+0x134>
 8002e76:	2b04      	cmp	r3, #4
 8002e78:	d100      	bne.n	8002e7c <USER_SPI_ioctl+0x54>
 8002e7a:	e0f7      	b.n	800306c <USER_SPI_ioctl+0x244>
 8002e7c:	e147      	b.n	800310e <USER_SPI_ioctl+0x2e6>
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8002e7e:	f7ff fcb1 	bl	80027e4 <spiselect>
 8002e82:	1e03      	subs	r3, r0, #0
 8002e84:	d100      	bne.n	8002e88 <USER_SPI_ioctl+0x60>
 8002e86:	e147      	b.n	8003118 <USER_SPI_ioctl+0x2f0>
 8002e88:	232f      	movs	r3, #47	; 0x2f
 8002e8a:	18fb      	adds	r3, r7, r3
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	701a      	strb	r2, [r3, #0]
		break;
 8002e90:	e142      	b.n	8003118 <USER_SPI_ioctl+0x2f0>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8002e92:	2100      	movs	r1, #0
 8002e94:	2009      	movs	r0, #9
 8002e96:	f7ff fd2a 	bl	80028ee <send_cmd>
 8002e9a:	1e03      	subs	r3, r0, #0
 8002e9c:	d000      	beq.n	8002ea0 <USER_SPI_ioctl+0x78>
 8002e9e:	e13d      	b.n	800311c <USER_SPI_ioctl+0x2f4>
 8002ea0:	230c      	movs	r3, #12
 8002ea2:	18fb      	adds	r3, r7, r3
 8002ea4:	2110      	movs	r1, #16
 8002ea6:	0018      	movs	r0, r3
 8002ea8:	f7ff fcb8 	bl	800281c <rcvr_datablock>
 8002eac:	1e03      	subs	r3, r0, #0
 8002eae:	d100      	bne.n	8002eb2 <USER_SPI_ioctl+0x8a>
 8002eb0:	e134      	b.n	800311c <USER_SPI_ioctl+0x2f4>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8002eb2:	230c      	movs	r3, #12
 8002eb4:	18fb      	adds	r3, r7, r3
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	099b      	lsrs	r3, r3, #6
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d116      	bne.n	8002eee <USER_SPI_ioctl+0xc6>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8002ec0:	200c      	movs	r0, #12
 8002ec2:	183b      	adds	r3, r7, r0
 8002ec4:	7a5b      	ldrb	r3, [r3, #9]
 8002ec6:	001a      	movs	r2, r3
 8002ec8:	183b      	adds	r3, r7, r0
 8002eca:	7a1b      	ldrb	r3, [r3, #8]
 8002ecc:	021b      	lsls	r3, r3, #8
 8002ece:	18d3      	adds	r3, r2, r3
 8002ed0:	0019      	movs	r1, r3
 8002ed2:	183b      	adds	r3, r7, r0
 8002ed4:	79db      	ldrb	r3, [r3, #7]
 8002ed6:	041a      	lsls	r2, r3, #16
 8002ed8:	23fc      	movs	r3, #252	; 0xfc
 8002eda:	039b      	lsls	r3, r3, #14
 8002edc:	4013      	ands	r3, r2
 8002ede:	18cb      	adds	r3, r1, r3
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	029a      	lsls	r2, r3, #10
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	601a      	str	r2, [r3, #0]
 8002eec:	e031      	b.n	8002f52 <USER_SPI_ioctl+0x12a>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8002eee:	200c      	movs	r0, #12
 8002ef0:	183b      	adds	r3, r7, r0
 8002ef2:	795b      	ldrb	r3, [r3, #5]
 8002ef4:	220f      	movs	r2, #15
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	b2da      	uxtb	r2, r3
 8002efa:	183b      	adds	r3, r7, r0
 8002efc:	7a9b      	ldrb	r3, [r3, #10]
 8002efe:	09db      	lsrs	r3, r3, #7
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	18d3      	adds	r3, r2, r3
 8002f04:	b2da      	uxtb	r2, r3
 8002f06:	183b      	adds	r3, r7, r0
 8002f08:	7a5b      	ldrb	r3, [r3, #9]
 8002f0a:	005b      	lsls	r3, r3, #1
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	2106      	movs	r1, #6
 8002f10:	400b      	ands	r3, r1
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	18d3      	adds	r3, r2, r3
 8002f16:	b2da      	uxtb	r2, r3
 8002f18:	242e      	movs	r4, #46	; 0x2e
 8002f1a:	193b      	adds	r3, r7, r4
 8002f1c:	3202      	adds	r2, #2
 8002f1e:	701a      	strb	r2, [r3, #0]
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8002f20:	183b      	adds	r3, r7, r0
 8002f22:	7a1b      	ldrb	r3, [r3, #8]
 8002f24:	099b      	lsrs	r3, r3, #6
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	001a      	movs	r2, r3
 8002f2a:	183b      	adds	r3, r7, r0
 8002f2c:	79db      	ldrb	r3, [r3, #7]
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	18d2      	adds	r2, r2, r3
 8002f32:	183b      	adds	r3, r7, r0
 8002f34:	799b      	ldrb	r3, [r3, #6]
 8002f36:	0299      	lsls	r1, r3, #10
 8002f38:	23c0      	movs	r3, #192	; 0xc0
 8002f3a:	011b      	lsls	r3, r3, #4
 8002f3c:	400b      	ands	r3, r1
 8002f3e:	18d3      	adds	r3, r2, r3
 8002f40:	3301      	adds	r3, #1
 8002f42:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8002f44:	193b      	adds	r3, r7, r4
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	3b09      	subs	r3, #9
 8002f4a:	69fa      	ldr	r2, [r7, #28]
 8002f4c:	409a      	lsls	r2, r3
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8002f52:	232f      	movs	r3, #47	; 0x2f
 8002f54:	18fb      	adds	r3, r7, r3
 8002f56:	2200      	movs	r2, #0
 8002f58:	701a      	strb	r2, [r3, #0]
		}
		break;
 8002f5a:	e0df      	b.n	800311c <USER_SPI_ioctl+0x2f4>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8002f5c:	4b7a      	ldr	r3, [pc, #488]	; (8003148 <USER_SPI_ioctl+0x320>)
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	001a      	movs	r2, r3
 8002f62:	2304      	movs	r3, #4
 8002f64:	4013      	ands	r3, r2
 8002f66:	d035      	beq.n	8002fd4 <USER_SPI_ioctl+0x1ac>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8002f68:	2100      	movs	r1, #0
 8002f6a:	208d      	movs	r0, #141	; 0x8d
 8002f6c:	f7ff fcbf 	bl	80028ee <send_cmd>
 8002f70:	1e03      	subs	r3, r0, #0
 8002f72:	d000      	beq.n	8002f76 <USER_SPI_ioctl+0x14e>
 8002f74:	e0d4      	b.n	8003120 <USER_SPI_ioctl+0x2f8>
				xchg_spi(0xFF);
 8002f76:	20ff      	movs	r0, #255	; 0xff
 8002f78:	f7ff fbae 	bl	80026d8 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8002f7c:	230c      	movs	r3, #12
 8002f7e:	18fb      	adds	r3, r7, r3
 8002f80:	2110      	movs	r1, #16
 8002f82:	0018      	movs	r0, r3
 8002f84:	f7ff fc4a 	bl	800281c <rcvr_datablock>
 8002f88:	1e03      	subs	r3, r0, #0
 8002f8a:	d100      	bne.n	8002f8e <USER_SPI_ioctl+0x166>
 8002f8c:	e0c8      	b.n	8003120 <USER_SPI_ioctl+0x2f8>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8002f8e:	232e      	movs	r3, #46	; 0x2e
 8002f90:	18fb      	adds	r3, r7, r3
 8002f92:	2230      	movs	r2, #48	; 0x30
 8002f94:	701a      	strb	r2, [r3, #0]
 8002f96:	e008      	b.n	8002faa <USER_SPI_ioctl+0x182>
 8002f98:	20ff      	movs	r0, #255	; 0xff
 8002f9a:	f7ff fb9d 	bl	80026d8 <xchg_spi>
 8002f9e:	212e      	movs	r1, #46	; 0x2e
 8002fa0:	187b      	adds	r3, r7, r1
 8002fa2:	781a      	ldrb	r2, [r3, #0]
 8002fa4:	187b      	adds	r3, r7, r1
 8002fa6:	3a01      	subs	r2, #1
 8002fa8:	701a      	strb	r2, [r3, #0]
 8002faa:	232e      	movs	r3, #46	; 0x2e
 8002fac:	18fb      	adds	r3, r7, r3
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d1f1      	bne.n	8002f98 <USER_SPI_ioctl+0x170>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8002fb4:	230c      	movs	r3, #12
 8002fb6:	18fb      	adds	r3, r7, r3
 8002fb8:	7a9b      	ldrb	r3, [r3, #10]
 8002fba:	091b      	lsrs	r3, r3, #4
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	001a      	movs	r2, r3
 8002fc0:	2310      	movs	r3, #16
 8002fc2:	4093      	lsls	r3, r2
 8002fc4:	001a      	movs	r2, r3
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8002fca:	232f      	movs	r3, #47	; 0x2f
 8002fcc:	18fb      	adds	r3, r7, r3
 8002fce:	2200      	movs	r2, #0
 8002fd0:	701a      	strb	r2, [r3, #0]
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8002fd2:	e0a5      	b.n	8003120 <USER_SPI_ioctl+0x2f8>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8002fd4:	2100      	movs	r1, #0
 8002fd6:	2009      	movs	r0, #9
 8002fd8:	f7ff fc89 	bl	80028ee <send_cmd>
 8002fdc:	1e03      	subs	r3, r0, #0
 8002fde:	d000      	beq.n	8002fe2 <USER_SPI_ioctl+0x1ba>
 8002fe0:	e09e      	b.n	8003120 <USER_SPI_ioctl+0x2f8>
 8002fe2:	230c      	movs	r3, #12
 8002fe4:	18fb      	adds	r3, r7, r3
 8002fe6:	2110      	movs	r1, #16
 8002fe8:	0018      	movs	r0, r3
 8002fea:	f7ff fc17 	bl	800281c <rcvr_datablock>
 8002fee:	1e03      	subs	r3, r0, #0
 8002ff0:	d100      	bne.n	8002ff4 <USER_SPI_ioctl+0x1cc>
 8002ff2:	e095      	b.n	8003120 <USER_SPI_ioctl+0x2f8>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8002ff4:	4b54      	ldr	r3, [pc, #336]	; (8003148 <USER_SPI_ioctl+0x320>)
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	001a      	movs	r2, r3
 8002ffa:	2302      	movs	r3, #2
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	d016      	beq.n	800302e <USER_SPI_ioctl+0x206>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8003000:	210c      	movs	r1, #12
 8003002:	187b      	adds	r3, r7, r1
 8003004:	7a9b      	ldrb	r3, [r3, #10]
 8003006:	005b      	lsls	r3, r3, #1
 8003008:	227e      	movs	r2, #126	; 0x7e
 800300a:	4013      	ands	r3, r2
 800300c:	187a      	adds	r2, r7, r1
 800300e:	7ad2      	ldrb	r2, [r2, #11]
 8003010:	09d2      	lsrs	r2, r2, #7
 8003012:	b2d2      	uxtb	r2, r2
 8003014:	189b      	adds	r3, r3, r2
 8003016:	1c5a      	adds	r2, r3, #1
 8003018:	187b      	adds	r3, r7, r1
 800301a:	7b5b      	ldrb	r3, [r3, #13]
 800301c:	099b      	lsrs	r3, r3, #6
 800301e:	b2db      	uxtb	r3, r3
 8003020:	3b01      	subs	r3, #1
 8003022:	409a      	lsls	r2, r3
 8003024:	0013      	movs	r3, r2
 8003026:	001a      	movs	r2, r3
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	601a      	str	r2, [r3, #0]
 800302c:	e019      	b.n	8003062 <USER_SPI_ioctl+0x23a>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800302e:	210c      	movs	r1, #12
 8003030:	187b      	adds	r3, r7, r1
 8003032:	7a9b      	ldrb	r3, [r3, #10]
 8003034:	109b      	asrs	r3, r3, #2
 8003036:	b29b      	uxth	r3, r3
 8003038:	001a      	movs	r2, r3
 800303a:	231f      	movs	r3, #31
 800303c:	4013      	ands	r3, r2
 800303e:	3301      	adds	r3, #1
 8003040:	0008      	movs	r0, r1
 8003042:	187a      	adds	r2, r7, r1
 8003044:	7ad2      	ldrb	r2, [r2, #11]
 8003046:	00d2      	lsls	r2, r2, #3
 8003048:	2118      	movs	r1, #24
 800304a:	400a      	ands	r2, r1
 800304c:	0001      	movs	r1, r0
 800304e:	1879      	adds	r1, r7, r1
 8003050:	7ac9      	ldrb	r1, [r1, #11]
 8003052:	0949      	lsrs	r1, r1, #5
 8003054:	b2c9      	uxtb	r1, r1
 8003056:	1852      	adds	r2, r2, r1
 8003058:	3201      	adds	r2, #1
 800305a:	4353      	muls	r3, r2
 800305c:	001a      	movs	r2, r3
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8003062:	232f      	movs	r3, #47	; 0x2f
 8003064:	18fb      	adds	r3, r7, r3
 8003066:	2200      	movs	r2, #0
 8003068:	701a      	strb	r2, [r3, #0]
		break;
 800306a:	e059      	b.n	8003120 <USER_SPI_ioctl+0x2f8>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800306c:	4b36      	ldr	r3, [pc, #216]	; (8003148 <USER_SPI_ioctl+0x320>)
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	001a      	movs	r2, r3
 8003072:	2306      	movs	r3, #6
 8003074:	4013      	ands	r3, r2
 8003076:	d055      	beq.n	8003124 <USER_SPI_ioctl+0x2fc>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8003078:	230c      	movs	r3, #12
 800307a:	18fa      	adds	r2, r7, r3
 800307c:	1dfb      	adds	r3, r7, #7
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	210b      	movs	r1, #11
 8003082:	0018      	movs	r0, r3
 8003084:	f7ff fed0 	bl	8002e28 <USER_SPI_ioctl>
 8003088:	1e03      	subs	r3, r0, #0
 800308a:	d14d      	bne.n	8003128 <USER_SPI_ioctl+0x300>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800308c:	230c      	movs	r3, #12
 800308e:	18fb      	adds	r3, r7, r3
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	099b      	lsrs	r3, r3, #6
 8003094:	b2db      	uxtb	r3, r3
 8003096:	2b00      	cmp	r3, #0
 8003098:	d106      	bne.n	80030a8 <USER_SPI_ioctl+0x280>
 800309a:	230c      	movs	r3, #12
 800309c:	18fb      	adds	r3, r7, r3
 800309e:	7a9b      	ldrb	r3, [r3, #10]
 80030a0:	001a      	movs	r2, r3
 80030a2:	2340      	movs	r3, #64	; 0x40
 80030a4:	4013      	ands	r3, r2
 80030a6:	d041      	beq.n	800312c <USER_SPI_ioctl+0x304>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	623b      	str	r3, [r7, #32]
 80030ac:	6a3b      	ldr	r3, [r7, #32]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80030b2:	6a3b      	ldr	r3, [r7, #32]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 80030b8:	4b23      	ldr	r3, [pc, #140]	; (8003148 <USER_SPI_ioctl+0x320>)
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	001a      	movs	r2, r3
 80030be:	2308      	movs	r3, #8
 80030c0:	4013      	ands	r3, r2
 80030c2:	d105      	bne.n	80030d0 <USER_SPI_ioctl+0x2a8>
			st *= 512; ed *= 512;
 80030c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c6:	025b      	lsls	r3, r3, #9
 80030c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80030ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030cc:	025b      	lsls	r3, r3, #9
 80030ce:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 80030d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030d2:	0019      	movs	r1, r3
 80030d4:	2020      	movs	r0, #32
 80030d6:	f7ff fc0a 	bl	80028ee <send_cmd>
 80030da:	1e03      	subs	r3, r0, #0
 80030dc:	d128      	bne.n	8003130 <USER_SPI_ioctl+0x308>
 80030de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e0:	0019      	movs	r1, r3
 80030e2:	2021      	movs	r0, #33	; 0x21
 80030e4:	f7ff fc03 	bl	80028ee <send_cmd>
 80030e8:	1e03      	subs	r3, r0, #0
 80030ea:	d121      	bne.n	8003130 <USER_SPI_ioctl+0x308>
 80030ec:	2100      	movs	r1, #0
 80030ee:	2026      	movs	r0, #38	; 0x26
 80030f0:	f7ff fbfd 	bl	80028ee <send_cmd>
 80030f4:	1e03      	subs	r3, r0, #0
 80030f6:	d11b      	bne.n	8003130 <USER_SPI_ioctl+0x308>
 80030f8:	4b14      	ldr	r3, [pc, #80]	; (800314c <USER_SPI_ioctl+0x324>)
 80030fa:	0018      	movs	r0, r3
 80030fc:	f7ff fb39 	bl	8002772 <wait_ready>
 8003100:	1e03      	subs	r3, r0, #0
 8003102:	d015      	beq.n	8003130 <USER_SPI_ioctl+0x308>
			res = RES_OK;	/* FatFs does not check result of this command */
 8003104:	232f      	movs	r3, #47	; 0x2f
 8003106:	18fb      	adds	r3, r7, r3
 8003108:	2200      	movs	r2, #0
 800310a:	701a      	strb	r2, [r3, #0]
		}
		break;
 800310c:	e010      	b.n	8003130 <USER_SPI_ioctl+0x308>

	default:
		res = RES_PARERR;
 800310e:	232f      	movs	r3, #47	; 0x2f
 8003110:	18fb      	adds	r3, r7, r3
 8003112:	2204      	movs	r2, #4
 8003114:	701a      	strb	r2, [r3, #0]
 8003116:	e00c      	b.n	8003132 <USER_SPI_ioctl+0x30a>
		break;
 8003118:	46c0      	nop			; (mov r8, r8)
 800311a:	e00a      	b.n	8003132 <USER_SPI_ioctl+0x30a>
		break;
 800311c:	46c0      	nop			; (mov r8, r8)
 800311e:	e008      	b.n	8003132 <USER_SPI_ioctl+0x30a>
		break;
 8003120:	46c0      	nop			; (mov r8, r8)
 8003122:	e006      	b.n	8003132 <USER_SPI_ioctl+0x30a>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8003124:	46c0      	nop			; (mov r8, r8)
 8003126:	e004      	b.n	8003132 <USER_SPI_ioctl+0x30a>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8003128:	46c0      	nop			; (mov r8, r8)
 800312a:	e002      	b.n	8003132 <USER_SPI_ioctl+0x30a>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800312c:	46c0      	nop			; (mov r8, r8)
 800312e:	e000      	b.n	8003132 <USER_SPI_ioctl+0x30a>
		break;
 8003130:	46c0      	nop			; (mov r8, r8)
	}

	despiselect();
 8003132:	f7ff fb47 	bl	80027c4 <despiselect>

	return res;
 8003136:	232f      	movs	r3, #47	; 0x2f
 8003138:	18fb      	adds	r3, r7, r3
 800313a:	781b      	ldrb	r3, [r3, #0]
}
 800313c:	0018      	movs	r0, r3
 800313e:	46bd      	mov	sp, r7
 8003140:	b00d      	add	sp, #52	; 0x34
 8003142:	bd90      	pop	{r4, r7, pc}
 8003144:	20000020 	.word	0x20000020
 8003148:	200000ac 	.word	0x200000ac
 800314c:	00007530 	.word	0x00007530

08003150 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8003150:	b5b0      	push	{r4, r5, r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	0002      	movs	r2, r0
 8003158:	1dfb      	adds	r3, r7, #7
 800315a:	701a      	strb	r2, [r3, #0]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800315c:	1dfb      	adds	r3, r7, #7
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	4a0b      	ldr	r2, [pc, #44]	; (8003190 <disk_status+0x40>)
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	18d3      	adds	r3, r2, r3
 8003166:	3304      	adds	r3, #4
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	1dfa      	adds	r2, r7, #7
 800316e:	7812      	ldrb	r2, [r2, #0]
 8003170:	4907      	ldr	r1, [pc, #28]	; (8003190 <disk_status+0x40>)
 8003172:	188a      	adds	r2, r1, r2
 8003174:	7a12      	ldrb	r2, [r2, #8]
 8003176:	250f      	movs	r5, #15
 8003178:	197c      	adds	r4, r7, r5
 800317a:	0010      	movs	r0, r2
 800317c:	4798      	blx	r3
 800317e:	0003      	movs	r3, r0
 8003180:	7023      	strb	r3, [r4, #0]
  return stat;
 8003182:	197b      	adds	r3, r7, r5
 8003184:	781b      	ldrb	r3, [r3, #0]
}
 8003186:	0018      	movs	r0, r3
 8003188:	46bd      	mov	sp, r7
 800318a:	b004      	add	sp, #16
 800318c:	bdb0      	pop	{r4, r5, r7, pc}
 800318e:	46c0      	nop			; (mov r8, r8)
 8003190:	200000d0 	.word	0x200000d0

08003194 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8003194:	b590      	push	{r4, r7, lr}
 8003196:	b085      	sub	sp, #20
 8003198:	af00      	add	r7, sp, #0
 800319a:	0002      	movs	r2, r0
 800319c:	1dfb      	adds	r3, r7, #7
 800319e:	701a      	strb	r2, [r3, #0]
  DSTATUS stat = RES_OK;
 80031a0:	230f      	movs	r3, #15
 80031a2:	18fb      	adds	r3, r7, r3
 80031a4:	2200      	movs	r2, #0
 80031a6:	701a      	strb	r2, [r3, #0]
  
  if(disk.is_initialized[pdrv] == 0)
 80031a8:	1dfb      	adds	r3, r7, #7
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	4a11      	ldr	r2, [pc, #68]	; (80031f4 <disk_initialize+0x60>)
 80031ae:	5cd3      	ldrb	r3, [r2, r3]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d117      	bne.n	80031e4 <disk_initialize+0x50>
  { 
    disk.is_initialized[pdrv] = 1;
 80031b4:	1dfb      	adds	r3, r7, #7
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	4a0e      	ldr	r2, [pc, #56]	; (80031f4 <disk_initialize+0x60>)
 80031ba:	2101      	movs	r1, #1
 80031bc:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80031be:	1dfb      	adds	r3, r7, #7
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	4a0c      	ldr	r2, [pc, #48]	; (80031f4 <disk_initialize+0x60>)
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	18d3      	adds	r3, r2, r3
 80031c8:	3304      	adds	r3, #4
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	1dfa      	adds	r2, r7, #7
 80031d0:	7812      	ldrb	r2, [r2, #0]
 80031d2:	4908      	ldr	r1, [pc, #32]	; (80031f4 <disk_initialize+0x60>)
 80031d4:	188a      	adds	r2, r1, r2
 80031d6:	7a12      	ldrb	r2, [r2, #8]
 80031d8:	210f      	movs	r1, #15
 80031da:	187c      	adds	r4, r7, r1
 80031dc:	0010      	movs	r0, r2
 80031de:	4798      	blx	r3
 80031e0:	0003      	movs	r3, r0
 80031e2:	7023      	strb	r3, [r4, #0]
  }
  return stat;
 80031e4:	230f      	movs	r3, #15
 80031e6:	18fb      	adds	r3, r7, r3
 80031e8:	781b      	ldrb	r3, [r3, #0]
}
 80031ea:	0018      	movs	r0, r3
 80031ec:	46bd      	mov	sp, r7
 80031ee:	b005      	add	sp, #20
 80031f0:	bd90      	pop	{r4, r7, pc}
 80031f2:	46c0      	nop			; (mov r8, r8)
 80031f4:	200000d0 	.word	0x200000d0

080031f8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80031f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031fa:	b087      	sub	sp, #28
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60b9      	str	r1, [r7, #8]
 8003200:	607a      	str	r2, [r7, #4]
 8003202:	603b      	str	r3, [r7, #0]
 8003204:	210f      	movs	r1, #15
 8003206:	187b      	adds	r3, r7, r1
 8003208:	1c02      	adds	r2, r0, #0
 800320a:	701a      	strb	r2, [r3, #0]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800320c:	187b      	adds	r3, r7, r1
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	4a0c      	ldr	r2, [pc, #48]	; (8003244 <disk_read+0x4c>)
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	18d3      	adds	r3, r2, r3
 8003216:	3304      	adds	r3, #4
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	689d      	ldr	r5, [r3, #8]
 800321c:	187b      	adds	r3, r7, r1
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	4a08      	ldr	r2, [pc, #32]	; (8003244 <disk_read+0x4c>)
 8003222:	18d3      	adds	r3, r2, r3
 8003224:	7a18      	ldrb	r0, [r3, #8]
 8003226:	2617      	movs	r6, #23
 8003228:	19bc      	adds	r4, r7, r6
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	68b9      	ldr	r1, [r7, #8]
 8003230:	47a8      	blx	r5
 8003232:	0003      	movs	r3, r0
 8003234:	7023      	strb	r3, [r4, #0]
  return res;
 8003236:	19bb      	adds	r3, r7, r6
 8003238:	781b      	ldrb	r3, [r3, #0]
}
 800323a:	0018      	movs	r0, r3
 800323c:	46bd      	mov	sp, r7
 800323e:	b007      	add	sp, #28
 8003240:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003242:	46c0      	nop			; (mov r8, r8)
 8003244:	200000d0 	.word	0x200000d0

08003248 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8003248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800324a:	b087      	sub	sp, #28
 800324c:	af00      	add	r7, sp, #0
 800324e:	60b9      	str	r1, [r7, #8]
 8003250:	607a      	str	r2, [r7, #4]
 8003252:	603b      	str	r3, [r7, #0]
 8003254:	210f      	movs	r1, #15
 8003256:	187b      	adds	r3, r7, r1
 8003258:	1c02      	adds	r2, r0, #0
 800325a:	701a      	strb	r2, [r3, #0]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800325c:	187b      	adds	r3, r7, r1
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	4a0c      	ldr	r2, [pc, #48]	; (8003294 <disk_write+0x4c>)
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	18d3      	adds	r3, r2, r3
 8003266:	3304      	adds	r3, #4
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	68dd      	ldr	r5, [r3, #12]
 800326c:	187b      	adds	r3, r7, r1
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	4a08      	ldr	r2, [pc, #32]	; (8003294 <disk_write+0x4c>)
 8003272:	18d3      	adds	r3, r2, r3
 8003274:	7a18      	ldrb	r0, [r3, #8]
 8003276:	2617      	movs	r6, #23
 8003278:	19bc      	adds	r4, r7, r6
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	68b9      	ldr	r1, [r7, #8]
 8003280:	47a8      	blx	r5
 8003282:	0003      	movs	r3, r0
 8003284:	7023      	strb	r3, [r4, #0]
  return res;
 8003286:	19bb      	adds	r3, r7, r6
 8003288:	781b      	ldrb	r3, [r3, #0]
}
 800328a:	0018      	movs	r0, r3
 800328c:	46bd      	mov	sp, r7
 800328e:	b007      	add	sp, #28
 8003290:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003292:	46c0      	nop			; (mov r8, r8)
 8003294:	200000d0 	.word	0x200000d0

08003298 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8003298:	b5f0      	push	{r4, r5, r6, r7, lr}
 800329a:	b085      	sub	sp, #20
 800329c:	af00      	add	r7, sp, #0
 800329e:	603a      	str	r2, [r7, #0]
 80032a0:	1dfb      	adds	r3, r7, #7
 80032a2:	1c02      	adds	r2, r0, #0
 80032a4:	701a      	strb	r2, [r3, #0]
 80032a6:	1dbb      	adds	r3, r7, #6
 80032a8:	1c0a      	adds	r2, r1, #0
 80032aa:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80032ac:	1dfb      	adds	r3, r7, #7
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	4a0c      	ldr	r2, [pc, #48]	; (80032e4 <disk_ioctl+0x4c>)
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	18d3      	adds	r3, r2, r3
 80032b6:	3304      	adds	r3, #4
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	691b      	ldr	r3, [r3, #16]
 80032bc:	1dfa      	adds	r2, r7, #7
 80032be:	7812      	ldrb	r2, [r2, #0]
 80032c0:	4908      	ldr	r1, [pc, #32]	; (80032e4 <disk_ioctl+0x4c>)
 80032c2:	188a      	adds	r2, r1, r2
 80032c4:	7a10      	ldrb	r0, [r2, #8]
 80032c6:	260f      	movs	r6, #15
 80032c8:	19bc      	adds	r4, r7, r6
 80032ca:	683d      	ldr	r5, [r7, #0]
 80032cc:	1dba      	adds	r2, r7, #6
 80032ce:	7811      	ldrb	r1, [r2, #0]
 80032d0:	002a      	movs	r2, r5
 80032d2:	4798      	blx	r3
 80032d4:	0003      	movs	r3, r0
 80032d6:	7023      	strb	r3, [r4, #0]
  return res;
 80032d8:	19bb      	adds	r3, r7, r6
 80032da:	781b      	ldrb	r3, [r3, #0]
}
 80032dc:	0018      	movs	r0, r3
 80032de:	46bd      	mov	sp, r7
 80032e0:	b005      	add	sp, #20
 80032e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032e4:	200000d0 	.word	0x200000d0

080032e8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b086      	sub	sp, #24
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	60b9      	str	r1, [r7, #8]
 80032f2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 80032fc:	e007      	b.n	800330e <mem_cpy+0x26>
		*d++ = *s++;
 80032fe:	693a      	ldr	r2, [r7, #16]
 8003300:	1c53      	adds	r3, r2, #1
 8003302:	613b      	str	r3, [r7, #16]
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	1c59      	adds	r1, r3, #1
 8003308:	6179      	str	r1, [r7, #20]
 800330a:	7812      	ldrb	r2, [r2, #0]
 800330c:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	1e5a      	subs	r2, r3, #1
 8003312:	607a      	str	r2, [r7, #4]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d1f2      	bne.n	80032fe <mem_cpy+0x16>
}
 8003318:	46c0      	nop			; (mov r8, r8)
 800331a:	46bd      	mov	sp, r7
 800331c:	b006      	add	sp, #24
 800331e:	bd80      	pop	{r7, pc}

08003320 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8003320:	b580      	push	{r7, lr}
 8003322:	b086      	sub	sp, #24
 8003324:	af00      	add	r7, sp, #0
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8003330:	e005      	b.n	800333e <mem_set+0x1e>
		*d++ = (BYTE)val;
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	1c5a      	adds	r2, r3, #1
 8003336:	617a      	str	r2, [r7, #20]
 8003338:	68ba      	ldr	r2, [r7, #8]
 800333a:	b2d2      	uxtb	r2, r2
 800333c:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	1e5a      	subs	r2, r3, #1
 8003342:	607a      	str	r2, [r7, #4]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d1f4      	bne.n	8003332 <mem_set+0x12>
}
 8003348:	46c0      	nop			; (mov r8, r8)
 800334a:	46bd      	mov	sp, r7
 800334c:	b006      	add	sp, #24
 800334e:	bd80      	pop	{r7, pc}

08003350 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8003350:	b580      	push	{r7, lr}
 8003352:	b088      	sub	sp, #32
 8003354:	af00      	add	r7, sp, #0
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	61fb      	str	r3, [r7, #28]
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8003364:	2300      	movs	r3, #0
 8003366:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8003368:	46c0      	nop			; (mov r8, r8)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	1e5a      	subs	r2, r3, #1
 800336e:	607a      	str	r2, [r7, #4]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d00d      	beq.n	8003390 <mem_cmp+0x40>
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	1c5a      	adds	r2, r3, #1
 8003378:	61fa      	str	r2, [r7, #28]
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	0019      	movs	r1, r3
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	1c5a      	adds	r2, r3, #1
 8003382:	61ba      	str	r2, [r7, #24]
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	1acb      	subs	r3, r1, r3
 8003388:	617b      	str	r3, [r7, #20]
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d0ec      	beq.n	800336a <mem_cmp+0x1a>
	return r;
 8003390:	697b      	ldr	r3, [r7, #20]
}
 8003392:	0018      	movs	r0, r3
 8003394:	46bd      	mov	sp, r7
 8003396:	b008      	add	sp, #32
 8003398:	bd80      	pop	{r7, pc}

0800339a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 800339a:	b580      	push	{r7, lr}
 800339c:	b082      	sub	sp, #8
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
 80033a2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80033a4:	e002      	b.n	80033ac <chk_chr+0x12>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	3301      	adds	r3, #1
 80033aa:	607b      	str	r3, [r7, #4]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d005      	beq.n	80033c0 <chk_chr+0x26>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	001a      	movs	r2, r3
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	4293      	cmp	r3, r2
 80033be:	d1f2      	bne.n	80033a6 <chk_chr+0xc>
	return *str;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	781b      	ldrb	r3, [r3, #0]
}
 80033c4:	0018      	movs	r0, r3
 80033c6:	46bd      	mov	sp, r7
 80033c8:	b002      	add	sp, #8
 80033ca:	bd80      	pop	{r7, pc}

080033cc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80033d6:	2300      	movs	r3, #0
 80033d8:	60bb      	str	r3, [r7, #8]
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	60fb      	str	r3, [r7, #12]
 80033de:	e038      	b.n	8003452 <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 80033e0:	492f      	ldr	r1, [pc, #188]	; (80034a0 <chk_lock+0xd4>)
 80033e2:	68fa      	ldr	r2, [r7, #12]
 80033e4:	0013      	movs	r3, r2
 80033e6:	005b      	lsls	r3, r3, #1
 80033e8:	189b      	adds	r3, r3, r2
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	585b      	ldr	r3, [r3, r1]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d02a      	beq.n	8003448 <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80033f2:	492b      	ldr	r1, [pc, #172]	; (80034a0 <chk_lock+0xd4>)
 80033f4:	68fa      	ldr	r2, [r7, #12]
 80033f6:	0013      	movs	r3, r2
 80033f8:	005b      	lsls	r3, r3, #1
 80033fa:	189b      	adds	r3, r3, r2
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	585a      	ldr	r2, [r3, r1]
 8003400:	6879      	ldr	r1, [r7, #4]
 8003402:	2380      	movs	r3, #128	; 0x80
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	58cb      	ldr	r3, [r1, r3]
 8003408:	429a      	cmp	r2, r3
 800340a:	d11f      	bne.n	800344c <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 800340c:	4924      	ldr	r1, [pc, #144]	; (80034a0 <chk_lock+0xd4>)
 800340e:	68fa      	ldr	r2, [r7, #12]
 8003410:	0013      	movs	r3, r2
 8003412:	005b      	lsls	r3, r3, #1
 8003414:	189b      	adds	r3, r3, r2
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	18cb      	adds	r3, r1, r3
 800341a:	3304      	adds	r3, #4
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	6879      	ldr	r1, [r7, #4]
 8003420:	2382      	movs	r3, #130	; 0x82
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	58cb      	ldr	r3, [r1, r3]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8003426:	429a      	cmp	r2, r3
 8003428:	d110      	bne.n	800344c <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 800342a:	491d      	ldr	r1, [pc, #116]	; (80034a0 <chk_lock+0xd4>)
 800342c:	68fa      	ldr	r2, [r7, #12]
 800342e:	0013      	movs	r3, r2
 8003430:	005b      	lsls	r3, r3, #1
 8003432:	189b      	adds	r3, r3, r2
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	18cb      	adds	r3, r1, r3
 8003438:	3308      	adds	r3, #8
 800343a:	881a      	ldrh	r2, [r3, #0]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	4919      	ldr	r1, [pc, #100]	; (80034a4 <chk_lock+0xd8>)
 8003440:	5a5b      	ldrh	r3, [r3, r1]
				Files[i].clu == dp->sclust &&
 8003442:	429a      	cmp	r2, r3
 8003444:	d102      	bne.n	800344c <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8003446:	e007      	b.n	8003458 <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 8003448:	2301      	movs	r3, #1
 800344a:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	3301      	adds	r3, #1
 8003450:	60fb      	str	r3, [r7, #12]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2b01      	cmp	r3, #1
 8003456:	d9c3      	bls.n	80033e0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2b02      	cmp	r3, #2
 800345c:	d109      	bne.n	8003472 <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d102      	bne.n	800346a <chk_lock+0x9e>
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	2b02      	cmp	r3, #2
 8003468:	d101      	bne.n	800346e <chk_lock+0xa2>
 800346a:	2300      	movs	r3, #0
 800346c:	e014      	b.n	8003498 <chk_lock+0xcc>
 800346e:	2312      	movs	r3, #18
 8003470:	e012      	b.n	8003498 <chk_lock+0xcc>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d10c      	bne.n	8003492 <chk_lock+0xc6>
 8003478:	4909      	ldr	r1, [pc, #36]	; (80034a0 <chk_lock+0xd4>)
 800347a:	68fa      	ldr	r2, [r7, #12]
 800347c:	0013      	movs	r3, r2
 800347e:	005b      	lsls	r3, r3, #1
 8003480:	189b      	adds	r3, r3, r2
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	18cb      	adds	r3, r1, r3
 8003486:	330a      	adds	r3, #10
 8003488:	881a      	ldrh	r2, [r3, #0]
 800348a:	2380      	movs	r3, #128	; 0x80
 800348c:	005b      	lsls	r3, r3, #1
 800348e:	429a      	cmp	r2, r3
 8003490:	d101      	bne.n	8003496 <chk_lock+0xca>
 8003492:	2310      	movs	r3, #16
 8003494:	e000      	b.n	8003498 <chk_lock+0xcc>
 8003496:	2300      	movs	r3, #0
}
 8003498:	0018      	movs	r0, r3
 800349a:	46bd      	mov	sp, r7
 800349c:	b004      	add	sp, #16
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	200000b8 	.word	0x200000b8
 80034a4:	00000206 	.word	0x00000206

080034a8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80034ae:	2300      	movs	r3, #0
 80034b0:	607b      	str	r3, [r7, #4]
 80034b2:	e002      	b.n	80034ba <enq_lock+0x12>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	3301      	adds	r3, #1
 80034b8:	607b      	str	r3, [r7, #4]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d808      	bhi.n	80034d2 <enq_lock+0x2a>
 80034c0:	4908      	ldr	r1, [pc, #32]	; (80034e4 <enq_lock+0x3c>)
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	0013      	movs	r3, r2
 80034c6:	005b      	lsls	r3, r3, #1
 80034c8:	189b      	adds	r3, r3, r2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	585b      	ldr	r3, [r3, r1]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d1f0      	bne.n	80034b4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	3b02      	subs	r3, #2
 80034d6:	1e5a      	subs	r2, r3, #1
 80034d8:	4193      	sbcs	r3, r2
 80034da:	b2db      	uxtb	r3, r3
}
 80034dc:	0018      	movs	r0, r3
 80034de:	46bd      	mov	sp, r7
 80034e0:	b002      	add	sp, #8
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	200000b8 	.word	0x200000b8

080034e8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80034f2:	2300      	movs	r3, #0
 80034f4:	60fb      	str	r3, [r7, #12]
 80034f6:	e02c      	b.n	8003552 <inc_lock+0x6a>
		if (Files[i].fs == dp->fs &&
 80034f8:	4955      	ldr	r1, [pc, #340]	; (8003650 <inc_lock+0x168>)
 80034fa:	68fa      	ldr	r2, [r7, #12]
 80034fc:	0013      	movs	r3, r2
 80034fe:	005b      	lsls	r3, r3, #1
 8003500:	189b      	adds	r3, r3, r2
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	585a      	ldr	r2, [r3, r1]
 8003506:	6879      	ldr	r1, [r7, #4]
 8003508:	2380      	movs	r3, #128	; 0x80
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	58cb      	ldr	r3, [r1, r3]
 800350e:	429a      	cmp	r2, r3
 8003510:	d11c      	bne.n	800354c <inc_lock+0x64>
			Files[i].clu == dp->sclust &&
 8003512:	494f      	ldr	r1, [pc, #316]	; (8003650 <inc_lock+0x168>)
 8003514:	68fa      	ldr	r2, [r7, #12]
 8003516:	0013      	movs	r3, r2
 8003518:	005b      	lsls	r3, r3, #1
 800351a:	189b      	adds	r3, r3, r2
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	18cb      	adds	r3, r1, r3
 8003520:	3304      	adds	r3, #4
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	6879      	ldr	r1, [r7, #4]
 8003526:	2382      	movs	r3, #130	; 0x82
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	58cb      	ldr	r3, [r1, r3]
		if (Files[i].fs == dp->fs &&
 800352c:	429a      	cmp	r2, r3
 800352e:	d10d      	bne.n	800354c <inc_lock+0x64>
			Files[i].idx == dp->index) break;
 8003530:	4947      	ldr	r1, [pc, #284]	; (8003650 <inc_lock+0x168>)
 8003532:	68fa      	ldr	r2, [r7, #12]
 8003534:	0013      	movs	r3, r2
 8003536:	005b      	lsls	r3, r3, #1
 8003538:	189b      	adds	r3, r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	18cb      	adds	r3, r1, r3
 800353e:	3308      	adds	r3, #8
 8003540:	881a      	ldrh	r2, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4943      	ldr	r1, [pc, #268]	; (8003654 <inc_lock+0x16c>)
 8003546:	5a5b      	ldrh	r3, [r3, r1]
			Files[i].clu == dp->sclust &&
 8003548:	429a      	cmp	r2, r3
 800354a:	d006      	beq.n	800355a <inc_lock+0x72>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	3301      	adds	r3, #1
 8003550:	60fb      	str	r3, [r7, #12]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2b01      	cmp	r3, #1
 8003556:	d9cf      	bls.n	80034f8 <inc_lock+0x10>
 8003558:	e000      	b.n	800355c <inc_lock+0x74>
			Files[i].idx == dp->index) break;
 800355a:	46c0      	nop			; (mov r8, r8)
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2b02      	cmp	r3, #2
 8003560:	d145      	bne.n	80035ee <inc_lock+0x106>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003562:	2300      	movs	r3, #0
 8003564:	60fb      	str	r3, [r7, #12]
 8003566:	e002      	b.n	800356e <inc_lock+0x86>
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	3301      	adds	r3, #1
 800356c:	60fb      	str	r3, [r7, #12]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2b01      	cmp	r3, #1
 8003572:	d808      	bhi.n	8003586 <inc_lock+0x9e>
 8003574:	4936      	ldr	r1, [pc, #216]	; (8003650 <inc_lock+0x168>)
 8003576:	68fa      	ldr	r2, [r7, #12]
 8003578:	0013      	movs	r3, r2
 800357a:	005b      	lsls	r3, r3, #1
 800357c:	189b      	adds	r3, r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	585b      	ldr	r3, [r3, r1]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1f0      	bne.n	8003568 <inc_lock+0x80>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2b02      	cmp	r3, #2
 800358a:	d101      	bne.n	8003590 <inc_lock+0xa8>
 800358c:	2300      	movs	r3, #0
 800358e:	e05a      	b.n	8003646 <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	2380      	movs	r3, #128	; 0x80
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	58d0      	ldr	r0, [r2, r3]
 8003598:	492d      	ldr	r1, [pc, #180]	; (8003650 <inc_lock+0x168>)
 800359a:	68fa      	ldr	r2, [r7, #12]
 800359c:	0013      	movs	r3, r2
 800359e:	005b      	lsls	r3, r3, #1
 80035a0:	189b      	adds	r3, r3, r2
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	5058      	str	r0, [r3, r1]
		Files[i].clu = dp->sclust;
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	2382      	movs	r3, #130	; 0x82
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	58d1      	ldr	r1, [r2, r3]
 80035ae:	4828      	ldr	r0, [pc, #160]	; (8003650 <inc_lock+0x168>)
 80035b0:	68fa      	ldr	r2, [r7, #12]
 80035b2:	0013      	movs	r3, r2
 80035b4:	005b      	lsls	r3, r3, #1
 80035b6:	189b      	adds	r3, r3, r2
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	18c3      	adds	r3, r0, r3
 80035bc:	3304      	adds	r3, #4
 80035be:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	4a24      	ldr	r2, [pc, #144]	; (8003654 <inc_lock+0x16c>)
 80035c4:	5a98      	ldrh	r0, [r3, r2]
 80035c6:	4922      	ldr	r1, [pc, #136]	; (8003650 <inc_lock+0x168>)
 80035c8:	68fa      	ldr	r2, [r7, #12]
 80035ca:	0013      	movs	r3, r2
 80035cc:	005b      	lsls	r3, r3, #1
 80035ce:	189b      	adds	r3, r3, r2
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	18cb      	adds	r3, r1, r3
 80035d4:	3308      	adds	r3, #8
 80035d6:	1c02      	adds	r2, r0, #0
 80035d8:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 80035da:	491d      	ldr	r1, [pc, #116]	; (8003650 <inc_lock+0x168>)
 80035dc:	68fa      	ldr	r2, [r7, #12]
 80035de:	0013      	movs	r3, r2
 80035e0:	005b      	lsls	r3, r3, #1
 80035e2:	189b      	adds	r3, r3, r2
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	18cb      	adds	r3, r1, r3
 80035e8:	330a      	adds	r3, #10
 80035ea:	2200      	movs	r2, #0
 80035ec:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d00c      	beq.n	800360e <inc_lock+0x126>
 80035f4:	4916      	ldr	r1, [pc, #88]	; (8003650 <inc_lock+0x168>)
 80035f6:	68fa      	ldr	r2, [r7, #12]
 80035f8:	0013      	movs	r3, r2
 80035fa:	005b      	lsls	r3, r3, #1
 80035fc:	189b      	adds	r3, r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	18cb      	adds	r3, r1, r3
 8003602:	330a      	adds	r3, #10
 8003604:	881b      	ldrh	r3, [r3, #0]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d001      	beq.n	800360e <inc_lock+0x126>
 800360a:	2300      	movs	r3, #0
 800360c:	e01b      	b.n	8003646 <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d10b      	bne.n	800362c <inc_lock+0x144>
 8003614:	490e      	ldr	r1, [pc, #56]	; (8003650 <inc_lock+0x168>)
 8003616:	68fa      	ldr	r2, [r7, #12]
 8003618:	0013      	movs	r3, r2
 800361a:	005b      	lsls	r3, r3, #1
 800361c:	189b      	adds	r3, r3, r2
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	18cb      	adds	r3, r1, r3
 8003622:	330a      	adds	r3, #10
 8003624:	881b      	ldrh	r3, [r3, #0]
 8003626:	3301      	adds	r3, #1
 8003628:	b29a      	uxth	r2, r3
 800362a:	e001      	b.n	8003630 <inc_lock+0x148>
 800362c:	2380      	movs	r3, #128	; 0x80
 800362e:	005a      	lsls	r2, r3, #1
 8003630:	4807      	ldr	r0, [pc, #28]	; (8003650 <inc_lock+0x168>)
 8003632:	68f9      	ldr	r1, [r7, #12]
 8003634:	000b      	movs	r3, r1
 8003636:	005b      	lsls	r3, r3, #1
 8003638:	185b      	adds	r3, r3, r1
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	18c3      	adds	r3, r0, r3
 800363e:	330a      	adds	r3, #10
 8003640:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	3301      	adds	r3, #1
}
 8003646:	0018      	movs	r0, r3
 8003648:	46bd      	mov	sp, r7
 800364a:	b004      	add	sp, #16
 800364c:	bd80      	pop	{r7, pc}
 800364e:	46c0      	nop			; (mov r8, r8)
 8003650:	200000b8 	.word	0x200000b8
 8003654:	00000206 	.word	0x00000206

08003658 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8003658:	b590      	push	{r4, r7, lr}
 800365a:	b085      	sub	sp, #20
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	3b01      	subs	r3, #1
 8003664:	607b      	str	r3, [r7, #4]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2b01      	cmp	r3, #1
 800366a:	d83d      	bhi.n	80036e8 <dec_lock+0x90>
		n = Files[i].ctr;
 800366c:	240e      	movs	r4, #14
 800366e:	1939      	adds	r1, r7, r4
 8003670:	4823      	ldr	r0, [pc, #140]	; (8003700 <dec_lock+0xa8>)
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	0013      	movs	r3, r2
 8003676:	005b      	lsls	r3, r3, #1
 8003678:	189b      	adds	r3, r3, r2
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	18c3      	adds	r3, r0, r3
 800367e:	330a      	adds	r3, #10
 8003680:	881b      	ldrh	r3, [r3, #0]
 8003682:	800b      	strh	r3, [r1, #0]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8003684:	193b      	adds	r3, r7, r4
 8003686:	881a      	ldrh	r2, [r3, #0]
 8003688:	2380      	movs	r3, #128	; 0x80
 800368a:	005b      	lsls	r3, r3, #1
 800368c:	429a      	cmp	r2, r3
 800368e:	d103      	bne.n	8003698 <dec_lock+0x40>
 8003690:	230e      	movs	r3, #14
 8003692:	18fb      	adds	r3, r7, r3
 8003694:	2200      	movs	r2, #0
 8003696:	801a      	strh	r2, [r3, #0]
		if (n) n--;					/* Decrement read mode open count */
 8003698:	230e      	movs	r3, #14
 800369a:	18fb      	adds	r3, r7, r3
 800369c:	881b      	ldrh	r3, [r3, #0]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d005      	beq.n	80036ae <dec_lock+0x56>
 80036a2:	210e      	movs	r1, #14
 80036a4:	187b      	adds	r3, r7, r1
 80036a6:	881a      	ldrh	r2, [r3, #0]
 80036a8:	187b      	adds	r3, r7, r1
 80036aa:	3a01      	subs	r2, #1
 80036ac:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = n;
 80036ae:	4914      	ldr	r1, [pc, #80]	; (8003700 <dec_lock+0xa8>)
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	0013      	movs	r3, r2
 80036b4:	005b      	lsls	r3, r3, #1
 80036b6:	189b      	adds	r3, r3, r2
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	18cb      	adds	r3, r1, r3
 80036bc:	330a      	adds	r3, #10
 80036be:	210e      	movs	r1, #14
 80036c0:	187a      	adds	r2, r7, r1
 80036c2:	8812      	ldrh	r2, [r2, #0]
 80036c4:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80036c6:	187b      	adds	r3, r7, r1
 80036c8:	881b      	ldrh	r3, [r3, #0]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d107      	bne.n	80036de <dec_lock+0x86>
 80036ce:	490c      	ldr	r1, [pc, #48]	; (8003700 <dec_lock+0xa8>)
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	0013      	movs	r3, r2
 80036d4:	005b      	lsls	r3, r3, #1
 80036d6:	189b      	adds	r3, r3, r2
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	2200      	movs	r2, #0
 80036dc:	505a      	str	r2, [r3, r1]
		res = FR_OK;
 80036de:	230d      	movs	r3, #13
 80036e0:	18fb      	adds	r3, r7, r3
 80036e2:	2200      	movs	r2, #0
 80036e4:	701a      	strb	r2, [r3, #0]
 80036e6:	e003      	b.n	80036f0 <dec_lock+0x98>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80036e8:	230d      	movs	r3, #13
 80036ea:	18fb      	adds	r3, r7, r3
 80036ec:	2202      	movs	r2, #2
 80036ee:	701a      	strb	r2, [r3, #0]
	}
	return res;
 80036f0:	230d      	movs	r3, #13
 80036f2:	18fb      	adds	r3, r7, r3
 80036f4:	781b      	ldrb	r3, [r3, #0]
}
 80036f6:	0018      	movs	r0, r3
 80036f8:	46bd      	mov	sp, r7
 80036fa:	b005      	add	sp, #20
 80036fc:	bd90      	pop	{r4, r7, pc}
 80036fe:	46c0      	nop			; (mov r8, r8)
 8003700:	200000b8 	.word	0x200000b8

08003704 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800370c:	2300      	movs	r3, #0
 800370e:	60fb      	str	r3, [r7, #12]
 8003710:	e014      	b.n	800373c <clear_lock+0x38>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003712:	490e      	ldr	r1, [pc, #56]	; (800374c <clear_lock+0x48>)
 8003714:	68fa      	ldr	r2, [r7, #12]
 8003716:	0013      	movs	r3, r2
 8003718:	005b      	lsls	r3, r3, #1
 800371a:	189b      	adds	r3, r3, r2
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	585b      	ldr	r3, [r3, r1]
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	429a      	cmp	r2, r3
 8003724:	d107      	bne.n	8003736 <clear_lock+0x32>
 8003726:	4909      	ldr	r1, [pc, #36]	; (800374c <clear_lock+0x48>)
 8003728:	68fa      	ldr	r2, [r7, #12]
 800372a:	0013      	movs	r3, r2
 800372c:	005b      	lsls	r3, r3, #1
 800372e:	189b      	adds	r3, r3, r2
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	2200      	movs	r2, #0
 8003734:	505a      	str	r2, [r3, r1]
	for (i = 0; i < _FS_LOCK; i++) {
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	3301      	adds	r3, #1
 800373a:	60fb      	str	r3, [r7, #12]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2b01      	cmp	r3, #1
 8003740:	d9e7      	bls.n	8003712 <clear_lock+0xe>
	}
}
 8003742:	46c0      	nop			; (mov r8, r8)
 8003744:	46bd      	mov	sp, r7
 8003746:	b004      	add	sp, #16
 8003748:	bd80      	pop	{r7, pc}
 800374a:	46c0      	nop			; (mov r8, r8)
 800374c:	200000b8 	.word	0x200000b8

08003750 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b086      	sub	sp, #24
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8003758:	230f      	movs	r3, #15
 800375a:	18fb      	adds	r3, r7, r3
 800375c:	2200      	movs	r2, #0
 800375e:	701a      	strb	r2, [r3, #0]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	2381      	movs	r3, #129	; 0x81
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	5cd3      	ldrb	r3, [r2, r3]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d03e      	beq.n	80037ea <sync_window+0x9a>
		wsect = fs->winsect;	/* Current sector number */
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	238b      	movs	r3, #139	; 0x8b
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	58d3      	ldr	r3, [r2, r3]
 8003774:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a1f      	ldr	r2, [pc, #124]	; (80037f8 <sync_window+0xa8>)
 800377a:	5c98      	ldrb	r0, [r3, r2]
 800377c:	6879      	ldr	r1, [r7, #4]
 800377e:	697a      	ldr	r2, [r7, #20]
 8003780:	2301      	movs	r3, #1
 8003782:	f7ff fd61 	bl	8003248 <disk_write>
 8003786:	1e03      	subs	r3, r0, #0
 8003788:	d004      	beq.n	8003794 <sync_window+0x44>
			res = FR_DISK_ERR;
 800378a:	230f      	movs	r3, #15
 800378c:	18fb      	adds	r3, r7, r3
 800378e:	2201      	movs	r2, #1
 8003790:	701a      	strb	r2, [r3, #0]
 8003792:	e02a      	b.n	80037ea <sync_window+0x9a>
		} else {
			fs->wflag = 0;
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	2381      	movs	r3, #129	; 0x81
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	2100      	movs	r1, #0
 800379c:	54d1      	strb	r1, [r2, r3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	2388      	movs	r3, #136	; 0x88
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	58d3      	ldr	r3, [r2, r3]
 80037a6:	697a      	ldr	r2, [r7, #20]
 80037a8:	1ad2      	subs	r2, r2, r3
 80037aa:	6879      	ldr	r1, [r7, #4]
 80037ac:	2386      	movs	r3, #134	; 0x86
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	58cb      	ldr	r3, [r1, r3]
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d219      	bcs.n	80037ea <sync_window+0x9a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a10      	ldr	r2, [pc, #64]	; (80037fc <sync_window+0xac>)
 80037ba:	5c9b      	ldrb	r3, [r3, r2]
 80037bc:	613b      	str	r3, [r7, #16]
 80037be:	e011      	b.n	80037e4 <sync_window+0x94>
					wsect += fs->fsize;
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	2386      	movs	r3, #134	; 0x86
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	58d3      	ldr	r3, [r2, r3]
 80037c8:	697a      	ldr	r2, [r7, #20]
 80037ca:	18d3      	adds	r3, r2, r3
 80037cc:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a09      	ldr	r2, [pc, #36]	; (80037f8 <sync_window+0xa8>)
 80037d2:	5c98      	ldrb	r0, [r3, r2]
 80037d4:	6879      	ldr	r1, [r7, #4]
 80037d6:	697a      	ldr	r2, [r7, #20]
 80037d8:	2301      	movs	r3, #1
 80037da:	f7ff fd35 	bl	8003248 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	3b01      	subs	r3, #1
 80037e2:	613b      	str	r3, [r7, #16]
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d8ea      	bhi.n	80037c0 <sync_window+0x70>
				}
			}
		}
	}
	return res;
 80037ea:	230f      	movs	r3, #15
 80037ec:	18fb      	adds	r3, r7, r3
 80037ee:	781b      	ldrb	r3, [r3, #0]
}
 80037f0:	0018      	movs	r0, r3
 80037f2:	46bd      	mov	sp, r7
 80037f4:	b006      	add	sp, #24
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	00000201 	.word	0x00000201
 80037fc:	00000203 	.word	0x00000203

08003800 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8003800:	b5b0      	push	{r4, r5, r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800380a:	230f      	movs	r3, #15
 800380c:	18fb      	adds	r3, r7, r3
 800380e:	2200      	movs	r2, #0
 8003810:	701a      	strb	r2, [r3, #0]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	238b      	movs	r3, #139	; 0x8b
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	58d3      	ldr	r3, [r2, r3]
 800381a:	683a      	ldr	r2, [r7, #0]
 800381c:	429a      	cmp	r2, r3
 800381e:	d021      	beq.n	8003864 <move_window+0x64>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8003820:	250f      	movs	r5, #15
 8003822:	197c      	adds	r4, r7, r5
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	0018      	movs	r0, r3
 8003828:	f7ff ff92 	bl	8003750 <sync_window>
 800382c:	0003      	movs	r3, r0
 800382e:	7023      	strb	r3, [r4, #0]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8003830:	197b      	adds	r3, r7, r5
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d115      	bne.n	8003864 <move_window+0x64>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	4a0e      	ldr	r2, [pc, #56]	; (8003874 <move_window+0x74>)
 800383c:	5c98      	ldrb	r0, [r3, r2]
 800383e:	6879      	ldr	r1, [r7, #4]
 8003840:	683a      	ldr	r2, [r7, #0]
 8003842:	2301      	movs	r3, #1
 8003844:	f7ff fcd8 	bl	80031f8 <disk_read>
 8003848:	1e03      	subs	r3, r0, #0
 800384a:	d006      	beq.n	800385a <move_window+0x5a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800384c:	2301      	movs	r3, #1
 800384e:	425b      	negs	r3, r3
 8003850:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8003852:	230f      	movs	r3, #15
 8003854:	18fb      	adds	r3, r7, r3
 8003856:	2201      	movs	r2, #1
 8003858:	701a      	strb	r2, [r3, #0]
			}
			fs->winsect = sector;
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	238b      	movs	r3, #139	; 0x8b
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	6839      	ldr	r1, [r7, #0]
 8003862:	50d1      	str	r1, [r2, r3]
		}
	}
	return res;
 8003864:	230f      	movs	r3, #15
 8003866:	18fb      	adds	r3, r7, r3
 8003868:	781b      	ldrb	r3, [r3, #0]
}
 800386a:	0018      	movs	r0, r3
 800386c:	46bd      	mov	sp, r7
 800386e:	b004      	add	sp, #16
 8003870:	bdb0      	pop	{r4, r5, r7, pc}
 8003872:	46c0      	nop			; (mov r8, r8)
 8003874:	00000201 	.word	0x00000201

08003878 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8003878:	b5b0      	push	{r4, r5, r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8003880:	250f      	movs	r5, #15
 8003882:	197c      	adds	r4, r7, r5
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	0018      	movs	r0, r3
 8003888:	f7ff ff62 	bl	8003750 <sync_window>
 800388c:	0003      	movs	r3, r0
 800388e:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8003890:	197b      	adds	r3, r7, r5
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d000      	beq.n	800389a <sync_fs+0x22>
 8003898:	e0b4      	b.n	8003a04 <sync_fs+0x18c>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	2380      	movs	r3, #128	; 0x80
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	5cd3      	ldrb	r3, [r2, r3]
 80038a2:	2b03      	cmp	r3, #3
 80038a4:	d000      	beq.n	80038a8 <sync_fs+0x30>
 80038a6:	e09f      	b.n	80039e8 <sync_fs+0x170>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4a5a      	ldr	r2, [pc, #360]	; (8003a14 <sync_fs+0x19c>)
 80038ac:	5c9b      	ldrb	r3, [r3, r2]
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d000      	beq.n	80038b4 <sync_fs+0x3c>
 80038b2:	e099      	b.n	80039e8 <sync_fs+0x170>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	2380      	movs	r3, #128	; 0x80
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	001a      	movs	r2, r3
 80038bc:	2100      	movs	r1, #0
 80038be:	f7ff fd2f 	bl	8003320 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	23ff      	movs	r3, #255	; 0xff
 80038c6:	005b      	lsls	r3, r3, #1
 80038c8:	2155      	movs	r1, #85	; 0x55
 80038ca:	54d1      	strb	r1, [r2, r3]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4a52      	ldr	r2, [pc, #328]	; (8003a18 <sync_fs+0x1a0>)
 80038d0:	21aa      	movs	r1, #170	; 0xaa
 80038d2:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2252      	movs	r2, #82	; 0x52
 80038d8:	701a      	strb	r2, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2252      	movs	r2, #82	; 0x52
 80038de:	705a      	strb	r2, [r3, #1]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2261      	movs	r2, #97	; 0x61
 80038e4:	709a      	strb	r2, [r3, #2]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2241      	movs	r2, #65	; 0x41
 80038ea:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	23f2      	movs	r3, #242	; 0xf2
 80038f0:	005b      	lsls	r3, r3, #1
 80038f2:	2172      	movs	r1, #114	; 0x72
 80038f4:	54d1      	strb	r1, [r2, r3]
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	23e6      	movs	r3, #230	; 0xe6
 80038fa:	33ff      	adds	r3, #255	; 0xff
 80038fc:	2172      	movs	r1, #114	; 0x72
 80038fe:	54d1      	strb	r1, [r2, r3]
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	23f3      	movs	r3, #243	; 0xf3
 8003904:	005b      	lsls	r3, r3, #1
 8003906:	2141      	movs	r1, #65	; 0x41
 8003908:	54d1      	strb	r1, [r2, r3]
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	23e8      	movs	r3, #232	; 0xe8
 800390e:	33ff      	adds	r3, #255	; 0xff
 8003910:	2161      	movs	r1, #97	; 0x61
 8003912:	54d1      	strb	r1, [r2, r3]
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	2384      	movs	r3, #132	; 0x84
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	58d3      	ldr	r3, [r2, r3]
 800391c:	b2d9      	uxtb	r1, r3
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	23f4      	movs	r3, #244	; 0xf4
 8003922:	005b      	lsls	r3, r3, #1
 8003924:	54d1      	strb	r1, [r2, r3]
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	2384      	movs	r3, #132	; 0x84
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	58d3      	ldr	r3, [r2, r3]
 800392e:	b29b      	uxth	r3, r3
 8003930:	0a1b      	lsrs	r3, r3, #8
 8003932:	b29b      	uxth	r3, r3
 8003934:	b2d9      	uxtb	r1, r3
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	23ea      	movs	r3, #234	; 0xea
 800393a:	33ff      	adds	r3, #255	; 0xff
 800393c:	54d1      	strb	r1, [r2, r3]
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	2384      	movs	r3, #132	; 0x84
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	58d3      	ldr	r3, [r2, r3]
 8003946:	0c1b      	lsrs	r3, r3, #16
 8003948:	b2d9      	uxtb	r1, r3
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	23f5      	movs	r3, #245	; 0xf5
 800394e:	005b      	lsls	r3, r3, #1
 8003950:	54d1      	strb	r1, [r2, r3]
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	2384      	movs	r3, #132	; 0x84
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	58d3      	ldr	r3, [r2, r3]
 800395a:	0e1b      	lsrs	r3, r3, #24
 800395c:	b2d9      	uxtb	r1, r3
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	23ec      	movs	r3, #236	; 0xec
 8003962:	33ff      	adds	r3, #255	; 0xff
 8003964:	54d1      	strb	r1, [r2, r3]
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	2383      	movs	r3, #131	; 0x83
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	58d3      	ldr	r3, [r2, r3]
 800396e:	b2d9      	uxtb	r1, r3
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	23f6      	movs	r3, #246	; 0xf6
 8003974:	005b      	lsls	r3, r3, #1
 8003976:	54d1      	strb	r1, [r2, r3]
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	2383      	movs	r3, #131	; 0x83
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	58d3      	ldr	r3, [r2, r3]
 8003980:	b29b      	uxth	r3, r3
 8003982:	0a1b      	lsrs	r3, r3, #8
 8003984:	b29b      	uxth	r3, r3
 8003986:	b2d9      	uxtb	r1, r3
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	23ee      	movs	r3, #238	; 0xee
 800398c:	33ff      	adds	r3, #255	; 0xff
 800398e:	54d1      	strb	r1, [r2, r3]
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	2383      	movs	r3, #131	; 0x83
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	58d3      	ldr	r3, [r2, r3]
 8003998:	0c1b      	lsrs	r3, r3, #16
 800399a:	b2d9      	uxtb	r1, r3
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	23f7      	movs	r3, #247	; 0xf7
 80039a0:	005b      	lsls	r3, r3, #1
 80039a2:	54d1      	strb	r1, [r2, r3]
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	2383      	movs	r3, #131	; 0x83
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	58d3      	ldr	r3, [r2, r3]
 80039ac:	0e1b      	lsrs	r3, r3, #24
 80039ae:	b2d9      	uxtb	r1, r3
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	23f0      	movs	r3, #240	; 0xf0
 80039b4:	33ff      	adds	r3, #255	; 0xff
 80039b6:	54d1      	strb	r1, [r2, r3]
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	2387      	movs	r3, #135	; 0x87
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	58d3      	ldr	r3, [r2, r3]
 80039c0:	1c59      	adds	r1, r3, #1
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	238b      	movs	r3, #139	; 0x8b
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	50d1      	str	r1, [r2, r3]
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a13      	ldr	r2, [pc, #76]	; (8003a1c <sync_fs+0x1a4>)
 80039ce:	5c98      	ldrb	r0, [r3, r2]
 80039d0:	6879      	ldr	r1, [r7, #4]
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	238b      	movs	r3, #139	; 0x8b
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	58d2      	ldr	r2, [r2, r3]
 80039da:	2301      	movs	r3, #1
 80039dc:	f7ff fc34 	bl	8003248 <disk_write>
			fs->fsi_flag = 0;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	4a0c      	ldr	r2, [pc, #48]	; (8003a14 <sync_fs+0x19c>)
 80039e4:	2100      	movs	r1, #0
 80039e6:	5499      	strb	r1, [r3, r2]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	4a0c      	ldr	r2, [pc, #48]	; (8003a1c <sync_fs+0x1a4>)
 80039ec:	5c9b      	ldrb	r3, [r3, r2]
 80039ee:	2200      	movs	r2, #0
 80039f0:	2100      	movs	r1, #0
 80039f2:	0018      	movs	r0, r3
 80039f4:	f7ff fc50 	bl	8003298 <disk_ioctl>
 80039f8:	1e03      	subs	r3, r0, #0
 80039fa:	d003      	beq.n	8003a04 <sync_fs+0x18c>
			res = FR_DISK_ERR;
 80039fc:	230f      	movs	r3, #15
 80039fe:	18fb      	adds	r3, r7, r3
 8003a00:	2201      	movs	r2, #1
 8003a02:	701a      	strb	r2, [r3, #0]
	}

	return res;
 8003a04:	230f      	movs	r3, #15
 8003a06:	18fb      	adds	r3, r7, r3
 8003a08:	781b      	ldrb	r3, [r3, #0]
}
 8003a0a:	0018      	movs	r0, r3
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	b004      	add	sp, #16
 8003a10:	bdb0      	pop	{r4, r5, r7, pc}
 8003a12:	46c0      	nop			; (mov r8, r8)
 8003a14:	00000205 	.word	0x00000205
 8003a18:	000001ff 	.word	0x000001ff
 8003a1c:	00000201 	.word	0x00000201

08003a20 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	3b02      	subs	r3, #2
 8003a2e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	2385      	movs	r3, #133	; 0x85
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	58d3      	ldr	r3, [r2, r3]
 8003a38:	3b02      	subs	r3, #2
 8003a3a:	683a      	ldr	r2, [r7, #0]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d301      	bcc.n	8003a44 <clust2sect+0x24>
 8003a40:	2300      	movs	r3, #0
 8003a42:	e00a      	b.n	8003a5a <clust2sect+0x3a>
	return clst * fs->csize + fs->database;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4a07      	ldr	r2, [pc, #28]	; (8003a64 <clust2sect+0x44>)
 8003a48:	5c9b      	ldrb	r3, [r3, r2]
 8003a4a:	001a      	movs	r2, r3
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	435a      	muls	r2, r3
 8003a50:	6879      	ldr	r1, [r7, #4]
 8003a52:	238a      	movs	r3, #138	; 0x8a
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	58cb      	ldr	r3, [r1, r3]
 8003a58:	18d3      	adds	r3, r2, r3
}
 8003a5a:	0018      	movs	r0, r3
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	b002      	add	sp, #8
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	46c0      	nop			; (mov r8, r8)
 8003a64:	00000202 	.word	0x00000202

08003a68 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b086      	sub	sp, #24
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d906      	bls.n	8003a86 <get_fat+0x1e>
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	2385      	movs	r3, #133	; 0x85
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	58d3      	ldr	r3, [r2, r3]
 8003a80:	683a      	ldr	r2, [r7, #0]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d302      	bcc.n	8003a8c <get_fat+0x24>
		val = 1;	/* Internal error */
 8003a86:	2301      	movs	r3, #1
 8003a88:	617b      	str	r3, [r7, #20]
 8003a8a:	e0a7      	b.n	8003bdc <get_fat+0x174>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	425b      	negs	r3, r3
 8003a90:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	2380      	movs	r3, #128	; 0x80
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	5cd3      	ldrb	r3, [r2, r3]
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d046      	beq.n	8003b2c <get_fat+0xc4>
 8003a9e:	2b03      	cmp	r3, #3
 8003aa0:	d067      	beq.n	8003b72 <get_fat+0x10a>
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d000      	beq.n	8003aa8 <get_fat+0x40>
 8003aa6:	e08f      	b.n	8003bc8 <get_fat+0x160>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	60fb      	str	r3, [r7, #12]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	085b      	lsrs	r3, r3, #1
 8003ab0:	68fa      	ldr	r2, [r7, #12]
 8003ab2:	18d3      	adds	r3, r2, r3
 8003ab4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	2388      	movs	r3, #136	; 0x88
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	58d2      	ldr	r2, [r2, r3]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	0a5b      	lsrs	r3, r3, #9
 8003ac2:	18d2      	adds	r2, r2, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	0011      	movs	r1, r2
 8003ac8:	0018      	movs	r0, r3
 8003aca:	f7ff fe99 	bl	8003800 <move_window>
 8003ace:	1e03      	subs	r3, r0, #0
 8003ad0:	d000      	beq.n	8003ad4 <get_fat+0x6c>
 8003ad2:	e07c      	b.n	8003bce <get_fat+0x166>
			wc = fs->win.d8[bc++ % SS(fs)];
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	1c5a      	adds	r2, r3, #1
 8003ad8:	60fa      	str	r2, [r7, #12]
 8003ada:	05db      	lsls	r3, r3, #23
 8003adc:	0ddb      	lsrs	r3, r3, #23
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	5cd3      	ldrb	r3, [r2, r3]
 8003ae2:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	2388      	movs	r3, #136	; 0x88
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	58d2      	ldr	r2, [r2, r3]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	0a5b      	lsrs	r3, r3, #9
 8003af0:	18d2      	adds	r2, r2, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	0011      	movs	r1, r2
 8003af6:	0018      	movs	r0, r3
 8003af8:	f7ff fe82 	bl	8003800 <move_window>
 8003afc:	1e03      	subs	r3, r0, #0
 8003afe:	d168      	bne.n	8003bd2 <get_fat+0x16a>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	05db      	lsls	r3, r3, #23
 8003b04:	0ddb      	lsrs	r3, r3, #23
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	5cd3      	ldrb	r3, [r2, r3]
 8003b0a:	021b      	lsls	r3, r3, #8
 8003b0c:	001a      	movs	r2, r3
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	2201      	movs	r2, #1
 8003b18:	4013      	ands	r3, r2
 8003b1a:	d002      	beq.n	8003b22 <get_fat+0xba>
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	091b      	lsrs	r3, r3, #4
 8003b20:	e002      	b.n	8003b28 <get_fat+0xc0>
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	051b      	lsls	r3, r3, #20
 8003b26:	0d1b      	lsrs	r3, r3, #20
 8003b28:	617b      	str	r3, [r7, #20]
			break;
 8003b2a:	e057      	b.n	8003bdc <get_fat+0x174>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	2388      	movs	r3, #136	; 0x88
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	58d2      	ldr	r2, [r2, r3]
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	0a1b      	lsrs	r3, r3, #8
 8003b38:	18d2      	adds	r2, r2, r3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	0011      	movs	r1, r2
 8003b3e:	0018      	movs	r0, r3
 8003b40:	f7ff fe5e 	bl	8003800 <move_window>
 8003b44:	1e03      	subs	r3, r0, #0
 8003b46:	d146      	bne.n	8003bd6 <get_fat+0x16e>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	005a      	lsls	r2, r3, #1
 8003b4c:	23ff      	movs	r3, #255	; 0xff
 8003b4e:	005b      	lsls	r3, r3, #1
 8003b50:	4013      	ands	r3, r2
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	18d3      	adds	r3, r2, r3
 8003b56:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	021b      	lsls	r3, r3, #8
 8003b60:	b21a      	sxth	r2, r3
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	b21b      	sxth	r3, r3
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	b21b      	sxth	r3, r3
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	617b      	str	r3, [r7, #20]
			break;
 8003b70:	e034      	b.n	8003bdc <get_fat+0x174>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	2388      	movs	r3, #136	; 0x88
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	58d2      	ldr	r2, [r2, r3]
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	09db      	lsrs	r3, r3, #7
 8003b7e:	18d2      	adds	r2, r2, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	0011      	movs	r1, r2
 8003b84:	0018      	movs	r0, r3
 8003b86:	f7ff fe3b 	bl	8003800 <move_window>
 8003b8a:	1e03      	subs	r3, r0, #0
 8003b8c:	d125      	bne.n	8003bda <get_fat+0x172>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	009a      	lsls	r2, r3, #2
 8003b92:	23fe      	movs	r3, #254	; 0xfe
 8003b94:	005b      	lsls	r3, r3, #1
 8003b96:	4013      	ands	r3, r2
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	18d3      	adds	r3, r2, r3
 8003b9c:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	3303      	adds	r3, #3
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	061a      	lsls	r2, r3, #24
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	3302      	adds	r3, #2
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	041b      	lsls	r3, r3, #16
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	693a      	ldr	r2, [r7, #16]
 8003bb2:	3201      	adds	r2, #1
 8003bb4:	7812      	ldrb	r2, [r2, #0]
 8003bb6:	0212      	lsls	r2, r2, #8
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	693a      	ldr	r2, [r7, #16]
 8003bbc:	7812      	ldrb	r2, [r2, #0]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	011b      	lsls	r3, r3, #4
 8003bc2:	091b      	lsrs	r3, r3, #4
 8003bc4:	617b      	str	r3, [r7, #20]
			break;
 8003bc6:	e009      	b.n	8003bdc <get_fat+0x174>

		default:
			val = 1;	/* Internal error */
 8003bc8:	2301      	movs	r3, #1
 8003bca:	617b      	str	r3, [r7, #20]
 8003bcc:	e006      	b.n	8003bdc <get_fat+0x174>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003bce:	46c0      	nop			; (mov r8, r8)
 8003bd0:	e004      	b.n	8003bdc <get_fat+0x174>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003bd2:	46c0      	nop			; (mov r8, r8)
 8003bd4:	e002      	b.n	8003bdc <get_fat+0x174>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003bd6:	46c0      	nop			; (mov r8, r8)
 8003bd8:	e000      	b.n	8003bdc <get_fat+0x174>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003bda:	46c0      	nop			; (mov r8, r8)
		}
	}

	return val;
 8003bdc:	697b      	ldr	r3, [r7, #20]
}
 8003bde:	0018      	movs	r0, r3
 8003be0:	46bd      	mov	sp, r7
 8003be2:	b006      	add	sp, #24
 8003be4:	bd80      	pop	{r7, pc}

08003be6 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8003be6:	b5b0      	push	{r4, r5, r7, lr}
 8003be8:	b088      	sub	sp, #32
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	60f8      	str	r0, [r7, #12]
 8003bee:	60b9      	str	r1, [r7, #8]
 8003bf0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d906      	bls.n	8003c06 <put_fat+0x20>
 8003bf8:	68fa      	ldr	r2, [r7, #12]
 8003bfa:	2385      	movs	r3, #133	; 0x85
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	58d3      	ldr	r3, [r2, r3]
 8003c00:	68ba      	ldr	r2, [r7, #8]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d304      	bcc.n	8003c10 <put_fat+0x2a>
		res = FR_INT_ERR;
 8003c06:	231f      	movs	r3, #31
 8003c08:	18fb      	adds	r3, r7, r3
 8003c0a:	2202      	movs	r2, #2
 8003c0c:	701a      	strb	r2, [r3, #0]
 8003c0e:	e10f      	b.n	8003e30 <put_fat+0x24a>

	} else {
		switch (fs->fs_type) {
 8003c10:	68fa      	ldr	r2, [r7, #12]
 8003c12:	2380      	movs	r3, #128	; 0x80
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	5cd3      	ldrb	r3, [r2, r3]
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	d100      	bne.n	8003c1e <put_fat+0x38>
 8003c1c:	e07e      	b.n	8003d1c <put_fat+0x136>
 8003c1e:	2b03      	cmp	r3, #3
 8003c20:	d100      	bne.n	8003c24 <put_fat+0x3e>
 8003c22:	e0a9      	b.n	8003d78 <put_fat+0x192>
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d000      	beq.n	8003c2a <put_fat+0x44>
 8003c28:	e0f6      	b.n	8003e18 <put_fat+0x232>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	617b      	str	r3, [r7, #20]
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	085b      	lsrs	r3, r3, #1
 8003c32:	697a      	ldr	r2, [r7, #20]
 8003c34:	18d3      	adds	r3, r2, r3
 8003c36:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003c38:	68fa      	ldr	r2, [r7, #12]
 8003c3a:	2388      	movs	r3, #136	; 0x88
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	58d2      	ldr	r2, [r2, r3]
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	0a5b      	lsrs	r3, r3, #9
 8003c44:	18d2      	adds	r2, r2, r3
 8003c46:	251f      	movs	r5, #31
 8003c48:	197c      	adds	r4, r7, r5
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	0011      	movs	r1, r2
 8003c4e:	0018      	movs	r0, r3
 8003c50:	f7ff fdd6 	bl	8003800 <move_window>
 8003c54:	0003      	movs	r3, r0
 8003c56:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8003c58:	197b      	adds	r3, r7, r5
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d000      	beq.n	8003c62 <put_fat+0x7c>
 8003c60:	e0df      	b.n	8003e22 <put_fat+0x23c>
			p = &fs->win.d8[bc++ % SS(fs)];
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	1c5a      	adds	r2, r3, #1
 8003c66:	617a      	str	r2, [r7, #20]
 8003c68:	05db      	lsls	r3, r3, #23
 8003c6a:	0ddb      	lsrs	r3, r3, #23
 8003c6c:	68fa      	ldr	r2, [r7, #12]
 8003c6e:	18d3      	adds	r3, r2, r3
 8003c70:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	2201      	movs	r2, #1
 8003c76:	4013      	ands	r3, r2
 8003c78:	d00d      	beq.n	8003c96 <put_fat+0xb0>
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	b25b      	sxtb	r3, r3
 8003c80:	220f      	movs	r2, #15
 8003c82:	4013      	ands	r3, r2
 8003c84:	b25a      	sxtb	r2, r3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	011b      	lsls	r3, r3, #4
 8003c8c:	b25b      	sxtb	r3, r3
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	b25b      	sxtb	r3, r3
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	e001      	b.n	8003c9a <put_fat+0xb4>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	69ba      	ldr	r2, [r7, #24]
 8003c9c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003c9e:	68fa      	ldr	r2, [r7, #12]
 8003ca0:	2381      	movs	r3, #129	; 0x81
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	2101      	movs	r1, #1
 8003ca6:	54d1      	strb	r1, [r2, r3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003ca8:	68fa      	ldr	r2, [r7, #12]
 8003caa:	2388      	movs	r3, #136	; 0x88
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	58d2      	ldr	r2, [r2, r3]
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	0a5b      	lsrs	r3, r3, #9
 8003cb4:	18d2      	adds	r2, r2, r3
 8003cb6:	251f      	movs	r5, #31
 8003cb8:	197c      	adds	r4, r7, r5
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	0011      	movs	r1, r2
 8003cbe:	0018      	movs	r0, r3
 8003cc0:	f7ff fd9e 	bl	8003800 <move_window>
 8003cc4:	0003      	movs	r3, r0
 8003cc6:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8003cc8:	197b      	adds	r3, r7, r5
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d000      	beq.n	8003cd2 <put_fat+0xec>
 8003cd0:	e0a9      	b.n	8003e26 <put_fat+0x240>
			p = &fs->win.d8[bc % SS(fs)];
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	05db      	lsls	r3, r3, #23
 8003cd6:	0ddb      	lsrs	r3, r3, #23
 8003cd8:	68fa      	ldr	r2, [r7, #12]
 8003cda:	18d3      	adds	r3, r2, r3
 8003cdc:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	d003      	beq.n	8003cee <put_fat+0x108>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	091b      	lsrs	r3, r3, #4
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	e00e      	b.n	8003d0c <put_fat+0x126>
 8003cee:	69bb      	ldr	r3, [r7, #24]
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	b25b      	sxtb	r3, r3
 8003cf4:	220f      	movs	r2, #15
 8003cf6:	4393      	bics	r3, r2
 8003cf8:	b25a      	sxtb	r2, r3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	0a1b      	lsrs	r3, r3, #8
 8003cfe:	b25b      	sxtb	r3, r3
 8003d00:	210f      	movs	r1, #15
 8003d02:	400b      	ands	r3, r1
 8003d04:	b25b      	sxtb	r3, r3
 8003d06:	4313      	orrs	r3, r2
 8003d08:	b25b      	sxtb	r3, r3
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	69ba      	ldr	r2, [r7, #24]
 8003d0e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003d10:	68fa      	ldr	r2, [r7, #12]
 8003d12:	2381      	movs	r3, #129	; 0x81
 8003d14:	009b      	lsls	r3, r3, #2
 8003d16:	2101      	movs	r1, #1
 8003d18:	54d1      	strb	r1, [r2, r3]
			break;
 8003d1a:	e089      	b.n	8003e30 <put_fat+0x24a>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8003d1c:	68fa      	ldr	r2, [r7, #12]
 8003d1e:	2388      	movs	r3, #136	; 0x88
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	58d2      	ldr	r2, [r2, r3]
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	0a1b      	lsrs	r3, r3, #8
 8003d28:	18d2      	adds	r2, r2, r3
 8003d2a:	251f      	movs	r5, #31
 8003d2c:	197c      	adds	r4, r7, r5
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	0011      	movs	r1, r2
 8003d32:	0018      	movs	r0, r3
 8003d34:	f7ff fd64 	bl	8003800 <move_window>
 8003d38:	0003      	movs	r3, r0
 8003d3a:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8003d3c:	197b      	adds	r3, r7, r5
 8003d3e:	781b      	ldrb	r3, [r3, #0]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d172      	bne.n	8003e2a <put_fat+0x244>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	005a      	lsls	r2, r3, #1
 8003d48:	23ff      	movs	r3, #255	; 0xff
 8003d4a:	005b      	lsls	r3, r3, #1
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	68fa      	ldr	r2, [r7, #12]
 8003d50:	18d3      	adds	r3, r2, r3
 8003d52:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	b2da      	uxtb	r2, r3
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	701a      	strb	r2, [r3, #0]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	0a1b      	lsrs	r3, r3, #8
 8003d62:	b29a      	uxth	r2, r3
 8003d64:	69bb      	ldr	r3, [r7, #24]
 8003d66:	3301      	adds	r3, #1
 8003d68:	b2d2      	uxtb	r2, r2
 8003d6a:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8003d6c:	68fa      	ldr	r2, [r7, #12]
 8003d6e:	2381      	movs	r3, #129	; 0x81
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	2101      	movs	r1, #1
 8003d74:	54d1      	strb	r1, [r2, r3]
			break;
 8003d76:	e05b      	b.n	8003e30 <put_fat+0x24a>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8003d78:	68fa      	ldr	r2, [r7, #12]
 8003d7a:	2388      	movs	r3, #136	; 0x88
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	58d2      	ldr	r2, [r2, r3]
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	09db      	lsrs	r3, r3, #7
 8003d84:	18d2      	adds	r2, r2, r3
 8003d86:	251f      	movs	r5, #31
 8003d88:	197c      	adds	r4, r7, r5
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	0011      	movs	r1, r2
 8003d8e:	0018      	movs	r0, r3
 8003d90:	f7ff fd36 	bl	8003800 <move_window>
 8003d94:	0003      	movs	r3, r0
 8003d96:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8003d98:	197b      	adds	r3, r7, r5
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d146      	bne.n	8003e2e <put_fat+0x248>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	009a      	lsls	r2, r3, #2
 8003da4:	23fe      	movs	r3, #254	; 0xfe
 8003da6:	005b      	lsls	r3, r3, #1
 8003da8:	4013      	ands	r3, r2
 8003daa:	68fa      	ldr	r2, [r7, #12]
 8003dac:	18d3      	adds	r3, r2, r3
 8003dae:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8003db0:	69bb      	ldr	r3, [r7, #24]
 8003db2:	3303      	adds	r3, #3
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	061a      	lsls	r2, r3, #24
 8003db8:	69bb      	ldr	r3, [r7, #24]
 8003dba:	3302      	adds	r3, #2
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	041b      	lsls	r3, r3, #16
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	69ba      	ldr	r2, [r7, #24]
 8003dc4:	3201      	adds	r2, #1
 8003dc6:	7812      	ldrb	r2, [r2, #0]
 8003dc8:	0212      	lsls	r2, r2, #8
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	69ba      	ldr	r2, [r7, #24]
 8003dce:	7812      	ldrb	r2, [r2, #0]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	0f1b      	lsrs	r3, r3, #28
 8003dd4:	071b      	lsls	r3, r3, #28
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	b2da      	uxtb	r2, r3
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	701a      	strb	r2, [r3, #0]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	0a1b      	lsrs	r3, r3, #8
 8003dea:	b29a      	uxth	r2, r3
 8003dec:	69bb      	ldr	r3, [r7, #24]
 8003dee:	3301      	adds	r3, #1
 8003df0:	b2d2      	uxtb	r2, r2
 8003df2:	701a      	strb	r2, [r3, #0]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	0c1a      	lsrs	r2, r3, #16
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	3302      	adds	r3, #2
 8003dfc:	b2d2      	uxtb	r2, r2
 8003dfe:	701a      	strb	r2, [r3, #0]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	0e1a      	lsrs	r2, r3, #24
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	3303      	adds	r3, #3
 8003e08:	b2d2      	uxtb	r2, r2
 8003e0a:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8003e0c:	68fa      	ldr	r2, [r7, #12]
 8003e0e:	2381      	movs	r3, #129	; 0x81
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	2101      	movs	r1, #1
 8003e14:	54d1      	strb	r1, [r2, r3]
			break;
 8003e16:	e00b      	b.n	8003e30 <put_fat+0x24a>

		default :
			res = FR_INT_ERR;
 8003e18:	231f      	movs	r3, #31
 8003e1a:	18fb      	adds	r3, r7, r3
 8003e1c:	2202      	movs	r2, #2
 8003e1e:	701a      	strb	r2, [r3, #0]
 8003e20:	e006      	b.n	8003e30 <put_fat+0x24a>
			if (res != FR_OK) break;
 8003e22:	46c0      	nop			; (mov r8, r8)
 8003e24:	e004      	b.n	8003e30 <put_fat+0x24a>
			if (res != FR_OK) break;
 8003e26:	46c0      	nop			; (mov r8, r8)
 8003e28:	e002      	b.n	8003e30 <put_fat+0x24a>
			if (res != FR_OK) break;
 8003e2a:	46c0      	nop			; (mov r8, r8)
 8003e2c:	e000      	b.n	8003e30 <put_fat+0x24a>
			if (res != FR_OK) break;
 8003e2e:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
 8003e30:	231f      	movs	r3, #31
 8003e32:	18fb      	adds	r3, r7, r3
 8003e34:	781b      	ldrb	r3, [r3, #0]
}
 8003e36:	0018      	movs	r0, r3
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	b008      	add	sp, #32
 8003e3c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003e40 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8003e40:	b5b0      	push	{r4, r5, r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d906      	bls.n	8003e5e <remove_chain+0x1e>
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	2385      	movs	r3, #133	; 0x85
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	58d3      	ldr	r3, [r2, r3]
 8003e58:	683a      	ldr	r2, [r7, #0]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d304      	bcc.n	8003e68 <remove_chain+0x28>
		res = FR_INT_ERR;
 8003e5e:	230f      	movs	r3, #15
 8003e60:	18fb      	adds	r3, r7, r3
 8003e62:	2202      	movs	r2, #2
 8003e64:	701a      	strb	r2, [r3, #0]
 8003e66:	e052      	b.n	8003f0e <remove_chain+0xce>

	} else {
		res = FR_OK;
 8003e68:	230f      	movs	r3, #15
 8003e6a:	18fb      	adds	r3, r7, r3
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	701a      	strb	r2, [r3, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8003e70:	e042      	b.n	8003ef8 <remove_chain+0xb8>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8003e72:	683a      	ldr	r2, [r7, #0]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	0011      	movs	r1, r2
 8003e78:	0018      	movs	r0, r3
 8003e7a:	f7ff fdf5 	bl	8003a68 <get_fat>
 8003e7e:	0003      	movs	r3, r0
 8003e80:	60bb      	str	r3, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d03f      	beq.n	8003f08 <remove_chain+0xc8>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d104      	bne.n	8003e98 <remove_chain+0x58>
 8003e8e:	230f      	movs	r3, #15
 8003e90:	18fb      	adds	r3, r7, r3
 8003e92:	2202      	movs	r2, #2
 8003e94:	701a      	strb	r2, [r3, #0]
 8003e96:	e03a      	b.n	8003f0e <remove_chain+0xce>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	3301      	adds	r3, #1
 8003e9c:	d104      	bne.n	8003ea8 <remove_chain+0x68>
 8003e9e:	230f      	movs	r3, #15
 8003ea0:	18fb      	adds	r3, r7, r3
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	701a      	strb	r2, [r3, #0]
 8003ea6:	e032      	b.n	8003f0e <remove_chain+0xce>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8003ea8:	250f      	movs	r5, #15
 8003eaa:	197c      	adds	r4, r7, r5
 8003eac:	6839      	ldr	r1, [r7, #0]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	0018      	movs	r0, r3
 8003eb4:	f7ff fe97 	bl	8003be6 <put_fat>
 8003eb8:	0003      	movs	r3, r0
 8003eba:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8003ebc:	197b      	adds	r3, r7, r5
 8003ebe:	781b      	ldrb	r3, [r3, #0]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d123      	bne.n	8003f0c <remove_chain+0xcc>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	2384      	movs	r3, #132	; 0x84
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	58d3      	ldr	r3, [r2, r3]
 8003ecc:	3301      	adds	r3, #1
 8003ece:	d011      	beq.n	8003ef4 <remove_chain+0xb4>
				fs->free_clust++;
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	2384      	movs	r3, #132	; 0x84
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	58d3      	ldr	r3, [r2, r3]
 8003ed8:	1c59      	adds	r1, r3, #1
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	2384      	movs	r3, #132	; 0x84
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	50d1      	str	r1, [r2, r3]
				fs->fsi_flag |= 1;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a0d      	ldr	r2, [pc, #52]	; (8003f1c <remove_chain+0xdc>)
 8003ee6:	5c9b      	ldrb	r3, [r3, r2]
 8003ee8:	2201      	movs	r2, #1
 8003eea:	4313      	orrs	r3, r2
 8003eec:	b2d9      	uxtb	r1, r3
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a0a      	ldr	r2, [pc, #40]	; (8003f1c <remove_chain+0xdc>)
 8003ef2:	5499      	strb	r1, [r3, r2]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	2385      	movs	r3, #133	; 0x85
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	58d3      	ldr	r3, [r2, r3]
 8003f00:	683a      	ldr	r2, [r7, #0]
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d3b5      	bcc.n	8003e72 <remove_chain+0x32>
 8003f06:	e002      	b.n	8003f0e <remove_chain+0xce>
			if (nxt == 0) break;				/* Empty cluster? */
 8003f08:	46c0      	nop			; (mov r8, r8)
 8003f0a:	e000      	b.n	8003f0e <remove_chain+0xce>
			if (res != FR_OK) break;
 8003f0c:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
 8003f0e:	230f      	movs	r3, #15
 8003f10:	18fb      	adds	r3, r7, r3
 8003f12:	781b      	ldrb	r3, [r3, #0]
}
 8003f14:	0018      	movs	r0, r3
 8003f16:	46bd      	mov	sp, r7
 8003f18:	b004      	add	sp, #16
 8003f1a:	bdb0      	pop	{r4, r5, r7, pc}
 8003f1c:	00000205 	.word	0x00000205

08003f20 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8003f20:	b5b0      	push	{r4, r5, r7, lr}
 8003f22:	b086      	sub	sp, #24
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d111      	bne.n	8003f54 <create_chain+0x34>
		scl = fs->last_clust;			/* Get suggested start point */
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	2383      	movs	r3, #131	; 0x83
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	58d3      	ldr	r3, [r2, r3]
 8003f38:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d006      	beq.n	8003f4e <create_chain+0x2e>
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	2385      	movs	r3, #133	; 0x85
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	58d3      	ldr	r3, [r2, r3]
 8003f48:	693a      	ldr	r2, [r7, #16]
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d31f      	bcc.n	8003f8e <create_chain+0x6e>
 8003f4e:	2301      	movs	r3, #1
 8003f50:	613b      	str	r3, [r7, #16]
 8003f52:	e01c      	b.n	8003f8e <create_chain+0x6e>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8003f54:	683a      	ldr	r2, [r7, #0]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	0011      	movs	r1, r2
 8003f5a:	0018      	movs	r0, r3
 8003f5c:	f7ff fd84 	bl	8003a68 <get_fat>
 8003f60:	0003      	movs	r3, r0
 8003f62:	60bb      	str	r3, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d801      	bhi.n	8003f6e <create_chain+0x4e>
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e086      	b.n	800407c <create_chain+0x15c>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	3301      	adds	r3, #1
 8003f72:	d101      	bne.n	8003f78 <create_chain+0x58>
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	e081      	b.n	800407c <create_chain+0x15c>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	2385      	movs	r3, #133	; 0x85
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	58d3      	ldr	r3, [r2, r3]
 8003f80:	68ba      	ldr	r2, [r7, #8]
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d201      	bcs.n	8003f8a <create_chain+0x6a>
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	e078      	b.n	800407c <create_chain+0x15c>
		scl = clst;
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	3301      	adds	r3, #1
 8003f96:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	2385      	movs	r3, #133	; 0x85
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	58d3      	ldr	r3, [r2, r3]
 8003fa0:	697a      	ldr	r2, [r7, #20]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d307      	bcc.n	8003fb6 <create_chain+0x96>
			ncl = 2;
 8003fa6:	2302      	movs	r3, #2
 8003fa8:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8003faa:	697a      	ldr	r2, [r7, #20]
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d901      	bls.n	8003fb6 <create_chain+0x96>
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	e062      	b.n	800407c <create_chain+0x15c>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8003fb6:	697a      	ldr	r2, [r7, #20]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	0011      	movs	r1, r2
 8003fbc:	0018      	movs	r0, r3
 8003fbe:	f7ff fd53 	bl	8003a68 <get_fat>
 8003fc2:	0003      	movs	r3, r0
 8003fc4:	60bb      	str	r3, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d00d      	beq.n	8003fe8 <create_chain+0xc8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	3301      	adds	r3, #1
 8003fd0:	d002      	beq.n	8003fd8 <create_chain+0xb8>
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d101      	bne.n	8003fdc <create_chain+0xbc>
			return cs;
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	e04f      	b.n	800407c <create_chain+0x15c>
		if (ncl == scl) return 0;		/* No free cluster */
 8003fdc:	697a      	ldr	r2, [r7, #20]
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d1d6      	bne.n	8003f92 <create_chain+0x72>
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	e049      	b.n	800407c <create_chain+0x15c>
		if (cs == 0) break;				/* Found a free cluster */
 8003fe8:	46c0      	nop			; (mov r8, r8)
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8003fea:	250f      	movs	r5, #15
 8003fec:	197c      	adds	r4, r7, r5
 8003fee:	4a25      	ldr	r2, [pc, #148]	; (8004084 <create_chain+0x164>)
 8003ff0:	6979      	ldr	r1, [r7, #20]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	0018      	movs	r0, r3
 8003ff6:	f7ff fdf6 	bl	8003be6 <put_fat>
 8003ffa:	0003      	movs	r3, r0
 8003ffc:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK && clst != 0) {
 8003ffe:	197b      	adds	r3, r7, r5
 8004000:	781b      	ldrb	r3, [r3, #0]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d10c      	bne.n	8004020 <create_chain+0x100>
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d009      	beq.n	8004020 <create_chain+0x100>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800400c:	230f      	movs	r3, #15
 800400e:	18fc      	adds	r4, r7, r3
 8004010:	697a      	ldr	r2, [r7, #20]
 8004012:	6839      	ldr	r1, [r7, #0]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	0018      	movs	r0, r3
 8004018:	f7ff fde5 	bl	8003be6 <put_fat>
 800401c:	0003      	movs	r3, r0
 800401e:	7023      	strb	r3, [r4, #0]
	}
	if (res == FR_OK) {
 8004020:	230f      	movs	r3, #15
 8004022:	18fb      	adds	r3, r7, r3
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d11d      	bne.n	8004066 <create_chain+0x146>
		fs->last_clust = ncl;			/* Update FSINFO */
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	2383      	movs	r3, #131	; 0x83
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	6979      	ldr	r1, [r7, #20]
 8004032:	50d1      	str	r1, [r2, r3]
		if (fs->free_clust != 0xFFFFFFFF) {
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	2384      	movs	r3, #132	; 0x84
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	58d3      	ldr	r3, [r2, r3]
 800403c:	3301      	adds	r3, #1
 800403e:	d01c      	beq.n	800407a <create_chain+0x15a>
			fs->free_clust--;
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	2384      	movs	r3, #132	; 0x84
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	58d3      	ldr	r3, [r2, r3]
 8004048:	1e59      	subs	r1, r3, #1
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	2384      	movs	r3, #132	; 0x84
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	50d1      	str	r1, [r2, r3]
			fs->fsi_flag |= 1;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a0c      	ldr	r2, [pc, #48]	; (8004088 <create_chain+0x168>)
 8004056:	5c9b      	ldrb	r3, [r3, r2]
 8004058:	2201      	movs	r2, #1
 800405a:	4313      	orrs	r3, r2
 800405c:	b2d9      	uxtb	r1, r3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a09      	ldr	r2, [pc, #36]	; (8004088 <create_chain+0x168>)
 8004062:	5499      	strb	r1, [r3, r2]
 8004064:	e009      	b.n	800407a <create_chain+0x15a>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8004066:	230f      	movs	r3, #15
 8004068:	18fb      	adds	r3, r7, r3
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	2b01      	cmp	r3, #1
 800406e:	d102      	bne.n	8004076 <create_chain+0x156>
 8004070:	2301      	movs	r3, #1
 8004072:	425b      	negs	r3, r3
 8004074:	e000      	b.n	8004078 <create_chain+0x158>
 8004076:	2301      	movs	r3, #1
 8004078:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 800407a:	697b      	ldr	r3, [r7, #20]
}
 800407c:	0018      	movs	r0, r3
 800407e:	46bd      	mov	sp, r7
 8004080:	b006      	add	sp, #24
 8004082:	bdb0      	pop	{r4, r5, r7, pc}
 8004084:	0fffffff 	.word	0x0fffffff
 8004088:	00000205 	.word	0x00000205

0800408c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b086      	sub	sp, #24
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	2389      	movs	r3, #137	; 0x89
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	58d3      	ldr	r3, [r2, r3]
 800409e:	3304      	adds	r3, #4
 80040a0:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	0a58      	lsrs	r0, r3, #9
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	2380      	movs	r3, #128	; 0x80
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	58d3      	ldr	r3, [r2, r3]
 80040ae:	4a13      	ldr	r2, [pc, #76]	; (80040fc <clmt_clust+0x70>)
 80040b0:	5c9b      	ldrb	r3, [r3, r2]
 80040b2:	0019      	movs	r1, r3
 80040b4:	f7fc f830 	bl	8000118 <__udivsi3>
 80040b8:	0003      	movs	r3, r0
 80040ba:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	1d1a      	adds	r2, r3, #4
 80040c0:	613a      	str	r2, [r7, #16]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d101      	bne.n	80040d0 <clmt_clust+0x44>
 80040cc:	2300      	movs	r3, #0
 80040ce:	e010      	b.n	80040f2 <clmt_clust+0x66>
		if (cl < ncl) break;	/* In this fragment? */
 80040d0:	697a      	ldr	r2, [r7, #20]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d307      	bcc.n	80040e8 <clmt_clust+0x5c>
		cl -= ncl; tbl++;		/* Next fragment */
 80040d8:	697a      	ldr	r2, [r7, #20]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	617b      	str	r3, [r7, #20]
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	3304      	adds	r3, #4
 80040e4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80040e6:	e7e9      	b.n	80040bc <clmt_clust+0x30>
		if (cl < ncl) break;	/* In this fragment? */
 80040e8:	46c0      	nop			; (mov r8, r8)
	}
	return cl + *tbl;	/* Return the cluster number */
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	18d3      	adds	r3, r2, r3
}
 80040f2:	0018      	movs	r0, r3
 80040f4:	46bd      	mov	sp, r7
 80040f6:	b006      	add	sp, #24
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	46c0      	nop			; (mov r8, r8)
 80040fc:	00000202 	.word	0x00000202

08004100 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b086      	sub	sp, #24
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	b299      	uxth	r1, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4a51      	ldr	r2, [pc, #324]	; (8004258 <dir_sdi+0x158>)
 8004112:	5299      	strh	r1, [r3, r2]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	2382      	movs	r3, #130	; 0x82
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	58d3      	ldr	r3, [r2, r3]
 800411c:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	2b01      	cmp	r3, #1
 8004122:	d009      	beq.n	8004138 <dir_sdi+0x38>
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	2380      	movs	r3, #128	; 0x80
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	58d2      	ldr	r2, [r2, r3]
 800412c:	2385      	movs	r3, #133	; 0x85
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	58d3      	ldr	r3, [r2, r3]
 8004132:	697a      	ldr	r2, [r7, #20]
 8004134:	429a      	cmp	r2, r3
 8004136:	d301      	bcc.n	800413c <dir_sdi+0x3c>
		return FR_INT_ERR;
 8004138:	2302      	movs	r3, #2
 800413a:	e088      	b.n	800424e <dir_sdi+0x14e>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d110      	bne.n	8004164 <dir_sdi+0x64>
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	2380      	movs	r3, #128	; 0x80
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	58d2      	ldr	r2, [r2, r3]
 800414a:	2380      	movs	r3, #128	; 0x80
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	5cd3      	ldrb	r3, [r2, r3]
 8004150:	2b03      	cmp	r3, #3
 8004152:	d107      	bne.n	8004164 <dir_sdi+0x64>
		clst = dp->fs->dirbase;
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	2380      	movs	r3, #128	; 0x80
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	58d2      	ldr	r2, [r2, r3]
 800415c:	2389      	movs	r3, #137	; 0x89
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	58d3      	ldr	r3, [r2, r3]
 8004162:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d115      	bne.n	8004196 <dir_sdi+0x96>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	2380      	movs	r3, #128	; 0x80
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	58d2      	ldr	r2, [r2, r3]
 8004172:	2382      	movs	r3, #130	; 0x82
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	5ad3      	ldrh	r3, [r2, r3]
 8004178:	001a      	movs	r2, r3
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	4293      	cmp	r3, r2
 800417e:	d301      	bcc.n	8004184 <dir_sdi+0x84>
			return FR_INT_ERR;
 8004180:	2302      	movs	r3, #2
 8004182:	e064      	b.n	800424e <dir_sdi+0x14e>
		sect = dp->fs->dirbase;
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	2380      	movs	r3, #128	; 0x80
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	58d2      	ldr	r2, [r2, r3]
 800418c:	2389      	movs	r3, #137	; 0x89
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	58d3      	ldr	r3, [r2, r3]
 8004192:	613b      	str	r3, [r7, #16]
 8004194:	e03a      	b.n	800420c <dir_sdi+0x10c>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	2380      	movs	r3, #128	; 0x80
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	58d3      	ldr	r3, [r2, r3]
 800419e:	4a2f      	ldr	r2, [pc, #188]	; (800425c <dir_sdi+0x15c>)
 80041a0:	5c9b      	ldrb	r3, [r3, r2]
 80041a2:	011b      	lsls	r3, r3, #4
 80041a4:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 80041a6:	e022      	b.n	80041ee <dir_sdi+0xee>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	2380      	movs	r3, #128	; 0x80
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	58d3      	ldr	r3, [r2, r3]
 80041b0:	697a      	ldr	r2, [r7, #20]
 80041b2:	0011      	movs	r1, r2
 80041b4:	0018      	movs	r0, r3
 80041b6:	f7ff fc57 	bl	8003a68 <get_fat>
 80041ba:	0003      	movs	r3, r0
 80041bc:	617b      	str	r3, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	3301      	adds	r3, #1
 80041c2:	d101      	bne.n	80041c8 <dir_sdi+0xc8>
 80041c4:	2301      	movs	r3, #1
 80041c6:	e042      	b.n	800424e <dir_sdi+0x14e>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d909      	bls.n	80041e2 <dir_sdi+0xe2>
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	2380      	movs	r3, #128	; 0x80
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	58d2      	ldr	r2, [r2, r3]
 80041d6:	2385      	movs	r3, #133	; 0x85
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	58d3      	ldr	r3, [r2, r3]
 80041dc:	697a      	ldr	r2, [r7, #20]
 80041de:	429a      	cmp	r2, r3
 80041e0:	d301      	bcc.n	80041e6 <dir_sdi+0xe6>
				return FR_INT_ERR;
 80041e2:	2302      	movs	r3, #2
 80041e4:	e033      	b.n	800424e <dir_sdi+0x14e>
			idx -= ic;
 80041e6:	683a      	ldr	r2, [r7, #0]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	1ad3      	subs	r3, r2, r3
 80041ec:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 80041ee:	683a      	ldr	r2, [r7, #0]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d2d8      	bcs.n	80041a8 <dir_sdi+0xa8>
		}
		sect = clust2sect(dp->fs, clst);
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	2380      	movs	r3, #128	; 0x80
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	58d3      	ldr	r3, [r2, r3]
 80041fe:	697a      	ldr	r2, [r7, #20]
 8004200:	0011      	movs	r1, r2
 8004202:	0018      	movs	r0, r3
 8004204:	f7ff fc0c 	bl	8003a20 <clust2sect>
 8004208:	0003      	movs	r3, r0
 800420a:	613b      	str	r3, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	2383      	movs	r3, #131	; 0x83
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	6979      	ldr	r1, [r7, #20]
 8004214:	50d1      	str	r1, [r2, r3]
	if (!sect) return FR_INT_ERR;
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d101      	bne.n	8004220 <dir_sdi+0x120>
 800421c:	2302      	movs	r3, #2
 800421e:	e016      	b.n	800424e <dir_sdi+0x14e>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	091a      	lsrs	r2, r3, #4
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	18d1      	adds	r1, r2, r3
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	2384      	movs	r3, #132	; 0x84
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	50d1      	str	r1, [r2, r3]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	2380      	movs	r3, #128	; 0x80
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	58d3      	ldr	r3, [r2, r3]
 8004238:	0019      	movs	r1, r3
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	220f      	movs	r2, #15
 800423e:	4013      	ands	r3, r2
 8004240:	015b      	lsls	r3, r3, #5
 8004242:	18c9      	adds	r1, r1, r3
 8004244:	687a      	ldr	r2, [r7, #4]
 8004246:	2385      	movs	r3, #133	; 0x85
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	50d1      	str	r1, [r2, r3]

	return FR_OK;
 800424c:	2300      	movs	r3, #0
}
 800424e:	0018      	movs	r0, r3
 8004250:	46bd      	mov	sp, r7
 8004252:	b006      	add	sp, #24
 8004254:	bd80      	pop	{r7, pc}
 8004256:	46c0      	nop			; (mov r8, r8)
 8004258:	00000206 	.word	0x00000206
 800425c:	00000202 	.word	0x00000202

08004260 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8004260:	b590      	push	{r4, r7, lr}
 8004262:	b087      	sub	sp, #28
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a87      	ldr	r2, [pc, #540]	; (800448c <dir_next+0x22c>)
 800426e:	5a9b      	ldrh	r3, [r3, r2]
 8004270:	3301      	adds	r3, #1
 8004272:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	041b      	lsls	r3, r3, #16
 8004278:	0c1b      	lsrs	r3, r3, #16
 800427a:	d005      	beq.n	8004288 <dir_next+0x28>
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	2384      	movs	r3, #132	; 0x84
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	58d3      	ldr	r3, [r2, r3]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d101      	bne.n	800428c <dir_next+0x2c>
		return FR_NO_FILE;
 8004288:	2304      	movs	r3, #4
 800428a:	e0fb      	b.n	8004484 <dir_next+0x224>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	220f      	movs	r2, #15
 8004290:	4013      	ands	r3, r2
 8004292:	d000      	beq.n	8004296 <dir_next+0x36>
 8004294:	e0e2      	b.n	800445c <dir_next+0x1fc>
		dp->sect++;					/* Next sector */
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	2384      	movs	r3, #132	; 0x84
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	58d3      	ldr	r3, [r2, r3]
 800429e:	1c59      	adds	r1, r3, #1
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	2384      	movs	r3, #132	; 0x84
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	50d1      	str	r1, [r2, r3]

		if (!dp->clust) {		/* Static table */
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	2383      	movs	r3, #131	; 0x83
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	58d3      	ldr	r3, [r2, r3]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d10d      	bne.n	80042d0 <dir_next+0x70>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	2380      	movs	r3, #128	; 0x80
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	58d2      	ldr	r2, [r2, r3]
 80042bc:	2382      	movs	r3, #130	; 0x82
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	5ad3      	ldrh	r3, [r2, r3]
 80042c2:	001a      	movs	r2, r3
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d200      	bcs.n	80042cc <dir_next+0x6c>
 80042ca:	e0c7      	b.n	800445c <dir_next+0x1fc>
				return FR_NO_FILE;
 80042cc:	2304      	movs	r3, #4
 80042ce:	e0d9      	b.n	8004484 <dir_next+0x224>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	091b      	lsrs	r3, r3, #4
 80042d4:	6879      	ldr	r1, [r7, #4]
 80042d6:	2280      	movs	r2, #128	; 0x80
 80042d8:	0092      	lsls	r2, r2, #2
 80042da:	588a      	ldr	r2, [r1, r2]
 80042dc:	496c      	ldr	r1, [pc, #432]	; (8004490 <dir_next+0x230>)
 80042de:	5c52      	ldrb	r2, [r2, r1]
 80042e0:	3a01      	subs	r2, #1
 80042e2:	4013      	ands	r3, r2
 80042e4:	d000      	beq.n	80042e8 <dir_next+0x88>
 80042e6:	e0b9      	b.n	800445c <dir_next+0x1fc>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	2380      	movs	r3, #128	; 0x80
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	58d0      	ldr	r0, [r2, r3]
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	2383      	movs	r3, #131	; 0x83
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	58d3      	ldr	r3, [r2, r3]
 80042f8:	0019      	movs	r1, r3
 80042fa:	f7ff fbb5 	bl	8003a68 <get_fat>
 80042fe:	0003      	movs	r3, r0
 8004300:	617b      	str	r3, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	2b01      	cmp	r3, #1
 8004306:	d801      	bhi.n	800430c <dir_next+0xac>
 8004308:	2302      	movs	r3, #2
 800430a:	e0bb      	b.n	8004484 <dir_next+0x224>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	3301      	adds	r3, #1
 8004310:	d101      	bne.n	8004316 <dir_next+0xb6>
 8004312:	2301      	movs	r3, #1
 8004314:	e0b6      	b.n	8004484 <dir_next+0x224>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	2380      	movs	r3, #128	; 0x80
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	58d2      	ldr	r2, [r2, r3]
 800431e:	2385      	movs	r3, #133	; 0x85
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	58d3      	ldr	r3, [r2, r3]
 8004324:	697a      	ldr	r2, [r7, #20]
 8004326:	429a      	cmp	r2, r3
 8004328:	d200      	bcs.n	800432c <dir_next+0xcc>
 800432a:	e084      	b.n	8004436 <dir_next+0x1d6>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d101      	bne.n	8004336 <dir_next+0xd6>
 8004332:	2304      	movs	r3, #4
 8004334:	e0a6      	b.n	8004484 <dir_next+0x224>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	2380      	movs	r3, #128	; 0x80
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	58d0      	ldr	r0, [r2, r3]
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	2383      	movs	r3, #131	; 0x83
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	58d3      	ldr	r3, [r2, r3]
 8004346:	0019      	movs	r1, r3
 8004348:	f7ff fdea 	bl	8003f20 <create_chain>
 800434c:	0003      	movs	r3, r0
 800434e:	617b      	str	r3, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d101      	bne.n	800435a <dir_next+0xfa>
 8004356:	2307      	movs	r3, #7
 8004358:	e094      	b.n	8004484 <dir_next+0x224>
					if (clst == 1) return FR_INT_ERR;
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	2b01      	cmp	r3, #1
 800435e:	d101      	bne.n	8004364 <dir_next+0x104>
 8004360:	2302      	movs	r3, #2
 8004362:	e08f      	b.n	8004484 <dir_next+0x224>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	3301      	adds	r3, #1
 8004368:	d101      	bne.n	800436e <dir_next+0x10e>
 800436a:	2301      	movs	r3, #1
 800436c:	e08a      	b.n	8004484 <dir_next+0x224>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	2380      	movs	r3, #128	; 0x80
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	58d3      	ldr	r3, [r2, r3]
 8004376:	0018      	movs	r0, r3
 8004378:	f7ff f9ea 	bl	8003750 <sync_window>
 800437c:	1e03      	subs	r3, r0, #0
 800437e:	d001      	beq.n	8004384 <dir_next+0x124>
 8004380:	2301      	movs	r3, #1
 8004382:	e07f      	b.n	8004484 <dir_next+0x224>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	2380      	movs	r3, #128	; 0x80
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	58d3      	ldr	r3, [r2, r3]
 800438c:	0018      	movs	r0, r3
 800438e:	2380      	movs	r3, #128	; 0x80
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	001a      	movs	r2, r3
 8004394:	2100      	movs	r1, #0
 8004396:	f7fe ffc3 	bl	8003320 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	2380      	movs	r3, #128	; 0x80
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	58d0      	ldr	r0, [r2, r3]
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	2380      	movs	r3, #128	; 0x80
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	58d4      	ldr	r4, [r2, r3]
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	0019      	movs	r1, r3
 80043ae:	f7ff fb37 	bl	8003a20 <clust2sect>
 80043b2:	0002      	movs	r2, r0
 80043b4:	238b      	movs	r3, #139	; 0x8b
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	50e2      	str	r2, [r4, r3]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80043ba:	2300      	movs	r3, #0
 80043bc:	613b      	str	r3, [r7, #16]
 80043be:	e020      	b.n	8004402 <dir_next+0x1a2>
						dp->fs->wflag = 1;
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	2380      	movs	r3, #128	; 0x80
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	58d2      	ldr	r2, [r2, r3]
 80043c8:	2381      	movs	r3, #129	; 0x81
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	2101      	movs	r1, #1
 80043ce:	54d1      	strb	r1, [r2, r3]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	2380      	movs	r3, #128	; 0x80
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	58d3      	ldr	r3, [r2, r3]
 80043d8:	0018      	movs	r0, r3
 80043da:	f7ff f9b9 	bl	8003750 <sync_window>
 80043de:	1e03      	subs	r3, r0, #0
 80043e0:	d001      	beq.n	80043e6 <dir_next+0x186>
 80043e2:	2301      	movs	r3, #1
 80043e4:	e04e      	b.n	8004484 <dir_next+0x224>
						dp->fs->winsect++;
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	2380      	movs	r3, #128	; 0x80
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	58d3      	ldr	r3, [r2, r3]
 80043ee:	228b      	movs	r2, #139	; 0x8b
 80043f0:	0092      	lsls	r2, r2, #2
 80043f2:	589a      	ldr	r2, [r3, r2]
 80043f4:	1c51      	adds	r1, r2, #1
 80043f6:	228b      	movs	r2, #139	; 0x8b
 80043f8:	0092      	lsls	r2, r2, #2
 80043fa:	5099      	str	r1, [r3, r2]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	3301      	adds	r3, #1
 8004400:	613b      	str	r3, [r7, #16]
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	2380      	movs	r3, #128	; 0x80
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	58d3      	ldr	r3, [r2, r3]
 800440a:	4a21      	ldr	r2, [pc, #132]	; (8004490 <dir_next+0x230>)
 800440c:	5c9b      	ldrb	r3, [r3, r2]
 800440e:	001a      	movs	r2, r3
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	4293      	cmp	r3, r2
 8004414:	d3d4      	bcc.n	80043c0 <dir_next+0x160>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	2380      	movs	r3, #128	; 0x80
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	58d2      	ldr	r2, [r2, r3]
 800441e:	238b      	movs	r3, #139	; 0x8b
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	58d1      	ldr	r1, [r2, r3]
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	2380      	movs	r3, #128	; 0x80
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	58d2      	ldr	r2, [r2, r3]
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	1ac9      	subs	r1, r1, r3
 8004430:	238b      	movs	r3, #139	; 0x8b
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	50d1      	str	r1, [r2, r3]
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	2383      	movs	r3, #131	; 0x83
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	6979      	ldr	r1, [r7, #20]
 800443e:	50d1      	str	r1, [r2, r3]
				dp->sect = clust2sect(dp->fs, clst);
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	2380      	movs	r3, #128	; 0x80
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	58d3      	ldr	r3, [r2, r3]
 8004448:	697a      	ldr	r2, [r7, #20]
 800444a:	0011      	movs	r1, r2
 800444c:	0018      	movs	r0, r3
 800444e:	f7ff fae7 	bl	8003a20 <clust2sect>
 8004452:	0001      	movs	r1, r0
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	2384      	movs	r3, #132	; 0x84
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	50d1      	str	r1, [r2, r3]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	b299      	uxth	r1, r3
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	4a0a      	ldr	r2, [pc, #40]	; (800448c <dir_next+0x22c>)
 8004464:	5299      	strh	r1, [r3, r2]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	2380      	movs	r3, #128	; 0x80
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	58d3      	ldr	r3, [r2, r3]
 800446e:	0019      	movs	r1, r3
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	220f      	movs	r2, #15
 8004474:	4013      	ands	r3, r2
 8004476:	015b      	lsls	r3, r3, #5
 8004478:	18c9      	adds	r1, r1, r3
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	2385      	movs	r3, #133	; 0x85
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	50d1      	str	r1, [r2, r3]

	return FR_OK;
 8004482:	2300      	movs	r3, #0
}
 8004484:	0018      	movs	r0, r3
 8004486:	46bd      	mov	sp, r7
 8004488:	b007      	add	sp, #28
 800448a:	bd90      	pop	{r4, r7, pc}
 800448c:	00000206 	.word	0x00000206
 8004490:	00000202 	.word	0x00000202

08004494 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8004494:	b5b0      	push	{r4, r5, r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 800449e:	250f      	movs	r5, #15
 80044a0:	197c      	adds	r4, r7, r5
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2100      	movs	r1, #0
 80044a6:	0018      	movs	r0, r3
 80044a8:	f7ff fe2a 	bl	8004100 <dir_sdi>
 80044ac:	0003      	movs	r3, r0
 80044ae:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 80044b0:	197b      	adds	r3, r7, r5
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d13b      	bne.n	8004530 <dir_alloc+0x9c>
		n = 0;
 80044b8:	2300      	movs	r3, #0
 80044ba:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	2380      	movs	r3, #128	; 0x80
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	58d0      	ldr	r0, [r2, r3]
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	2384      	movs	r3, #132	; 0x84
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	58d3      	ldr	r3, [r2, r3]
 80044cc:	250f      	movs	r5, #15
 80044ce:	197c      	adds	r4, r7, r5
 80044d0:	0019      	movs	r1, r3
 80044d2:	f7ff f995 	bl	8003800 <move_window>
 80044d6:	0003      	movs	r3, r0
 80044d8:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 80044da:	197b      	adds	r3, r7, r5
 80044dc:	781b      	ldrb	r3, [r3, #0]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d125      	bne.n	800452e <dir_alloc+0x9a>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	2385      	movs	r3, #133	; 0x85
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	58d3      	ldr	r3, [r2, r3]
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	2be5      	cmp	r3, #229	; 0xe5
 80044ee:	d006      	beq.n	80044fe <dir_alloc+0x6a>
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	2385      	movs	r3, #133	; 0x85
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	58d3      	ldr	r3, [r2, r3]
 80044f8:	781b      	ldrb	r3, [r3, #0]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d107      	bne.n	800450e <dir_alloc+0x7a>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	3301      	adds	r3, #1
 8004502:	60bb      	str	r3, [r7, #8]
 8004504:	68ba      	ldr	r2, [r7, #8]
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	429a      	cmp	r2, r3
 800450a:	d102      	bne.n	8004512 <dir_alloc+0x7e>
 800450c:	e010      	b.n	8004530 <dir_alloc+0x9c>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800450e:	2300      	movs	r3, #0
 8004510:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8004512:	250f      	movs	r5, #15
 8004514:	197c      	adds	r4, r7, r5
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2101      	movs	r1, #1
 800451a:	0018      	movs	r0, r3
 800451c:	f7ff fea0 	bl	8004260 <dir_next>
 8004520:	0003      	movs	r3, r0
 8004522:	7023      	strb	r3, [r4, #0]
		} while (res == FR_OK);
 8004524:	197b      	adds	r3, r7, r5
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d0c7      	beq.n	80044bc <dir_alloc+0x28>
 800452c:	e000      	b.n	8004530 <dir_alloc+0x9c>
			if (res != FR_OK) break;
 800452e:	46c0      	nop			; (mov r8, r8)
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8004530:	230f      	movs	r3, #15
 8004532:	18fb      	adds	r3, r7, r3
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	2b04      	cmp	r3, #4
 8004538:	d103      	bne.n	8004542 <dir_alloc+0xae>
 800453a:	230f      	movs	r3, #15
 800453c:	18fb      	adds	r3, r7, r3
 800453e:	2207      	movs	r2, #7
 8004540:	701a      	strb	r2, [r3, #0]
	return res;
 8004542:	230f      	movs	r3, #15
 8004544:	18fb      	adds	r3, r7, r3
 8004546:	781b      	ldrb	r3, [r3, #0]
}
 8004548:	0018      	movs	r0, r3
 800454a:	46bd      	mov	sp, r7
 800454c:	b004      	add	sp, #16
 800454e:	bdb0      	pop	{r4, r5, r7, pc}

08004550 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	331b      	adds	r3, #27
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	021b      	lsls	r3, r3, #8
 8004562:	b21a      	sxth	r2, r3
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	331a      	adds	r3, #26
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	b21b      	sxth	r3, r3
 800456c:	4313      	orrs	r3, r2
 800456e:	b21b      	sxth	r3, r3
 8004570:	b29b      	uxth	r3, r3
 8004572:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	2380      	movs	r3, #128	; 0x80
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	5cd3      	ldrb	r3, [r2, r3]
 800457c:	2b03      	cmp	r3, #3
 800457e:	d10f      	bne.n	80045a0 <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	3315      	adds	r3, #21
 8004584:	781b      	ldrb	r3, [r3, #0]
 8004586:	021b      	lsls	r3, r3, #8
 8004588:	b21a      	sxth	r2, r3
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	3314      	adds	r3, #20
 800458e:	781b      	ldrb	r3, [r3, #0]
 8004590:	b21b      	sxth	r3, r3
 8004592:	4313      	orrs	r3, r2
 8004594:	b21b      	sxth	r3, r3
 8004596:	b29b      	uxth	r3, r3
 8004598:	041b      	lsls	r3, r3, #16
 800459a:	68fa      	ldr	r2, [r7, #12]
 800459c:	4313      	orrs	r3, r2
 800459e:	60fb      	str	r3, [r7, #12]

	return cl;
 80045a0:	68fb      	ldr	r3, [r7, #12]
}
 80045a2:	0018      	movs	r0, r3
 80045a4:	46bd      	mov	sp, r7
 80045a6:	b004      	add	sp, #16
 80045a8:	bd80      	pop	{r7, pc}

080045aa <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 80045aa:	b580      	push	{r7, lr}
 80045ac:	b082      	sub	sp, #8
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	6078      	str	r0, [r7, #4]
 80045b2:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	331a      	adds	r3, #26
 80045b8:	683a      	ldr	r2, [r7, #0]
 80045ba:	b2d2      	uxtb	r2, r2
 80045bc:	701a      	strb	r2, [r3, #0]
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	0a1b      	lsrs	r3, r3, #8
 80045c4:	b29a      	uxth	r2, r3
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	331b      	adds	r3, #27
 80045ca:	b2d2      	uxtb	r2, r2
 80045cc:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	0c1a      	lsrs	r2, r3, #16
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	3314      	adds	r3, #20
 80045d6:	b2d2      	uxtb	r2, r2
 80045d8:	701a      	strb	r2, [r3, #0]
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	0c1b      	lsrs	r3, r3, #16
 80045de:	b29b      	uxth	r3, r3
 80045e0:	0a1b      	lsrs	r3, r3, #8
 80045e2:	b29a      	uxth	r2, r3
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	3315      	adds	r3, #21
 80045e8:	b2d2      	uxtb	r2, r2
 80045ea:	701a      	strb	r2, [r3, #0]
}
 80045ec:	46c0      	nop			; (mov r8, r8)
 80045ee:	46bd      	mov	sp, r7
 80045f0:	b002      	add	sp, #8
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 80045f4:	b5b0      	push	{r4, r5, r7, lr}
 80045f6:	b086      	sub	sp, #24
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80045fc:	2517      	movs	r5, #23
 80045fe:	197c      	adds	r4, r7, r5
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2100      	movs	r1, #0
 8004604:	0018      	movs	r0, r3
 8004606:	f7ff fd7b 	bl	8004100 <dir_sdi>
 800460a:	0003      	movs	r3, r0
 800460c:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
 800460e:	197b      	adds	r3, r7, r5
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d003      	beq.n	800461e <dir_find+0x2a>
 8004616:	2317      	movs	r3, #23
 8004618:	18fb      	adds	r3, r7, r3
 800461a:	781b      	ldrb	r3, [r3, #0]
 800461c:	e04b      	b.n	80046b6 <dir_find+0xc2>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	2380      	movs	r3, #128	; 0x80
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	58d0      	ldr	r0, [r2, r3]
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	2384      	movs	r3, #132	; 0x84
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	58d3      	ldr	r3, [r2, r3]
 800462e:	2517      	movs	r5, #23
 8004630:	197c      	adds	r4, r7, r5
 8004632:	0019      	movs	r1, r3
 8004634:	f7ff f8e4 	bl	8003800 <move_window>
 8004638:	0003      	movs	r3, r0
 800463a:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
 800463c:	197b      	adds	r3, r7, r5
 800463e:	781b      	ldrb	r3, [r3, #0]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d132      	bne.n	80046aa <dir_find+0xb6>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	2385      	movs	r3, #133	; 0x85
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	58d3      	ldr	r3, [r2, r3]
 800464c:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800464e:	210f      	movs	r1, #15
 8004650:	187b      	adds	r3, r7, r1
 8004652:	693a      	ldr	r2, [r7, #16]
 8004654:	7812      	ldrb	r2, [r2, #0]
 8004656:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8004658:	187b      	adds	r3, r7, r1
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d104      	bne.n	800466a <dir_find+0x76>
 8004660:	2317      	movs	r3, #23
 8004662:	18fb      	adds	r3, r7, r3
 8004664:	2204      	movs	r2, #4
 8004666:	701a      	strb	r2, [r3, #0]
 8004668:	e022      	b.n	80046b0 <dir_find+0xbc>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	330b      	adds	r3, #11
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	001a      	movs	r2, r3
 8004672:	2308      	movs	r3, #8
 8004674:	4013      	ands	r3, r2
 8004676:	d10a      	bne.n	800468e <dir_find+0x9a>
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	2386      	movs	r3, #134	; 0x86
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	58d1      	ldr	r1, [r2, r3]
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	220b      	movs	r2, #11
 8004684:	0018      	movs	r0, r3
 8004686:	f7fe fe63 	bl	8003350 <mem_cmp>
 800468a:	1e03      	subs	r3, r0, #0
 800468c:	d00f      	beq.n	80046ae <dir_find+0xba>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 800468e:	2517      	movs	r5, #23
 8004690:	197c      	adds	r4, r7, r5
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2100      	movs	r1, #0
 8004696:	0018      	movs	r0, r3
 8004698:	f7ff fde2 	bl	8004260 <dir_next>
 800469c:	0003      	movs	r3, r0
 800469e:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
 80046a0:	197b      	adds	r3, r7, r5
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d0ba      	beq.n	800461e <dir_find+0x2a>
 80046a8:	e002      	b.n	80046b0 <dir_find+0xbc>
		if (res != FR_OK) break;
 80046aa:	46c0      	nop			; (mov r8, r8)
 80046ac:	e000      	b.n	80046b0 <dir_find+0xbc>
			break;
 80046ae:	46c0      	nop			; (mov r8, r8)

	return res;
 80046b0:	2317      	movs	r3, #23
 80046b2:	18fb      	adds	r3, r7, r3
 80046b4:	781b      	ldrb	r3, [r3, #0]
}
 80046b6:	0018      	movs	r0, r3
 80046b8:	46bd      	mov	sp, r7
 80046ba:	b006      	add	sp, #24
 80046bc:	bdb0      	pop	{r4, r5, r7, pc}

080046be <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80046be:	b5b0      	push	{r4, r5, r7, lr}
 80046c0:	b084      	sub	sp, #16
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80046c6:	250f      	movs	r5, #15
 80046c8:	197c      	adds	r4, r7, r5
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2101      	movs	r1, #1
 80046ce:	0018      	movs	r0, r3
 80046d0:	f7ff fee0 	bl	8004494 <dir_alloc>
 80046d4:	0003      	movs	r3, r0
 80046d6:	7023      	strb	r3, [r4, #0]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 80046d8:	197b      	adds	r3, r7, r5
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d12f      	bne.n	8004740 <dir_register+0x82>
		res = move_window(dp->fs, dp->sect);
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	2380      	movs	r3, #128	; 0x80
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	58d0      	ldr	r0, [r2, r3]
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	2384      	movs	r3, #132	; 0x84
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	58d3      	ldr	r3, [r2, r3]
 80046f0:	250f      	movs	r5, #15
 80046f2:	197c      	adds	r4, r7, r5
 80046f4:	0019      	movs	r1, r3
 80046f6:	f7ff f883 	bl	8003800 <move_window>
 80046fa:	0003      	movs	r3, r0
 80046fc:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 80046fe:	197b      	adds	r3, r7, r5
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d11c      	bne.n	8004740 <dir_register+0x82>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	2385      	movs	r3, #133	; 0x85
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	58d3      	ldr	r3, [r2, r3]
 800470e:	2220      	movs	r2, #32
 8004710:	2100      	movs	r1, #0
 8004712:	0018      	movs	r0, r3
 8004714:	f7fe fe04 	bl	8003320 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	2385      	movs	r3, #133	; 0x85
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	58d0      	ldr	r0, [r2, r3]
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	2386      	movs	r3, #134	; 0x86
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	58d3      	ldr	r3, [r2, r3]
 8004728:	220b      	movs	r2, #11
 800472a:	0019      	movs	r1, r3
 800472c:	f7fe fddc 	bl	80032e8 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	2380      	movs	r3, #128	; 0x80
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	58d2      	ldr	r2, [r2, r3]
 8004738:	2381      	movs	r3, #129	; 0x81
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	2101      	movs	r1, #1
 800473e:	54d1      	strb	r1, [r2, r3]
		}
	}

	return res;
 8004740:	230f      	movs	r3, #15
 8004742:	18fb      	adds	r3, r7, r3
 8004744:	781b      	ldrb	r3, [r3, #0]
}
 8004746:	0018      	movs	r0, r3
 8004748:	46bd      	mov	sp, r7
 800474a:	b004      	add	sp, #16
 800474c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004750 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b088      	sub	sp, #32
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	60fb      	str	r3, [r7, #12]
 8004760:	e002      	b.n	8004768 <create_name+0x18>
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	3301      	adds	r3, #1
 8004766:	60fb      	str	r3, [r7, #12]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	2b2f      	cmp	r3, #47	; 0x2f
 800476e:	d0f8      	beq.n	8004762 <create_name+0x12>
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	2b5c      	cmp	r3, #92	; 0x5c
 8004776:	d0f4      	beq.n	8004762 <create_name+0x12>
	sfn = dp->fn;
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	2386      	movs	r3, #134	; 0x86
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	58d3      	ldr	r3, [r2, r3]
 8004780:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	220b      	movs	r2, #11
 8004786:	2120      	movs	r1, #32
 8004788:	0018      	movs	r0, r3
 800478a:	f7fe fdc9 	bl	8003320 <mem_set>
	si = i = b = 0; ni = 8;
 800478e:	231f      	movs	r3, #31
 8004790:	18fb      	adds	r3, r7, r3
 8004792:	2200      	movs	r2, #0
 8004794:	701a      	strb	r2, [r3, #0]
 8004796:	2300      	movs	r3, #0
 8004798:	613b      	str	r3, [r7, #16]
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	617b      	str	r3, [r7, #20]
 800479e:	2308      	movs	r3, #8
 80047a0:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	1c5a      	adds	r2, r3, #1
 80047a6:	617a      	str	r2, [r7, #20]
 80047a8:	68fa      	ldr	r2, [r7, #12]
 80047aa:	18d2      	adds	r2, r2, r3
 80047ac:	211e      	movs	r1, #30
 80047ae:	187b      	adds	r3, r7, r1
 80047b0:	7812      	ldrb	r2, [r2, #0]
 80047b2:	701a      	strb	r2, [r3, #0]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 80047b4:	187b      	adds	r3, r7, r1
 80047b6:	781b      	ldrb	r3, [r3, #0]
 80047b8:	2b20      	cmp	r3, #32
 80047ba:	d800      	bhi.n	80047be <create_name+0x6e>
 80047bc:	e07e      	b.n	80048bc <create_name+0x16c>
 80047be:	231e      	movs	r3, #30
 80047c0:	18fb      	adds	r3, r7, r3
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	2b2f      	cmp	r3, #47	; 0x2f
 80047c6:	d100      	bne.n	80047ca <create_name+0x7a>
 80047c8:	e078      	b.n	80048bc <create_name+0x16c>
 80047ca:	231e      	movs	r3, #30
 80047cc:	18fb      	adds	r3, r7, r3
 80047ce:	781b      	ldrb	r3, [r3, #0]
 80047d0:	2b5c      	cmp	r3, #92	; 0x5c
 80047d2:	d100      	bne.n	80047d6 <create_name+0x86>
 80047d4:	e072      	b.n	80048bc <create_name+0x16c>
		if (c == '.' || i >= ni) {
 80047d6:	231e      	movs	r3, #30
 80047d8:	18fb      	adds	r3, r7, r3
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	2b2e      	cmp	r3, #46	; 0x2e
 80047de:	d003      	beq.n	80047e8 <create_name+0x98>
 80047e0:	693a      	ldr	r2, [r7, #16]
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d314      	bcc.n	8004812 <create_name+0xc2>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 80047e8:	69bb      	ldr	r3, [r7, #24]
 80047ea:	2b08      	cmp	r3, #8
 80047ec:	d104      	bne.n	80047f8 <create_name+0xa8>
 80047ee:	231e      	movs	r3, #30
 80047f0:	18fb      	adds	r3, r7, r3
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	2b2e      	cmp	r3, #46	; 0x2e
 80047f6:	d001      	beq.n	80047fc <create_name+0xac>
 80047f8:	2306      	movs	r3, #6
 80047fa:	e0a7      	b.n	800494c <create_name+0x1fc>
			i = 8; ni = 11;
 80047fc:	2308      	movs	r3, #8
 80047fe:	613b      	str	r3, [r7, #16]
 8004800:	230b      	movs	r3, #11
 8004802:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 8004804:	221f      	movs	r2, #31
 8004806:	18bb      	adds	r3, r7, r2
 8004808:	18ba      	adds	r2, r7, r2
 800480a:	7812      	ldrb	r2, [r2, #0]
 800480c:	0092      	lsls	r2, r2, #2
 800480e:	701a      	strb	r2, [r3, #0]
 8004810:	e053      	b.n	80048ba <create_name+0x16a>
		}
		if (c >= 0x80) {				/* Extended character? */
 8004812:	231e      	movs	r3, #30
 8004814:	18fb      	adds	r3, r7, r3
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	b25b      	sxtb	r3, r3
 800481a:	2b00      	cmp	r3, #0
 800481c:	da0f      	bge.n	800483e <create_name+0xee>
			b |= 3;						/* Eliminate NT flag */
 800481e:	221f      	movs	r2, #31
 8004820:	18bb      	adds	r3, r7, r2
 8004822:	18ba      	adds	r2, r7, r2
 8004824:	7812      	ldrb	r2, [r2, #0]
 8004826:	2103      	movs	r1, #3
 8004828:	430a      	orrs	r2, r1
 800482a:	701a      	strb	r2, [r3, #0]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800482c:	211e      	movs	r1, #30
 800482e:	187b      	adds	r3, r7, r1
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	3b80      	subs	r3, #128	; 0x80
 8004834:	001a      	movs	r2, r3
 8004836:	187b      	adds	r3, r7, r1
 8004838:	4946      	ldr	r1, [pc, #280]	; (8004954 <create_name+0x204>)
 800483a:	5c8a      	ldrb	r2, [r1, r2]
 800483c:	701a      	strb	r2, [r3, #0]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 800483e:	231e      	movs	r3, #30
 8004840:	18fb      	adds	r3, r7, r3
 8004842:	781a      	ldrb	r2, [r3, #0]
 8004844:	4b44      	ldr	r3, [pc, #272]	; (8004958 <create_name+0x208>)
 8004846:	0011      	movs	r1, r2
 8004848:	0018      	movs	r0, r3
 800484a:	f7fe fda6 	bl	800339a <chk_chr>
 800484e:	1e03      	subs	r3, r0, #0
 8004850:	d001      	beq.n	8004856 <create_name+0x106>
				return FR_INVALID_NAME;
 8004852:	2306      	movs	r3, #6
 8004854:	e07a      	b.n	800494c <create_name+0x1fc>
			if (IsUpper(c)) {			/* ASCII large capital? */
 8004856:	231e      	movs	r3, #30
 8004858:	18fb      	adds	r3, r7, r3
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	2b40      	cmp	r3, #64	; 0x40
 800485e:	d90c      	bls.n	800487a <create_name+0x12a>
 8004860:	231e      	movs	r3, #30
 8004862:	18fb      	adds	r3, r7, r3
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	2b5a      	cmp	r3, #90	; 0x5a
 8004868:	d807      	bhi.n	800487a <create_name+0x12a>
				b |= 2;
 800486a:	221f      	movs	r2, #31
 800486c:	18bb      	adds	r3, r7, r2
 800486e:	18ba      	adds	r2, r7, r2
 8004870:	7812      	ldrb	r2, [r2, #0]
 8004872:	2102      	movs	r1, #2
 8004874:	430a      	orrs	r2, r1
 8004876:	701a      	strb	r2, [r3, #0]
 8004878:	e016      	b.n	80048a8 <create_name+0x158>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 800487a:	231e      	movs	r3, #30
 800487c:	18fb      	adds	r3, r7, r3
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	2b60      	cmp	r3, #96	; 0x60
 8004882:	d911      	bls.n	80048a8 <create_name+0x158>
 8004884:	231e      	movs	r3, #30
 8004886:	18fb      	adds	r3, r7, r3
 8004888:	781b      	ldrb	r3, [r3, #0]
 800488a:	2b7a      	cmp	r3, #122	; 0x7a
 800488c:	d80c      	bhi.n	80048a8 <create_name+0x158>
					b |= 1; c -= 0x20;
 800488e:	221f      	movs	r2, #31
 8004890:	18bb      	adds	r3, r7, r2
 8004892:	18ba      	adds	r2, r7, r2
 8004894:	7812      	ldrb	r2, [r2, #0]
 8004896:	2101      	movs	r1, #1
 8004898:	430a      	orrs	r2, r1
 800489a:	701a      	strb	r2, [r3, #0]
 800489c:	221e      	movs	r2, #30
 800489e:	18bb      	adds	r3, r7, r2
 80048a0:	18ba      	adds	r2, r7, r2
 80048a2:	7812      	ldrb	r2, [r2, #0]
 80048a4:	3a20      	subs	r2, #32
 80048a6:	701a      	strb	r2, [r3, #0]
				}
			}
			sfn[i++] = c;
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	1c5a      	adds	r2, r3, #1
 80048ac:	613a      	str	r2, [r7, #16]
 80048ae:	68ba      	ldr	r2, [r7, #8]
 80048b0:	18d3      	adds	r3, r2, r3
 80048b2:	221e      	movs	r2, #30
 80048b4:	18ba      	adds	r2, r7, r2
 80048b6:	7812      	ldrb	r2, [r2, #0]
 80048b8:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80048ba:	e772      	b.n	80047a2 <create_name+0x52>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80048bc:	68fa      	ldr	r2, [r7, #12]
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	18d2      	adds	r2, r2, r3
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 80048c6:	231e      	movs	r3, #30
 80048c8:	18fb      	adds	r3, r7, r3
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	2b20      	cmp	r3, #32
 80048ce:	d801      	bhi.n	80048d4 <create_name+0x184>
 80048d0:	2204      	movs	r2, #4
 80048d2:	e000      	b.n	80048d6 <create_name+0x186>
 80048d4:	2200      	movs	r2, #0
 80048d6:	231e      	movs	r3, #30
 80048d8:	18fb      	adds	r3, r7, r3
 80048da:	701a      	strb	r2, [r3, #0]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d101      	bne.n	80048e6 <create_name+0x196>
 80048e2:	2306      	movs	r3, #6
 80048e4:	e032      	b.n	800494c <create_name+0x1fc>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	781b      	ldrb	r3, [r3, #0]
 80048ea:	2be5      	cmp	r3, #229	; 0xe5
 80048ec:	d102      	bne.n	80048f4 <create_name+0x1a4>
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	2205      	movs	r2, #5
 80048f2:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 80048f4:	69bb      	ldr	r3, [r7, #24]
 80048f6:	2b08      	cmp	r3, #8
 80048f8:	d105      	bne.n	8004906 <create_name+0x1b6>
 80048fa:	221f      	movs	r2, #31
 80048fc:	18bb      	adds	r3, r7, r2
 80048fe:	18ba      	adds	r2, r7, r2
 8004900:	7812      	ldrb	r2, [r2, #0]
 8004902:	0092      	lsls	r2, r2, #2
 8004904:	701a      	strb	r2, [r3, #0]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 8004906:	231f      	movs	r3, #31
 8004908:	18fb      	adds	r3, r7, r3
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	2203      	movs	r2, #3
 800490e:	4013      	ands	r3, r2
 8004910:	2b01      	cmp	r3, #1
 8004912:	d106      	bne.n	8004922 <create_name+0x1d2>
 8004914:	221e      	movs	r2, #30
 8004916:	18bb      	adds	r3, r7, r2
 8004918:	18ba      	adds	r2, r7, r2
 800491a:	7812      	ldrb	r2, [r2, #0]
 800491c:	2110      	movs	r1, #16
 800491e:	430a      	orrs	r2, r1
 8004920:	701a      	strb	r2, [r3, #0]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 8004922:	231f      	movs	r3, #31
 8004924:	18fb      	adds	r3, r7, r3
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	220c      	movs	r2, #12
 800492a:	4013      	ands	r3, r2
 800492c:	2b04      	cmp	r3, #4
 800492e:	d106      	bne.n	800493e <create_name+0x1ee>
 8004930:	221e      	movs	r2, #30
 8004932:	18bb      	adds	r3, r7, r2
 8004934:	18ba      	adds	r2, r7, r2
 8004936:	7812      	ldrb	r2, [r2, #0]
 8004938:	2108      	movs	r1, #8
 800493a:	430a      	orrs	r2, r1
 800493c:	701a      	strb	r2, [r3, #0]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	330b      	adds	r3, #11
 8004942:	221e      	movs	r2, #30
 8004944:	18ba      	adds	r2, r7, r2
 8004946:	7812      	ldrb	r2, [r2, #0]
 8004948:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800494a:	2300      	movs	r3, #0
#endif
}
 800494c:	0018      	movs	r0, r3
 800494e:	46bd      	mov	sp, r7
 8004950:	b008      	add	sp, #32
 8004952:	bd80      	pop	{r7, pc}
 8004954:	08007838 	.word	0x08007838
 8004958:	080077e4 	.word	0x080077e4

0800495c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800495c:	b5b0      	push	{r4, r5, r7, lr}
 800495e:	b084      	sub	sp, #16
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	781b      	ldrb	r3, [r3, #0]
 800496a:	2b2f      	cmp	r3, #47	; 0x2f
 800496c:	d003      	beq.n	8004976 <follow_path+0x1a>
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	2b5c      	cmp	r3, #92	; 0x5c
 8004974:	d102      	bne.n	800497c <follow_path+0x20>
		path++;
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	3301      	adds	r3, #1
 800497a:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	2382      	movs	r3, #130	; 0x82
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	2100      	movs	r1, #0
 8004984:	50d1      	str	r1, [r2, r3]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	781b      	ldrb	r3, [r3, #0]
 800498a:	2b1f      	cmp	r3, #31
 800498c:	d80e      	bhi.n	80049ac <follow_path+0x50>
		res = dir_sdi(dp, 0);
 800498e:	230f      	movs	r3, #15
 8004990:	18fc      	adds	r4, r7, r3
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2100      	movs	r1, #0
 8004996:	0018      	movs	r0, r3
 8004998:	f7ff fbb2 	bl	8004100 <dir_sdi>
 800499c:	0003      	movs	r3, r0
 800499e:	7023      	strb	r3, [r4, #0]
		dp->dir = 0;
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	2385      	movs	r3, #133	; 0x85
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	2100      	movs	r1, #0
 80049a8:	50d1      	str	r1, [r2, r3]
 80049aa:	e05c      	b.n	8004a66 <follow_path+0x10a>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80049ac:	250f      	movs	r5, #15
 80049ae:	197c      	adds	r4, r7, r5
 80049b0:	003a      	movs	r2, r7
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	0011      	movs	r1, r2
 80049b6:	0018      	movs	r0, r3
 80049b8:	f7ff feca 	bl	8004750 <create_name>
 80049bc:	0003      	movs	r3, r0
 80049be:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 80049c0:	197b      	adds	r3, r7, r5
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d149      	bne.n	8004a5c <follow_path+0x100>
			res = dir_find(dp);				/* Find an object with the sagment name */
 80049c8:	250f      	movs	r5, #15
 80049ca:	197c      	adds	r4, r7, r5
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	0018      	movs	r0, r3
 80049d0:	f7ff fe10 	bl	80045f4 <dir_find>
 80049d4:	0003      	movs	r3, r0
 80049d6:	7023      	strb	r3, [r4, #0]
			ns = dp->fn[NSFLAG];
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	2386      	movs	r3, #134	; 0x86
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	58d2      	ldr	r2, [r2, r3]
 80049e0:	230e      	movs	r3, #14
 80049e2:	18fb      	adds	r3, r7, r3
 80049e4:	7ad2      	ldrb	r2, [r2, #11]
 80049e6:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
 80049e8:	197b      	adds	r3, r7, r5
 80049ea:	781b      	ldrb	r3, [r3, #0]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d00f      	beq.n	8004a10 <follow_path+0xb4>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80049f0:	230f      	movs	r3, #15
 80049f2:	18fb      	adds	r3, r7, r3
 80049f4:	781b      	ldrb	r3, [r3, #0]
 80049f6:	2b04      	cmp	r3, #4
 80049f8:	d132      	bne.n	8004a60 <follow_path+0x104>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80049fa:	230e      	movs	r3, #14
 80049fc:	18fb      	adds	r3, r7, r3
 80049fe:	781b      	ldrb	r3, [r3, #0]
 8004a00:	2204      	movs	r2, #4
 8004a02:	4013      	ands	r3, r2
 8004a04:	d12c      	bne.n	8004a60 <follow_path+0x104>
 8004a06:	230f      	movs	r3, #15
 8004a08:	18fb      	adds	r3, r7, r3
 8004a0a:	2205      	movs	r2, #5
 8004a0c:	701a      	strb	r2, [r3, #0]
					}
				}
				break;
 8004a0e:	e027      	b.n	8004a60 <follow_path+0x104>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004a10:	230e      	movs	r3, #14
 8004a12:	18fb      	adds	r3, r7, r3
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	2204      	movs	r2, #4
 8004a18:	4013      	ands	r3, r2
 8004a1a:	d123      	bne.n	8004a64 <follow_path+0x108>
			dir = dp->dir;						/* Follow the sub-directory */
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	2385      	movs	r3, #133	; 0x85
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	58d3      	ldr	r3, [r2, r3]
 8004a24:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	330b      	adds	r3, #11
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	001a      	movs	r2, r3
 8004a2e:	2310      	movs	r3, #16
 8004a30:	4013      	ands	r3, r2
 8004a32:	d104      	bne.n	8004a3e <follow_path+0xe2>
				res = FR_NO_PATH; break;
 8004a34:	230f      	movs	r3, #15
 8004a36:	18fb      	adds	r3, r7, r3
 8004a38:	2205      	movs	r2, #5
 8004a3a:	701a      	strb	r2, [r3, #0]
 8004a3c:	e013      	b.n	8004a66 <follow_path+0x10a>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	2380      	movs	r3, #128	; 0x80
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	58d3      	ldr	r3, [r2, r3]
 8004a46:	68ba      	ldr	r2, [r7, #8]
 8004a48:	0011      	movs	r1, r2
 8004a4a:	0018      	movs	r0, r3
 8004a4c:	f7ff fd80 	bl	8004550 <ld_clust>
 8004a50:	0001      	movs	r1, r0
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	2382      	movs	r3, #130	; 0x82
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	50d1      	str	r1, [r2, r3]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004a5a:	e7a7      	b.n	80049ac <follow_path+0x50>
			if (res != FR_OK) break;
 8004a5c:	46c0      	nop			; (mov r8, r8)
 8004a5e:	e002      	b.n	8004a66 <follow_path+0x10a>
				break;
 8004a60:	46c0      	nop			; (mov r8, r8)
 8004a62:	e000      	b.n	8004a66 <follow_path+0x10a>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004a64:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
 8004a66:	230f      	movs	r3, #15
 8004a68:	18fb      	adds	r3, r7, r3
 8004a6a:	781b      	ldrb	r3, [r3, #0]
}
 8004a6c:	0018      	movs	r0, r3
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	b004      	add	sp, #16
 8004a72:	bdb0      	pop	{r4, r5, r7, pc}

08004a74 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b086      	sub	sp, #24
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	425b      	negs	r3, r3
 8004a80:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d031      	beq.n	8004aee <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	617b      	str	r3, [r7, #20]
 8004a90:	e002      	b.n	8004a98 <get_ldnumber+0x24>
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	3301      	adds	r3, #1
 8004a96:	617b      	str	r3, [r7, #20]
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	2b20      	cmp	r3, #32
 8004a9e:	d903      	bls.n	8004aa8 <get_ldnumber+0x34>
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	2b3a      	cmp	r3, #58	; 0x3a
 8004aa6:	d1f4      	bne.n	8004a92 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	2b3a      	cmp	r3, #58	; 0x3a
 8004aae:	d11c      	bne.n	8004aea <get_ldnumber+0x76>
			tp = *path;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	1c5a      	adds	r2, r3, #1
 8004aba:	60fa      	str	r2, [r7, #12]
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	3b30      	subs	r3, #48	; 0x30
 8004ac0:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	2b09      	cmp	r3, #9
 8004ac6:	d80e      	bhi.n	8004ae6 <get_ldnumber+0x72>
 8004ac8:	68fa      	ldr	r2, [r7, #12]
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d10a      	bne.n	8004ae6 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d107      	bne.n	8004ae6 <get_ldnumber+0x72>
					vol = (int)i;
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	3301      	adds	r3, #1
 8004ade:	617b      	str	r3, [r7, #20]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	697a      	ldr	r2, [r7, #20]
 8004ae4:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	e002      	b.n	8004af0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8004aea:	2300      	movs	r3, #0
 8004aec:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8004aee:	693b      	ldr	r3, [r7, #16]
}
 8004af0:	0018      	movs	r0, r3
 8004af2:	46bd      	mov	sp, r7
 8004af4:	b006      	add	sp, #24
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b082      	sub	sp, #8
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	2381      	movs	r3, #129	; 0x81
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	2100      	movs	r1, #0
 8004b0a:	54d1      	strb	r1, [r2, r3]
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	238b      	movs	r3, #139	; 0x8b
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	2101      	movs	r1, #1
 8004b14:	4249      	negs	r1, r1
 8004b16:	50d1      	str	r1, [r2, r3]
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8004b18:	683a      	ldr	r2, [r7, #0]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	0011      	movs	r1, r2
 8004b1e:	0018      	movs	r0, r3
 8004b20:	f7fe fe6e 	bl	8003800 <move_window>
 8004b24:	1e03      	subs	r3, r0, #0
 8004b26:	d001      	beq.n	8004b2c <check_fs+0x34>
		return 3;
 8004b28:	2303      	movs	r3, #3
 8004b2a:	e04b      	b.n	8004bc4 <check_fs+0xcc>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	33ff      	adds	r3, #255	; 0xff
 8004b30:	33ff      	adds	r3, #255	; 0xff
 8004b32:	3301      	adds	r3, #1
 8004b34:	781b      	ldrb	r3, [r3, #0]
 8004b36:	021b      	lsls	r3, r3, #8
 8004b38:	b21a      	sxth	r2, r3
 8004b3a:	6879      	ldr	r1, [r7, #4]
 8004b3c:	23ff      	movs	r3, #255	; 0xff
 8004b3e:	005b      	lsls	r3, r3, #1
 8004b40:	5ccb      	ldrb	r3, [r1, r3]
 8004b42:	b21b      	sxth	r3, r3
 8004b44:	4313      	orrs	r3, r2
 8004b46:	b21b      	sxth	r3, r3
 8004b48:	4a20      	ldr	r2, [pc, #128]	; (8004bcc <check_fs+0xd4>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d001      	beq.n	8004b52 <check_fs+0x5a>
		return 2;
 8004b4e:	2302      	movs	r3, #2
 8004b50:	e038      	b.n	8004bc4 <check_fs+0xcc>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	3336      	adds	r3, #54	; 0x36
 8004b56:	3303      	adds	r3, #3
 8004b58:	781b      	ldrb	r3, [r3, #0]
 8004b5a:	061a      	lsls	r2, r3, #24
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	3336      	adds	r3, #54	; 0x36
 8004b60:	3302      	adds	r3, #2
 8004b62:	781b      	ldrb	r3, [r3, #0]
 8004b64:	041b      	lsls	r3, r3, #16
 8004b66:	4313      	orrs	r3, r2
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	3236      	adds	r2, #54	; 0x36
 8004b6c:	3201      	adds	r2, #1
 8004b6e:	7812      	ldrb	r2, [r2, #0]
 8004b70:	0212      	lsls	r2, r2, #8
 8004b72:	4313      	orrs	r3, r2
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	2136      	movs	r1, #54	; 0x36
 8004b78:	5c52      	ldrb	r2, [r2, r1]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	021b      	lsls	r3, r3, #8
 8004b7e:	0a1b      	lsrs	r3, r3, #8
 8004b80:	4a13      	ldr	r2, [pc, #76]	; (8004bd0 <check_fs+0xd8>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d101      	bne.n	8004b8a <check_fs+0x92>
		return 0;
 8004b86:	2300      	movs	r3, #0
 8004b88:	e01c      	b.n	8004bc4 <check_fs+0xcc>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	3352      	adds	r3, #82	; 0x52
 8004b8e:	3303      	adds	r3, #3
 8004b90:	781b      	ldrb	r3, [r3, #0]
 8004b92:	061a      	lsls	r2, r3, #24
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	3352      	adds	r3, #82	; 0x52
 8004b98:	3302      	adds	r3, #2
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	041b      	lsls	r3, r3, #16
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	3252      	adds	r2, #82	; 0x52
 8004ba4:	3201      	adds	r2, #1
 8004ba6:	7812      	ldrb	r2, [r2, #0]
 8004ba8:	0212      	lsls	r2, r2, #8
 8004baa:	4313      	orrs	r3, r2
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	2152      	movs	r1, #82	; 0x52
 8004bb0:	5c52      	ldrb	r2, [r2, r1]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	021b      	lsls	r3, r3, #8
 8004bb6:	0a1b      	lsrs	r3, r3, #8
 8004bb8:	4a05      	ldr	r2, [pc, #20]	; (8004bd0 <check_fs+0xd8>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d101      	bne.n	8004bc2 <check_fs+0xca>
		return 0;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	e000      	b.n	8004bc4 <check_fs+0xcc>

	return 1;
 8004bc2:	2301      	movs	r3, #1
}
 8004bc4:	0018      	movs	r0, r3
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	b002      	add	sp, #8
 8004bca:	bd80      	pop	{r7, pc}
 8004bcc:	ffffaa55 	.word	0xffffaa55
 8004bd0:	00544146 	.word	0x00544146

08004bd4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8004bd4:	b5b0      	push	{r4, r5, r7, lr}
 8004bd6:	b096      	sub	sp, #88	; 0x58
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	60b9      	str	r1, [r7, #8]
 8004bde:	1dfb      	adds	r3, r7, #7
 8004be0:	701a      	strb	r2, [r3, #0]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2200      	movs	r2, #0
 8004be6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	0018      	movs	r0, r3
 8004bec:	f7ff ff42 	bl	8004a74 <get_ldnumber>
 8004bf0:	0003      	movs	r3, r0
 8004bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8004bf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	da01      	bge.n	8004bfe <find_volume+0x2a>
 8004bfa:	230b      	movs	r3, #11
 8004bfc:	e2f1      	b.n	80051e2 <find_volume+0x60e>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8004bfe:	4bce      	ldr	r3, [pc, #824]	; (8004f38 <find_volume+0x364>)
 8004c00:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c02:	0092      	lsls	r2, r2, #2
 8004c04:	58d3      	ldr	r3, [r2, r3]
 8004c06:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8004c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d101      	bne.n	8004c12 <find_volume+0x3e>
 8004c0e:	230c      	movs	r3, #12
 8004c10:	e2e7      	b.n	80051e2 <find_volume+0x60e>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c16:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8004c18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c1a:	2380      	movs	r3, #128	; 0x80
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	5cd3      	ldrb	r3, [r2, r3]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d01c      	beq.n	8004c5e <find_volume+0x8a>
		stat = disk_status(fs->drv);
 8004c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c26:	4ac5      	ldr	r2, [pc, #788]	; (8004f3c <find_volume+0x368>)
 8004c28:	5c9b      	ldrb	r3, [r3, r2]
 8004c2a:	2537      	movs	r5, #55	; 0x37
 8004c2c:	197c      	adds	r4, r7, r5
 8004c2e:	0018      	movs	r0, r3
 8004c30:	f7fe fa8e 	bl	8003150 <disk_status>
 8004c34:	0003      	movs	r3, r0
 8004c36:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8004c38:	197b      	adds	r3, r7, r5
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	4013      	ands	r3, r2
 8004c40:	d10d      	bne.n	8004c5e <find_volume+0x8a>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8004c42:	1dfb      	adds	r3, r7, #7
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d007      	beq.n	8004c5a <find_volume+0x86>
 8004c4a:	2337      	movs	r3, #55	; 0x37
 8004c4c:	18fb      	adds	r3, r7, r3
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	2204      	movs	r2, #4
 8004c52:	4013      	ands	r3, r2
 8004c54:	d001      	beq.n	8004c5a <find_volume+0x86>
				return FR_WRITE_PROTECTED;
 8004c56:	230a      	movs	r3, #10
 8004c58:	e2c3      	b.n	80051e2 <find_volume+0x60e>
			return FR_OK;				/* The file system object is valid */
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	e2c1      	b.n	80051e2 <find_volume+0x60e>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8004c5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c60:	2380      	movs	r3, #128	; 0x80
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	2100      	movs	r1, #0
 8004c66:	54d1      	strb	r1, [r2, r3]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8004c68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c6a:	b2d9      	uxtb	r1, r3
 8004c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c6e:	4ab3      	ldr	r2, [pc, #716]	; (8004f3c <find_volume+0x368>)
 8004c70:	5499      	strb	r1, [r3, r2]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8004c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c74:	4ab1      	ldr	r2, [pc, #708]	; (8004f3c <find_volume+0x368>)
 8004c76:	5c9b      	ldrb	r3, [r3, r2]
 8004c78:	2537      	movs	r5, #55	; 0x37
 8004c7a:	197c      	adds	r4, r7, r5
 8004c7c:	0018      	movs	r0, r3
 8004c7e:	f7fe fa89 	bl	8003194 <disk_initialize>
 8004c82:	0003      	movs	r3, r0
 8004c84:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8004c86:	197b      	adds	r3, r7, r5
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	d001      	beq.n	8004c94 <find_volume+0xc0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8004c90:	2303      	movs	r3, #3
 8004c92:	e2a6      	b.n	80051e2 <find_volume+0x60e>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8004c94:	1dfb      	adds	r3, r7, #7
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d007      	beq.n	8004cac <find_volume+0xd8>
 8004c9c:	2337      	movs	r3, #55	; 0x37
 8004c9e:	18fb      	adds	r3, r7, r3
 8004ca0:	781b      	ldrb	r3, [r3, #0]
 8004ca2:	2204      	movs	r2, #4
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	d001      	beq.n	8004cac <find_volume+0xd8>
		return FR_WRITE_PROTECTED;
 8004ca8:	230a      	movs	r3, #10
 8004caa:	e29a      	b.n	80051e2 <find_volume+0x60e>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8004cac:	2300      	movs	r3, #0
 8004cae:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8004cb0:	2557      	movs	r5, #87	; 0x57
 8004cb2:	197c      	adds	r4, r7, r5
 8004cb4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb8:	0011      	movs	r1, r2
 8004cba:	0018      	movs	r0, r3
 8004cbc:	f7ff ff1c 	bl	8004af8 <check_fs>
 8004cc0:	0003      	movs	r3, r0
 8004cc2:	7023      	strb	r3, [r4, #0]
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8004cc4:	197b      	adds	r3, r7, r5
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d155      	bne.n	8004d78 <find_volume+0x1a4>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8004ccc:	2300      	movs	r3, #0
 8004cce:	643b      	str	r3, [r7, #64]	; 0x40
 8004cd0:	e027      	b.n	8004d22 <find_volume+0x14e>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8004cd2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004cd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cd6:	011b      	lsls	r3, r3, #4
 8004cd8:	33bf      	adds	r3, #191	; 0xbf
 8004cda:	33ff      	adds	r3, #255	; 0xff
 8004cdc:	18d3      	adds	r3, r2, r3
 8004cde:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8004ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce2:	3304      	adds	r3, #4
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d012      	beq.n	8004d10 <find_volume+0x13c>
 8004cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cec:	330b      	adds	r3, #11
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	061a      	lsls	r2, r3, #24
 8004cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf4:	330a      	adds	r3, #10
 8004cf6:	781b      	ldrb	r3, [r3, #0]
 8004cf8:	041b      	lsls	r3, r3, #16
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cfe:	3209      	adds	r2, #9
 8004d00:	7812      	ldrb	r2, [r2, #0]
 8004d02:	0212      	lsls	r2, r2, #8
 8004d04:	4313      	orrs	r3, r2
 8004d06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d08:	3208      	adds	r2, #8
 8004d0a:	7812      	ldrb	r2, [r2, #0]
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	e000      	b.n	8004d12 <find_volume+0x13e>
 8004d10:	2300      	movs	r3, #0
 8004d12:	2214      	movs	r2, #20
 8004d14:	18ba      	adds	r2, r7, r2
 8004d16:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004d18:	0089      	lsls	r1, r1, #2
 8004d1a:	508b      	str	r3, [r1, r2]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8004d1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d1e:	3301      	adds	r3, #1
 8004d20:	643b      	str	r3, [r7, #64]	; 0x40
 8004d22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d24:	2b03      	cmp	r3, #3
 8004d26:	d9d4      	bls.n	8004cd2 <find_volume+0xfe>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8004d28:	2300      	movs	r3, #0
 8004d2a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8004d2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d002      	beq.n	8004d38 <find_volume+0x164>
 8004d32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d34:	3b01      	subs	r3, #1
 8004d36:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8004d38:	2314      	movs	r3, #20
 8004d3a:	18fb      	adds	r3, r7, r3
 8004d3c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d3e:	0092      	lsls	r2, r2, #2
 8004d40:	58d3      	ldr	r3, [r2, r3]
 8004d42:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8004d44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d008      	beq.n	8004d5c <find_volume+0x188>
 8004d4a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d4e:	0011      	movs	r1, r2
 8004d50:	0018      	movs	r0, r3
 8004d52:	f7ff fed1 	bl	8004af8 <check_fs>
 8004d56:	0003      	movs	r3, r0
 8004d58:	001a      	movs	r2, r3
 8004d5a:	e000      	b.n	8004d5e <find_volume+0x18a>
 8004d5c:	2202      	movs	r2, #2
 8004d5e:	2157      	movs	r1, #87	; 0x57
 8004d60:	187b      	adds	r3, r7, r1
 8004d62:	701a      	strb	r2, [r3, #0]
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8004d64:	187b      	adds	r3, r7, r1
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d005      	beq.n	8004d78 <find_volume+0x1a4>
 8004d6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d6e:	3301      	adds	r3, #1
 8004d70:	643b      	str	r3, [r7, #64]	; 0x40
 8004d72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d74:	2b03      	cmp	r3, #3
 8004d76:	d9df      	bls.n	8004d38 <find_volume+0x164>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8004d78:	2357      	movs	r3, #87	; 0x57
 8004d7a:	18fb      	adds	r3, r7, r3
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	2b03      	cmp	r3, #3
 8004d80:	d101      	bne.n	8004d86 <find_volume+0x1b2>
 8004d82:	2301      	movs	r3, #1
 8004d84:	e22d      	b.n	80051e2 <find_volume+0x60e>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8004d86:	2357      	movs	r3, #87	; 0x57
 8004d88:	18fb      	adds	r3, r7, r3
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d001      	beq.n	8004d94 <find_volume+0x1c0>
 8004d90:	230d      	movs	r3, #13
 8004d92:	e226      	b.n	80051e2 <find_volume+0x60e>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8004d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d96:	7b1b      	ldrb	r3, [r3, #12]
 8004d98:	021b      	lsls	r3, r3, #8
 8004d9a:	b21a      	sxth	r2, r3
 8004d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d9e:	7adb      	ldrb	r3, [r3, #11]
 8004da0:	b21b      	sxth	r3, r3
 8004da2:	4313      	orrs	r3, r2
 8004da4:	b21a      	sxth	r2, r3
 8004da6:	2380      	movs	r3, #128	; 0x80
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d001      	beq.n	8004db2 <find_volume+0x1de>
		return FR_NO_FILESYSTEM;
 8004dae:	230d      	movs	r3, #13
 8004db0:	e217      	b.n	80051e2 <find_volume+0x60e>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8004db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004db4:	7ddb      	ldrb	r3, [r3, #23]
 8004db6:	021b      	lsls	r3, r3, #8
 8004db8:	b21a      	sxth	r2, r3
 8004dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dbc:	7d9b      	ldrb	r3, [r3, #22]
 8004dbe:	b21b      	sxth	r3, r3
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	b21b      	sxth	r3, r3
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8004dc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d112      	bne.n	8004df4 <find_volume+0x220>
 8004dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd0:	2227      	movs	r2, #39	; 0x27
 8004dd2:	5c9b      	ldrb	r3, [r3, r2]
 8004dd4:	061a      	lsls	r2, r3, #24
 8004dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd8:	2126      	movs	r1, #38	; 0x26
 8004dda:	5c5b      	ldrb	r3, [r3, r1]
 8004ddc:	041b      	lsls	r3, r3, #16
 8004dde:	4313      	orrs	r3, r2
 8004de0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004de2:	2125      	movs	r1, #37	; 0x25
 8004de4:	5c52      	ldrb	r2, [r2, r1]
 8004de6:	0212      	lsls	r2, r2, #8
 8004de8:	4313      	orrs	r3, r2
 8004dea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004dec:	2124      	movs	r1, #36	; 0x24
 8004dee:	5c52      	ldrb	r2, [r2, r1]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8004df4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004df6:	2386      	movs	r3, #134	; 0x86
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004dfc:	50d1      	str	r1, [r2, r3]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8004dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e00:	7c19      	ldrb	r1, [r3, #16]
 8004e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e04:	4a4e      	ldr	r2, [pc, #312]	; (8004f40 <find_volume+0x36c>)
 8004e06:	5499      	strb	r1, [r3, r2]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8004e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e0a:	4a4d      	ldr	r2, [pc, #308]	; (8004f40 <find_volume+0x36c>)
 8004e0c:	5c9b      	ldrb	r3, [r3, r2]
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d006      	beq.n	8004e20 <find_volume+0x24c>
 8004e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e14:	4a4a      	ldr	r2, [pc, #296]	; (8004f40 <find_volume+0x36c>)
 8004e16:	5c9b      	ldrb	r3, [r3, r2]
 8004e18:	2b02      	cmp	r3, #2
 8004e1a:	d001      	beq.n	8004e20 <find_volume+0x24c>
		return FR_NO_FILESYSTEM;
 8004e1c:	230d      	movs	r3, #13
 8004e1e:	e1e0      	b.n	80051e2 <find_volume+0x60e>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8004e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e22:	4a47      	ldr	r2, [pc, #284]	; (8004f40 <find_volume+0x36c>)
 8004e24:	5c9b      	ldrb	r3, [r3, r2]
 8004e26:	001a      	movs	r2, r3
 8004e28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e2a:	4353      	muls	r3, r2
 8004e2c:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8004e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e30:	7b59      	ldrb	r1, [r3, #13]
 8004e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e34:	4a43      	ldr	r2, [pc, #268]	; (8004f44 <find_volume+0x370>)
 8004e36:	5499      	strb	r1, [r3, r2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8004e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e3a:	4a42      	ldr	r2, [pc, #264]	; (8004f44 <find_volume+0x370>)
 8004e3c:	5c9b      	ldrb	r3, [r3, r2]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d009      	beq.n	8004e56 <find_volume+0x282>
 8004e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e44:	4a3f      	ldr	r2, [pc, #252]	; (8004f44 <find_volume+0x370>)
 8004e46:	5c9b      	ldrb	r3, [r3, r2]
 8004e48:	0019      	movs	r1, r3
 8004e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e4c:	4a3d      	ldr	r2, [pc, #244]	; (8004f44 <find_volume+0x370>)
 8004e4e:	5c9b      	ldrb	r3, [r3, r2]
 8004e50:	3b01      	subs	r3, #1
 8004e52:	400b      	ands	r3, r1
 8004e54:	d001      	beq.n	8004e5a <find_volume+0x286>
		return FR_NO_FILESYSTEM;
 8004e56:	230d      	movs	r3, #13
 8004e58:	e1c3      	b.n	80051e2 <find_volume+0x60e>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8004e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e5c:	7c9b      	ldrb	r3, [r3, #18]
 8004e5e:	021b      	lsls	r3, r3, #8
 8004e60:	b21a      	sxth	r2, r3
 8004e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e64:	7c5b      	ldrb	r3, [r3, #17]
 8004e66:	b21b      	sxth	r3, r3
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	b21b      	sxth	r3, r3
 8004e6c:	b299      	uxth	r1, r3
 8004e6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e70:	2382      	movs	r3, #130	; 0x82
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	52d1      	strh	r1, [r2, r3]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8004e76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e78:	2382      	movs	r3, #130	; 0x82
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	5ad3      	ldrh	r3, [r2, r3]
 8004e7e:	220f      	movs	r2, #15
 8004e80:	4013      	ands	r3, r2
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d001      	beq.n	8004e8c <find_volume+0x2b8>
		return FR_NO_FILESYSTEM;
 8004e88:	230d      	movs	r3, #13
 8004e8a:	e1aa      	b.n	80051e2 <find_volume+0x60e>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8004e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e8e:	7d1b      	ldrb	r3, [r3, #20]
 8004e90:	021b      	lsls	r3, r3, #8
 8004e92:	b21a      	sxth	r2, r3
 8004e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e96:	7cdb      	ldrb	r3, [r3, #19]
 8004e98:	b21b      	sxth	r3, r3
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	b21b      	sxth	r3, r3
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8004ea2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d112      	bne.n	8004ece <find_volume+0x2fa>
 8004ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eaa:	2223      	movs	r2, #35	; 0x23
 8004eac:	5c9b      	ldrb	r3, [r3, r2]
 8004eae:	061a      	lsls	r2, r3, #24
 8004eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb2:	2122      	movs	r1, #34	; 0x22
 8004eb4:	5c5b      	ldrb	r3, [r3, r1]
 8004eb6:	041b      	lsls	r3, r3, #16
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ebc:	2121      	movs	r1, #33	; 0x21
 8004ebe:	5c52      	ldrb	r2, [r2, r1]
 8004ec0:	0212      	lsls	r2, r2, #8
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ec6:	2120      	movs	r1, #32
 8004ec8:	5c52      	ldrb	r2, [r2, r1]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8004ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed0:	7bdb      	ldrb	r3, [r3, #15]
 8004ed2:	021b      	lsls	r3, r3, #8
 8004ed4:	b21a      	sxth	r2, r3
 8004ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed8:	7b9b      	ldrb	r3, [r3, #14]
 8004eda:	b21b      	sxth	r3, r3
 8004edc:	4313      	orrs	r3, r2
 8004ede:	b21a      	sxth	r2, r3
 8004ee0:	212e      	movs	r1, #46	; 0x2e
 8004ee2:	187b      	adds	r3, r7, r1
 8004ee4:	801a      	strh	r2, [r3, #0]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8004ee6:	187b      	adds	r3, r7, r1
 8004ee8:	881b      	ldrh	r3, [r3, #0]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d101      	bne.n	8004ef2 <find_volume+0x31e>
 8004eee:	230d      	movs	r3, #13
 8004ef0:	e177      	b.n	80051e2 <find_volume+0x60e>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8004ef2:	232e      	movs	r3, #46	; 0x2e
 8004ef4:	18fb      	adds	r3, r7, r3
 8004ef6:	881a      	ldrh	r2, [r3, #0]
 8004ef8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004efa:	18d3      	adds	r3, r2, r3
 8004efc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004efe:	2282      	movs	r2, #130	; 0x82
 8004f00:	0092      	lsls	r2, r2, #2
 8004f02:	5a8a      	ldrh	r2, [r1, r2]
 8004f04:	0912      	lsrs	r2, r2, #4
 8004f06:	b292      	uxth	r2, r2
 8004f08:	189b      	adds	r3, r3, r2
 8004f0a:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8004f0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d201      	bcs.n	8004f18 <find_volume+0x344>
 8004f14:	230d      	movs	r3, #13
 8004f16:	e164      	b.n	80051e2 <find_volume+0x60e>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8004f18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f1c:	1ad0      	subs	r0, r2, r3
 8004f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f20:	4a08      	ldr	r2, [pc, #32]	; (8004f44 <find_volume+0x370>)
 8004f22:	5c9b      	ldrb	r3, [r3, r2]
 8004f24:	0019      	movs	r1, r3
 8004f26:	f7fb f8f7 	bl	8000118 <__udivsi3>
 8004f2a:	0003      	movs	r3, r0
 8004f2c:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8004f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d109      	bne.n	8004f48 <find_volume+0x374>
 8004f34:	230d      	movs	r3, #13
 8004f36:	e154      	b.n	80051e2 <find_volume+0x60e>
 8004f38:	200000b0 	.word	0x200000b0
 8004f3c:	00000201 	.word	0x00000201
 8004f40:	00000203 	.word	0x00000203
 8004f44:	00000202 	.word	0x00000202
	fmt = FS_FAT12;
 8004f48:	2357      	movs	r3, #87	; 0x57
 8004f4a:	18fb      	adds	r3, r7, r3
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8004f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f52:	4aa6      	ldr	r2, [pc, #664]	; (80051ec <find_volume+0x618>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d903      	bls.n	8004f60 <find_volume+0x38c>
 8004f58:	2357      	movs	r3, #87	; 0x57
 8004f5a:	18fb      	adds	r3, r7, r3
 8004f5c:	2202      	movs	r2, #2
 8004f5e:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8004f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f62:	4aa3      	ldr	r2, [pc, #652]	; (80051f0 <find_volume+0x61c>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d903      	bls.n	8004f70 <find_volume+0x39c>
 8004f68:	2357      	movs	r3, #87	; 0x57
 8004f6a:	18fb      	adds	r3, r7, r3
 8004f6c:	2203      	movs	r2, #3
 8004f6e:	701a      	strb	r2, [r3, #0]

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8004f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f72:	1c99      	adds	r1, r3, #2
 8004f74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f76:	2385      	movs	r3, #133	; 0x85
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	50d1      	str	r1, [r2, r3]
	fs->volbase = bsect;								/* Volume start sector */
 8004f7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f7e:	2387      	movs	r3, #135	; 0x87
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004f84:	50d1      	str	r1, [r2, r3]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8004f86:	232e      	movs	r3, #46	; 0x2e
 8004f88:	18fb      	adds	r3, r7, r3
 8004f8a:	881a      	ldrh	r2, [r3, #0]
 8004f8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f8e:	18d1      	adds	r1, r2, r3
 8004f90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f92:	2388      	movs	r3, #136	; 0x88
 8004f94:	009b      	lsls	r3, r3, #2
 8004f96:	50d1      	str	r1, [r2, r3]
	fs->database = bsect + sysect;						/* Data start sector */
 8004f98:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f9c:	18d1      	adds	r1, r2, r3
 8004f9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004fa0:	238a      	movs	r3, #138	; 0x8a
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	50d1      	str	r1, [r2, r3]
	if (fmt == FS_FAT32) {
 8004fa6:	2357      	movs	r3, #87	; 0x57
 8004fa8:	18fb      	adds	r3, r7, r3
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	2b03      	cmp	r3, #3
 8004fae:	d125      	bne.n	8004ffc <find_volume+0x428>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8004fb0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004fb2:	2382      	movs	r3, #130	; 0x82
 8004fb4:	009b      	lsls	r3, r3, #2
 8004fb6:	5ad3      	ldrh	r3, [r2, r3]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d001      	beq.n	8004fc0 <find_volume+0x3ec>
 8004fbc:	230d      	movs	r3, #13
 8004fbe:	e110      	b.n	80051e2 <find_volume+0x60e>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8004fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fc2:	222f      	movs	r2, #47	; 0x2f
 8004fc4:	5c9b      	ldrb	r3, [r3, r2]
 8004fc6:	061a      	lsls	r2, r3, #24
 8004fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fca:	212e      	movs	r1, #46	; 0x2e
 8004fcc:	5c5b      	ldrb	r3, [r3, r1]
 8004fce:	041b      	lsls	r3, r3, #16
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004fd4:	212d      	movs	r1, #45	; 0x2d
 8004fd6:	5c52      	ldrb	r2, [r2, r1]
 8004fd8:	0212      	lsls	r2, r2, #8
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004fde:	212c      	movs	r1, #44	; 0x2c
 8004fe0:	5c52      	ldrb	r2, [r2, r1]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	0019      	movs	r1, r3
 8004fe6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004fe8:	2389      	movs	r3, #137	; 0x89
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	50d1      	str	r1, [r2, r3]
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8004fee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ff0:	2385      	movs	r3, #133	; 0x85
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	58d3      	ldr	r3, [r2, r3]
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	647b      	str	r3, [r7, #68]	; 0x44
 8004ffa:	e02c      	b.n	8005056 <find_volume+0x482>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8004ffc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ffe:	2382      	movs	r3, #130	; 0x82
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	5ad3      	ldrh	r3, [r2, r3]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d101      	bne.n	800500c <find_volume+0x438>
 8005008:	230d      	movs	r3, #13
 800500a:	e0ea      	b.n	80051e2 <find_volume+0x60e>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800500c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800500e:	2388      	movs	r3, #136	; 0x88
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	58d2      	ldr	r2, [r2, r3]
 8005014:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005016:	18d1      	adds	r1, r2, r3
 8005018:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800501a:	2389      	movs	r3, #137	; 0x89
 800501c:	009b      	lsls	r3, r3, #2
 800501e:	50d1      	str	r1, [r2, r3]
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005020:	2357      	movs	r3, #87	; 0x57
 8005022:	18fb      	adds	r3, r7, r3
 8005024:	781b      	ldrb	r3, [r3, #0]
 8005026:	2b02      	cmp	r3, #2
 8005028:	d105      	bne.n	8005036 <find_volume+0x462>
 800502a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800502c:	2385      	movs	r3, #133	; 0x85
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	58d3      	ldr	r3, [r2, r3]
 8005032:	005b      	lsls	r3, r3, #1
 8005034:	e00e      	b.n	8005054 <find_volume+0x480>
 8005036:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005038:	2385      	movs	r3, #133	; 0x85
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	58d2      	ldr	r2, [r2, r3]
 800503e:	0013      	movs	r3, r2
 8005040:	005b      	lsls	r3, r3, #1
 8005042:	189b      	adds	r3, r3, r2
 8005044:	085a      	lsrs	r2, r3, #1
 8005046:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005048:	2385      	movs	r3, #133	; 0x85
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	58cb      	ldr	r3, [r1, r3]
 800504e:	2101      	movs	r1, #1
 8005050:	400b      	ands	r3, r1
 8005052:	18d3      	adds	r3, r2, r3
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8005054:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8005056:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005058:	2386      	movs	r3, #134	; 0x86
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	58d2      	ldr	r2, [r2, r3]
 800505e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005060:	4964      	ldr	r1, [pc, #400]	; (80051f4 <find_volume+0x620>)
 8005062:	468c      	mov	ip, r1
 8005064:	4463      	add	r3, ip
 8005066:	0a5b      	lsrs	r3, r3, #9
 8005068:	429a      	cmp	r2, r3
 800506a:	d201      	bcs.n	8005070 <find_volume+0x49c>
		return FR_NO_FILESYSTEM;
 800506c:	230d      	movs	r3, #13
 800506e:	e0b8      	b.n	80051e2 <find_volume+0x60e>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8005070:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005072:	2384      	movs	r3, #132	; 0x84
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	2101      	movs	r1, #1
 8005078:	4249      	negs	r1, r1
 800507a:	50d1      	str	r1, [r2, r3]
 800507c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800507e:	2384      	movs	r3, #132	; 0x84
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	58d1      	ldr	r1, [r2, r3]
 8005084:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005086:	2383      	movs	r3, #131	; 0x83
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	50d1      	str	r1, [r2, r3]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 800508c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800508e:	4a5a      	ldr	r2, [pc, #360]	; (80051f8 <find_volume+0x624>)
 8005090:	2180      	movs	r1, #128	; 0x80
 8005092:	5499      	strb	r1, [r3, r2]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8005094:	2357      	movs	r3, #87	; 0x57
 8005096:	18fb      	adds	r3, r7, r3
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	2b03      	cmp	r3, #3
 800509c:	d000      	beq.n	80050a0 <find_volume+0x4cc>
 800509e:	e089      	b.n	80051b4 <find_volume+0x5e0>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 80050a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050a2:	2231      	movs	r2, #49	; 0x31
 80050a4:	5c9b      	ldrb	r3, [r3, r2]
 80050a6:	021b      	lsls	r3, r3, #8
 80050a8:	b21a      	sxth	r2, r3
 80050aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ac:	2130      	movs	r1, #48	; 0x30
 80050ae:	5c5b      	ldrb	r3, [r3, r1]
 80050b0:	b21b      	sxth	r3, r3
 80050b2:	4313      	orrs	r3, r2
 80050b4:	b21b      	sxth	r3, r3
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d000      	beq.n	80050bc <find_volume+0x4e8>
 80050ba:	e07b      	b.n	80051b4 <find_volume+0x5e0>
		&& move_window(fs, bsect + 1) == FR_OK)
 80050bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050be:	1c5a      	adds	r2, r3, #1
 80050c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050c2:	0011      	movs	r1, r2
 80050c4:	0018      	movs	r0, r3
 80050c6:	f7fe fb9b 	bl	8003800 <move_window>
 80050ca:	1e03      	subs	r3, r0, #0
 80050cc:	d172      	bne.n	80051b4 <find_volume+0x5e0>
	{
		fs->fsi_flag = 0;
 80050ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050d0:	4a49      	ldr	r2, [pc, #292]	; (80051f8 <find_volume+0x624>)
 80050d2:	2100      	movs	r1, #0
 80050d4:	5499      	strb	r1, [r3, r2]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80050d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050d8:	4a46      	ldr	r2, [pc, #280]	; (80051f4 <find_volume+0x620>)
 80050da:	5c9b      	ldrb	r3, [r3, r2]
 80050dc:	021b      	lsls	r3, r3, #8
 80050de:	b21a      	sxth	r2, r3
 80050e0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80050e2:	23ff      	movs	r3, #255	; 0xff
 80050e4:	005b      	lsls	r3, r3, #1
 80050e6:	5ccb      	ldrb	r3, [r1, r3]
 80050e8:	b21b      	sxth	r3, r3
 80050ea:	4313      	orrs	r3, r2
 80050ec:	b21b      	sxth	r3, r3
 80050ee:	4a43      	ldr	r2, [pc, #268]	; (80051fc <find_volume+0x628>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d15f      	bne.n	80051b4 <find_volume+0x5e0>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 80050f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050f6:	78db      	ldrb	r3, [r3, #3]
 80050f8:	061a      	lsls	r2, r3, #24
 80050fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050fc:	789b      	ldrb	r3, [r3, #2]
 80050fe:	041b      	lsls	r3, r3, #16
 8005100:	4313      	orrs	r3, r2
 8005102:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005104:	7852      	ldrb	r2, [r2, #1]
 8005106:	0212      	lsls	r2, r2, #8
 8005108:	4313      	orrs	r3, r2
 800510a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800510c:	7812      	ldrb	r2, [r2, #0]
 800510e:	4313      	orrs	r3, r2
 8005110:	4a3b      	ldr	r2, [pc, #236]	; (8005200 <find_volume+0x62c>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d14e      	bne.n	80051b4 <find_volume+0x5e0>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8005116:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005118:	23e8      	movs	r3, #232	; 0xe8
 800511a:	33ff      	adds	r3, #255	; 0xff
 800511c:	5cd3      	ldrb	r3, [r2, r3]
 800511e:	061a      	lsls	r2, r3, #24
 8005120:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005122:	23f3      	movs	r3, #243	; 0xf3
 8005124:	005b      	lsls	r3, r3, #1
 8005126:	5ccb      	ldrb	r3, [r1, r3]
 8005128:	041b      	lsls	r3, r3, #16
 800512a:	4313      	orrs	r3, r2
 800512c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800512e:	22e6      	movs	r2, #230	; 0xe6
 8005130:	32ff      	adds	r2, #255	; 0xff
 8005132:	5c8a      	ldrb	r2, [r1, r2]
 8005134:	0212      	lsls	r2, r2, #8
 8005136:	4313      	orrs	r3, r2
 8005138:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800513a:	22f2      	movs	r2, #242	; 0xf2
 800513c:	0052      	lsls	r2, r2, #1
 800513e:	5c8a      	ldrb	r2, [r1, r2]
 8005140:	4313      	orrs	r3, r2
 8005142:	4a30      	ldr	r2, [pc, #192]	; (8005204 <find_volume+0x630>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d135      	bne.n	80051b4 <find_volume+0x5e0>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8005148:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800514a:	23ec      	movs	r3, #236	; 0xec
 800514c:	33ff      	adds	r3, #255	; 0xff
 800514e:	5cd3      	ldrb	r3, [r2, r3]
 8005150:	061a      	lsls	r2, r3, #24
 8005152:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005154:	23f5      	movs	r3, #245	; 0xf5
 8005156:	005b      	lsls	r3, r3, #1
 8005158:	5ccb      	ldrb	r3, [r1, r3]
 800515a:	041b      	lsls	r3, r3, #16
 800515c:	4313      	orrs	r3, r2
 800515e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005160:	22ea      	movs	r2, #234	; 0xea
 8005162:	32ff      	adds	r2, #255	; 0xff
 8005164:	5c8a      	ldrb	r2, [r1, r2]
 8005166:	0212      	lsls	r2, r2, #8
 8005168:	4313      	orrs	r3, r2
 800516a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800516c:	22f4      	movs	r2, #244	; 0xf4
 800516e:	0052      	lsls	r2, r2, #1
 8005170:	5c8a      	ldrb	r2, [r1, r2]
 8005172:	4313      	orrs	r3, r2
 8005174:	0019      	movs	r1, r3
 8005176:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005178:	2384      	movs	r3, #132	; 0x84
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	50d1      	str	r1, [r2, r3]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800517e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005180:	23f0      	movs	r3, #240	; 0xf0
 8005182:	33ff      	adds	r3, #255	; 0xff
 8005184:	5cd3      	ldrb	r3, [r2, r3]
 8005186:	061a      	lsls	r2, r3, #24
 8005188:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800518a:	23f7      	movs	r3, #247	; 0xf7
 800518c:	005b      	lsls	r3, r3, #1
 800518e:	5ccb      	ldrb	r3, [r1, r3]
 8005190:	041b      	lsls	r3, r3, #16
 8005192:	4313      	orrs	r3, r2
 8005194:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005196:	22ee      	movs	r2, #238	; 0xee
 8005198:	32ff      	adds	r2, #255	; 0xff
 800519a:	5c8a      	ldrb	r2, [r1, r2]
 800519c:	0212      	lsls	r2, r2, #8
 800519e:	4313      	orrs	r3, r2
 80051a0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80051a2:	22f6      	movs	r2, #246	; 0xf6
 80051a4:	0052      	lsls	r2, r2, #1
 80051a6:	5c8a      	ldrb	r2, [r1, r2]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	0019      	movs	r1, r3
 80051ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80051ae:	2383      	movs	r3, #131	; 0x83
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	50d1      	str	r1, [r2, r3]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 80051b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80051b6:	2357      	movs	r3, #87	; 0x57
 80051b8:	18f9      	adds	r1, r7, r3
 80051ba:	2380      	movs	r3, #128	; 0x80
 80051bc:	009b      	lsls	r3, r3, #2
 80051be:	7809      	ldrb	r1, [r1, #0]
 80051c0:	54d1      	strb	r1, [r2, r3]
	fs->id = ++Fsid;	/* File system mount ID */
 80051c2:	4b11      	ldr	r3, [pc, #68]	; (8005208 <find_volume+0x634>)
 80051c4:	881b      	ldrh	r3, [r3, #0]
 80051c6:	3301      	adds	r3, #1
 80051c8:	b29a      	uxth	r2, r3
 80051ca:	4b0f      	ldr	r3, [pc, #60]	; (8005208 <find_volume+0x634>)
 80051cc:	801a      	strh	r2, [r3, #0]
 80051ce:	4b0e      	ldr	r3, [pc, #56]	; (8005208 <find_volume+0x634>)
 80051d0:	8819      	ldrh	r1, [r3, #0]
 80051d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051d4:	4a0d      	ldr	r2, [pc, #52]	; (800520c <find_volume+0x638>)
 80051d6:	5299      	strh	r1, [r3, r2]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 80051d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051da:	0018      	movs	r0, r3
 80051dc:	f7fe fa92 	bl	8003704 <clear_lock>
#endif

	return FR_OK;
 80051e0:	2300      	movs	r3, #0
}
 80051e2:	0018      	movs	r0, r3
 80051e4:	46bd      	mov	sp, r7
 80051e6:	b016      	add	sp, #88	; 0x58
 80051e8:	bdb0      	pop	{r4, r5, r7, pc}
 80051ea:	46c0      	nop			; (mov r8, r8)
 80051ec:	00000ff5 	.word	0x00000ff5
 80051f0:	0000fff5 	.word	0x0000fff5
 80051f4:	000001ff 	.word	0x000001ff
 80051f8:	00000205 	.word	0x00000205
 80051fc:	ffffaa55 	.word	0xffffaa55
 8005200:	41615252 	.word	0x41615252
 8005204:	61417272 	.word	0x61417272
 8005208:	200000b4 	.word	0x200000b4
 800520c:	00000206 	.word	0x00000206

08005210 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d028      	beq.n	8005274 <validate+0x64>
 8005222:	68fa      	ldr	r2, [r7, #12]
 8005224:	2380      	movs	r3, #128	; 0x80
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	58d3      	ldr	r3, [r2, r3]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d022      	beq.n	8005274 <validate+0x64>
 800522e:	68fa      	ldr	r2, [r7, #12]
 8005230:	2380      	movs	r3, #128	; 0x80
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	58d2      	ldr	r2, [r2, r3]
 8005236:	2380      	movs	r3, #128	; 0x80
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	5cd3      	ldrb	r3, [r2, r3]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d019      	beq.n	8005274 <validate+0x64>
 8005240:	68fa      	ldr	r2, [r7, #12]
 8005242:	2380      	movs	r3, #128	; 0x80
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	58d3      	ldr	r3, [r2, r3]
 8005248:	4a0e      	ldr	r2, [pc, #56]	; (8005284 <validate+0x74>)
 800524a:	5a9a      	ldrh	r2, [r3, r2]
 800524c:	68f9      	ldr	r1, [r7, #12]
 800524e:	2381      	movs	r3, #129	; 0x81
 8005250:	009b      	lsls	r3, r3, #2
 8005252:	5acb      	ldrh	r3, [r1, r3]
 8005254:	429a      	cmp	r2, r3
 8005256:	d10d      	bne.n	8005274 <validate+0x64>
 8005258:	68fa      	ldr	r2, [r7, #12]
 800525a:	2380      	movs	r3, #128	; 0x80
 800525c:	009b      	lsls	r3, r3, #2
 800525e:	58d3      	ldr	r3, [r2, r3]
 8005260:	4a09      	ldr	r2, [pc, #36]	; (8005288 <validate+0x78>)
 8005262:	5c9b      	ldrb	r3, [r3, r2]
 8005264:	0018      	movs	r0, r3
 8005266:	f7fd ff73 	bl	8003150 <disk_status>
 800526a:	0003      	movs	r3, r0
 800526c:	001a      	movs	r2, r3
 800526e:	2301      	movs	r3, #1
 8005270:	4013      	ands	r3, r2
 8005272:	d001      	beq.n	8005278 <validate+0x68>
		return FR_INVALID_OBJECT;
 8005274:	2309      	movs	r3, #9
 8005276:	e000      	b.n	800527a <validate+0x6a>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8005278:	2300      	movs	r3, #0
}
 800527a:	0018      	movs	r0, r3
 800527c:	46bd      	mov	sp, r7
 800527e:	b004      	add	sp, #16
 8005280:	bd80      	pop	{r7, pc}
 8005282:	46c0      	nop			; (mov r8, r8)
 8005284:	00000206 	.word	0x00000206
 8005288:	00000201 	.word	0x00000201

0800528c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800528c:	b5b0      	push	{r4, r5, r7, lr}
 800528e:	b088      	sub	sp, #32
 8005290:	af00      	add	r7, sp, #0
 8005292:	60f8      	str	r0, [r7, #12]
 8005294:	60b9      	str	r1, [r7, #8]
 8005296:	1dfb      	adds	r3, r7, #7
 8005298:	701a      	strb	r2, [r3, #0]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800529e:	2310      	movs	r3, #16
 80052a0:	18fb      	adds	r3, r7, r3
 80052a2:	0018      	movs	r0, r3
 80052a4:	f7ff fbe6 	bl	8004a74 <get_ldnumber>
 80052a8:	0003      	movs	r3, r0
 80052aa:	61fb      	str	r3, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80052ac:	69fb      	ldr	r3, [r7, #28]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	da01      	bge.n	80052b6 <f_mount+0x2a>
 80052b2:	230b      	movs	r3, #11
 80052b4:	e034      	b.n	8005320 <f_mount+0x94>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80052b6:	4b1c      	ldr	r3, [pc, #112]	; (8005328 <f_mount+0x9c>)
 80052b8:	69fa      	ldr	r2, [r7, #28]
 80052ba:	0092      	lsls	r2, r2, #2
 80052bc:	58d3      	ldr	r3, [r2, r3]
 80052be:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80052c0:	69bb      	ldr	r3, [r7, #24]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d008      	beq.n	80052d8 <f_mount+0x4c>
#if _FS_LOCK
		clear_lock(cfs);
 80052c6:	69bb      	ldr	r3, [r7, #24]
 80052c8:	0018      	movs	r0, r3
 80052ca:	f7fe fa1b 	bl	8003704 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80052ce:	69ba      	ldr	r2, [r7, #24]
 80052d0:	2380      	movs	r3, #128	; 0x80
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	2100      	movs	r1, #0
 80052d6:	54d1      	strb	r1, [r2, r3]
	}

	if (fs) {
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d004      	beq.n	80052e8 <f_mount+0x5c>
		fs->fs_type = 0;				/* Clear new fs object */
 80052de:	68fa      	ldr	r2, [r7, #12]
 80052e0:	2380      	movs	r3, #128	; 0x80
 80052e2:	009b      	lsls	r3, r3, #2
 80052e4:	2100      	movs	r1, #0
 80052e6:	54d1      	strb	r1, [r2, r3]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80052e8:	68f9      	ldr	r1, [r7, #12]
 80052ea:	4b0f      	ldr	r3, [pc, #60]	; (8005328 <f_mount+0x9c>)
 80052ec:	69fa      	ldr	r2, [r7, #28]
 80052ee:	0092      	lsls	r2, r2, #2
 80052f0:	50d1      	str	r1, [r2, r3]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d003      	beq.n	8005300 <f_mount+0x74>
 80052f8:	1dfb      	adds	r3, r7, #7
 80052fa:	781b      	ldrb	r3, [r3, #0]
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d001      	beq.n	8005304 <f_mount+0x78>
 8005300:	2300      	movs	r3, #0
 8005302:	e00d      	b.n	8005320 <f_mount+0x94>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8005304:	2517      	movs	r5, #23
 8005306:	197c      	adds	r4, r7, r5
 8005308:	2308      	movs	r3, #8
 800530a:	18f9      	adds	r1, r7, r3
 800530c:	230c      	movs	r3, #12
 800530e:	18fb      	adds	r3, r7, r3
 8005310:	2200      	movs	r2, #0
 8005312:	0018      	movs	r0, r3
 8005314:	f7ff fc5e 	bl	8004bd4 <find_volume>
 8005318:	0003      	movs	r3, r0
 800531a:	7023      	strb	r3, [r4, #0]
	LEAVE_FF(fs, res);
 800531c:	197b      	adds	r3, r7, r5
 800531e:	781b      	ldrb	r3, [r3, #0]
}
 8005320:	0018      	movs	r0, r3
 8005322:	46bd      	mov	sp, r7
 8005324:	b008      	add	sp, #32
 8005326:	bdb0      	pop	{r4, r5, r7, pc}
 8005328:	200000b0 	.word	0x200000b0

0800532c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800532c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800532e:	4ce1      	ldr	r4, [pc, #900]	; (80056b4 <f_open+0x388>)
 8005330:	44a5      	add	sp, r4
 8005332:	af00      	add	r7, sp, #0
 8005334:	60f8      	str	r0, [r7, #12]
 8005336:	60b9      	str	r1, [r7, #8]
 8005338:	4bdf      	ldr	r3, [pc, #892]	; (80056b8 <f_open+0x38c>)
 800533a:	2194      	movs	r1, #148	; 0x94
 800533c:	0089      	lsls	r1, r1, #2
 800533e:	468c      	mov	ip, r1
 8005340:	44bc      	add	ip, r7
 8005342:	4463      	add	r3, ip
 8005344:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d101      	bne.n	8005350 <f_open+0x24>
 800534c:	2309      	movs	r3, #9
 800534e:	e294      	b.n	800587a <f_open+0x54e>
	fp->fs = 0;			/* Clear file object */
 8005350:	68fa      	ldr	r2, [r7, #12]
 8005352:	2380      	movs	r3, #128	; 0x80
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	2100      	movs	r1, #0
 8005358:	50d1      	str	r1, [r2, r3]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800535a:	4bd7      	ldr	r3, [pc, #860]	; (80056b8 <f_open+0x38c>)
 800535c:	2294      	movs	r2, #148	; 0x94
 800535e:	0092      	lsls	r2, r2, #2
 8005360:	4694      	mov	ip, r2
 8005362:	44bc      	add	ip, r7
 8005364:	4463      	add	r3, ip
 8005366:	4ad4      	ldr	r2, [pc, #848]	; (80056b8 <f_open+0x38c>)
 8005368:	2194      	movs	r1, #148	; 0x94
 800536a:	0089      	lsls	r1, r1, #2
 800536c:	468c      	mov	ip, r1
 800536e:	44bc      	add	ip, r7
 8005370:	4462      	add	r2, ip
 8005372:	7812      	ldrb	r2, [r2, #0]
 8005374:	211f      	movs	r1, #31
 8005376:	400a      	ands	r2, r1
 8005378:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800537a:	4bcf      	ldr	r3, [pc, #828]	; (80056b8 <f_open+0x38c>)
 800537c:	2294      	movs	r2, #148	; 0x94
 800537e:	0092      	lsls	r2, r2, #2
 8005380:	4694      	mov	ip, r2
 8005382:	44bc      	add	ip, r7
 8005384:	4463      	add	r3, ip
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	2201      	movs	r2, #1
 800538a:	4393      	bics	r3, r2
 800538c:	b2da      	uxtb	r2, r3
 800538e:	4dcb      	ldr	r5, [pc, #812]	; (80056bc <f_open+0x390>)
 8005390:	197c      	adds	r4, r7, r5
 8005392:	2308      	movs	r3, #8
 8005394:	18f9      	adds	r1, r7, r3
 8005396:	2320      	movs	r3, #32
 8005398:	18fb      	adds	r3, r7, r3
 800539a:	2080      	movs	r0, #128	; 0x80
 800539c:	0080      	lsls	r0, r0, #2
 800539e:	4684      	mov	ip, r0
 80053a0:	4463      	add	r3, ip
 80053a2:	0018      	movs	r0, r3
 80053a4:	f7ff fc16 	bl	8004bd4 <find_volume>
 80053a8:	0003      	movs	r3, r0
 80053aa:	7023      	strb	r3, [r4, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 80053ac:	197b      	adds	r3, r7, r5
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d000      	beq.n	80053b6 <f_open+0x8a>
 80053b4:	e25e      	b.n	8005874 <f_open+0x548>
		INIT_BUF(dj);
 80053b6:	4bc2      	ldr	r3, [pc, #776]	; (80056c0 <f_open+0x394>)
 80053b8:	2594      	movs	r5, #148	; 0x94
 80053ba:	00ad      	lsls	r5, r5, #2
 80053bc:	197a      	adds	r2, r7, r5
 80053be:	18d2      	adds	r2, r2, r3
 80053c0:	2386      	movs	r3, #134	; 0x86
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	2114      	movs	r1, #20
 80053c6:	1879      	adds	r1, r7, r1
 80053c8:	50d1      	str	r1, [r2, r3]
		res = follow_path(&dj, path);	/* Follow the file path */
 80053ca:	68ba      	ldr	r2, [r7, #8]
 80053cc:	4ebb      	ldr	r6, [pc, #748]	; (80056bc <f_open+0x390>)
 80053ce:	19bc      	adds	r4, r7, r6
 80053d0:	2320      	movs	r3, #32
 80053d2:	18fb      	adds	r3, r7, r3
 80053d4:	0011      	movs	r1, r2
 80053d6:	0018      	movs	r0, r3
 80053d8:	f7ff fac0 	bl	800495c <follow_path>
 80053dc:	0003      	movs	r3, r0
 80053de:	7023      	strb	r3, [r4, #0]
		dir = dj.dir;
 80053e0:	4bb7      	ldr	r3, [pc, #732]	; (80056c0 <f_open+0x394>)
 80053e2:	197a      	adds	r2, r7, r5
 80053e4:	18d2      	adds	r2, r2, r3
 80053e6:	2385      	movs	r3, #133	; 0x85
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	58d3      	ldr	r3, [r2, r3]
 80053ec:	2292      	movs	r2, #146	; 0x92
 80053ee:	0092      	lsls	r2, r2, #2
 80053f0:	18ba      	adds	r2, r7, r2
 80053f2:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80053f4:	19bb      	adds	r3, r7, r6
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d121      	bne.n	8005440 <f_open+0x114>
			if (!dir)	/* Default directory itself */
 80053fc:	2392      	movs	r3, #146	; 0x92
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	18fb      	adds	r3, r7, r3
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d104      	bne.n	8005412 <f_open+0xe6>
				res = FR_INVALID_NAME;
 8005408:	4bac      	ldr	r3, [pc, #688]	; (80056bc <f_open+0x390>)
 800540a:	18fb      	adds	r3, r7, r3
 800540c:	2206      	movs	r2, #6
 800540e:	701a      	strb	r2, [r3, #0]
 8005410:	e016      	b.n	8005440 <f_open+0x114>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005412:	4ba9      	ldr	r3, [pc, #676]	; (80056b8 <f_open+0x38c>)
 8005414:	2294      	movs	r2, #148	; 0x94
 8005416:	0092      	lsls	r2, r2, #2
 8005418:	4694      	mov	ip, r2
 800541a:	44bc      	add	ip, r7
 800541c:	4463      	add	r3, ip
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	2201      	movs	r2, #1
 8005422:	4393      	bics	r3, r2
 8005424:	1e5a      	subs	r2, r3, #1
 8005426:	4193      	sbcs	r3, r2
 8005428:	b2db      	uxtb	r3, r3
 800542a:	001a      	movs	r2, r3
 800542c:	4ba3      	ldr	r3, [pc, #652]	; (80056bc <f_open+0x390>)
 800542e:	18fc      	adds	r4, r7, r3
 8005430:	2320      	movs	r3, #32
 8005432:	18fb      	adds	r3, r7, r3
 8005434:	0011      	movs	r1, r2
 8005436:	0018      	movs	r0, r3
 8005438:	f7fd ffc8 	bl	80033cc <chk_lock>
 800543c:	0003      	movs	r3, r0
 800543e:	7023      	strb	r3, [r4, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8005440:	4b9d      	ldr	r3, [pc, #628]	; (80056b8 <f_open+0x38c>)
 8005442:	2294      	movs	r2, #148	; 0x94
 8005444:	0092      	lsls	r2, r2, #2
 8005446:	4694      	mov	ip, r2
 8005448:	44bc      	add	ip, r7
 800544a:	4463      	add	r3, ip
 800544c:	781b      	ldrb	r3, [r3, #0]
 800544e:	221c      	movs	r2, #28
 8005450:	4013      	ands	r3, r2
 8005452:	d100      	bne.n	8005456 <f_open+0x12a>
 8005454:	e119      	b.n	800568a <f_open+0x35e>
			if (res != FR_OK) {					/* No file, create new */
 8005456:	4b99      	ldr	r3, [pc, #612]	; (80056bc <f_open+0x390>)
 8005458:	18fb      	adds	r3, r7, r3
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d031      	beq.n	80054c4 <f_open+0x198>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8005460:	4b96      	ldr	r3, [pc, #600]	; (80056bc <f_open+0x390>)
 8005462:	18fb      	adds	r3, r7, r3
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	2b04      	cmp	r3, #4
 8005468:	d10f      	bne.n	800548a <f_open+0x15e>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800546a:	f7fe f81d 	bl	80034a8 <enq_lock>
 800546e:	1e03      	subs	r3, r0, #0
 8005470:	d007      	beq.n	8005482 <f_open+0x156>
 8005472:	2320      	movs	r3, #32
 8005474:	18fb      	adds	r3, r7, r3
 8005476:	0018      	movs	r0, r3
 8005478:	f7ff f921 	bl	80046be <dir_register>
 800547c:	0003      	movs	r3, r0
 800547e:	001a      	movs	r2, r3
 8005480:	e000      	b.n	8005484 <f_open+0x158>
 8005482:	2212      	movs	r2, #18
 8005484:	4b8d      	ldr	r3, [pc, #564]	; (80056bc <f_open+0x390>)
 8005486:	18fb      	adds	r3, r7, r3
 8005488:	701a      	strb	r2, [r3, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800548a:	4b8b      	ldr	r3, [pc, #556]	; (80056b8 <f_open+0x38c>)
 800548c:	2294      	movs	r2, #148	; 0x94
 800548e:	0092      	lsls	r2, r2, #2
 8005490:	4694      	mov	ip, r2
 8005492:	44bc      	add	ip, r7
 8005494:	4463      	add	r3, ip
 8005496:	4a88      	ldr	r2, [pc, #544]	; (80056b8 <f_open+0x38c>)
 8005498:	2194      	movs	r1, #148	; 0x94
 800549a:	0089      	lsls	r1, r1, #2
 800549c:	468c      	mov	ip, r1
 800549e:	44bc      	add	ip, r7
 80054a0:	4462      	add	r2, ip
 80054a2:	7812      	ldrb	r2, [r2, #0]
 80054a4:	2108      	movs	r1, #8
 80054a6:	430a      	orrs	r2, r1
 80054a8:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 80054aa:	4b85      	ldr	r3, [pc, #532]	; (80056c0 <f_open+0x394>)
 80054ac:	2294      	movs	r2, #148	; 0x94
 80054ae:	0092      	lsls	r2, r2, #2
 80054b0:	18ba      	adds	r2, r7, r2
 80054b2:	18d2      	adds	r2, r2, r3
 80054b4:	2385      	movs	r3, #133	; 0x85
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	58d3      	ldr	r3, [r2, r3]
 80054ba:	2292      	movs	r2, #146	; 0x92
 80054bc:	0092      	lsls	r2, r2, #2
 80054be:	18ba      	adds	r2, r7, r2
 80054c0:	6013      	str	r3, [r2, #0]
 80054c2:	e01c      	b.n	80054fe <f_open+0x1d2>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80054c4:	2392      	movs	r3, #146	; 0x92
 80054c6:	009b      	lsls	r3, r3, #2
 80054c8:	18fb      	adds	r3, r7, r3
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	330b      	adds	r3, #11
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	001a      	movs	r2, r3
 80054d2:	2311      	movs	r3, #17
 80054d4:	4013      	ands	r3, r2
 80054d6:	d004      	beq.n	80054e2 <f_open+0x1b6>
					res = FR_DENIED;
 80054d8:	4b78      	ldr	r3, [pc, #480]	; (80056bc <f_open+0x390>)
 80054da:	18fb      	adds	r3, r7, r3
 80054dc:	2207      	movs	r2, #7
 80054de:	701a      	strb	r2, [r3, #0]
 80054e0:	e00d      	b.n	80054fe <f_open+0x1d2>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 80054e2:	4b75      	ldr	r3, [pc, #468]	; (80056b8 <f_open+0x38c>)
 80054e4:	2294      	movs	r2, #148	; 0x94
 80054e6:	0092      	lsls	r2, r2, #2
 80054e8:	4694      	mov	ip, r2
 80054ea:	44bc      	add	ip, r7
 80054ec:	4463      	add	r3, ip
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	2204      	movs	r2, #4
 80054f2:	4013      	ands	r3, r2
 80054f4:	d003      	beq.n	80054fe <f_open+0x1d2>
						res = FR_EXIST;
 80054f6:	4b71      	ldr	r3, [pc, #452]	; (80056bc <f_open+0x390>)
 80054f8:	18fb      	adds	r3, r7, r3
 80054fa:	2208      	movs	r2, #8
 80054fc:	701a      	strb	r2, [r3, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80054fe:	4b6f      	ldr	r3, [pc, #444]	; (80056bc <f_open+0x390>)
 8005500:	18fb      	adds	r3, r7, r3
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d000      	beq.n	800550a <f_open+0x1de>
 8005508:	e0f4      	b.n	80056f4 <f_open+0x3c8>
 800550a:	4b6b      	ldr	r3, [pc, #428]	; (80056b8 <f_open+0x38c>)
 800550c:	2294      	movs	r2, #148	; 0x94
 800550e:	0092      	lsls	r2, r2, #2
 8005510:	4694      	mov	ip, r2
 8005512:	44bc      	add	ip, r7
 8005514:	4463      	add	r3, ip
 8005516:	781b      	ldrb	r3, [r3, #0]
 8005518:	2208      	movs	r2, #8
 800551a:	4013      	ands	r3, r2
 800551c:	d100      	bne.n	8005520 <f_open+0x1f4>
 800551e:	e0e9      	b.n	80056f4 <f_open+0x3c8>
				dw = GET_FATTIME();				/* Created time */
 8005520:	f7fd f844 	bl	80025ac <get_fattime>
 8005524:	0003      	movs	r3, r0
 8005526:	2091      	movs	r0, #145	; 0x91
 8005528:	0080      	lsls	r0, r0, #2
 800552a:	183a      	adds	r2, r7, r0
 800552c:	6013      	str	r3, [r2, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 800552e:	2192      	movs	r1, #146	; 0x92
 8005530:	0089      	lsls	r1, r1, #2
 8005532:	187b      	adds	r3, r7, r1
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	330e      	adds	r3, #14
 8005538:	183a      	adds	r2, r7, r0
 800553a:	6812      	ldr	r2, [r2, #0]
 800553c:	b2d2      	uxtb	r2, r2
 800553e:	701a      	strb	r2, [r3, #0]
 8005540:	183b      	adds	r3, r7, r0
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	b29b      	uxth	r3, r3
 8005546:	0a1b      	lsrs	r3, r3, #8
 8005548:	b29a      	uxth	r2, r3
 800554a:	187b      	adds	r3, r7, r1
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	330f      	adds	r3, #15
 8005550:	b2d2      	uxtb	r2, r2
 8005552:	701a      	strb	r2, [r3, #0]
 8005554:	183b      	adds	r3, r7, r0
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	0c1a      	lsrs	r2, r3, #16
 800555a:	187b      	adds	r3, r7, r1
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	3310      	adds	r3, #16
 8005560:	b2d2      	uxtb	r2, r2
 8005562:	701a      	strb	r2, [r3, #0]
 8005564:	183b      	adds	r3, r7, r0
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	0e1a      	lsrs	r2, r3, #24
 800556a:	187b      	adds	r3, r7, r1
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	3311      	adds	r3, #17
 8005570:	b2d2      	uxtb	r2, r2
 8005572:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8005574:	187b      	adds	r3, r7, r1
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	330b      	adds	r3, #11
 800557a:	2200      	movs	r2, #0
 800557c:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800557e:	187b      	adds	r3, r7, r1
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	331c      	adds	r3, #28
 8005584:	2200      	movs	r2, #0
 8005586:	701a      	strb	r2, [r3, #0]
 8005588:	187b      	adds	r3, r7, r1
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	331d      	adds	r3, #29
 800558e:	2200      	movs	r2, #0
 8005590:	701a      	strb	r2, [r3, #0]
 8005592:	187b      	adds	r3, r7, r1
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	331e      	adds	r3, #30
 8005598:	2200      	movs	r2, #0
 800559a:	701a      	strb	r2, [r3, #0]
 800559c:	187b      	adds	r3, r7, r1
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	331f      	adds	r3, #31
 80055a2:	2200      	movs	r2, #0
 80055a4:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 80055a6:	4b46      	ldr	r3, [pc, #280]	; (80056c0 <f_open+0x394>)
 80055a8:	2594      	movs	r5, #148	; 0x94
 80055aa:	00ad      	lsls	r5, r5, #2
 80055ac:	197a      	adds	r2, r7, r5
 80055ae:	18d2      	adds	r2, r2, r3
 80055b0:	2380      	movs	r3, #128	; 0x80
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	58d3      	ldr	r3, [r2, r3]
 80055b6:	000c      	movs	r4, r1
 80055b8:	187a      	adds	r2, r7, r1
 80055ba:	6812      	ldr	r2, [r2, #0]
 80055bc:	0011      	movs	r1, r2
 80055be:	0018      	movs	r0, r3
 80055c0:	f7fe ffc6 	bl	8004550 <ld_clust>
 80055c4:	0003      	movs	r3, r0
 80055c6:	2690      	movs	r6, #144	; 0x90
 80055c8:	00b6      	lsls	r6, r6, #2
 80055ca:	19ba      	adds	r2, r7, r6
 80055cc:	6013      	str	r3, [r2, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 80055ce:	0021      	movs	r1, r4
 80055d0:	187b      	adds	r3, r7, r1
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	2100      	movs	r1, #0
 80055d6:	0018      	movs	r0, r3
 80055d8:	f7fe ffe7 	bl	80045aa <st_clust>
				dj.fs->wflag = 1;
 80055dc:	4b38      	ldr	r3, [pc, #224]	; (80056c0 <f_open+0x394>)
 80055de:	197a      	adds	r2, r7, r5
 80055e0:	18d2      	adds	r2, r2, r3
 80055e2:	2380      	movs	r3, #128	; 0x80
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	58d2      	ldr	r2, [r2, r3]
 80055e8:	2381      	movs	r3, #129	; 0x81
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	2101      	movs	r1, #1
 80055ee:	54d1      	strb	r1, [r2, r3]
				if (cl) {						/* Remove the cluster chain if exist */
 80055f0:	19bb      	adds	r3, r7, r6
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d100      	bne.n	80055fa <f_open+0x2ce>
 80055f8:	e07c      	b.n	80056f4 <f_open+0x3c8>
					dw = dj.fs->winsect;
 80055fa:	4b31      	ldr	r3, [pc, #196]	; (80056c0 <f_open+0x394>)
 80055fc:	2194      	movs	r1, #148	; 0x94
 80055fe:	0089      	lsls	r1, r1, #2
 8005600:	187a      	adds	r2, r7, r1
 8005602:	18d2      	adds	r2, r2, r3
 8005604:	2380      	movs	r3, #128	; 0x80
 8005606:	009b      	lsls	r3, r3, #2
 8005608:	58d2      	ldr	r2, [r2, r3]
 800560a:	238b      	movs	r3, #139	; 0x8b
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	58d3      	ldr	r3, [r2, r3]
 8005610:	2291      	movs	r2, #145	; 0x91
 8005612:	0092      	lsls	r2, r2, #2
 8005614:	18ba      	adds	r2, r7, r2
 8005616:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 8005618:	4b29      	ldr	r3, [pc, #164]	; (80056c0 <f_open+0x394>)
 800561a:	187a      	adds	r2, r7, r1
 800561c:	18d2      	adds	r2, r2, r3
 800561e:	2380      	movs	r3, #128	; 0x80
 8005620:	009b      	lsls	r3, r3, #2
 8005622:	58d3      	ldr	r3, [r2, r3]
 8005624:	4d25      	ldr	r5, [pc, #148]	; (80056bc <f_open+0x390>)
 8005626:	197c      	adds	r4, r7, r5
 8005628:	2290      	movs	r2, #144	; 0x90
 800562a:	0092      	lsls	r2, r2, #2
 800562c:	18ba      	adds	r2, r7, r2
 800562e:	6812      	ldr	r2, [r2, #0]
 8005630:	0011      	movs	r1, r2
 8005632:	0018      	movs	r0, r3
 8005634:	f7fe fc04 	bl	8003e40 <remove_chain>
 8005638:	0003      	movs	r3, r0
 800563a:	7023      	strb	r3, [r4, #0]
					if (res == FR_OK) {
 800563c:	197b      	adds	r3, r7, r5
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d157      	bne.n	80056f4 <f_open+0x3c8>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8005644:	4b1e      	ldr	r3, [pc, #120]	; (80056c0 <f_open+0x394>)
 8005646:	2094      	movs	r0, #148	; 0x94
 8005648:	0080      	lsls	r0, r0, #2
 800564a:	183a      	adds	r2, r7, r0
 800564c:	18d2      	adds	r2, r2, r3
 800564e:	2380      	movs	r3, #128	; 0x80
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	58d2      	ldr	r2, [r2, r3]
 8005654:	2390      	movs	r3, #144	; 0x90
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	18fb      	adds	r3, r7, r3
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	1e59      	subs	r1, r3, #1
 800565e:	2383      	movs	r3, #131	; 0x83
 8005660:	009b      	lsls	r3, r3, #2
 8005662:	50d1      	str	r1, [r2, r3]
						res = move_window(dj.fs, dw);
 8005664:	4b16      	ldr	r3, [pc, #88]	; (80056c0 <f_open+0x394>)
 8005666:	183a      	adds	r2, r7, r0
 8005668:	18d2      	adds	r2, r2, r3
 800566a:	2380      	movs	r3, #128	; 0x80
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	58d3      	ldr	r3, [r2, r3]
 8005670:	4a12      	ldr	r2, [pc, #72]	; (80056bc <f_open+0x390>)
 8005672:	18bc      	adds	r4, r7, r2
 8005674:	2291      	movs	r2, #145	; 0x91
 8005676:	0092      	lsls	r2, r2, #2
 8005678:	18ba      	adds	r2, r7, r2
 800567a:	6812      	ldr	r2, [r2, #0]
 800567c:	0011      	movs	r1, r2
 800567e:	0018      	movs	r0, r3
 8005680:	f7fe f8be 	bl	8003800 <move_window>
 8005684:	0003      	movs	r3, r0
 8005686:	7023      	strb	r3, [r4, #0]
 8005688:	e034      	b.n	80056f4 <f_open+0x3c8>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 800568a:	4b0c      	ldr	r3, [pc, #48]	; (80056bc <f_open+0x390>)
 800568c:	18fb      	adds	r3, r7, r3
 800568e:	781b      	ldrb	r3, [r3, #0]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d12f      	bne.n	80056f4 <f_open+0x3c8>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8005694:	2392      	movs	r3, #146	; 0x92
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	18fb      	adds	r3, r7, r3
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	330b      	adds	r3, #11
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	001a      	movs	r2, r3
 80056a2:	2310      	movs	r3, #16
 80056a4:	4013      	ands	r3, r2
 80056a6:	d00d      	beq.n	80056c4 <f_open+0x398>
					res = FR_NO_FILE;
 80056a8:	4b04      	ldr	r3, [pc, #16]	; (80056bc <f_open+0x390>)
 80056aa:	18fb      	adds	r3, r7, r3
 80056ac:	2204      	movs	r2, #4
 80056ae:	701a      	strb	r2, [r3, #0]
 80056b0:	e020      	b.n	80056f4 <f_open+0x3c8>
 80056b2:	46c0      	nop			; (mov r8, r8)
 80056b4:	fffffdac 	.word	0xfffffdac
 80056b8:	fffffdb7 	.word	0xfffffdb7
 80056bc:	0000024f 	.word	0x0000024f
 80056c0:	fffffdd0 	.word	0xfffffdd0
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 80056c4:	4b70      	ldr	r3, [pc, #448]	; (8005888 <f_open+0x55c>)
 80056c6:	2294      	movs	r2, #148	; 0x94
 80056c8:	0092      	lsls	r2, r2, #2
 80056ca:	4694      	mov	ip, r2
 80056cc:	44bc      	add	ip, r7
 80056ce:	4463      	add	r3, ip
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	2202      	movs	r2, #2
 80056d4:	4013      	ands	r3, r2
 80056d6:	d00d      	beq.n	80056f4 <f_open+0x3c8>
 80056d8:	2392      	movs	r3, #146	; 0x92
 80056da:	009b      	lsls	r3, r3, #2
 80056dc:	18fb      	adds	r3, r7, r3
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	330b      	adds	r3, #11
 80056e2:	781b      	ldrb	r3, [r3, #0]
 80056e4:	001a      	movs	r2, r3
 80056e6:	2301      	movs	r3, #1
 80056e8:	4013      	ands	r3, r2
 80056ea:	d003      	beq.n	80056f4 <f_open+0x3c8>
						res = FR_DENIED;
 80056ec:	4b67      	ldr	r3, [pc, #412]	; (800588c <f_open+0x560>)
 80056ee:	18fb      	adds	r3, r7, r3
 80056f0:	2207      	movs	r2, #7
 80056f2:	701a      	strb	r2, [r3, #0]
				}
			}
		}
		if (res == FR_OK) {
 80056f4:	4b65      	ldr	r3, [pc, #404]	; (800588c <f_open+0x560>)
 80056f6:	18fb      	adds	r3, r7, r3
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d152      	bne.n	80057a4 <f_open+0x478>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80056fe:	4b62      	ldr	r3, [pc, #392]	; (8005888 <f_open+0x55c>)
 8005700:	2294      	movs	r2, #148	; 0x94
 8005702:	0092      	lsls	r2, r2, #2
 8005704:	4694      	mov	ip, r2
 8005706:	44bc      	add	ip, r7
 8005708:	4463      	add	r3, ip
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	2208      	movs	r2, #8
 800570e:	4013      	ands	r3, r2
 8005710:	d00f      	beq.n	8005732 <f_open+0x406>
				mode |= FA__WRITTEN;
 8005712:	4b5d      	ldr	r3, [pc, #372]	; (8005888 <f_open+0x55c>)
 8005714:	2294      	movs	r2, #148	; 0x94
 8005716:	0092      	lsls	r2, r2, #2
 8005718:	4694      	mov	ip, r2
 800571a:	44bc      	add	ip, r7
 800571c:	4463      	add	r3, ip
 800571e:	4a5a      	ldr	r2, [pc, #360]	; (8005888 <f_open+0x55c>)
 8005720:	2194      	movs	r1, #148	; 0x94
 8005722:	0089      	lsls	r1, r1, #2
 8005724:	468c      	mov	ip, r1
 8005726:	44bc      	add	ip, r7
 8005728:	4462      	add	r2, ip
 800572a:	7812      	ldrb	r2, [r2, #0]
 800572c:	2120      	movs	r1, #32
 800572e:	430a      	orrs	r2, r1
 8005730:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8005732:	4b57      	ldr	r3, [pc, #348]	; (8005890 <f_open+0x564>)
 8005734:	2294      	movs	r2, #148	; 0x94
 8005736:	0092      	lsls	r2, r2, #2
 8005738:	18ba      	adds	r2, r7, r2
 800573a:	18d2      	adds	r2, r2, r3
 800573c:	2380      	movs	r3, #128	; 0x80
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	58d2      	ldr	r2, [r2, r3]
 8005742:	238b      	movs	r3, #139	; 0x8b
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	58d1      	ldr	r1, [r2, r3]
 8005748:	68fa      	ldr	r2, [r7, #12]
 800574a:	2387      	movs	r3, #135	; 0x87
 800574c:	009b      	lsls	r3, r3, #2
 800574e:	50d1      	str	r1, [r2, r3]
			fp->dir_ptr = dir;
 8005750:	68fa      	ldr	r2, [r7, #12]
 8005752:	2388      	movs	r3, #136	; 0x88
 8005754:	009b      	lsls	r3, r3, #2
 8005756:	2192      	movs	r1, #146	; 0x92
 8005758:	0089      	lsls	r1, r1, #2
 800575a:	1879      	adds	r1, r7, r1
 800575c:	6809      	ldr	r1, [r1, #0]
 800575e:	50d1      	str	r1, [r2, r3]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005760:	4b49      	ldr	r3, [pc, #292]	; (8005888 <f_open+0x55c>)
 8005762:	2294      	movs	r2, #148	; 0x94
 8005764:	0092      	lsls	r2, r2, #2
 8005766:	4694      	mov	ip, r2
 8005768:	44bc      	add	ip, r7
 800576a:	4463      	add	r3, ip
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	2201      	movs	r2, #1
 8005770:	4393      	bics	r3, r2
 8005772:	1e5a      	subs	r2, r3, #1
 8005774:	4193      	sbcs	r3, r2
 8005776:	b2db      	uxtb	r3, r3
 8005778:	001a      	movs	r2, r3
 800577a:	2320      	movs	r3, #32
 800577c:	18fb      	adds	r3, r7, r3
 800577e:	0011      	movs	r1, r2
 8005780:	0018      	movs	r0, r3
 8005782:	f7fd feb1 	bl	80034e8 <inc_lock>
 8005786:	0001      	movs	r1, r0
 8005788:	68fa      	ldr	r2, [r7, #12]
 800578a:	238a      	movs	r3, #138	; 0x8a
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	50d1      	str	r1, [r2, r3]
			if (!fp->lockid) res = FR_INT_ERR;
 8005790:	68fa      	ldr	r2, [r7, #12]
 8005792:	238a      	movs	r3, #138	; 0x8a
 8005794:	009b      	lsls	r3, r3, #2
 8005796:	58d3      	ldr	r3, [r2, r3]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d103      	bne.n	80057a4 <f_open+0x478>
 800579c:	4b3b      	ldr	r3, [pc, #236]	; (800588c <f_open+0x560>)
 800579e:	18fb      	adds	r3, r7, r3
 80057a0:	2202      	movs	r2, #2
 80057a2:	701a      	strb	r2, [r3, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 80057a4:	4b39      	ldr	r3, [pc, #228]	; (800588c <f_open+0x560>)
 80057a6:	18fb      	adds	r3, r7, r3
 80057a8:	781b      	ldrb	r3, [r3, #0]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d162      	bne.n	8005874 <f_open+0x548>
			fp->flag = mode;					/* File access mode */
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	4a35      	ldr	r2, [pc, #212]	; (8005888 <f_open+0x55c>)
 80057b2:	2194      	movs	r1, #148	; 0x94
 80057b4:	0089      	lsls	r1, r1, #2
 80057b6:	468c      	mov	ip, r1
 80057b8:	44bc      	add	ip, r7
 80057ba:	4462      	add	r2, ip
 80057bc:	4935      	ldr	r1, [pc, #212]	; (8005894 <f_open+0x568>)
 80057be:	7812      	ldrb	r2, [r2, #0]
 80057c0:	545a      	strb	r2, [r3, r1]
			fp->err = 0;						/* Clear error flag */
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	4a34      	ldr	r2, [pc, #208]	; (8005898 <f_open+0x56c>)
 80057c6:	2100      	movs	r1, #0
 80057c8:	5499      	strb	r1, [r3, r2]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 80057ca:	4b31      	ldr	r3, [pc, #196]	; (8005890 <f_open+0x564>)
 80057cc:	2594      	movs	r5, #148	; 0x94
 80057ce:	00ad      	lsls	r5, r5, #2
 80057d0:	197a      	adds	r2, r7, r5
 80057d2:	18d2      	adds	r2, r2, r3
 80057d4:	2380      	movs	r3, #128	; 0x80
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	58d3      	ldr	r3, [r2, r3]
 80057da:	2192      	movs	r1, #146	; 0x92
 80057dc:	0089      	lsls	r1, r1, #2
 80057de:	000c      	movs	r4, r1
 80057e0:	187a      	adds	r2, r7, r1
 80057e2:	6812      	ldr	r2, [r2, #0]
 80057e4:	0011      	movs	r1, r2
 80057e6:	0018      	movs	r0, r3
 80057e8:	f7fe feb2 	bl	8004550 <ld_clust>
 80057ec:	0001      	movs	r1, r0
 80057ee:	68fa      	ldr	r2, [r7, #12]
 80057f0:	2384      	movs	r3, #132	; 0x84
 80057f2:	009b      	lsls	r3, r3, #2
 80057f4:	50d1      	str	r1, [r2, r3]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 80057f6:	0021      	movs	r1, r4
 80057f8:	187b      	adds	r3, r7, r1
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	331f      	adds	r3, #31
 80057fe:	781b      	ldrb	r3, [r3, #0]
 8005800:	061a      	lsls	r2, r3, #24
 8005802:	187b      	adds	r3, r7, r1
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	331e      	adds	r3, #30
 8005808:	781b      	ldrb	r3, [r3, #0]
 800580a:	041b      	lsls	r3, r3, #16
 800580c:	4313      	orrs	r3, r2
 800580e:	187a      	adds	r2, r7, r1
 8005810:	6812      	ldr	r2, [r2, #0]
 8005812:	321d      	adds	r2, #29
 8005814:	7812      	ldrb	r2, [r2, #0]
 8005816:	0212      	lsls	r2, r2, #8
 8005818:	4313      	orrs	r3, r2
 800581a:	187a      	adds	r2, r7, r1
 800581c:	6812      	ldr	r2, [r2, #0]
 800581e:	321c      	adds	r2, #28
 8005820:	7812      	ldrb	r2, [r2, #0]
 8005822:	4313      	orrs	r3, r2
 8005824:	0019      	movs	r1, r3
 8005826:	68fa      	ldr	r2, [r7, #12]
 8005828:	2383      	movs	r3, #131	; 0x83
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	50d1      	str	r1, [r2, r3]
			fp->fptr = 0;						/* File pointer */
 800582e:	68fa      	ldr	r2, [r7, #12]
 8005830:	2382      	movs	r3, #130	; 0x82
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	2100      	movs	r1, #0
 8005836:	50d1      	str	r1, [r2, r3]
			fp->dsect = 0;
 8005838:	68fa      	ldr	r2, [r7, #12]
 800583a:	2386      	movs	r3, #134	; 0x86
 800583c:	009b      	lsls	r3, r3, #2
 800583e:	2100      	movs	r1, #0
 8005840:	50d1      	str	r1, [r2, r3]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8005842:	68fa      	ldr	r2, [r7, #12]
 8005844:	2389      	movs	r3, #137	; 0x89
 8005846:	009b      	lsls	r3, r3, #2
 8005848:	2100      	movs	r1, #0
 800584a:	50d1      	str	r1, [r2, r3]
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 800584c:	4b10      	ldr	r3, [pc, #64]	; (8005890 <f_open+0x564>)
 800584e:	197a      	adds	r2, r7, r5
 8005850:	18d2      	adds	r2, r2, r3
 8005852:	2380      	movs	r3, #128	; 0x80
 8005854:	009b      	lsls	r3, r3, #2
 8005856:	58d1      	ldr	r1, [r2, r3]
 8005858:	68fa      	ldr	r2, [r7, #12]
 800585a:	2380      	movs	r3, #128	; 0x80
 800585c:	009b      	lsls	r3, r3, #2
 800585e:	50d1      	str	r1, [r2, r3]
			fp->id = fp->fs->id;
 8005860:	68fa      	ldr	r2, [r7, #12]
 8005862:	2380      	movs	r3, #128	; 0x80
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	58d3      	ldr	r3, [r2, r3]
 8005868:	4a0a      	ldr	r2, [pc, #40]	; (8005894 <f_open+0x568>)
 800586a:	5a99      	ldrh	r1, [r3, r2]
 800586c:	68fa      	ldr	r2, [r7, #12]
 800586e:	2381      	movs	r3, #129	; 0x81
 8005870:	009b      	lsls	r3, r3, #2
 8005872:	52d1      	strh	r1, [r2, r3]
		}
	}

	LEAVE_FF(dj.fs, res);
 8005874:	4b05      	ldr	r3, [pc, #20]	; (800588c <f_open+0x560>)
 8005876:	18fb      	adds	r3, r7, r3
 8005878:	781b      	ldrb	r3, [r3, #0]
}
 800587a:	0018      	movs	r0, r3
 800587c:	46bd      	mov	sp, r7
 800587e:	2395      	movs	r3, #149	; 0x95
 8005880:	009b      	lsls	r3, r3, #2
 8005882:	449d      	add	sp, r3
 8005884:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005886:	46c0      	nop			; (mov r8, r8)
 8005888:	fffffdb7 	.word	0xfffffdb7
 800588c:	0000024f 	.word	0x0000024f
 8005890:	fffffdd0 	.word	0xfffffdd0
 8005894:	00000206 	.word	0x00000206
 8005898:	00000207 	.word	0x00000207

0800589c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800589c:	b5b0      	push	{r4, r5, r7, lr}
 800589e:	b08a      	sub	sp, #40	; 0x28
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	60f8      	str	r0, [r7, #12]
 80058a4:	60b9      	str	r1, [r7, #8]
 80058a6:	607a      	str	r2, [r7, #4]
 80058a8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	2200      	movs	r2, #0
 80058b2:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 80058b4:	2517      	movs	r5, #23
 80058b6:	197c      	adds	r4, r7, r5
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	0018      	movs	r0, r3
 80058bc:	f7ff fca8 	bl	8005210 <validate>
 80058c0:	0003      	movs	r3, r0
 80058c2:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80058c4:	197b      	adds	r3, r7, r5
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d003      	beq.n	80058d4 <f_write+0x38>
 80058cc:	2317      	movs	r3, #23
 80058ce:	18fb      	adds	r3, r7, r3
 80058d0:	781b      	ldrb	r3, [r3, #0]
 80058d2:	e1c8      	b.n	8005c66 <f_write+0x3ca>
	if (fp->err)							/* Check error */
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	4ad1      	ldr	r2, [pc, #836]	; (8005c1c <f_write+0x380>)
 80058d8:	5c9b      	ldrb	r3, [r3, r2]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d003      	beq.n	80058e6 <f_write+0x4a>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	4ace      	ldr	r2, [pc, #824]	; (8005c1c <f_write+0x380>)
 80058e2:	5c9b      	ldrb	r3, [r3, r2]
 80058e4:	e1bf      	b.n	8005c66 <f_write+0x3ca>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	4acd      	ldr	r2, [pc, #820]	; (8005c20 <f_write+0x384>)
 80058ea:	5c9b      	ldrb	r3, [r3, r2]
 80058ec:	001a      	movs	r2, r3
 80058ee:	2302      	movs	r3, #2
 80058f0:	4013      	ands	r3, r2
 80058f2:	d101      	bne.n	80058f8 <f_write+0x5c>
		LEAVE_FF(fp->fs, FR_DENIED);
 80058f4:	2307      	movs	r3, #7
 80058f6:	e1b6      	b.n	8005c66 <f_write+0x3ca>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 80058f8:	68fa      	ldr	r2, [r7, #12]
 80058fa:	2382      	movs	r3, #130	; 0x82
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	58d2      	ldr	r2, [r2, r3]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	18d2      	adds	r2, r2, r3
 8005904:	68f9      	ldr	r1, [r7, #12]
 8005906:	2382      	movs	r3, #130	; 0x82
 8005908:	009b      	lsls	r3, r3, #2
 800590a:	58cb      	ldr	r3, [r1, r3]
 800590c:	429a      	cmp	r2, r3
 800590e:	d300      	bcc.n	8005912 <f_write+0x76>
 8005910:	e17e      	b.n	8005c10 <f_write+0x374>
 8005912:	2300      	movs	r3, #0
 8005914:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 8005916:	e17b      	b.n	8005c10 <f_write+0x374>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8005918:	68fa      	ldr	r2, [r7, #12]
 800591a:	2382      	movs	r3, #130	; 0x82
 800591c:	009b      	lsls	r3, r3, #2
 800591e:	58d3      	ldr	r3, [r2, r3]
 8005920:	05db      	lsls	r3, r3, #23
 8005922:	0ddb      	lsrs	r3, r3, #23
 8005924:	d000      	beq.n	8005928 <f_write+0x8c>
 8005926:	e135      	b.n	8005b94 <f_write+0x2f8>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8005928:	68fa      	ldr	r2, [r7, #12]
 800592a:	2382      	movs	r3, #130	; 0x82
 800592c:	009b      	lsls	r3, r3, #2
 800592e:	58d3      	ldr	r3, [r2, r3]
 8005930:	0a5b      	lsrs	r3, r3, #9
 8005932:	b2da      	uxtb	r2, r3
 8005934:	68f9      	ldr	r1, [r7, #12]
 8005936:	2380      	movs	r3, #128	; 0x80
 8005938:	009b      	lsls	r3, r3, #2
 800593a:	58cb      	ldr	r3, [r1, r3]
 800593c:	49b9      	ldr	r1, [pc, #740]	; (8005c24 <f_write+0x388>)
 800593e:	5c5b      	ldrb	r3, [r3, r1]
 8005940:	3b01      	subs	r3, #1
 8005942:	b2d9      	uxtb	r1, r3
 8005944:	2016      	movs	r0, #22
 8005946:	183b      	adds	r3, r7, r0
 8005948:	400a      	ands	r2, r1
 800594a:	701a      	strb	r2, [r3, #0]
			if (!csect) {					/* On the cluster boundary? */
 800594c:	183b      	adds	r3, r7, r0
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d15d      	bne.n	8005a10 <f_write+0x174>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8005954:	68fa      	ldr	r2, [r7, #12]
 8005956:	2382      	movs	r3, #130	; 0x82
 8005958:	009b      	lsls	r3, r3, #2
 800595a:	58d3      	ldr	r3, [r2, r3]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d112      	bne.n	8005986 <f_write+0xea>
					clst = fp->sclust;		/* Follow from the origin */
 8005960:	68fa      	ldr	r2, [r7, #12]
 8005962:	2384      	movs	r3, #132	; 0x84
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	58d3      	ldr	r3, [r2, r3]
 8005968:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 800596a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596c:	2b00      	cmp	r3, #0
 800596e:	d129      	bne.n	80059c4 <f_write+0x128>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8005970:	68fa      	ldr	r2, [r7, #12]
 8005972:	2380      	movs	r3, #128	; 0x80
 8005974:	009b      	lsls	r3, r3, #2
 8005976:	58d3      	ldr	r3, [r2, r3]
 8005978:	2100      	movs	r1, #0
 800597a:	0018      	movs	r0, r3
 800597c:	f7fe fad0 	bl	8003f20 <create_chain>
 8005980:	0003      	movs	r3, r0
 8005982:	627b      	str	r3, [r7, #36]	; 0x24
 8005984:	e01e      	b.n	80059c4 <f_write+0x128>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8005986:	68fa      	ldr	r2, [r7, #12]
 8005988:	2389      	movs	r3, #137	; 0x89
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	58d3      	ldr	r3, [r2, r3]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d00b      	beq.n	80059aa <f_write+0x10e>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005992:	68fa      	ldr	r2, [r7, #12]
 8005994:	2382      	movs	r3, #130	; 0x82
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	58d2      	ldr	r2, [r2, r3]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	0011      	movs	r1, r2
 800599e:	0018      	movs	r0, r3
 80059a0:	f7fe fb74 	bl	800408c <clmt_clust>
 80059a4:	0003      	movs	r3, r0
 80059a6:	627b      	str	r3, [r7, #36]	; 0x24
 80059a8:	e00c      	b.n	80059c4 <f_write+0x128>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80059aa:	68fa      	ldr	r2, [r7, #12]
 80059ac:	2380      	movs	r3, #128	; 0x80
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	58d0      	ldr	r0, [r2, r3]
 80059b2:	68fa      	ldr	r2, [r7, #12]
 80059b4:	2385      	movs	r3, #133	; 0x85
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	58d3      	ldr	r3, [r2, r3]
 80059ba:	0019      	movs	r1, r3
 80059bc:	f7fe fab0 	bl	8003f20 <create_chain>
 80059c0:	0003      	movs	r3, r0
 80059c2:	627b      	str	r3, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80059c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d100      	bne.n	80059cc <f_write+0x130>
 80059ca:	e12f      	b.n	8005c2c <f_write+0x390>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 80059cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d105      	bne.n	80059de <f_write+0x142>
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	4a91      	ldr	r2, [pc, #580]	; (8005c1c <f_write+0x380>)
 80059d6:	2102      	movs	r1, #2
 80059d8:	5499      	strb	r1, [r3, r2]
 80059da:	2302      	movs	r3, #2
 80059dc:	e143      	b.n	8005c66 <f_write+0x3ca>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80059de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e0:	3301      	adds	r3, #1
 80059e2:	d105      	bne.n	80059f0 <f_write+0x154>
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	4a8d      	ldr	r2, [pc, #564]	; (8005c1c <f_write+0x380>)
 80059e8:	2101      	movs	r1, #1
 80059ea:	5499      	strb	r1, [r3, r2]
 80059ec:	2301      	movs	r3, #1
 80059ee:	e13a      	b.n	8005c66 <f_write+0x3ca>
				fp->clust = clst;			/* Update current cluster */
 80059f0:	68fa      	ldr	r2, [r7, #12]
 80059f2:	2385      	movs	r3, #133	; 0x85
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80059f8:	50d1      	str	r1, [r2, r3]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 80059fa:	68fa      	ldr	r2, [r7, #12]
 80059fc:	2384      	movs	r3, #132	; 0x84
 80059fe:	009b      	lsls	r3, r3, #2
 8005a00:	58d3      	ldr	r3, [r2, r3]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d104      	bne.n	8005a10 <f_write+0x174>
 8005a06:	68fa      	ldr	r2, [r7, #12]
 8005a08:	2384      	movs	r3, #132	; 0x84
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a0e:	50d1      	str	r1, [r2, r3]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	4a83      	ldr	r2, [pc, #524]	; (8005c20 <f_write+0x384>)
 8005a14:	5c9b      	ldrb	r3, [r3, r2]
 8005a16:	001a      	movs	r2, r3
 8005a18:	2340      	movs	r3, #64	; 0x40
 8005a1a:	4013      	ands	r3, r2
 8005a1c:	d01e      	beq.n	8005a5c <f_write+0x1c0>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8005a1e:	68fa      	ldr	r2, [r7, #12]
 8005a20:	2380      	movs	r3, #128	; 0x80
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	58d3      	ldr	r3, [r2, r3]
 8005a26:	4a80      	ldr	r2, [pc, #512]	; (8005c28 <f_write+0x38c>)
 8005a28:	5c98      	ldrb	r0, [r3, r2]
 8005a2a:	68f9      	ldr	r1, [r7, #12]
 8005a2c:	68fa      	ldr	r2, [r7, #12]
 8005a2e:	2386      	movs	r3, #134	; 0x86
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	58d2      	ldr	r2, [r2, r3]
 8005a34:	2301      	movs	r3, #1
 8005a36:	f7fd fc07 	bl	8003248 <disk_write>
 8005a3a:	1e03      	subs	r3, r0, #0
 8005a3c:	d005      	beq.n	8005a4a <f_write+0x1ae>
					ABORT(fp->fs, FR_DISK_ERR);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	4a76      	ldr	r2, [pc, #472]	; (8005c1c <f_write+0x380>)
 8005a42:	2101      	movs	r1, #1
 8005a44:	5499      	strb	r1, [r3, r2]
 8005a46:	2301      	movs	r3, #1
 8005a48:	e10d      	b.n	8005c66 <f_write+0x3ca>
				fp->flag &= ~FA__DIRTY;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	4a74      	ldr	r2, [pc, #464]	; (8005c20 <f_write+0x384>)
 8005a4e:	5c9b      	ldrb	r3, [r3, r2]
 8005a50:	2240      	movs	r2, #64	; 0x40
 8005a52:	4393      	bics	r3, r2
 8005a54:	b2d9      	uxtb	r1, r3
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	4a71      	ldr	r2, [pc, #452]	; (8005c20 <f_write+0x384>)
 8005a5a:	5499      	strb	r1, [r3, r2]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8005a5c:	68fa      	ldr	r2, [r7, #12]
 8005a5e:	2380      	movs	r3, #128	; 0x80
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	58d0      	ldr	r0, [r2, r3]
 8005a64:	68fa      	ldr	r2, [r7, #12]
 8005a66:	2385      	movs	r3, #133	; 0x85
 8005a68:	009b      	lsls	r3, r3, #2
 8005a6a:	58d3      	ldr	r3, [r2, r3]
 8005a6c:	0019      	movs	r1, r3
 8005a6e:	f7fd ffd7 	bl	8003a20 <clust2sect>
 8005a72:	0003      	movs	r3, r0
 8005a74:	613b      	str	r3, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d105      	bne.n	8005a88 <f_write+0x1ec>
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	4a67      	ldr	r2, [pc, #412]	; (8005c1c <f_write+0x380>)
 8005a80:	2102      	movs	r1, #2
 8005a82:	5499      	strb	r1, [r3, r2]
 8005a84:	2302      	movs	r3, #2
 8005a86:	e0ee      	b.n	8005c66 <f_write+0x3ca>
			sect += csect;
 8005a88:	2316      	movs	r3, #22
 8005a8a:	18fb      	adds	r3, r7, r3
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	693a      	ldr	r2, [r7, #16]
 8005a90:	18d3      	adds	r3, r2, r3
 8005a92:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	0a5b      	lsrs	r3, r3, #9
 8005a98:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d050      	beq.n	8005b42 <f_write+0x2a6>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8005aa0:	2316      	movs	r3, #22
 8005aa2:	18fb      	adds	r3, r7, r3
 8005aa4:	781a      	ldrb	r2, [r3, #0]
 8005aa6:	69fb      	ldr	r3, [r7, #28]
 8005aa8:	18d3      	adds	r3, r2, r3
 8005aaa:	68f9      	ldr	r1, [r7, #12]
 8005aac:	2280      	movs	r2, #128	; 0x80
 8005aae:	0092      	lsls	r2, r2, #2
 8005ab0:	588a      	ldr	r2, [r1, r2]
 8005ab2:	495c      	ldr	r1, [pc, #368]	; (8005c24 <f_write+0x388>)
 8005ab4:	5c52      	ldrb	r2, [r2, r1]
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d90b      	bls.n	8005ad2 <f_write+0x236>
					cc = fp->fs->csize - csect;
 8005aba:	68fa      	ldr	r2, [r7, #12]
 8005abc:	2380      	movs	r3, #128	; 0x80
 8005abe:	009b      	lsls	r3, r3, #2
 8005ac0:	58d3      	ldr	r3, [r2, r3]
 8005ac2:	4a58      	ldr	r2, [pc, #352]	; (8005c24 <f_write+0x388>)
 8005ac4:	5c9b      	ldrb	r3, [r3, r2]
 8005ac6:	001a      	movs	r2, r3
 8005ac8:	2316      	movs	r3, #22
 8005aca:	18fb      	adds	r3, r7, r3
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	1ad3      	subs	r3, r2, r3
 8005ad0:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8005ad2:	68fa      	ldr	r2, [r7, #12]
 8005ad4:	2380      	movs	r3, #128	; 0x80
 8005ad6:	009b      	lsls	r3, r3, #2
 8005ad8:	58d3      	ldr	r3, [r2, r3]
 8005ada:	4a53      	ldr	r2, [pc, #332]	; (8005c28 <f_write+0x38c>)
 8005adc:	5c98      	ldrb	r0, [r3, r2]
 8005ade:	69fb      	ldr	r3, [r7, #28]
 8005ae0:	693a      	ldr	r2, [r7, #16]
 8005ae2:	69b9      	ldr	r1, [r7, #24]
 8005ae4:	f7fd fbb0 	bl	8003248 <disk_write>
 8005ae8:	1e03      	subs	r3, r0, #0
 8005aea:	d005      	beq.n	8005af8 <f_write+0x25c>
					ABORT(fp->fs, FR_DISK_ERR);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	4a4b      	ldr	r2, [pc, #300]	; (8005c1c <f_write+0x380>)
 8005af0:	2101      	movs	r1, #1
 8005af2:	5499      	strb	r1, [r3, r2]
 8005af4:	2301      	movs	r3, #1
 8005af6:	e0b6      	b.n	8005c66 <f_write+0x3ca>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8005af8:	68fa      	ldr	r2, [r7, #12]
 8005afa:	2386      	movs	r3, #134	; 0x86
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	58d2      	ldr	r2, [r2, r3]
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	1ad3      	subs	r3, r2, r3
 8005b04:	69fa      	ldr	r2, [r7, #28]
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d917      	bls.n	8005b3a <f_write+0x29e>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8005b0a:	68f8      	ldr	r0, [r7, #12]
 8005b0c:	68fa      	ldr	r2, [r7, #12]
 8005b0e:	2386      	movs	r3, #134	; 0x86
 8005b10:	009b      	lsls	r3, r3, #2
 8005b12:	58d2      	ldr	r2, [r2, r3]
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	1ad3      	subs	r3, r2, r3
 8005b18:	025b      	lsls	r3, r3, #9
 8005b1a:	69ba      	ldr	r2, [r7, #24]
 8005b1c:	18d1      	adds	r1, r2, r3
 8005b1e:	2380      	movs	r3, #128	; 0x80
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	001a      	movs	r2, r3
 8005b24:	f7fd fbe0 	bl	80032e8 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	4a3d      	ldr	r2, [pc, #244]	; (8005c20 <f_write+0x384>)
 8005b2c:	5c9b      	ldrb	r3, [r3, r2]
 8005b2e:	2240      	movs	r2, #64	; 0x40
 8005b30:	4393      	bics	r3, r2
 8005b32:	b2d9      	uxtb	r1, r3
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	4a3a      	ldr	r2, [pc, #232]	; (8005c20 <f_write+0x384>)
 8005b38:	5499      	strb	r1, [r3, r2]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8005b3a:	69fb      	ldr	r3, [r7, #28]
 8005b3c:	025b      	lsls	r3, r3, #9
 8005b3e:	623b      	str	r3, [r7, #32]
				continue;
 8005b40:	e04e      	b.n	8005be0 <f_write+0x344>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8005b42:	68fa      	ldr	r2, [r7, #12]
 8005b44:	2386      	movs	r3, #134	; 0x86
 8005b46:	009b      	lsls	r3, r3, #2
 8005b48:	58d3      	ldr	r3, [r2, r3]
 8005b4a:	693a      	ldr	r2, [r7, #16]
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d01c      	beq.n	8005b8a <f_write+0x2ee>
				if (fp->fptr < fp->fsize &&
 8005b50:	68fa      	ldr	r2, [r7, #12]
 8005b52:	2382      	movs	r3, #130	; 0x82
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	58d2      	ldr	r2, [r2, r3]
 8005b58:	68f9      	ldr	r1, [r7, #12]
 8005b5a:	2383      	movs	r3, #131	; 0x83
 8005b5c:	009b      	lsls	r3, r3, #2
 8005b5e:	58cb      	ldr	r3, [r1, r3]
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d212      	bcs.n	8005b8a <f_write+0x2ee>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8005b64:	68fa      	ldr	r2, [r7, #12]
 8005b66:	2380      	movs	r3, #128	; 0x80
 8005b68:	009b      	lsls	r3, r3, #2
 8005b6a:	58d3      	ldr	r3, [r2, r3]
 8005b6c:	4a2e      	ldr	r2, [pc, #184]	; (8005c28 <f_write+0x38c>)
 8005b6e:	5c98      	ldrb	r0, [r3, r2]
 8005b70:	68f9      	ldr	r1, [r7, #12]
 8005b72:	693a      	ldr	r2, [r7, #16]
 8005b74:	2301      	movs	r3, #1
 8005b76:	f7fd fb3f 	bl	80031f8 <disk_read>
 8005b7a:	1e03      	subs	r3, r0, #0
				if (fp->fptr < fp->fsize &&
 8005b7c:	d005      	beq.n	8005b8a <f_write+0x2ee>
						ABORT(fp->fs, FR_DISK_ERR);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	4a26      	ldr	r2, [pc, #152]	; (8005c1c <f_write+0x380>)
 8005b82:	2101      	movs	r1, #1
 8005b84:	5499      	strb	r1, [r3, r2]
 8005b86:	2301      	movs	r3, #1
 8005b88:	e06d      	b.n	8005c66 <f_write+0x3ca>
			}
#endif
			fp->dsect = sect;
 8005b8a:	68fa      	ldr	r2, [r7, #12]
 8005b8c:	2386      	movs	r3, #134	; 0x86
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	6939      	ldr	r1, [r7, #16]
 8005b92:	50d1      	str	r1, [r2, r3]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8005b94:	68fa      	ldr	r2, [r7, #12]
 8005b96:	2382      	movs	r3, #130	; 0x82
 8005b98:	009b      	lsls	r3, r3, #2
 8005b9a:	58d3      	ldr	r3, [r2, r3]
 8005b9c:	05db      	lsls	r3, r3, #23
 8005b9e:	0ddb      	lsrs	r3, r3, #23
 8005ba0:	2280      	movs	r2, #128	; 0x80
 8005ba2:	0092      	lsls	r2, r2, #2
 8005ba4:	1ad3      	subs	r3, r2, r3
 8005ba6:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 8005ba8:	6a3a      	ldr	r2, [r7, #32]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d901      	bls.n	8005bb4 <f_write+0x318>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8005bb4:	68fa      	ldr	r2, [r7, #12]
 8005bb6:	2382      	movs	r3, #130	; 0x82
 8005bb8:	009b      	lsls	r3, r3, #2
 8005bba:	58d3      	ldr	r3, [r2, r3]
 8005bbc:	05db      	lsls	r3, r3, #23
 8005bbe:	0ddb      	lsrs	r3, r3, #23
 8005bc0:	68fa      	ldr	r2, [r7, #12]
 8005bc2:	18d3      	adds	r3, r2, r3
 8005bc4:	6a3a      	ldr	r2, [r7, #32]
 8005bc6:	69b9      	ldr	r1, [r7, #24]
 8005bc8:	0018      	movs	r0, r3
 8005bca:	f7fd fb8d 	bl	80032e8 <mem_cpy>
		fp->flag |= FA__DIRTY;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	4a13      	ldr	r2, [pc, #76]	; (8005c20 <f_write+0x384>)
 8005bd2:	5c9b      	ldrb	r3, [r3, r2]
 8005bd4:	2240      	movs	r2, #64	; 0x40
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	b2d9      	uxtb	r1, r3
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	4a10      	ldr	r2, [pc, #64]	; (8005c20 <f_write+0x384>)
 8005bde:	5499      	strb	r1, [r3, r2]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8005be0:	69ba      	ldr	r2, [r7, #24]
 8005be2:	6a3b      	ldr	r3, [r7, #32]
 8005be4:	18d3      	adds	r3, r2, r3
 8005be6:	61bb      	str	r3, [r7, #24]
 8005be8:	68fa      	ldr	r2, [r7, #12]
 8005bea:	2382      	movs	r3, #130	; 0x82
 8005bec:	009b      	lsls	r3, r3, #2
 8005bee:	58d2      	ldr	r2, [r2, r3]
 8005bf0:	6a3b      	ldr	r3, [r7, #32]
 8005bf2:	18d1      	adds	r1, r2, r3
 8005bf4:	68fa      	ldr	r2, [r7, #12]
 8005bf6:	2382      	movs	r3, #130	; 0x82
 8005bf8:	009b      	lsls	r3, r3, #2
 8005bfa:	50d1      	str	r1, [r2, r3]
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	6a3b      	ldr	r3, [r7, #32]
 8005c02:	18d2      	adds	r2, r2, r3
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	601a      	str	r2, [r3, #0]
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	6a3b      	ldr	r3, [r7, #32]
 8005c0c:	1ad3      	subs	r3, r2, r3
 8005c0e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d000      	beq.n	8005c18 <f_write+0x37c>
 8005c16:	e67f      	b.n	8005918 <f_write+0x7c>
 8005c18:	e009      	b.n	8005c2e <f_write+0x392>
 8005c1a:	46c0      	nop			; (mov r8, r8)
 8005c1c:	00000207 	.word	0x00000207
 8005c20:	00000206 	.word	0x00000206
 8005c24:	00000202 	.word	0x00000202
 8005c28:	00000201 	.word	0x00000201
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005c2c:	46c0      	nop			; (mov r8, r8)
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8005c2e:	68fa      	ldr	r2, [r7, #12]
 8005c30:	2382      	movs	r3, #130	; 0x82
 8005c32:	009b      	lsls	r3, r3, #2
 8005c34:	58d2      	ldr	r2, [r2, r3]
 8005c36:	68f9      	ldr	r1, [r7, #12]
 8005c38:	2383      	movs	r3, #131	; 0x83
 8005c3a:	009b      	lsls	r3, r3, #2
 8005c3c:	58cb      	ldr	r3, [r1, r3]
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d907      	bls.n	8005c52 <f_write+0x3b6>
 8005c42:	68fa      	ldr	r2, [r7, #12]
 8005c44:	2382      	movs	r3, #130	; 0x82
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	58d1      	ldr	r1, [r2, r3]
 8005c4a:	68fa      	ldr	r2, [r7, #12]
 8005c4c:	2383      	movs	r3, #131	; 0x83
 8005c4e:	009b      	lsls	r3, r3, #2
 8005c50:	50d1      	str	r1, [r2, r3]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	4a06      	ldr	r2, [pc, #24]	; (8005c70 <f_write+0x3d4>)
 8005c56:	5c9b      	ldrb	r3, [r3, r2]
 8005c58:	2220      	movs	r2, #32
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	b2d9      	uxtb	r1, r3
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	4a03      	ldr	r2, [pc, #12]	; (8005c70 <f_write+0x3d4>)
 8005c62:	5499      	strb	r1, [r3, r2]

	LEAVE_FF(fp->fs, FR_OK);
 8005c64:	2300      	movs	r3, #0
}
 8005c66:	0018      	movs	r0, r3
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	b00a      	add	sp, #40	; 0x28
 8005c6c:	bdb0      	pop	{r4, r5, r7, pc}
 8005c6e:	46c0      	nop			; (mov r8, r8)
 8005c70:	00000206 	.word	0x00000206

08005c74 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8005c74:	b5b0      	push	{r4, r5, r7, lr}
 8005c76:	b086      	sub	sp, #24
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8005c7c:	2517      	movs	r5, #23
 8005c7e:	197c      	adds	r4, r7, r5
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	0018      	movs	r0, r3
 8005c84:	f7ff fac4 	bl	8005210 <validate>
 8005c88:	0003      	movs	r3, r0
 8005c8a:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8005c8c:	197b      	adds	r3, r7, r5
 8005c8e:	781b      	ldrb	r3, [r3, #0]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d000      	beq.n	8005c96 <f_sync+0x22>
 8005c94:	e0b9      	b.n	8005e0a <f_sync+0x196>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	4a5f      	ldr	r2, [pc, #380]	; (8005e18 <f_sync+0x1a4>)
 8005c9a:	5c9b      	ldrb	r3, [r3, r2]
 8005c9c:	001a      	movs	r2, r3
 8005c9e:	2320      	movs	r3, #32
 8005ca0:	4013      	ands	r3, r2
 8005ca2:	d100      	bne.n	8005ca6 <f_sync+0x32>
 8005ca4:	e0b1      	b.n	8005e0a <f_sync+0x196>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	4a5b      	ldr	r2, [pc, #364]	; (8005e18 <f_sync+0x1a4>)
 8005caa:	5c9b      	ldrb	r3, [r3, r2]
 8005cac:	001a      	movs	r2, r3
 8005cae:	2340      	movs	r3, #64	; 0x40
 8005cb0:	4013      	ands	r3, r2
 8005cb2:	d01a      	beq.n	8005cea <f_sync+0x76>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8005cb4:	687a      	ldr	r2, [r7, #4]
 8005cb6:	2380      	movs	r3, #128	; 0x80
 8005cb8:	009b      	lsls	r3, r3, #2
 8005cba:	58d3      	ldr	r3, [r2, r3]
 8005cbc:	4a57      	ldr	r2, [pc, #348]	; (8005e1c <f_sync+0x1a8>)
 8005cbe:	5c98      	ldrb	r0, [r3, r2]
 8005cc0:	6879      	ldr	r1, [r7, #4]
 8005cc2:	687a      	ldr	r2, [r7, #4]
 8005cc4:	2386      	movs	r3, #134	; 0x86
 8005cc6:	009b      	lsls	r3, r3, #2
 8005cc8:	58d2      	ldr	r2, [r2, r3]
 8005cca:	2301      	movs	r3, #1
 8005ccc:	f7fd fabc 	bl	8003248 <disk_write>
 8005cd0:	1e03      	subs	r3, r0, #0
 8005cd2:	d001      	beq.n	8005cd8 <f_sync+0x64>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	e09b      	b.n	8005e10 <f_sync+0x19c>
				fp->flag &= ~FA__DIRTY;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	4a4f      	ldr	r2, [pc, #316]	; (8005e18 <f_sync+0x1a4>)
 8005cdc:	5c9b      	ldrb	r3, [r3, r2]
 8005cde:	2240      	movs	r2, #64	; 0x40
 8005ce0:	4393      	bics	r3, r2
 8005ce2:	b2d9      	uxtb	r1, r3
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	4a4c      	ldr	r2, [pc, #304]	; (8005e18 <f_sync+0x1a4>)
 8005ce8:	5499      	strb	r1, [r3, r2]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8005cea:	687a      	ldr	r2, [r7, #4]
 8005cec:	2380      	movs	r3, #128	; 0x80
 8005cee:	009b      	lsls	r3, r3, #2
 8005cf0:	58d0      	ldr	r0, [r2, r3]
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	2387      	movs	r3, #135	; 0x87
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	58d3      	ldr	r3, [r2, r3]
 8005cfa:	2517      	movs	r5, #23
 8005cfc:	197c      	adds	r4, r7, r5
 8005cfe:	0019      	movs	r1, r3
 8005d00:	f7fd fd7e 	bl	8003800 <move_window>
 8005d04:	0003      	movs	r3, r0
 8005d06:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK) {
 8005d08:	197b      	adds	r3, r7, r5
 8005d0a:	781b      	ldrb	r3, [r3, #0]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d17c      	bne.n	8005e0a <f_sync+0x196>
				dir = fp->dir_ptr;
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	2388      	movs	r3, #136	; 0x88
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	58d3      	ldr	r3, [r2, r3]
 8005d18:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	330b      	adds	r3, #11
 8005d1e:	781a      	ldrb	r2, [r3, #0]
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	330b      	adds	r3, #11
 8005d24:	2120      	movs	r1, #32
 8005d26:	430a      	orrs	r2, r1
 8005d28:	b2d2      	uxtb	r2, r2
 8005d2a:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	2383      	movs	r3, #131	; 0x83
 8005d30:	009b      	lsls	r3, r3, #2
 8005d32:	58d2      	ldr	r2, [r2, r3]
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	331c      	adds	r3, #28
 8005d38:	b2d2      	uxtb	r2, r2
 8005d3a:	701a      	strb	r2, [r3, #0]
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	2383      	movs	r3, #131	; 0x83
 8005d40:	009b      	lsls	r3, r3, #2
 8005d42:	58d3      	ldr	r3, [r2, r3]
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	0a1b      	lsrs	r3, r3, #8
 8005d48:	b29a      	uxth	r2, r3
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	331d      	adds	r3, #29
 8005d4e:	b2d2      	uxtb	r2, r2
 8005d50:	701a      	strb	r2, [r3, #0]
 8005d52:	687a      	ldr	r2, [r7, #4]
 8005d54:	2383      	movs	r3, #131	; 0x83
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	58d3      	ldr	r3, [r2, r3]
 8005d5a:	0c1a      	lsrs	r2, r3, #16
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	331e      	adds	r3, #30
 8005d60:	b2d2      	uxtb	r2, r2
 8005d62:	701a      	strb	r2, [r3, #0]
 8005d64:	687a      	ldr	r2, [r7, #4]
 8005d66:	2383      	movs	r3, #131	; 0x83
 8005d68:	009b      	lsls	r3, r3, #2
 8005d6a:	58d3      	ldr	r3, [r2, r3]
 8005d6c:	0e1a      	lsrs	r2, r3, #24
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	331f      	adds	r3, #31
 8005d72:	b2d2      	uxtb	r2, r2
 8005d74:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8005d76:	687a      	ldr	r2, [r7, #4]
 8005d78:	2384      	movs	r3, #132	; 0x84
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	58d2      	ldr	r2, [r2, r3]
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	0011      	movs	r1, r2
 8005d82:	0018      	movs	r0, r3
 8005d84:	f7fe fc11 	bl	80045aa <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8005d88:	f7fc fc10 	bl	80025ac <get_fattime>
 8005d8c:	0003      	movs	r3, r0
 8005d8e:	60fb      	str	r3, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	3316      	adds	r3, #22
 8005d94:	68fa      	ldr	r2, [r7, #12]
 8005d96:	b2d2      	uxtb	r2, r2
 8005d98:	701a      	strb	r2, [r3, #0]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	0a1b      	lsrs	r3, r3, #8
 8005da0:	b29a      	uxth	r2, r3
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	3317      	adds	r3, #23
 8005da6:	b2d2      	uxtb	r2, r2
 8005da8:	701a      	strb	r2, [r3, #0]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	0c1a      	lsrs	r2, r3, #16
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	3318      	adds	r3, #24
 8005db2:	b2d2      	uxtb	r2, r2
 8005db4:	701a      	strb	r2, [r3, #0]
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	0e1a      	lsrs	r2, r3, #24
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	3319      	adds	r3, #25
 8005dbe:	b2d2      	uxtb	r2, r2
 8005dc0:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	3312      	adds	r3, #18
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	701a      	strb	r2, [r3, #0]
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	3313      	adds	r3, #19
 8005dce:	2200      	movs	r2, #0
 8005dd0:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	4a10      	ldr	r2, [pc, #64]	; (8005e18 <f_sync+0x1a4>)
 8005dd6:	5c9b      	ldrb	r3, [r3, r2]
 8005dd8:	2220      	movs	r2, #32
 8005dda:	4393      	bics	r3, r2
 8005ddc:	b2d9      	uxtb	r1, r3
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	4a0d      	ldr	r2, [pc, #52]	; (8005e18 <f_sync+0x1a4>)
 8005de2:	5499      	strb	r1, [r3, r2]
				fp->fs->wflag = 1;
 8005de4:	687a      	ldr	r2, [r7, #4]
 8005de6:	2380      	movs	r3, #128	; 0x80
 8005de8:	009b      	lsls	r3, r3, #2
 8005dea:	58d2      	ldr	r2, [r2, r3]
 8005dec:	2381      	movs	r3, #129	; 0x81
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	2101      	movs	r1, #1
 8005df2:	54d1      	strb	r1, [r2, r3]
				res = sync_fs(fp->fs);
 8005df4:	687a      	ldr	r2, [r7, #4]
 8005df6:	2380      	movs	r3, #128	; 0x80
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	58d3      	ldr	r3, [r2, r3]
 8005dfc:	2217      	movs	r2, #23
 8005dfe:	18bc      	adds	r4, r7, r2
 8005e00:	0018      	movs	r0, r3
 8005e02:	f7fd fd39 	bl	8003878 <sync_fs>
 8005e06:	0003      	movs	r3, r0
 8005e08:	7023      	strb	r3, [r4, #0]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8005e0a:	2317      	movs	r3, #23
 8005e0c:	18fb      	adds	r3, r7, r3
 8005e0e:	781b      	ldrb	r3, [r3, #0]
}
 8005e10:	0018      	movs	r0, r3
 8005e12:	46bd      	mov	sp, r7
 8005e14:	b006      	add	sp, #24
 8005e16:	bdb0      	pop	{r4, r5, r7, pc}
 8005e18:	00000206 	.word	0x00000206
 8005e1c:	00000201 	.word	0x00000201

08005e20 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8005e20:	b5b0      	push	{r4, r5, r7, lr}
 8005e22:	b084      	sub	sp, #16
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8005e28:	250f      	movs	r5, #15
 8005e2a:	197c      	adds	r4, r7, r5
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	0018      	movs	r0, r3
 8005e30:	f7ff ff20 	bl	8005c74 <f_sync>
 8005e34:	0003      	movs	r3, r0
 8005e36:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK)
 8005e38:	197b      	adds	r3, r7, r5
 8005e3a:	781b      	ldrb	r3, [r3, #0]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d11f      	bne.n	8005e80 <f_close+0x60>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8005e40:	250f      	movs	r5, #15
 8005e42:	197c      	adds	r4, r7, r5
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	0018      	movs	r0, r3
 8005e48:	f7ff f9e2 	bl	8005210 <validate>
 8005e4c:	0003      	movs	r3, r0
 8005e4e:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 8005e50:	197b      	adds	r3, r7, r5
 8005e52:	781b      	ldrb	r3, [r3, #0]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d113      	bne.n	8005e80 <f_close+0x60>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8005e58:	687a      	ldr	r2, [r7, #4]
 8005e5a:	238a      	movs	r3, #138	; 0x8a
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	58d3      	ldr	r3, [r2, r3]
 8005e60:	250f      	movs	r5, #15
 8005e62:	197c      	adds	r4, r7, r5
 8005e64:	0018      	movs	r0, r3
 8005e66:	f7fd fbf7 	bl	8003658 <dec_lock>
 8005e6a:	0003      	movs	r3, r0
 8005e6c:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK)
 8005e6e:	197b      	adds	r3, r7, r5
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d104      	bne.n	8005e80 <f_close+0x60>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	2380      	movs	r3, #128	; 0x80
 8005e7a:	009b      	lsls	r3, r3, #2
 8005e7c:	2100      	movs	r1, #0
 8005e7e:	50d1      	str	r1, [r2, r3]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8005e80:	230f      	movs	r3, #15
 8005e82:	18fb      	adds	r3, r7, r3
 8005e84:	781b      	ldrb	r3, [r3, #0]
}
 8005e86:	0018      	movs	r0, r3
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	b004      	add	sp, #16
 8005e8c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005e90 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 8005e90:	b5b0      	push	{r4, r5, r7, lr}
 8005e92:	b090      	sub	sp, #64	; 0x40
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 8005e9a:	253f      	movs	r5, #63	; 0x3f
 8005e9c:	197c      	adds	r4, r7, r5
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	0018      	movs	r0, r3
 8005ea2:	f7ff f9b5 	bl	8005210 <validate>
 8005ea6:	0003      	movs	r3, r0
 8005ea8:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8005eaa:	197b      	adds	r3, r7, r5
 8005eac:	781b      	ldrb	r3, [r3, #0]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d003      	beq.n	8005eba <f_lseek+0x2a>
 8005eb2:	233f      	movs	r3, #63	; 0x3f
 8005eb4:	18fb      	adds	r3, r7, r3
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	e28b      	b.n	80063d2 <f_lseek+0x542>
	if (fp->err)						/* Check error */
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	4ad9      	ldr	r2, [pc, #868]	; (8006224 <f_lseek+0x394>)
 8005ebe:	5c9b      	ldrb	r3, [r3, r2]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d003      	beq.n	8005ecc <f_lseek+0x3c>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	4ad7      	ldr	r2, [pc, #860]	; (8006224 <f_lseek+0x394>)
 8005ec8:	5c9b      	ldrb	r3, [r3, r2]
 8005eca:	e282      	b.n	80063d2 <f_lseek+0x542>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8005ecc:	687a      	ldr	r2, [r7, #4]
 8005ece:	2389      	movs	r3, #137	; 0x89
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	58d3      	ldr	r3, [r2, r3]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d100      	bne.n	8005eda <f_lseek+0x4a>
 8005ed8:	e103      	b.n	80060e2 <f_lseek+0x252>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	3301      	adds	r3, #1
 8005ede:	d16c      	bne.n	8005fba <f_lseek+0x12a>
			tbl = fp->cltbl;
 8005ee0:	687a      	ldr	r2, [r7, #4]
 8005ee2:	2389      	movs	r3, #137	; 0x89
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	58d3      	ldr	r3, [r2, r3]
 8005ee8:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8005eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eec:	1d1a      	adds	r2, r3, #4
 8005eee:	627a      	str	r2, [r7, #36]	; 0x24
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	617b      	str	r3, [r7, #20]
 8005ef4:	2302      	movs	r3, #2
 8005ef6:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->sclust;			/* Top of the chain */
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	2384      	movs	r3, #132	; 0x84
 8005efc:	009b      	lsls	r3, r3, #2
 8005efe:	58d3      	ldr	r3, [r2, r3]
 8005f00:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8005f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d045      	beq.n	8005f94 <f_lseek+0x104>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8005f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f0a:	613b      	str	r3, [r7, #16]
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f12:	3302      	adds	r3, #2
 8005f14:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8005f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f18:	60fb      	str	r3, [r7, #12]
 8005f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f1c:	3301      	adds	r3, #1
 8005f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(fp->fs, cl);
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	2380      	movs	r3, #128	; 0x80
 8005f24:	009b      	lsls	r3, r3, #2
 8005f26:	58d3      	ldr	r3, [r2, r3]
 8005f28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f2a:	0011      	movs	r1, r2
 8005f2c:	0018      	movs	r0, r3
 8005f2e:	f7fd fd9b 	bl	8003a68 <get_fat>
 8005f32:	0003      	movs	r3, r0
 8005f34:	633b      	str	r3, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 8005f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d805      	bhi.n	8005f48 <f_lseek+0xb8>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	4ab9      	ldr	r2, [pc, #740]	; (8006224 <f_lseek+0x394>)
 8005f40:	2102      	movs	r1, #2
 8005f42:	5499      	strb	r1, [r3, r2]
 8005f44:	2302      	movs	r3, #2
 8005f46:	e244      	b.n	80063d2 <f_lseek+0x542>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8005f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f4a:	3301      	adds	r3, #1
 8005f4c:	d105      	bne.n	8005f5a <f_lseek+0xca>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	4ab4      	ldr	r2, [pc, #720]	; (8006224 <f_lseek+0x394>)
 8005f52:	2101      	movs	r1, #1
 8005f54:	5499      	strb	r1, [r3, r2]
 8005f56:	2301      	movs	r3, #1
 8005f58:	e23b      	b.n	80063d2 <f_lseek+0x542>
					} while (cl == pcl + 1);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	3301      	adds	r3, #1
 8005f5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d0d8      	beq.n	8005f16 <f_lseek+0x86>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8005f64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d809      	bhi.n	8005f80 <f_lseek+0xf0>
						*tbl++ = ncl; *tbl++ = tcl;
 8005f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f6e:	1d1a      	adds	r2, r3, #4
 8005f70:	627a      	str	r2, [r7, #36]	; 0x24
 8005f72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f74:	601a      	str	r2, [r3, #0]
 8005f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f78:	1d1a      	adds	r2, r3, #4
 8005f7a:	627a      	str	r2, [r7, #36]	; 0x24
 8005f7c:	693a      	ldr	r2, [r7, #16]
 8005f7e:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 8005f80:	687a      	ldr	r2, [r7, #4]
 8005f82:	2380      	movs	r3, #128	; 0x80
 8005f84:	009b      	lsls	r3, r3, #2
 8005f86:	58d2      	ldr	r2, [r2, r3]
 8005f88:	2385      	movs	r3, #133	; 0x85
 8005f8a:	009b      	lsls	r3, r3, #2
 8005f8c:	58d3      	ldr	r3, [r2, r3]
 8005f8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d3b9      	bcc.n	8005f08 <f_lseek+0x78>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	2389      	movs	r3, #137	; 0x89
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	58d3      	ldr	r3, [r2, r3]
 8005f9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f9e:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 8005fa0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d803      	bhi.n	8005fb0 <f_lseek+0x120>
				*tbl = 0;		/* Terminate table */
 8005fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005faa:	2200      	movs	r2, #0
 8005fac:	601a      	str	r2, [r3, #0]
 8005fae:	e20d      	b.n	80063cc <f_lseek+0x53c>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8005fb0:	233f      	movs	r3, #63	; 0x3f
 8005fb2:	18fb      	adds	r3, r7, r3
 8005fb4:	2211      	movs	r2, #17
 8005fb6:	701a      	strb	r2, [r3, #0]
 8005fb8:	e208      	b.n	80063cc <f_lseek+0x53c>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 8005fba:	687a      	ldr	r2, [r7, #4]
 8005fbc:	2383      	movs	r3, #131	; 0x83
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	58d3      	ldr	r3, [r2, r3]
 8005fc2:	683a      	ldr	r2, [r7, #0]
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d904      	bls.n	8005fd2 <f_lseek+0x142>
				ofs = fp->fsize;
 8005fc8:	687a      	ldr	r2, [r7, #4]
 8005fca:	2383      	movs	r3, #131	; 0x83
 8005fcc:	009b      	lsls	r3, r3, #2
 8005fce:	58d3      	ldr	r3, [r2, r3]
 8005fd0:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	2382      	movs	r3, #130	; 0x82
 8005fd6:	009b      	lsls	r3, r3, #2
 8005fd8:	6839      	ldr	r1, [r7, #0]
 8005fda:	50d1      	str	r1, [r2, r3]
			if (ofs) {
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d100      	bne.n	8005fe4 <f_lseek+0x154>
 8005fe2:	e1f3      	b.n	80063cc <f_lseek+0x53c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	1e5a      	subs	r2, r3, #1
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	0011      	movs	r1, r2
 8005fec:	0018      	movs	r0, r3
 8005fee:	f7fe f84d 	bl	800408c <clmt_clust>
 8005ff2:	0001      	movs	r1, r0
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	2385      	movs	r3, #133	; 0x85
 8005ff8:	009b      	lsls	r3, r3, #2
 8005ffa:	50d1      	str	r1, [r2, r3]
				dsc = clust2sect(fp->fs, fp->clust);
 8005ffc:	687a      	ldr	r2, [r7, #4]
 8005ffe:	2380      	movs	r3, #128	; 0x80
 8006000:	009b      	lsls	r3, r3, #2
 8006002:	58d0      	ldr	r0, [r2, r3]
 8006004:	687a      	ldr	r2, [r7, #4]
 8006006:	2385      	movs	r3, #133	; 0x85
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	58d3      	ldr	r3, [r2, r3]
 800600c:	0019      	movs	r1, r3
 800600e:	f7fd fd07 	bl	8003a20 <clust2sect>
 8006012:	0003      	movs	r3, r0
 8006014:	61bb      	str	r3, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 8006016:	69bb      	ldr	r3, [r7, #24]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d105      	bne.n	8006028 <f_lseek+0x198>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	4a81      	ldr	r2, [pc, #516]	; (8006224 <f_lseek+0x394>)
 8006020:	2102      	movs	r1, #2
 8006022:	5499      	strb	r1, [r3, r2]
 8006024:	2302      	movs	r3, #2
 8006026:	e1d4      	b.n	80063d2 <f_lseek+0x542>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	3b01      	subs	r3, #1
 800602c:	0a5b      	lsrs	r3, r3, #9
 800602e:	6879      	ldr	r1, [r7, #4]
 8006030:	2280      	movs	r2, #128	; 0x80
 8006032:	0092      	lsls	r2, r2, #2
 8006034:	588a      	ldr	r2, [r1, r2]
 8006036:	497c      	ldr	r1, [pc, #496]	; (8006228 <f_lseek+0x398>)
 8006038:	5c52      	ldrb	r2, [r2, r1]
 800603a:	3a01      	subs	r2, #1
 800603c:	4013      	ands	r3, r2
 800603e:	69ba      	ldr	r2, [r7, #24]
 8006040:	18d3      	adds	r3, r2, r3
 8006042:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 8006044:	687a      	ldr	r2, [r7, #4]
 8006046:	2382      	movs	r3, #130	; 0x82
 8006048:	009b      	lsls	r3, r3, #2
 800604a:	58d3      	ldr	r3, [r2, r3]
 800604c:	05db      	lsls	r3, r3, #23
 800604e:	0ddb      	lsrs	r3, r3, #23
 8006050:	d100      	bne.n	8006054 <f_lseek+0x1c4>
 8006052:	e1bb      	b.n	80063cc <f_lseek+0x53c>
 8006054:	687a      	ldr	r2, [r7, #4]
 8006056:	2386      	movs	r3, #134	; 0x86
 8006058:	009b      	lsls	r3, r3, #2
 800605a:	58d3      	ldr	r3, [r2, r3]
 800605c:	69ba      	ldr	r2, [r7, #24]
 800605e:	429a      	cmp	r2, r3
 8006060:	d100      	bne.n	8006064 <f_lseek+0x1d4>
 8006062:	e1b3      	b.n	80063cc <f_lseek+0x53c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	4a71      	ldr	r2, [pc, #452]	; (800622c <f_lseek+0x39c>)
 8006068:	5c9b      	ldrb	r3, [r3, r2]
 800606a:	001a      	movs	r2, r3
 800606c:	2340      	movs	r3, #64	; 0x40
 800606e:	4013      	ands	r3, r2
 8006070:	d01e      	beq.n	80060b0 <f_lseek+0x220>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	2380      	movs	r3, #128	; 0x80
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	58d3      	ldr	r3, [r2, r3]
 800607a:	4a6d      	ldr	r2, [pc, #436]	; (8006230 <f_lseek+0x3a0>)
 800607c:	5c98      	ldrb	r0, [r3, r2]
 800607e:	6879      	ldr	r1, [r7, #4]
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	2386      	movs	r3, #134	; 0x86
 8006084:	009b      	lsls	r3, r3, #2
 8006086:	58d2      	ldr	r2, [r2, r3]
 8006088:	2301      	movs	r3, #1
 800608a:	f7fd f8dd 	bl	8003248 <disk_write>
 800608e:	1e03      	subs	r3, r0, #0
 8006090:	d005      	beq.n	800609e <f_lseek+0x20e>
							ABORT(fp->fs, FR_DISK_ERR);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	4a63      	ldr	r2, [pc, #396]	; (8006224 <f_lseek+0x394>)
 8006096:	2101      	movs	r1, #1
 8006098:	5499      	strb	r1, [r3, r2]
 800609a:	2301      	movs	r3, #1
 800609c:	e199      	b.n	80063d2 <f_lseek+0x542>
						fp->flag &= ~FA__DIRTY;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	4a62      	ldr	r2, [pc, #392]	; (800622c <f_lseek+0x39c>)
 80060a2:	5c9b      	ldrb	r3, [r3, r2]
 80060a4:	2240      	movs	r2, #64	; 0x40
 80060a6:	4393      	bics	r3, r2
 80060a8:	b2d9      	uxtb	r1, r3
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	4a5f      	ldr	r2, [pc, #380]	; (800622c <f_lseek+0x39c>)
 80060ae:	5499      	strb	r1, [r3, r2]
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	2380      	movs	r3, #128	; 0x80
 80060b4:	009b      	lsls	r3, r3, #2
 80060b6:	58d3      	ldr	r3, [r2, r3]
 80060b8:	4a5d      	ldr	r2, [pc, #372]	; (8006230 <f_lseek+0x3a0>)
 80060ba:	5c98      	ldrb	r0, [r3, r2]
 80060bc:	6879      	ldr	r1, [r7, #4]
 80060be:	69ba      	ldr	r2, [r7, #24]
 80060c0:	2301      	movs	r3, #1
 80060c2:	f7fd f899 	bl	80031f8 <disk_read>
 80060c6:	1e03      	subs	r3, r0, #0
 80060c8:	d005      	beq.n	80060d6 <f_lseek+0x246>
						ABORT(fp->fs, FR_DISK_ERR);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	4a55      	ldr	r2, [pc, #340]	; (8006224 <f_lseek+0x394>)
 80060ce:	2101      	movs	r1, #1
 80060d0:	5499      	strb	r1, [r3, r2]
 80060d2:	2301      	movs	r3, #1
 80060d4:	e17d      	b.n	80063d2 <f_lseek+0x542>
#endif
					fp->dsect = dsc;
 80060d6:	687a      	ldr	r2, [r7, #4]
 80060d8:	2386      	movs	r3, #134	; 0x86
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	69b9      	ldr	r1, [r7, #24]
 80060de:	50d1      	str	r1, [r2, r3]
 80060e0:	e174      	b.n	80063cc <f_lseek+0x53c>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 80060e2:	687a      	ldr	r2, [r7, #4]
 80060e4:	2383      	movs	r3, #131	; 0x83
 80060e6:	009b      	lsls	r3, r3, #2
 80060e8:	58d3      	ldr	r3, [r2, r3]
 80060ea:	683a      	ldr	r2, [r7, #0]
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d90b      	bls.n	8006108 <f_lseek+0x278>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	4a4e      	ldr	r2, [pc, #312]	; (800622c <f_lseek+0x39c>)
 80060f4:	5c9b      	ldrb	r3, [r3, r2]
 80060f6:	001a      	movs	r2, r3
 80060f8:	2302      	movs	r3, #2
 80060fa:	4013      	ands	r3, r2
 80060fc:	d104      	bne.n	8006108 <f_lseek+0x278>
#endif
			) ofs = fp->fsize;
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	2383      	movs	r3, #131	; 0x83
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	58d3      	ldr	r3, [r2, r3]
 8006106:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 8006108:	687a      	ldr	r2, [r7, #4]
 800610a:	2382      	movs	r3, #130	; 0x82
 800610c:	009b      	lsls	r3, r3, #2
 800610e:	58d3      	ldr	r3, [r2, r3]
 8006110:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8006112:	2300      	movs	r3, #0
 8006114:	637b      	str	r3, [r7, #52]	; 0x34
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	2382      	movs	r3, #130	; 0x82
 800611a:	009b      	lsls	r3, r3, #2
 800611c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800611e:	50d1      	str	r1, [r2, r3]
		if (ofs) {
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d100      	bne.n	8006128 <f_lseek+0x298>
 8006126:	e0ea      	b.n	80062fe <f_lseek+0x46e>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 8006128:	687a      	ldr	r2, [r7, #4]
 800612a:	2380      	movs	r3, #128	; 0x80
 800612c:	009b      	lsls	r3, r3, #2
 800612e:	58d3      	ldr	r3, [r2, r3]
 8006130:	4a3d      	ldr	r2, [pc, #244]	; (8006228 <f_lseek+0x398>)
 8006132:	5c9b      	ldrb	r3, [r3, r2]
 8006134:	025b      	lsls	r3, r3, #9
 8006136:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8006138:	6a3b      	ldr	r3, [r7, #32]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d027      	beq.n	800618e <f_lseek+0x2fe>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	3b01      	subs	r3, #1
 8006142:	69f9      	ldr	r1, [r7, #28]
 8006144:	0018      	movs	r0, r3
 8006146:	f7f9 ffe7 	bl	8000118 <__udivsi3>
 800614a:	0003      	movs	r3, r0
 800614c:	001c      	movs	r4, r3
 800614e:	6a3b      	ldr	r3, [r7, #32]
 8006150:	3b01      	subs	r3, #1
 8006152:	69f9      	ldr	r1, [r7, #28]
 8006154:	0018      	movs	r0, r3
 8006156:	f7f9 ffdf 	bl	8000118 <__udivsi3>
 800615a:	0003      	movs	r3, r0
			if (ifptr > 0 &&
 800615c:	429c      	cmp	r4, r3
 800615e:	d316      	bcc.n	800618e <f_lseek+0x2fe>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 8006160:	6a3b      	ldr	r3, [r7, #32]
 8006162:	3b01      	subs	r3, #1
 8006164:	69fa      	ldr	r2, [r7, #28]
 8006166:	4252      	negs	r2, r2
 8006168:	401a      	ands	r2, r3
 800616a:	0011      	movs	r1, r2
 800616c:	687a      	ldr	r2, [r7, #4]
 800616e:	2382      	movs	r3, #130	; 0x82
 8006170:	009b      	lsls	r3, r3, #2
 8006172:	50d1      	str	r1, [r2, r3]
				ofs -= fp->fptr;
 8006174:	687a      	ldr	r2, [r7, #4]
 8006176:	2382      	movs	r3, #130	; 0x82
 8006178:	009b      	lsls	r3, r3, #2
 800617a:	58d3      	ldr	r3, [r2, r3]
 800617c:	683a      	ldr	r2, [r7, #0]
 800617e:	1ad3      	subs	r3, r2, r3
 8006180:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8006182:	687a      	ldr	r2, [r7, #4]
 8006184:	2385      	movs	r3, #133	; 0x85
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	58d3      	ldr	r3, [r2, r3]
 800618a:	63bb      	str	r3, [r7, #56]	; 0x38
 800618c:	e02d      	b.n	80061ea <f_lseek+0x35a>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 800618e:	687a      	ldr	r2, [r7, #4]
 8006190:	2384      	movs	r3, #132	; 0x84
 8006192:	009b      	lsls	r3, r3, #2
 8006194:	58d3      	ldr	r3, [r2, r3]
 8006196:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8006198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800619a:	2b00      	cmp	r3, #0
 800619c:	d120      	bne.n	80061e0 <f_lseek+0x350>
					clst = create_chain(fp->fs, 0);
 800619e:	687a      	ldr	r2, [r7, #4]
 80061a0:	2380      	movs	r3, #128	; 0x80
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	58d3      	ldr	r3, [r2, r3]
 80061a6:	2100      	movs	r1, #0
 80061a8:	0018      	movs	r0, r3
 80061aa:	f7fd feb9 	bl	8003f20 <create_chain>
 80061ae:	0003      	movs	r3, r0
 80061b0:	63bb      	str	r3, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 80061b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d105      	bne.n	80061c4 <f_lseek+0x334>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	4a1a      	ldr	r2, [pc, #104]	; (8006224 <f_lseek+0x394>)
 80061bc:	2102      	movs	r1, #2
 80061be:	5499      	strb	r1, [r3, r2]
 80061c0:	2302      	movs	r3, #2
 80061c2:	e106      	b.n	80063d2 <f_lseek+0x542>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80061c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061c6:	3301      	adds	r3, #1
 80061c8:	d105      	bne.n	80061d6 <f_lseek+0x346>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	4a15      	ldr	r2, [pc, #84]	; (8006224 <f_lseek+0x394>)
 80061ce:	2101      	movs	r1, #1
 80061d0:	5499      	strb	r1, [r3, r2]
 80061d2:	2301      	movs	r3, #1
 80061d4:	e0fd      	b.n	80063d2 <f_lseek+0x542>
					fp->sclust = clst;
 80061d6:	687a      	ldr	r2, [r7, #4]
 80061d8:	2384      	movs	r3, #132	; 0x84
 80061da:	009b      	lsls	r3, r3, #2
 80061dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80061de:	50d1      	str	r1, [r2, r3]
				}
#endif
				fp->clust = clst;
 80061e0:	687a      	ldr	r2, [r7, #4]
 80061e2:	2385      	movs	r3, #133	; 0x85
 80061e4:	009b      	lsls	r3, r3, #2
 80061e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80061e8:	50d1      	str	r1, [r2, r3]
			}
			if (clst != 0) {
 80061ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d100      	bne.n	80061f2 <f_lseek+0x362>
 80061f0:	e085      	b.n	80062fe <f_lseek+0x46e>
				while (ofs > bcs) {						/* Cluster following loop */
 80061f2:	e059      	b.n	80062a8 <f_lseek+0x418>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	4a0d      	ldr	r2, [pc, #52]	; (800622c <f_lseek+0x39c>)
 80061f8:	5c9b      	ldrb	r3, [r3, r2]
 80061fa:	001a      	movs	r2, r3
 80061fc:	2302      	movs	r3, #2
 80061fe:	4013      	ands	r3, r2
 8006200:	d018      	beq.n	8006234 <f_lseek+0x3a4>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 8006202:	687a      	ldr	r2, [r7, #4]
 8006204:	2380      	movs	r3, #128	; 0x80
 8006206:	009b      	lsls	r3, r3, #2
 8006208:	58d3      	ldr	r3, [r2, r3]
 800620a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800620c:	0011      	movs	r1, r2
 800620e:	0018      	movs	r0, r3
 8006210:	f7fd fe86 	bl	8003f20 <create_chain>
 8006214:	0003      	movs	r3, r0
 8006216:	63bb      	str	r3, [r7, #56]	; 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 8006218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800621a:	2b00      	cmp	r3, #0
 800621c:	d115      	bne.n	800624a <f_lseek+0x3ba>
							ofs = bcs; break;
 800621e:	69fb      	ldr	r3, [r7, #28]
 8006220:	603b      	str	r3, [r7, #0]
 8006222:	e045      	b.n	80062b0 <f_lseek+0x420>
 8006224:	00000207 	.word	0x00000207
 8006228:	00000202 	.word	0x00000202
 800622c:	00000206 	.word	0x00000206
 8006230:	00000201 	.word	0x00000201
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	2380      	movs	r3, #128	; 0x80
 8006238:	009b      	lsls	r3, r3, #2
 800623a:	58d3      	ldr	r3, [r2, r3]
 800623c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800623e:	0011      	movs	r1, r2
 8006240:	0018      	movs	r0, r3
 8006242:	f7fd fc11 	bl	8003a68 <get_fat>
 8006246:	0003      	movs	r3, r0
 8006248:	63bb      	str	r3, [r7, #56]	; 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800624a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800624c:	3301      	adds	r3, #1
 800624e:	d105      	bne.n	800625c <f_lseek+0x3cc>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	4a62      	ldr	r2, [pc, #392]	; (80063dc <f_lseek+0x54c>)
 8006254:	2101      	movs	r1, #1
 8006256:	5499      	strb	r1, [r3, r2]
 8006258:	2301      	movs	r3, #1
 800625a:	e0ba      	b.n	80063d2 <f_lseek+0x542>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 800625c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800625e:	2b01      	cmp	r3, #1
 8006260:	d909      	bls.n	8006276 <f_lseek+0x3e6>
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	2380      	movs	r3, #128	; 0x80
 8006266:	009b      	lsls	r3, r3, #2
 8006268:	58d2      	ldr	r2, [r2, r3]
 800626a:	2385      	movs	r3, #133	; 0x85
 800626c:	009b      	lsls	r3, r3, #2
 800626e:	58d3      	ldr	r3, [r2, r3]
 8006270:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006272:	429a      	cmp	r2, r3
 8006274:	d305      	bcc.n	8006282 <f_lseek+0x3f2>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	4a58      	ldr	r2, [pc, #352]	; (80063dc <f_lseek+0x54c>)
 800627a:	2102      	movs	r1, #2
 800627c:	5499      	strb	r1, [r3, r2]
 800627e:	2302      	movs	r3, #2
 8006280:	e0a7      	b.n	80063d2 <f_lseek+0x542>
					fp->clust = clst;
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	2385      	movs	r3, #133	; 0x85
 8006286:	009b      	lsls	r3, r3, #2
 8006288:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800628a:	50d1      	str	r1, [r2, r3]
					fp->fptr += bcs;
 800628c:	687a      	ldr	r2, [r7, #4]
 800628e:	2382      	movs	r3, #130	; 0x82
 8006290:	009b      	lsls	r3, r3, #2
 8006292:	58d2      	ldr	r2, [r2, r3]
 8006294:	69fb      	ldr	r3, [r7, #28]
 8006296:	18d1      	adds	r1, r2, r3
 8006298:	687a      	ldr	r2, [r7, #4]
 800629a:	2382      	movs	r3, #130	; 0x82
 800629c:	009b      	lsls	r3, r3, #2
 800629e:	50d1      	str	r1, [r2, r3]
					ofs -= bcs;
 80062a0:	683a      	ldr	r2, [r7, #0]
 80062a2:	69fb      	ldr	r3, [r7, #28]
 80062a4:	1ad3      	subs	r3, r2, r3
 80062a6:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 80062a8:	683a      	ldr	r2, [r7, #0]
 80062aa:	69fb      	ldr	r3, [r7, #28]
 80062ac:	429a      	cmp	r2, r3
 80062ae:	d8a1      	bhi.n	80061f4 <f_lseek+0x364>
				}
				fp->fptr += ofs;
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	2382      	movs	r3, #130	; 0x82
 80062b4:	009b      	lsls	r3, r3, #2
 80062b6:	58d2      	ldr	r2, [r2, r3]
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	18d1      	adds	r1, r2, r3
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	2382      	movs	r3, #130	; 0x82
 80062c0:	009b      	lsls	r3, r3, #2
 80062c2:	50d1      	str	r1, [r2, r3]
				if (ofs % SS(fp->fs)) {
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	05db      	lsls	r3, r3, #23
 80062c8:	0ddb      	lsrs	r3, r3, #23
 80062ca:	d018      	beq.n	80062fe <f_lseek+0x46e>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 80062cc:	687a      	ldr	r2, [r7, #4]
 80062ce:	2380      	movs	r3, #128	; 0x80
 80062d0:	009b      	lsls	r3, r3, #2
 80062d2:	58d3      	ldr	r3, [r2, r3]
 80062d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80062d6:	0011      	movs	r1, r2
 80062d8:	0018      	movs	r0, r3
 80062da:	f7fd fba1 	bl	8003a20 <clust2sect>
 80062de:	0003      	movs	r3, r0
 80062e0:	637b      	str	r3, [r7, #52]	; 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 80062e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d105      	bne.n	80062f4 <f_lseek+0x464>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	4a3c      	ldr	r2, [pc, #240]	; (80063dc <f_lseek+0x54c>)
 80062ec:	2102      	movs	r1, #2
 80062ee:	5499      	strb	r1, [r3, r2]
 80062f0:	2302      	movs	r3, #2
 80062f2:	e06e      	b.n	80063d2 <f_lseek+0x542>
					nsect += ofs / SS(fp->fs);
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	0a5b      	lsrs	r3, r3, #9
 80062f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80062fa:	18d3      	adds	r3, r2, r3
 80062fc:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 80062fe:	687a      	ldr	r2, [r7, #4]
 8006300:	2382      	movs	r3, #130	; 0x82
 8006302:	009b      	lsls	r3, r3, #2
 8006304:	58d3      	ldr	r3, [r2, r3]
 8006306:	05db      	lsls	r3, r3, #23
 8006308:	0ddb      	lsrs	r3, r3, #23
 800630a:	d044      	beq.n	8006396 <f_lseek+0x506>
 800630c:	687a      	ldr	r2, [r7, #4]
 800630e:	2386      	movs	r3, #134	; 0x86
 8006310:	009b      	lsls	r3, r3, #2
 8006312:	58d3      	ldr	r3, [r2, r3]
 8006314:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006316:	429a      	cmp	r2, r3
 8006318:	d03d      	beq.n	8006396 <f_lseek+0x506>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	4a30      	ldr	r2, [pc, #192]	; (80063e0 <f_lseek+0x550>)
 800631e:	5c9b      	ldrb	r3, [r3, r2]
 8006320:	001a      	movs	r2, r3
 8006322:	2340      	movs	r3, #64	; 0x40
 8006324:	4013      	ands	r3, r2
 8006326:	d01e      	beq.n	8006366 <f_lseek+0x4d6>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8006328:	687a      	ldr	r2, [r7, #4]
 800632a:	2380      	movs	r3, #128	; 0x80
 800632c:	009b      	lsls	r3, r3, #2
 800632e:	58d3      	ldr	r3, [r2, r3]
 8006330:	4a2c      	ldr	r2, [pc, #176]	; (80063e4 <f_lseek+0x554>)
 8006332:	5c98      	ldrb	r0, [r3, r2]
 8006334:	6879      	ldr	r1, [r7, #4]
 8006336:	687a      	ldr	r2, [r7, #4]
 8006338:	2386      	movs	r3, #134	; 0x86
 800633a:	009b      	lsls	r3, r3, #2
 800633c:	58d2      	ldr	r2, [r2, r3]
 800633e:	2301      	movs	r3, #1
 8006340:	f7fc ff82 	bl	8003248 <disk_write>
 8006344:	1e03      	subs	r3, r0, #0
 8006346:	d005      	beq.n	8006354 <f_lseek+0x4c4>
					ABORT(fp->fs, FR_DISK_ERR);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	4a24      	ldr	r2, [pc, #144]	; (80063dc <f_lseek+0x54c>)
 800634c:	2101      	movs	r1, #1
 800634e:	5499      	strb	r1, [r3, r2]
 8006350:	2301      	movs	r3, #1
 8006352:	e03e      	b.n	80063d2 <f_lseek+0x542>
				fp->flag &= ~FA__DIRTY;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	4a22      	ldr	r2, [pc, #136]	; (80063e0 <f_lseek+0x550>)
 8006358:	5c9b      	ldrb	r3, [r3, r2]
 800635a:	2240      	movs	r2, #64	; 0x40
 800635c:	4393      	bics	r3, r2
 800635e:	b2d9      	uxtb	r1, r3
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	4a1f      	ldr	r2, [pc, #124]	; (80063e0 <f_lseek+0x550>)
 8006364:	5499      	strb	r1, [r3, r2]
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	2380      	movs	r3, #128	; 0x80
 800636a:	009b      	lsls	r3, r3, #2
 800636c:	58d3      	ldr	r3, [r2, r3]
 800636e:	4a1d      	ldr	r2, [pc, #116]	; (80063e4 <f_lseek+0x554>)
 8006370:	5c98      	ldrb	r0, [r3, r2]
 8006372:	6879      	ldr	r1, [r7, #4]
 8006374:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006376:	2301      	movs	r3, #1
 8006378:	f7fc ff3e 	bl	80031f8 <disk_read>
 800637c:	1e03      	subs	r3, r0, #0
 800637e:	d005      	beq.n	800638c <f_lseek+0x4fc>
				ABORT(fp->fs, FR_DISK_ERR);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	4a16      	ldr	r2, [pc, #88]	; (80063dc <f_lseek+0x54c>)
 8006384:	2101      	movs	r1, #1
 8006386:	5499      	strb	r1, [r3, r2]
 8006388:	2301      	movs	r3, #1
 800638a:	e022      	b.n	80063d2 <f_lseek+0x542>
#endif
			fp->dsect = nsect;
 800638c:	687a      	ldr	r2, [r7, #4]
 800638e:	2386      	movs	r3, #134	; 0x86
 8006390:	009b      	lsls	r3, r3, #2
 8006392:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006394:	50d1      	str	r1, [r2, r3]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 8006396:	687a      	ldr	r2, [r7, #4]
 8006398:	2382      	movs	r3, #130	; 0x82
 800639a:	009b      	lsls	r3, r3, #2
 800639c:	58d2      	ldr	r2, [r2, r3]
 800639e:	6879      	ldr	r1, [r7, #4]
 80063a0:	2383      	movs	r3, #131	; 0x83
 80063a2:	009b      	lsls	r3, r3, #2
 80063a4:	58cb      	ldr	r3, [r1, r3]
 80063a6:	429a      	cmp	r2, r3
 80063a8:	d910      	bls.n	80063cc <f_lseek+0x53c>
			fp->fsize = fp->fptr;
 80063aa:	687a      	ldr	r2, [r7, #4]
 80063ac:	2382      	movs	r3, #130	; 0x82
 80063ae:	009b      	lsls	r3, r3, #2
 80063b0:	58d1      	ldr	r1, [r2, r3]
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	2383      	movs	r3, #131	; 0x83
 80063b6:	009b      	lsls	r3, r3, #2
 80063b8:	50d1      	str	r1, [r2, r3]
			fp->flag |= FA__WRITTEN;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	4a08      	ldr	r2, [pc, #32]	; (80063e0 <f_lseek+0x550>)
 80063be:	5c9b      	ldrb	r3, [r3, r2]
 80063c0:	2220      	movs	r2, #32
 80063c2:	4313      	orrs	r3, r2
 80063c4:	b2d9      	uxtb	r1, r3
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	4a05      	ldr	r2, [pc, #20]	; (80063e0 <f_lseek+0x550>)
 80063ca:	5499      	strb	r1, [r3, r2]
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 80063cc:	233f      	movs	r3, #63	; 0x3f
 80063ce:	18fb      	adds	r3, r7, r3
 80063d0:	781b      	ldrb	r3, [r3, #0]
}
 80063d2:	0018      	movs	r0, r3
 80063d4:	46bd      	mov	sp, r7
 80063d6:	b010      	add	sp, #64	; 0x40
 80063d8:	bdb0      	pop	{r4, r5, r7, pc}
 80063da:	46c0      	nop			; (mov r8, r8)
 80063dc:	00000207 	.word	0x00000207
 80063e0:	00000206 	.word	0x00000206
 80063e4:	00000201 	.word	0x00000201

080063e8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b086      	sub	sp, #24
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	60f8      	str	r0, [r7, #12]
 80063f0:	60b9      	str	r1, [r7, #8]
 80063f2:	1dfb      	adds	r3, r7, #7
 80063f4:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 1;
 80063f6:	2317      	movs	r3, #23
 80063f8:	18fb      	adds	r3, r7, r3
 80063fa:	2201      	movs	r2, #1
 80063fc:	701a      	strb	r2, [r3, #0]
  uint8_t DiskNum = 0;
 80063fe:	2316      	movs	r3, #22
 8006400:	18fb      	adds	r3, r7, r3
 8006402:	2200      	movs	r2, #0
 8006404:	701a      	strb	r2, [r3, #0]
  
  if(disk.nbr <= _VOLUMES)
 8006406:	4b22      	ldr	r3, [pc, #136]	; (8006490 <FATFS_LinkDriverEx+0xa8>)
 8006408:	7a5b      	ldrb	r3, [r3, #9]
 800640a:	b2db      	uxtb	r3, r3
 800640c:	2b01      	cmp	r3, #1
 800640e:	d838      	bhi.n	8006482 <FATFS_LinkDriverEx+0x9a>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006410:	4b1f      	ldr	r3, [pc, #124]	; (8006490 <FATFS_LinkDriverEx+0xa8>)
 8006412:	7a5b      	ldrb	r3, [r3, #9]
 8006414:	b2db      	uxtb	r3, r3
 8006416:	001a      	movs	r2, r3
 8006418:	4b1d      	ldr	r3, [pc, #116]	; (8006490 <FATFS_LinkDriverEx+0xa8>)
 800641a:	2100      	movs	r1, #0
 800641c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800641e:	4b1c      	ldr	r3, [pc, #112]	; (8006490 <FATFS_LinkDriverEx+0xa8>)
 8006420:	7a5b      	ldrb	r3, [r3, #9]
 8006422:	b2db      	uxtb	r3, r3
 8006424:	4a1a      	ldr	r2, [pc, #104]	; (8006490 <FATFS_LinkDriverEx+0xa8>)
 8006426:	009b      	lsls	r3, r3, #2
 8006428:	18d3      	adds	r3, r2, r3
 800642a:	3304      	adds	r3, #4
 800642c:	68fa      	ldr	r2, [r7, #12]
 800642e:	601a      	str	r2, [r3, #0]
    disk.lun[disk.nbr] = lun;  
 8006430:	4b17      	ldr	r3, [pc, #92]	; (8006490 <FATFS_LinkDriverEx+0xa8>)
 8006432:	7a5b      	ldrb	r3, [r3, #9]
 8006434:	b2db      	uxtb	r3, r3
 8006436:	001a      	movs	r2, r3
 8006438:	4b15      	ldr	r3, [pc, #84]	; (8006490 <FATFS_LinkDriverEx+0xa8>)
 800643a:	189b      	adds	r3, r3, r2
 800643c:	1dfa      	adds	r2, r7, #7
 800643e:	7812      	ldrb	r2, [r2, #0]
 8006440:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006442:	4b13      	ldr	r3, [pc, #76]	; (8006490 <FATFS_LinkDriverEx+0xa8>)
 8006444:	7a5b      	ldrb	r3, [r3, #9]
 8006446:	b2db      	uxtb	r3, r3
 8006448:	1c5a      	adds	r2, r3, #1
 800644a:	b2d1      	uxtb	r1, r2
 800644c:	4a10      	ldr	r2, [pc, #64]	; (8006490 <FATFS_LinkDriverEx+0xa8>)
 800644e:	7251      	strb	r1, [r2, #9]
 8006450:	2116      	movs	r1, #22
 8006452:	187a      	adds	r2, r7, r1
 8006454:	7013      	strb	r3, [r2, #0]
    path[0] = DiskNum + '0';
 8006456:	187b      	adds	r3, r7, r1
 8006458:	781b      	ldrb	r3, [r3, #0]
 800645a:	3330      	adds	r3, #48	; 0x30
 800645c:	b2da      	uxtb	r2, r3
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	3301      	adds	r3, #1
 8006466:	223a      	movs	r2, #58	; 0x3a
 8006468:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	3302      	adds	r3, #2
 800646e:	222f      	movs	r2, #47	; 0x2f
 8006470:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	3303      	adds	r3, #3
 8006476:	2200      	movs	r2, #0
 8006478:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800647a:	2317      	movs	r3, #23
 800647c:	18fb      	adds	r3, r7, r3
 800647e:	2200      	movs	r2, #0
 8006480:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 8006482:	2317      	movs	r3, #23
 8006484:	18fb      	adds	r3, r7, r3
 8006486:	781b      	ldrb	r3, [r3, #0]
}
 8006488:	0018      	movs	r0, r3
 800648a:	46bd      	mov	sp, r7
 800648c:	b006      	add	sp, #24
 800648e:	bd80      	pop	{r7, pc}
 8006490:	200000d0 	.word	0x200000d0

08006494 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b082      	sub	sp, #8
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800649e:	6839      	ldr	r1, [r7, #0]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2200      	movs	r2, #0
 80064a4:	0018      	movs	r0, r3
 80064a6:	f7ff ff9f 	bl	80063e8 <FATFS_LinkDriverEx>
 80064aa:	0003      	movs	r3, r0
}
 80064ac:	0018      	movs	r0, r3
 80064ae:	46bd      	mov	sp, r7
 80064b0:	b002      	add	sp, #8
 80064b2:	bd80      	pop	{r7, pc}

080064b4 <__errno>:
 80064b4:	4b01      	ldr	r3, [pc, #4]	; (80064bc <__errno+0x8>)
 80064b6:	6818      	ldr	r0, [r3, #0]
 80064b8:	4770      	bx	lr
 80064ba:	46c0      	nop			; (mov r8, r8)
 80064bc:	20000024 	.word	0x20000024

080064c0 <_fclose_r>:
 80064c0:	b570      	push	{r4, r5, r6, lr}
 80064c2:	0005      	movs	r5, r0
 80064c4:	1e0c      	subs	r4, r1, #0
 80064c6:	d102      	bne.n	80064ce <_fclose_r+0xe>
 80064c8:	2600      	movs	r6, #0
 80064ca:	0030      	movs	r0, r6
 80064cc:	bd70      	pop	{r4, r5, r6, pc}
 80064ce:	2800      	cmp	r0, #0
 80064d0:	d004      	beq.n	80064dc <_fclose_r+0x1c>
 80064d2:	6983      	ldr	r3, [r0, #24]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d101      	bne.n	80064dc <_fclose_r+0x1c>
 80064d8:	f000 f94c 	bl	8006774 <__sinit>
 80064dc:	4b21      	ldr	r3, [pc, #132]	; (8006564 <_fclose_r+0xa4>)
 80064de:	429c      	cmp	r4, r3
 80064e0:	d135      	bne.n	800654e <_fclose_r+0x8e>
 80064e2:	686c      	ldr	r4, [r5, #4]
 80064e4:	220c      	movs	r2, #12
 80064e6:	5ea3      	ldrsh	r3, [r4, r2]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d0ed      	beq.n	80064c8 <_fclose_r+0x8>
 80064ec:	0021      	movs	r1, r4
 80064ee:	0028      	movs	r0, r5
 80064f0:	f000 f848 	bl	8006584 <__sflush_r>
 80064f4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80064f6:	0006      	movs	r6, r0
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d006      	beq.n	800650a <_fclose_r+0x4a>
 80064fc:	6a21      	ldr	r1, [r4, #32]
 80064fe:	0028      	movs	r0, r5
 8006500:	4798      	blx	r3
 8006502:	2800      	cmp	r0, #0
 8006504:	da01      	bge.n	800650a <_fclose_r+0x4a>
 8006506:	2601      	movs	r6, #1
 8006508:	4276      	negs	r6, r6
 800650a:	89a3      	ldrh	r3, [r4, #12]
 800650c:	061b      	lsls	r3, r3, #24
 800650e:	d503      	bpl.n	8006518 <_fclose_r+0x58>
 8006510:	6921      	ldr	r1, [r4, #16]
 8006512:	0028      	movs	r0, r5
 8006514:	f000 fbb6 	bl	8006c84 <_free_r>
 8006518:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800651a:	2900      	cmp	r1, #0
 800651c:	d008      	beq.n	8006530 <_fclose_r+0x70>
 800651e:	0023      	movs	r3, r4
 8006520:	3344      	adds	r3, #68	; 0x44
 8006522:	4299      	cmp	r1, r3
 8006524:	d002      	beq.n	800652c <_fclose_r+0x6c>
 8006526:	0028      	movs	r0, r5
 8006528:	f000 fbac 	bl	8006c84 <_free_r>
 800652c:	2300      	movs	r3, #0
 800652e:	6363      	str	r3, [r4, #52]	; 0x34
 8006530:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006532:	2900      	cmp	r1, #0
 8006534:	d004      	beq.n	8006540 <_fclose_r+0x80>
 8006536:	0028      	movs	r0, r5
 8006538:	f000 fba4 	bl	8006c84 <_free_r>
 800653c:	2300      	movs	r3, #0
 800653e:	64a3      	str	r3, [r4, #72]	; 0x48
 8006540:	f000 f98a 	bl	8006858 <__sfp_lock_acquire>
 8006544:	2300      	movs	r3, #0
 8006546:	81a3      	strh	r3, [r4, #12]
 8006548:	f000 f987 	bl	800685a <__sfp_lock_release>
 800654c:	e7bd      	b.n	80064ca <_fclose_r+0xa>
 800654e:	4b06      	ldr	r3, [pc, #24]	; (8006568 <_fclose_r+0xa8>)
 8006550:	429c      	cmp	r4, r3
 8006552:	d101      	bne.n	8006558 <_fclose_r+0x98>
 8006554:	68ac      	ldr	r4, [r5, #8]
 8006556:	e7c5      	b.n	80064e4 <_fclose_r+0x24>
 8006558:	4b04      	ldr	r3, [pc, #16]	; (800656c <_fclose_r+0xac>)
 800655a:	429c      	cmp	r4, r3
 800655c:	d1c2      	bne.n	80064e4 <_fclose_r+0x24>
 800655e:	68ec      	ldr	r4, [r5, #12]
 8006560:	e7c0      	b.n	80064e4 <_fclose_r+0x24>
 8006562:	46c0      	nop			; (mov r8, r8)
 8006564:	080078d8 	.word	0x080078d8
 8006568:	080078f8 	.word	0x080078f8
 800656c:	080078b8 	.word	0x080078b8

08006570 <fclose>:
 8006570:	b510      	push	{r4, lr}
 8006572:	4b03      	ldr	r3, [pc, #12]	; (8006580 <fclose+0x10>)
 8006574:	0001      	movs	r1, r0
 8006576:	6818      	ldr	r0, [r3, #0]
 8006578:	f7ff ffa2 	bl	80064c0 <_fclose_r>
 800657c:	bd10      	pop	{r4, pc}
 800657e:	46c0      	nop			; (mov r8, r8)
 8006580:	20000024 	.word	0x20000024

08006584 <__sflush_r>:
 8006584:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006586:	898a      	ldrh	r2, [r1, #12]
 8006588:	0005      	movs	r5, r0
 800658a:	000c      	movs	r4, r1
 800658c:	0713      	lsls	r3, r2, #28
 800658e:	d460      	bmi.n	8006652 <__sflush_r+0xce>
 8006590:	684b      	ldr	r3, [r1, #4]
 8006592:	2b00      	cmp	r3, #0
 8006594:	dc04      	bgt.n	80065a0 <__sflush_r+0x1c>
 8006596:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006598:	2b00      	cmp	r3, #0
 800659a:	dc01      	bgt.n	80065a0 <__sflush_r+0x1c>
 800659c:	2000      	movs	r0, #0
 800659e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80065a0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80065a2:	2f00      	cmp	r7, #0
 80065a4:	d0fa      	beq.n	800659c <__sflush_r+0x18>
 80065a6:	2300      	movs	r3, #0
 80065a8:	682e      	ldr	r6, [r5, #0]
 80065aa:	602b      	str	r3, [r5, #0]
 80065ac:	2380      	movs	r3, #128	; 0x80
 80065ae:	015b      	lsls	r3, r3, #5
 80065b0:	6a21      	ldr	r1, [r4, #32]
 80065b2:	401a      	ands	r2, r3
 80065b4:	d034      	beq.n	8006620 <__sflush_r+0x9c>
 80065b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80065b8:	89a3      	ldrh	r3, [r4, #12]
 80065ba:	075b      	lsls	r3, r3, #29
 80065bc:	d506      	bpl.n	80065cc <__sflush_r+0x48>
 80065be:	6863      	ldr	r3, [r4, #4]
 80065c0:	1ac0      	subs	r0, r0, r3
 80065c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d001      	beq.n	80065cc <__sflush_r+0x48>
 80065c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80065ca:	1ac0      	subs	r0, r0, r3
 80065cc:	0002      	movs	r2, r0
 80065ce:	6a21      	ldr	r1, [r4, #32]
 80065d0:	2300      	movs	r3, #0
 80065d2:	0028      	movs	r0, r5
 80065d4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80065d6:	47b8      	blx	r7
 80065d8:	89a1      	ldrh	r1, [r4, #12]
 80065da:	1c43      	adds	r3, r0, #1
 80065dc:	d106      	bne.n	80065ec <__sflush_r+0x68>
 80065de:	682b      	ldr	r3, [r5, #0]
 80065e0:	2b1d      	cmp	r3, #29
 80065e2:	d830      	bhi.n	8006646 <__sflush_r+0xc2>
 80065e4:	4a2b      	ldr	r2, [pc, #172]	; (8006694 <__sflush_r+0x110>)
 80065e6:	40da      	lsrs	r2, r3
 80065e8:	07d3      	lsls	r3, r2, #31
 80065ea:	d52c      	bpl.n	8006646 <__sflush_r+0xc2>
 80065ec:	2300      	movs	r3, #0
 80065ee:	6063      	str	r3, [r4, #4]
 80065f0:	6923      	ldr	r3, [r4, #16]
 80065f2:	6023      	str	r3, [r4, #0]
 80065f4:	04cb      	lsls	r3, r1, #19
 80065f6:	d505      	bpl.n	8006604 <__sflush_r+0x80>
 80065f8:	1c43      	adds	r3, r0, #1
 80065fa:	d102      	bne.n	8006602 <__sflush_r+0x7e>
 80065fc:	682b      	ldr	r3, [r5, #0]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d100      	bne.n	8006604 <__sflush_r+0x80>
 8006602:	6560      	str	r0, [r4, #84]	; 0x54
 8006604:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006606:	602e      	str	r6, [r5, #0]
 8006608:	2900      	cmp	r1, #0
 800660a:	d0c7      	beq.n	800659c <__sflush_r+0x18>
 800660c:	0023      	movs	r3, r4
 800660e:	3344      	adds	r3, #68	; 0x44
 8006610:	4299      	cmp	r1, r3
 8006612:	d002      	beq.n	800661a <__sflush_r+0x96>
 8006614:	0028      	movs	r0, r5
 8006616:	f000 fb35 	bl	8006c84 <_free_r>
 800661a:	2000      	movs	r0, #0
 800661c:	6360      	str	r0, [r4, #52]	; 0x34
 800661e:	e7be      	b.n	800659e <__sflush_r+0x1a>
 8006620:	2301      	movs	r3, #1
 8006622:	0028      	movs	r0, r5
 8006624:	47b8      	blx	r7
 8006626:	1c43      	adds	r3, r0, #1
 8006628:	d1c6      	bne.n	80065b8 <__sflush_r+0x34>
 800662a:	682b      	ldr	r3, [r5, #0]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d0c3      	beq.n	80065b8 <__sflush_r+0x34>
 8006630:	2b1d      	cmp	r3, #29
 8006632:	d001      	beq.n	8006638 <__sflush_r+0xb4>
 8006634:	2b16      	cmp	r3, #22
 8006636:	d101      	bne.n	800663c <__sflush_r+0xb8>
 8006638:	602e      	str	r6, [r5, #0]
 800663a:	e7af      	b.n	800659c <__sflush_r+0x18>
 800663c:	2340      	movs	r3, #64	; 0x40
 800663e:	89a2      	ldrh	r2, [r4, #12]
 8006640:	4313      	orrs	r3, r2
 8006642:	81a3      	strh	r3, [r4, #12]
 8006644:	e7ab      	b.n	800659e <__sflush_r+0x1a>
 8006646:	2340      	movs	r3, #64	; 0x40
 8006648:	430b      	orrs	r3, r1
 800664a:	2001      	movs	r0, #1
 800664c:	81a3      	strh	r3, [r4, #12]
 800664e:	4240      	negs	r0, r0
 8006650:	e7a5      	b.n	800659e <__sflush_r+0x1a>
 8006652:	690f      	ldr	r7, [r1, #16]
 8006654:	2f00      	cmp	r7, #0
 8006656:	d0a1      	beq.n	800659c <__sflush_r+0x18>
 8006658:	680b      	ldr	r3, [r1, #0]
 800665a:	600f      	str	r7, [r1, #0]
 800665c:	1bdb      	subs	r3, r3, r7
 800665e:	9301      	str	r3, [sp, #4]
 8006660:	2300      	movs	r3, #0
 8006662:	0792      	lsls	r2, r2, #30
 8006664:	d100      	bne.n	8006668 <__sflush_r+0xe4>
 8006666:	694b      	ldr	r3, [r1, #20]
 8006668:	60a3      	str	r3, [r4, #8]
 800666a:	9b01      	ldr	r3, [sp, #4]
 800666c:	2b00      	cmp	r3, #0
 800666e:	dc00      	bgt.n	8006672 <__sflush_r+0xee>
 8006670:	e794      	b.n	800659c <__sflush_r+0x18>
 8006672:	9b01      	ldr	r3, [sp, #4]
 8006674:	003a      	movs	r2, r7
 8006676:	6a21      	ldr	r1, [r4, #32]
 8006678:	0028      	movs	r0, r5
 800667a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800667c:	47b0      	blx	r6
 800667e:	2800      	cmp	r0, #0
 8006680:	dc03      	bgt.n	800668a <__sflush_r+0x106>
 8006682:	2340      	movs	r3, #64	; 0x40
 8006684:	89a2      	ldrh	r2, [r4, #12]
 8006686:	4313      	orrs	r3, r2
 8006688:	e7df      	b.n	800664a <__sflush_r+0xc6>
 800668a:	9b01      	ldr	r3, [sp, #4]
 800668c:	183f      	adds	r7, r7, r0
 800668e:	1a1b      	subs	r3, r3, r0
 8006690:	9301      	str	r3, [sp, #4]
 8006692:	e7ea      	b.n	800666a <__sflush_r+0xe6>
 8006694:	20400001 	.word	0x20400001

08006698 <_fflush_r>:
 8006698:	690b      	ldr	r3, [r1, #16]
 800669a:	b570      	push	{r4, r5, r6, lr}
 800669c:	0005      	movs	r5, r0
 800669e:	000c      	movs	r4, r1
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d101      	bne.n	80066a8 <_fflush_r+0x10>
 80066a4:	2000      	movs	r0, #0
 80066a6:	bd70      	pop	{r4, r5, r6, pc}
 80066a8:	2800      	cmp	r0, #0
 80066aa:	d004      	beq.n	80066b6 <_fflush_r+0x1e>
 80066ac:	6983      	ldr	r3, [r0, #24]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d101      	bne.n	80066b6 <_fflush_r+0x1e>
 80066b2:	f000 f85f 	bl	8006774 <__sinit>
 80066b6:	4b0b      	ldr	r3, [pc, #44]	; (80066e4 <_fflush_r+0x4c>)
 80066b8:	429c      	cmp	r4, r3
 80066ba:	d109      	bne.n	80066d0 <_fflush_r+0x38>
 80066bc:	686c      	ldr	r4, [r5, #4]
 80066be:	220c      	movs	r2, #12
 80066c0:	5ea3      	ldrsh	r3, [r4, r2]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d0ee      	beq.n	80066a4 <_fflush_r+0xc>
 80066c6:	0021      	movs	r1, r4
 80066c8:	0028      	movs	r0, r5
 80066ca:	f7ff ff5b 	bl	8006584 <__sflush_r>
 80066ce:	e7ea      	b.n	80066a6 <_fflush_r+0xe>
 80066d0:	4b05      	ldr	r3, [pc, #20]	; (80066e8 <_fflush_r+0x50>)
 80066d2:	429c      	cmp	r4, r3
 80066d4:	d101      	bne.n	80066da <_fflush_r+0x42>
 80066d6:	68ac      	ldr	r4, [r5, #8]
 80066d8:	e7f1      	b.n	80066be <_fflush_r+0x26>
 80066da:	4b04      	ldr	r3, [pc, #16]	; (80066ec <_fflush_r+0x54>)
 80066dc:	429c      	cmp	r4, r3
 80066de:	d1ee      	bne.n	80066be <_fflush_r+0x26>
 80066e0:	68ec      	ldr	r4, [r5, #12]
 80066e2:	e7ec      	b.n	80066be <_fflush_r+0x26>
 80066e4:	080078d8 	.word	0x080078d8
 80066e8:	080078f8 	.word	0x080078f8
 80066ec:	080078b8 	.word	0x080078b8

080066f0 <std>:
 80066f0:	2300      	movs	r3, #0
 80066f2:	b510      	push	{r4, lr}
 80066f4:	0004      	movs	r4, r0
 80066f6:	6003      	str	r3, [r0, #0]
 80066f8:	6043      	str	r3, [r0, #4]
 80066fa:	6083      	str	r3, [r0, #8]
 80066fc:	8181      	strh	r1, [r0, #12]
 80066fe:	6643      	str	r3, [r0, #100]	; 0x64
 8006700:	81c2      	strh	r2, [r0, #14]
 8006702:	6103      	str	r3, [r0, #16]
 8006704:	6143      	str	r3, [r0, #20]
 8006706:	6183      	str	r3, [r0, #24]
 8006708:	0019      	movs	r1, r3
 800670a:	2208      	movs	r2, #8
 800670c:	305c      	adds	r0, #92	; 0x5c
 800670e:	f000 fab0 	bl	8006c72 <memset>
 8006712:	4b05      	ldr	r3, [pc, #20]	; (8006728 <std+0x38>)
 8006714:	6224      	str	r4, [r4, #32]
 8006716:	6263      	str	r3, [r4, #36]	; 0x24
 8006718:	4b04      	ldr	r3, [pc, #16]	; (800672c <std+0x3c>)
 800671a:	62a3      	str	r3, [r4, #40]	; 0x28
 800671c:	4b04      	ldr	r3, [pc, #16]	; (8006730 <std+0x40>)
 800671e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006720:	4b04      	ldr	r3, [pc, #16]	; (8006734 <std+0x44>)
 8006722:	6323      	str	r3, [r4, #48]	; 0x30
 8006724:	bd10      	pop	{r4, pc}
 8006726:	46c0      	nop			; (mov r8, r8)
 8006728:	08006e55 	.word	0x08006e55
 800672c:	08006e7d 	.word	0x08006e7d
 8006730:	08006eb5 	.word	0x08006eb5
 8006734:	08006ee1 	.word	0x08006ee1

08006738 <_cleanup_r>:
 8006738:	b510      	push	{r4, lr}
 800673a:	4902      	ldr	r1, [pc, #8]	; (8006744 <_cleanup_r+0xc>)
 800673c:	f000 f9de 	bl	8006afc <_fwalk_reent>
 8006740:	bd10      	pop	{r4, pc}
 8006742:	46c0      	nop			; (mov r8, r8)
 8006744:	08006699 	.word	0x08006699

08006748 <__sfmoreglue>:
 8006748:	b570      	push	{r4, r5, r6, lr}
 800674a:	2568      	movs	r5, #104	; 0x68
 800674c:	1e4a      	subs	r2, r1, #1
 800674e:	4355      	muls	r5, r2
 8006750:	000e      	movs	r6, r1
 8006752:	0029      	movs	r1, r5
 8006754:	3174      	adds	r1, #116	; 0x74
 8006756:	f000 fadf 	bl	8006d18 <_malloc_r>
 800675a:	1e04      	subs	r4, r0, #0
 800675c:	d008      	beq.n	8006770 <__sfmoreglue+0x28>
 800675e:	2100      	movs	r1, #0
 8006760:	002a      	movs	r2, r5
 8006762:	6001      	str	r1, [r0, #0]
 8006764:	6046      	str	r6, [r0, #4]
 8006766:	300c      	adds	r0, #12
 8006768:	60a0      	str	r0, [r4, #8]
 800676a:	3268      	adds	r2, #104	; 0x68
 800676c:	f000 fa81 	bl	8006c72 <memset>
 8006770:	0020      	movs	r0, r4
 8006772:	bd70      	pop	{r4, r5, r6, pc}

08006774 <__sinit>:
 8006774:	6983      	ldr	r3, [r0, #24]
 8006776:	b513      	push	{r0, r1, r4, lr}
 8006778:	0004      	movs	r4, r0
 800677a:	2b00      	cmp	r3, #0
 800677c:	d128      	bne.n	80067d0 <__sinit+0x5c>
 800677e:	6483      	str	r3, [r0, #72]	; 0x48
 8006780:	64c3      	str	r3, [r0, #76]	; 0x4c
 8006782:	6503      	str	r3, [r0, #80]	; 0x50
 8006784:	4b13      	ldr	r3, [pc, #76]	; (80067d4 <__sinit+0x60>)
 8006786:	4a14      	ldr	r2, [pc, #80]	; (80067d8 <__sinit+0x64>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	6282      	str	r2, [r0, #40]	; 0x28
 800678c:	9301      	str	r3, [sp, #4]
 800678e:	4298      	cmp	r0, r3
 8006790:	d101      	bne.n	8006796 <__sinit+0x22>
 8006792:	2301      	movs	r3, #1
 8006794:	6183      	str	r3, [r0, #24]
 8006796:	0020      	movs	r0, r4
 8006798:	f000 f820 	bl	80067dc <__sfp>
 800679c:	6060      	str	r0, [r4, #4]
 800679e:	0020      	movs	r0, r4
 80067a0:	f000 f81c 	bl	80067dc <__sfp>
 80067a4:	60a0      	str	r0, [r4, #8]
 80067a6:	0020      	movs	r0, r4
 80067a8:	f000 f818 	bl	80067dc <__sfp>
 80067ac:	2200      	movs	r2, #0
 80067ae:	60e0      	str	r0, [r4, #12]
 80067b0:	2104      	movs	r1, #4
 80067b2:	6860      	ldr	r0, [r4, #4]
 80067b4:	f7ff ff9c 	bl	80066f0 <std>
 80067b8:	2201      	movs	r2, #1
 80067ba:	2109      	movs	r1, #9
 80067bc:	68a0      	ldr	r0, [r4, #8]
 80067be:	f7ff ff97 	bl	80066f0 <std>
 80067c2:	2202      	movs	r2, #2
 80067c4:	2112      	movs	r1, #18
 80067c6:	68e0      	ldr	r0, [r4, #12]
 80067c8:	f7ff ff92 	bl	80066f0 <std>
 80067cc:	2301      	movs	r3, #1
 80067ce:	61a3      	str	r3, [r4, #24]
 80067d0:	bd13      	pop	{r0, r1, r4, pc}
 80067d2:	46c0      	nop			; (mov r8, r8)
 80067d4:	08007918 	.word	0x08007918
 80067d8:	08006739 	.word	0x08006739

080067dc <__sfp>:
 80067dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067de:	4b1c      	ldr	r3, [pc, #112]	; (8006850 <__sfp+0x74>)
 80067e0:	0007      	movs	r7, r0
 80067e2:	681e      	ldr	r6, [r3, #0]
 80067e4:	69b3      	ldr	r3, [r6, #24]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d102      	bne.n	80067f0 <__sfp+0x14>
 80067ea:	0030      	movs	r0, r6
 80067ec:	f7ff ffc2 	bl	8006774 <__sinit>
 80067f0:	3648      	adds	r6, #72	; 0x48
 80067f2:	68b4      	ldr	r4, [r6, #8]
 80067f4:	6873      	ldr	r3, [r6, #4]
 80067f6:	3b01      	subs	r3, #1
 80067f8:	d504      	bpl.n	8006804 <__sfp+0x28>
 80067fa:	6833      	ldr	r3, [r6, #0]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d007      	beq.n	8006810 <__sfp+0x34>
 8006800:	6836      	ldr	r6, [r6, #0]
 8006802:	e7f6      	b.n	80067f2 <__sfp+0x16>
 8006804:	220c      	movs	r2, #12
 8006806:	5ea5      	ldrsh	r5, [r4, r2]
 8006808:	2d00      	cmp	r5, #0
 800680a:	d00d      	beq.n	8006828 <__sfp+0x4c>
 800680c:	3468      	adds	r4, #104	; 0x68
 800680e:	e7f2      	b.n	80067f6 <__sfp+0x1a>
 8006810:	2104      	movs	r1, #4
 8006812:	0038      	movs	r0, r7
 8006814:	f7ff ff98 	bl	8006748 <__sfmoreglue>
 8006818:	6030      	str	r0, [r6, #0]
 800681a:	2800      	cmp	r0, #0
 800681c:	d1f0      	bne.n	8006800 <__sfp+0x24>
 800681e:	230c      	movs	r3, #12
 8006820:	0004      	movs	r4, r0
 8006822:	603b      	str	r3, [r7, #0]
 8006824:	0020      	movs	r0, r4
 8006826:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006828:	0020      	movs	r0, r4
 800682a:	4b0a      	ldr	r3, [pc, #40]	; (8006854 <__sfp+0x78>)
 800682c:	6665      	str	r5, [r4, #100]	; 0x64
 800682e:	6025      	str	r5, [r4, #0]
 8006830:	6065      	str	r5, [r4, #4]
 8006832:	60a5      	str	r5, [r4, #8]
 8006834:	60e3      	str	r3, [r4, #12]
 8006836:	6125      	str	r5, [r4, #16]
 8006838:	6165      	str	r5, [r4, #20]
 800683a:	61a5      	str	r5, [r4, #24]
 800683c:	2208      	movs	r2, #8
 800683e:	0029      	movs	r1, r5
 8006840:	305c      	adds	r0, #92	; 0x5c
 8006842:	f000 fa16 	bl	8006c72 <memset>
 8006846:	6365      	str	r5, [r4, #52]	; 0x34
 8006848:	63a5      	str	r5, [r4, #56]	; 0x38
 800684a:	64a5      	str	r5, [r4, #72]	; 0x48
 800684c:	64e5      	str	r5, [r4, #76]	; 0x4c
 800684e:	e7e9      	b.n	8006824 <__sfp+0x48>
 8006850:	08007918 	.word	0x08007918
 8006854:	ffff0001 	.word	0xffff0001

08006858 <__sfp_lock_acquire>:
 8006858:	4770      	bx	lr

0800685a <__sfp_lock_release>:
 800685a:	4770      	bx	lr

0800685c <_fopen_r>:
 800685c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800685e:	000f      	movs	r7, r1
 8006860:	0011      	movs	r1, r2
 8006862:	aa01      	add	r2, sp, #4
 8006864:	0005      	movs	r5, r0
 8006866:	f000 fb67 	bl	8006f38 <__sflags>
 800686a:	1e06      	subs	r6, r0, #0
 800686c:	d102      	bne.n	8006874 <_fopen_r+0x18>
 800686e:	2400      	movs	r4, #0
 8006870:	0020      	movs	r0, r4
 8006872:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006874:	0028      	movs	r0, r5
 8006876:	f7ff ffb1 	bl	80067dc <__sfp>
 800687a:	1e04      	subs	r4, r0, #0
 800687c:	d0f7      	beq.n	800686e <_fopen_r+0x12>
 800687e:	23db      	movs	r3, #219	; 0xdb
 8006880:	9a01      	ldr	r2, [sp, #4]
 8006882:	005b      	lsls	r3, r3, #1
 8006884:	0039      	movs	r1, r7
 8006886:	0028      	movs	r0, r5
 8006888:	f000 faa4 	bl	8006dd4 <_open_r>
 800688c:	2800      	cmp	r0, #0
 800688e:	da06      	bge.n	800689e <_fopen_r+0x42>
 8006890:	2500      	movs	r5, #0
 8006892:	f7ff ffe1 	bl	8006858 <__sfp_lock_acquire>
 8006896:	81a5      	strh	r5, [r4, #12]
 8006898:	f7ff ffdf 	bl	800685a <__sfp_lock_release>
 800689c:	e7e7      	b.n	800686e <_fopen_r+0x12>
 800689e:	4b0a      	ldr	r3, [pc, #40]	; (80068c8 <_fopen_r+0x6c>)
 80068a0:	81e0      	strh	r0, [r4, #14]
 80068a2:	6263      	str	r3, [r4, #36]	; 0x24
 80068a4:	4b09      	ldr	r3, [pc, #36]	; (80068cc <_fopen_r+0x70>)
 80068a6:	81a6      	strh	r6, [r4, #12]
 80068a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80068aa:	4b09      	ldr	r3, [pc, #36]	; (80068d0 <_fopen_r+0x74>)
 80068ac:	6224      	str	r4, [r4, #32]
 80068ae:	62e3      	str	r3, [r4, #44]	; 0x2c
 80068b0:	4b08      	ldr	r3, [pc, #32]	; (80068d4 <_fopen_r+0x78>)
 80068b2:	6323      	str	r3, [r4, #48]	; 0x30
 80068b4:	05f3      	lsls	r3, r6, #23
 80068b6:	d5db      	bpl.n	8006870 <_fopen_r+0x14>
 80068b8:	2302      	movs	r3, #2
 80068ba:	2200      	movs	r2, #0
 80068bc:	0021      	movs	r1, r4
 80068be:	0028      	movs	r0, r5
 80068c0:	f000 f814 	bl	80068ec <_fseek_r>
 80068c4:	e7d4      	b.n	8006870 <_fopen_r+0x14>
 80068c6:	46c0      	nop			; (mov r8, r8)
 80068c8:	08006e55 	.word	0x08006e55
 80068cc:	08006e7d 	.word	0x08006e7d
 80068d0:	08006eb5 	.word	0x08006eb5
 80068d4:	08006ee1 	.word	0x08006ee1

080068d8 <fopen>:
 80068d8:	b510      	push	{r4, lr}
 80068da:	4b03      	ldr	r3, [pc, #12]	; (80068e8 <fopen+0x10>)
 80068dc:	000a      	movs	r2, r1
 80068de:	0001      	movs	r1, r0
 80068e0:	6818      	ldr	r0, [r3, #0]
 80068e2:	f7ff ffbb 	bl	800685c <_fopen_r>
 80068e6:	bd10      	pop	{r4, pc}
 80068e8:	20000024 	.word	0x20000024

080068ec <_fseek_r>:
 80068ec:	b510      	push	{r4, lr}
 80068ee:	f000 f80d 	bl	800690c <_fseeko_r>
 80068f2:	bd10      	pop	{r4, pc}

080068f4 <fseek>:
 80068f4:	b510      	push	{r4, lr}
 80068f6:	0013      	movs	r3, r2
 80068f8:	000a      	movs	r2, r1
 80068fa:	0001      	movs	r1, r0
 80068fc:	4802      	ldr	r0, [pc, #8]	; (8006908 <fseek+0x14>)
 80068fe:	6800      	ldr	r0, [r0, #0]
 8006900:	f000 f804 	bl	800690c <_fseeko_r>
 8006904:	bd10      	pop	{r4, pc}
 8006906:	46c0      	nop			; (mov r8, r8)
 8006908:	20000024 	.word	0x20000024

0800690c <_fseeko_r>:
 800690c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800690e:	0005      	movs	r5, r0
 8006910:	000c      	movs	r4, r1
 8006912:	9201      	str	r2, [sp, #4]
 8006914:	001e      	movs	r6, r3
 8006916:	2800      	cmp	r0, #0
 8006918:	d004      	beq.n	8006924 <_fseeko_r+0x18>
 800691a:	6983      	ldr	r3, [r0, #24]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d101      	bne.n	8006924 <_fseeko_r+0x18>
 8006920:	f7ff ff28 	bl	8006774 <__sinit>
 8006924:	4b40      	ldr	r3, [pc, #256]	; (8006a28 <_fseeko_r+0x11c>)
 8006926:	429c      	cmp	r4, r3
 8006928:	d111      	bne.n	800694e <_fseeko_r+0x42>
 800692a:	686c      	ldr	r4, [r5, #4]
 800692c:	2284      	movs	r2, #132	; 0x84
 800692e:	89a3      	ldrh	r3, [r4, #12]
 8006930:	0052      	lsls	r2, r2, #1
 8006932:	4013      	ands	r3, r2
 8006934:	4293      	cmp	r3, r2
 8006936:	d103      	bne.n	8006940 <_fseeko_r+0x34>
 8006938:	0021      	movs	r1, r4
 800693a:	0028      	movs	r0, r5
 800693c:	f7ff feac 	bl	8006698 <_fflush_r>
 8006940:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006942:	9300      	str	r3, [sp, #0]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d10c      	bne.n	8006962 <_fseeko_r+0x56>
 8006948:	331d      	adds	r3, #29
 800694a:	602b      	str	r3, [r5, #0]
 800694c:	e05f      	b.n	8006a0e <_fseeko_r+0x102>
 800694e:	4b37      	ldr	r3, [pc, #220]	; (8006a2c <_fseeko_r+0x120>)
 8006950:	429c      	cmp	r4, r3
 8006952:	d101      	bne.n	8006958 <_fseeko_r+0x4c>
 8006954:	68ac      	ldr	r4, [r5, #8]
 8006956:	e7e9      	b.n	800692c <_fseeko_r+0x20>
 8006958:	4b35      	ldr	r3, [pc, #212]	; (8006a30 <_fseeko_r+0x124>)
 800695a:	429c      	cmp	r4, r3
 800695c:	d1e6      	bne.n	800692c <_fseeko_r+0x20>
 800695e:	68ec      	ldr	r4, [r5, #12]
 8006960:	e7e4      	b.n	800692c <_fseeko_r+0x20>
 8006962:	2e01      	cmp	r6, #1
 8006964:	d033      	beq.n	80069ce <_fseeko_r+0xc2>
 8006966:	2e02      	cmp	r6, #2
 8006968:	d002      	beq.n	8006970 <_fseeko_r+0x64>
 800696a:	2316      	movs	r3, #22
 800696c:	2e00      	cmp	r6, #0
 800696e:	d1ec      	bne.n	800694a <_fseeko_r+0x3e>
 8006970:	6923      	ldr	r3, [r4, #16]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d103      	bne.n	800697e <_fseeko_r+0x72>
 8006976:	0021      	movs	r1, r4
 8006978:	0028      	movs	r0, r5
 800697a:	f000 f92d 	bl	8006bd8 <__smakebuf_r>
 800697e:	0021      	movs	r1, r4
 8006980:	0028      	movs	r0, r5
 8006982:	f7ff fe89 	bl	8006698 <_fflush_r>
 8006986:	1e07      	subs	r7, r0, #0
 8006988:	d141      	bne.n	8006a0e <_fseeko_r+0x102>
 800698a:	0033      	movs	r3, r6
 800698c:	9a01      	ldr	r2, [sp, #4]
 800698e:	6a21      	ldr	r1, [r4, #32]
 8006990:	0028      	movs	r0, r5
 8006992:	9e00      	ldr	r6, [sp, #0]
 8006994:	47b0      	blx	r6
 8006996:	1c43      	adds	r3, r0, #1
 8006998:	d039      	beq.n	8006a0e <_fseeko_r+0x102>
 800699a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800699c:	2900      	cmp	r1, #0
 800699e:	d008      	beq.n	80069b2 <_fseeko_r+0xa6>
 80069a0:	0023      	movs	r3, r4
 80069a2:	3344      	adds	r3, #68	; 0x44
 80069a4:	4299      	cmp	r1, r3
 80069a6:	d002      	beq.n	80069ae <_fseeko_r+0xa2>
 80069a8:	0028      	movs	r0, r5
 80069aa:	f000 f96b 	bl	8006c84 <_free_r>
 80069ae:	2300      	movs	r3, #0
 80069b0:	6363      	str	r3, [r4, #52]	; 0x34
 80069b2:	2100      	movs	r1, #0
 80069b4:	0020      	movs	r0, r4
 80069b6:	6923      	ldr	r3, [r4, #16]
 80069b8:	4a1e      	ldr	r2, [pc, #120]	; (8006a34 <_fseeko_r+0x128>)
 80069ba:	6023      	str	r3, [r4, #0]
 80069bc:	89a3      	ldrh	r3, [r4, #12]
 80069be:	6061      	str	r1, [r4, #4]
 80069c0:	4013      	ands	r3, r2
 80069c2:	81a3      	strh	r3, [r4, #12]
 80069c4:	2208      	movs	r2, #8
 80069c6:	305c      	adds	r0, #92	; 0x5c
 80069c8:	f000 f953 	bl	8006c72 <memset>
 80069cc:	e021      	b.n	8006a12 <_fseeko_r+0x106>
 80069ce:	0021      	movs	r1, r4
 80069d0:	0028      	movs	r0, r5
 80069d2:	f7ff fe61 	bl	8006698 <_fflush_r>
 80069d6:	2380      	movs	r3, #128	; 0x80
 80069d8:	89a2      	ldrh	r2, [r4, #12]
 80069da:	015b      	lsls	r3, r3, #5
 80069dc:	401a      	ands	r2, r3
 80069de:	d00f      	beq.n	8006a00 <_fseeko_r+0xf4>
 80069e0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80069e2:	89a3      	ldrh	r3, [r4, #12]
 80069e4:	075a      	lsls	r2, r3, #29
 80069e6:	d516      	bpl.n	8006a16 <_fseeko_r+0x10a>
 80069e8:	6863      	ldr	r3, [r4, #4]
 80069ea:	1ac0      	subs	r0, r0, r3
 80069ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d001      	beq.n	80069f6 <_fseeko_r+0xea>
 80069f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80069f4:	1ac0      	subs	r0, r0, r3
 80069f6:	9b01      	ldr	r3, [sp, #4]
 80069f8:	2600      	movs	r6, #0
 80069fa:	181b      	adds	r3, r3, r0
 80069fc:	9301      	str	r3, [sp, #4]
 80069fe:	e7b7      	b.n	8006970 <_fseeko_r+0x64>
 8006a00:	0033      	movs	r3, r6
 8006a02:	6a21      	ldr	r1, [r4, #32]
 8006a04:	0028      	movs	r0, r5
 8006a06:	9e00      	ldr	r6, [sp, #0]
 8006a08:	47b0      	blx	r6
 8006a0a:	1c43      	adds	r3, r0, #1
 8006a0c:	d1e9      	bne.n	80069e2 <_fseeko_r+0xd6>
 8006a0e:	2701      	movs	r7, #1
 8006a10:	427f      	negs	r7, r7
 8006a12:	0038      	movs	r0, r7
 8006a14:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006a16:	071b      	lsls	r3, r3, #28
 8006a18:	d5ed      	bpl.n	80069f6 <_fseeko_r+0xea>
 8006a1a:	6823      	ldr	r3, [r4, #0]
 8006a1c:	6922      	ldr	r2, [r4, #16]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d0e9      	beq.n	80069f6 <_fseeko_r+0xea>
 8006a22:	1a9b      	subs	r3, r3, r2
 8006a24:	18c0      	adds	r0, r0, r3
 8006a26:	e7e6      	b.n	80069f6 <_fseeko_r+0xea>
 8006a28:	080078d8 	.word	0x080078d8
 8006a2c:	080078f8 	.word	0x080078f8
 8006a30:	080078b8 	.word	0x080078b8
 8006a34:	fffff7df 	.word	0xfffff7df

08006a38 <ftell>:
 8006a38:	b510      	push	{r4, lr}
 8006a3a:	4b03      	ldr	r3, [pc, #12]	; (8006a48 <ftell+0x10>)
 8006a3c:	0001      	movs	r1, r0
 8006a3e:	6818      	ldr	r0, [r3, #0]
 8006a40:	f000 f804 	bl	8006a4c <_ftello_r>
 8006a44:	bd10      	pop	{r4, pc}
 8006a46:	46c0      	nop			; (mov r8, r8)
 8006a48:	20000024 	.word	0x20000024

08006a4c <_ftello_r>:
 8006a4c:	b570      	push	{r4, r5, r6, lr}
 8006a4e:	0005      	movs	r5, r0
 8006a50:	000c      	movs	r4, r1
 8006a52:	2800      	cmp	r0, #0
 8006a54:	d004      	beq.n	8006a60 <_ftello_r+0x14>
 8006a56:	6983      	ldr	r3, [r0, #24]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d101      	bne.n	8006a60 <_ftello_r+0x14>
 8006a5c:	f7ff fe8a 	bl	8006774 <__sinit>
 8006a60:	4b23      	ldr	r3, [pc, #140]	; (8006af0 <_ftello_r+0xa4>)
 8006a62:	429c      	cmp	r4, r3
 8006a64:	d108      	bne.n	8006a78 <_ftello_r+0x2c>
 8006a66:	686c      	ldr	r4, [r5, #4]
 8006a68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a6a:	2e00      	cmp	r6, #0
 8006a6c:	d10e      	bne.n	8006a8c <_ftello_r+0x40>
 8006a6e:	231d      	movs	r3, #29
 8006a70:	602b      	str	r3, [r5, #0]
 8006a72:	2001      	movs	r0, #1
 8006a74:	4240      	negs	r0, r0
 8006a76:	bd70      	pop	{r4, r5, r6, pc}
 8006a78:	4b1e      	ldr	r3, [pc, #120]	; (8006af4 <_ftello_r+0xa8>)
 8006a7a:	429c      	cmp	r4, r3
 8006a7c:	d101      	bne.n	8006a82 <_ftello_r+0x36>
 8006a7e:	68ac      	ldr	r4, [r5, #8]
 8006a80:	e7f2      	b.n	8006a68 <_ftello_r+0x1c>
 8006a82:	4b1d      	ldr	r3, [pc, #116]	; (8006af8 <_ftello_r+0xac>)
 8006a84:	429c      	cmp	r4, r3
 8006a86:	d1ef      	bne.n	8006a68 <_ftello_r+0x1c>
 8006a88:	68ec      	ldr	r4, [r5, #12]
 8006a8a:	e7ed      	b.n	8006a68 <_ftello_r+0x1c>
 8006a8c:	230c      	movs	r3, #12
 8006a8e:	89a2      	ldrh	r2, [r4, #12]
 8006a90:	4013      	ands	r3, r2
 8006a92:	2b08      	cmp	r3, #8
 8006a94:	d11a      	bne.n	8006acc <_ftello_r+0x80>
 8006a96:	6823      	ldr	r3, [r4, #0]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d017      	beq.n	8006acc <_ftello_r+0x80>
 8006a9c:	6921      	ldr	r1, [r4, #16]
 8006a9e:	1a5b      	subs	r3, r3, r1
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	dd13      	ble.n	8006acc <_ftello_r+0x80>
 8006aa4:	05d3      	lsls	r3, r2, #23
 8006aa6:	d511      	bpl.n	8006acc <_ftello_r+0x80>
 8006aa8:	2302      	movs	r3, #2
 8006aaa:	2200      	movs	r2, #0
 8006aac:	6a21      	ldr	r1, [r4, #32]
 8006aae:	0028      	movs	r0, r5
 8006ab0:	47b0      	blx	r6
 8006ab2:	1c43      	adds	r3, r0, #1
 8006ab4:	d0dd      	beq.n	8006a72 <_ftello_r+0x26>
 8006ab6:	89a3      	ldrh	r3, [r4, #12]
 8006ab8:	075a      	lsls	r2, r3, #29
 8006aba:	d50f      	bpl.n	8006adc <_ftello_r+0x90>
 8006abc:	6863      	ldr	r3, [r4, #4]
 8006abe:	1ac0      	subs	r0, r0, r3
 8006ac0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d0d7      	beq.n	8006a76 <_ftello_r+0x2a>
 8006ac6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006ac8:	1ac0      	subs	r0, r0, r3
 8006aca:	e7d4      	b.n	8006a76 <_ftello_r+0x2a>
 8006acc:	2380      	movs	r3, #128	; 0x80
 8006ace:	015b      	lsls	r3, r3, #5
 8006ad0:	401a      	ands	r2, r3
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	2a00      	cmp	r2, #0
 8006ad6:	d0e9      	beq.n	8006aac <_ftello_r+0x60>
 8006ad8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006ada:	e7ec      	b.n	8006ab6 <_ftello_r+0x6a>
 8006adc:	071b      	lsls	r3, r3, #28
 8006ade:	d5ca      	bpl.n	8006a76 <_ftello_r+0x2a>
 8006ae0:	6823      	ldr	r3, [r4, #0]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d0c7      	beq.n	8006a76 <_ftello_r+0x2a>
 8006ae6:	6922      	ldr	r2, [r4, #16]
 8006ae8:	1a9b      	subs	r3, r3, r2
 8006aea:	18c0      	adds	r0, r0, r3
 8006aec:	e7c3      	b.n	8006a76 <_ftello_r+0x2a>
 8006aee:	46c0      	nop			; (mov r8, r8)
 8006af0:	080078d8 	.word	0x080078d8
 8006af4:	080078f8 	.word	0x080078f8
 8006af8:	080078b8 	.word	0x080078b8

08006afc <_fwalk_reent>:
 8006afc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006afe:	0004      	movs	r4, r0
 8006b00:	0007      	movs	r7, r0
 8006b02:	2600      	movs	r6, #0
 8006b04:	9101      	str	r1, [sp, #4]
 8006b06:	3448      	adds	r4, #72	; 0x48
 8006b08:	2c00      	cmp	r4, #0
 8006b0a:	d101      	bne.n	8006b10 <_fwalk_reent+0x14>
 8006b0c:	0030      	movs	r0, r6
 8006b0e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006b10:	6863      	ldr	r3, [r4, #4]
 8006b12:	68a5      	ldr	r5, [r4, #8]
 8006b14:	9300      	str	r3, [sp, #0]
 8006b16:	9b00      	ldr	r3, [sp, #0]
 8006b18:	3b01      	subs	r3, #1
 8006b1a:	9300      	str	r3, [sp, #0]
 8006b1c:	d501      	bpl.n	8006b22 <_fwalk_reent+0x26>
 8006b1e:	6824      	ldr	r4, [r4, #0]
 8006b20:	e7f2      	b.n	8006b08 <_fwalk_reent+0xc>
 8006b22:	89ab      	ldrh	r3, [r5, #12]
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	d908      	bls.n	8006b3a <_fwalk_reent+0x3e>
 8006b28:	220e      	movs	r2, #14
 8006b2a:	5eab      	ldrsh	r3, [r5, r2]
 8006b2c:	3301      	adds	r3, #1
 8006b2e:	d004      	beq.n	8006b3a <_fwalk_reent+0x3e>
 8006b30:	0029      	movs	r1, r5
 8006b32:	0038      	movs	r0, r7
 8006b34:	9b01      	ldr	r3, [sp, #4]
 8006b36:	4798      	blx	r3
 8006b38:	4306      	orrs	r6, r0
 8006b3a:	3568      	adds	r5, #104	; 0x68
 8006b3c:	e7eb      	b.n	8006b16 <_fwalk_reent+0x1a>
	...

08006b40 <__libc_init_array>:
 8006b40:	b570      	push	{r4, r5, r6, lr}
 8006b42:	2600      	movs	r6, #0
 8006b44:	4d0c      	ldr	r5, [pc, #48]	; (8006b78 <__libc_init_array+0x38>)
 8006b46:	4c0d      	ldr	r4, [pc, #52]	; (8006b7c <__libc_init_array+0x3c>)
 8006b48:	1b64      	subs	r4, r4, r5
 8006b4a:	10a4      	asrs	r4, r4, #2
 8006b4c:	42a6      	cmp	r6, r4
 8006b4e:	d109      	bne.n	8006b64 <__libc_init_array+0x24>
 8006b50:	2600      	movs	r6, #0
 8006b52:	f000 fe05 	bl	8007760 <_init>
 8006b56:	4d0a      	ldr	r5, [pc, #40]	; (8006b80 <__libc_init_array+0x40>)
 8006b58:	4c0a      	ldr	r4, [pc, #40]	; (8006b84 <__libc_init_array+0x44>)
 8006b5a:	1b64      	subs	r4, r4, r5
 8006b5c:	10a4      	asrs	r4, r4, #2
 8006b5e:	42a6      	cmp	r6, r4
 8006b60:	d105      	bne.n	8006b6e <__libc_init_array+0x2e>
 8006b62:	bd70      	pop	{r4, r5, r6, pc}
 8006b64:	00b3      	lsls	r3, r6, #2
 8006b66:	58eb      	ldr	r3, [r5, r3]
 8006b68:	4798      	blx	r3
 8006b6a:	3601      	adds	r6, #1
 8006b6c:	e7ee      	b.n	8006b4c <__libc_init_array+0xc>
 8006b6e:	00b3      	lsls	r3, r6, #2
 8006b70:	58eb      	ldr	r3, [r5, r3]
 8006b72:	4798      	blx	r3
 8006b74:	3601      	adds	r6, #1
 8006b76:	e7f2      	b.n	8006b5e <__libc_init_array+0x1e>
 8006b78:	08007950 	.word	0x08007950
 8006b7c:	08007950 	.word	0x08007950
 8006b80:	08007950 	.word	0x08007950
 8006b84:	08007954 	.word	0x08007954

08006b88 <__swhatbuf_r>:
 8006b88:	b570      	push	{r4, r5, r6, lr}
 8006b8a:	000e      	movs	r6, r1
 8006b8c:	001d      	movs	r5, r3
 8006b8e:	230e      	movs	r3, #14
 8006b90:	5ec9      	ldrsh	r1, [r1, r3]
 8006b92:	b096      	sub	sp, #88	; 0x58
 8006b94:	0014      	movs	r4, r2
 8006b96:	2900      	cmp	r1, #0
 8006b98:	da07      	bge.n	8006baa <__swhatbuf_r+0x22>
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	602b      	str	r3, [r5, #0]
 8006b9e:	89b3      	ldrh	r3, [r6, #12]
 8006ba0:	061b      	lsls	r3, r3, #24
 8006ba2:	d411      	bmi.n	8006bc8 <__swhatbuf_r+0x40>
 8006ba4:	2380      	movs	r3, #128	; 0x80
 8006ba6:	00db      	lsls	r3, r3, #3
 8006ba8:	e00f      	b.n	8006bca <__swhatbuf_r+0x42>
 8006baa:	466a      	mov	r2, sp
 8006bac:	f000 f9fe 	bl	8006fac <_fstat_r>
 8006bb0:	2800      	cmp	r0, #0
 8006bb2:	dbf2      	blt.n	8006b9a <__swhatbuf_r+0x12>
 8006bb4:	22f0      	movs	r2, #240	; 0xf0
 8006bb6:	9b01      	ldr	r3, [sp, #4]
 8006bb8:	0212      	lsls	r2, r2, #8
 8006bba:	4013      	ands	r3, r2
 8006bbc:	4a05      	ldr	r2, [pc, #20]	; (8006bd4 <__swhatbuf_r+0x4c>)
 8006bbe:	189b      	adds	r3, r3, r2
 8006bc0:	425a      	negs	r2, r3
 8006bc2:	4153      	adcs	r3, r2
 8006bc4:	602b      	str	r3, [r5, #0]
 8006bc6:	e7ed      	b.n	8006ba4 <__swhatbuf_r+0x1c>
 8006bc8:	2340      	movs	r3, #64	; 0x40
 8006bca:	2000      	movs	r0, #0
 8006bcc:	6023      	str	r3, [r4, #0]
 8006bce:	b016      	add	sp, #88	; 0x58
 8006bd0:	bd70      	pop	{r4, r5, r6, pc}
 8006bd2:	46c0      	nop			; (mov r8, r8)
 8006bd4:	ffffe000 	.word	0xffffe000

08006bd8 <__smakebuf_r>:
 8006bd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006bda:	2602      	movs	r6, #2
 8006bdc:	898b      	ldrh	r3, [r1, #12]
 8006bde:	0005      	movs	r5, r0
 8006be0:	000c      	movs	r4, r1
 8006be2:	4233      	tst	r3, r6
 8006be4:	d006      	beq.n	8006bf4 <__smakebuf_r+0x1c>
 8006be6:	0023      	movs	r3, r4
 8006be8:	3347      	adds	r3, #71	; 0x47
 8006bea:	6023      	str	r3, [r4, #0]
 8006bec:	6123      	str	r3, [r4, #16]
 8006bee:	2301      	movs	r3, #1
 8006bf0:	6163      	str	r3, [r4, #20]
 8006bf2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8006bf4:	ab01      	add	r3, sp, #4
 8006bf6:	466a      	mov	r2, sp
 8006bf8:	f7ff ffc6 	bl	8006b88 <__swhatbuf_r>
 8006bfc:	9900      	ldr	r1, [sp, #0]
 8006bfe:	0007      	movs	r7, r0
 8006c00:	0028      	movs	r0, r5
 8006c02:	f000 f889 	bl	8006d18 <_malloc_r>
 8006c06:	2800      	cmp	r0, #0
 8006c08:	d108      	bne.n	8006c1c <__smakebuf_r+0x44>
 8006c0a:	220c      	movs	r2, #12
 8006c0c:	5ea3      	ldrsh	r3, [r4, r2]
 8006c0e:	059a      	lsls	r2, r3, #22
 8006c10:	d4ef      	bmi.n	8006bf2 <__smakebuf_r+0x1a>
 8006c12:	2203      	movs	r2, #3
 8006c14:	4393      	bics	r3, r2
 8006c16:	431e      	orrs	r6, r3
 8006c18:	81a6      	strh	r6, [r4, #12]
 8006c1a:	e7e4      	b.n	8006be6 <__smakebuf_r+0xe>
 8006c1c:	4b0f      	ldr	r3, [pc, #60]	; (8006c5c <__smakebuf_r+0x84>)
 8006c1e:	62ab      	str	r3, [r5, #40]	; 0x28
 8006c20:	2380      	movs	r3, #128	; 0x80
 8006c22:	89a2      	ldrh	r2, [r4, #12]
 8006c24:	6020      	str	r0, [r4, #0]
 8006c26:	4313      	orrs	r3, r2
 8006c28:	81a3      	strh	r3, [r4, #12]
 8006c2a:	9b00      	ldr	r3, [sp, #0]
 8006c2c:	6120      	str	r0, [r4, #16]
 8006c2e:	6163      	str	r3, [r4, #20]
 8006c30:	9b01      	ldr	r3, [sp, #4]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d00d      	beq.n	8006c52 <__smakebuf_r+0x7a>
 8006c36:	230e      	movs	r3, #14
 8006c38:	5ee1      	ldrsh	r1, [r4, r3]
 8006c3a:	0028      	movs	r0, r5
 8006c3c:	f000 f9c8 	bl	8006fd0 <_isatty_r>
 8006c40:	2800      	cmp	r0, #0
 8006c42:	d006      	beq.n	8006c52 <__smakebuf_r+0x7a>
 8006c44:	2203      	movs	r2, #3
 8006c46:	89a3      	ldrh	r3, [r4, #12]
 8006c48:	4393      	bics	r3, r2
 8006c4a:	001a      	movs	r2, r3
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	81a3      	strh	r3, [r4, #12]
 8006c52:	89a0      	ldrh	r0, [r4, #12]
 8006c54:	4338      	orrs	r0, r7
 8006c56:	81a0      	strh	r0, [r4, #12]
 8006c58:	e7cb      	b.n	8006bf2 <__smakebuf_r+0x1a>
 8006c5a:	46c0      	nop			; (mov r8, r8)
 8006c5c:	08006739 	.word	0x08006739

08006c60 <memcpy>:
 8006c60:	2300      	movs	r3, #0
 8006c62:	b510      	push	{r4, lr}
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d100      	bne.n	8006c6a <memcpy+0xa>
 8006c68:	bd10      	pop	{r4, pc}
 8006c6a:	5ccc      	ldrb	r4, [r1, r3]
 8006c6c:	54c4      	strb	r4, [r0, r3]
 8006c6e:	3301      	adds	r3, #1
 8006c70:	e7f8      	b.n	8006c64 <memcpy+0x4>

08006c72 <memset>:
 8006c72:	0003      	movs	r3, r0
 8006c74:	1812      	adds	r2, r2, r0
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d100      	bne.n	8006c7c <memset+0xa>
 8006c7a:	4770      	bx	lr
 8006c7c:	7019      	strb	r1, [r3, #0]
 8006c7e:	3301      	adds	r3, #1
 8006c80:	e7f9      	b.n	8006c76 <memset+0x4>
	...

08006c84 <_free_r>:
 8006c84:	b570      	push	{r4, r5, r6, lr}
 8006c86:	0005      	movs	r5, r0
 8006c88:	2900      	cmp	r1, #0
 8006c8a:	d010      	beq.n	8006cae <_free_r+0x2a>
 8006c8c:	1f0c      	subs	r4, r1, #4
 8006c8e:	6823      	ldr	r3, [r4, #0]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	da00      	bge.n	8006c96 <_free_r+0x12>
 8006c94:	18e4      	adds	r4, r4, r3
 8006c96:	0028      	movs	r0, r5
 8006c98:	f000 f9c0 	bl	800701c <__malloc_lock>
 8006c9c:	4a1d      	ldr	r2, [pc, #116]	; (8006d14 <_free_r+0x90>)
 8006c9e:	6813      	ldr	r3, [r2, #0]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d105      	bne.n	8006cb0 <_free_r+0x2c>
 8006ca4:	6063      	str	r3, [r4, #4]
 8006ca6:	6014      	str	r4, [r2, #0]
 8006ca8:	0028      	movs	r0, r5
 8006caa:	f000 f9b8 	bl	800701e <__malloc_unlock>
 8006cae:	bd70      	pop	{r4, r5, r6, pc}
 8006cb0:	42a3      	cmp	r3, r4
 8006cb2:	d909      	bls.n	8006cc8 <_free_r+0x44>
 8006cb4:	6821      	ldr	r1, [r4, #0]
 8006cb6:	1860      	adds	r0, r4, r1
 8006cb8:	4283      	cmp	r3, r0
 8006cba:	d1f3      	bne.n	8006ca4 <_free_r+0x20>
 8006cbc:	6818      	ldr	r0, [r3, #0]
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	1841      	adds	r1, r0, r1
 8006cc2:	6021      	str	r1, [r4, #0]
 8006cc4:	e7ee      	b.n	8006ca4 <_free_r+0x20>
 8006cc6:	0013      	movs	r3, r2
 8006cc8:	685a      	ldr	r2, [r3, #4]
 8006cca:	2a00      	cmp	r2, #0
 8006ccc:	d001      	beq.n	8006cd2 <_free_r+0x4e>
 8006cce:	42a2      	cmp	r2, r4
 8006cd0:	d9f9      	bls.n	8006cc6 <_free_r+0x42>
 8006cd2:	6819      	ldr	r1, [r3, #0]
 8006cd4:	1858      	adds	r0, r3, r1
 8006cd6:	42a0      	cmp	r0, r4
 8006cd8:	d10b      	bne.n	8006cf2 <_free_r+0x6e>
 8006cda:	6820      	ldr	r0, [r4, #0]
 8006cdc:	1809      	adds	r1, r1, r0
 8006cde:	1858      	adds	r0, r3, r1
 8006ce0:	6019      	str	r1, [r3, #0]
 8006ce2:	4282      	cmp	r2, r0
 8006ce4:	d1e0      	bne.n	8006ca8 <_free_r+0x24>
 8006ce6:	6810      	ldr	r0, [r2, #0]
 8006ce8:	6852      	ldr	r2, [r2, #4]
 8006cea:	1841      	adds	r1, r0, r1
 8006cec:	6019      	str	r1, [r3, #0]
 8006cee:	605a      	str	r2, [r3, #4]
 8006cf0:	e7da      	b.n	8006ca8 <_free_r+0x24>
 8006cf2:	42a0      	cmp	r0, r4
 8006cf4:	d902      	bls.n	8006cfc <_free_r+0x78>
 8006cf6:	230c      	movs	r3, #12
 8006cf8:	602b      	str	r3, [r5, #0]
 8006cfa:	e7d5      	b.n	8006ca8 <_free_r+0x24>
 8006cfc:	6821      	ldr	r1, [r4, #0]
 8006cfe:	1860      	adds	r0, r4, r1
 8006d00:	4282      	cmp	r2, r0
 8006d02:	d103      	bne.n	8006d0c <_free_r+0x88>
 8006d04:	6810      	ldr	r0, [r2, #0]
 8006d06:	6852      	ldr	r2, [r2, #4]
 8006d08:	1841      	adds	r1, r0, r1
 8006d0a:	6021      	str	r1, [r4, #0]
 8006d0c:	6062      	str	r2, [r4, #4]
 8006d0e:	605c      	str	r4, [r3, #4]
 8006d10:	e7ca      	b.n	8006ca8 <_free_r+0x24>
 8006d12:	46c0      	nop			; (mov r8, r8)
 8006d14:	200000dc 	.word	0x200000dc

08006d18 <_malloc_r>:
 8006d18:	2303      	movs	r3, #3
 8006d1a:	b570      	push	{r4, r5, r6, lr}
 8006d1c:	1ccd      	adds	r5, r1, #3
 8006d1e:	439d      	bics	r5, r3
 8006d20:	3508      	adds	r5, #8
 8006d22:	0006      	movs	r6, r0
 8006d24:	2d0c      	cmp	r5, #12
 8006d26:	d21e      	bcs.n	8006d66 <_malloc_r+0x4e>
 8006d28:	250c      	movs	r5, #12
 8006d2a:	42a9      	cmp	r1, r5
 8006d2c:	d81d      	bhi.n	8006d6a <_malloc_r+0x52>
 8006d2e:	0030      	movs	r0, r6
 8006d30:	f000 f974 	bl	800701c <__malloc_lock>
 8006d34:	4a25      	ldr	r2, [pc, #148]	; (8006dcc <_malloc_r+0xb4>)
 8006d36:	6814      	ldr	r4, [r2, #0]
 8006d38:	0021      	movs	r1, r4
 8006d3a:	2900      	cmp	r1, #0
 8006d3c:	d119      	bne.n	8006d72 <_malloc_r+0x5a>
 8006d3e:	4c24      	ldr	r4, [pc, #144]	; (8006dd0 <_malloc_r+0xb8>)
 8006d40:	6823      	ldr	r3, [r4, #0]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d103      	bne.n	8006d4e <_malloc_r+0x36>
 8006d46:	0030      	movs	r0, r6
 8006d48:	f000 f872 	bl	8006e30 <_sbrk_r>
 8006d4c:	6020      	str	r0, [r4, #0]
 8006d4e:	0029      	movs	r1, r5
 8006d50:	0030      	movs	r0, r6
 8006d52:	f000 f86d 	bl	8006e30 <_sbrk_r>
 8006d56:	1c43      	adds	r3, r0, #1
 8006d58:	d12b      	bne.n	8006db2 <_malloc_r+0x9a>
 8006d5a:	230c      	movs	r3, #12
 8006d5c:	0030      	movs	r0, r6
 8006d5e:	6033      	str	r3, [r6, #0]
 8006d60:	f000 f95d 	bl	800701e <__malloc_unlock>
 8006d64:	e003      	b.n	8006d6e <_malloc_r+0x56>
 8006d66:	2d00      	cmp	r5, #0
 8006d68:	dadf      	bge.n	8006d2a <_malloc_r+0x12>
 8006d6a:	230c      	movs	r3, #12
 8006d6c:	6033      	str	r3, [r6, #0]
 8006d6e:	2000      	movs	r0, #0
 8006d70:	bd70      	pop	{r4, r5, r6, pc}
 8006d72:	680b      	ldr	r3, [r1, #0]
 8006d74:	1b5b      	subs	r3, r3, r5
 8006d76:	d419      	bmi.n	8006dac <_malloc_r+0x94>
 8006d78:	2b0b      	cmp	r3, #11
 8006d7a:	d903      	bls.n	8006d84 <_malloc_r+0x6c>
 8006d7c:	600b      	str	r3, [r1, #0]
 8006d7e:	18cc      	adds	r4, r1, r3
 8006d80:	6025      	str	r5, [r4, #0]
 8006d82:	e003      	b.n	8006d8c <_malloc_r+0x74>
 8006d84:	684b      	ldr	r3, [r1, #4]
 8006d86:	428c      	cmp	r4, r1
 8006d88:	d10d      	bne.n	8006da6 <_malloc_r+0x8e>
 8006d8a:	6013      	str	r3, [r2, #0]
 8006d8c:	0030      	movs	r0, r6
 8006d8e:	f000 f946 	bl	800701e <__malloc_unlock>
 8006d92:	0020      	movs	r0, r4
 8006d94:	2207      	movs	r2, #7
 8006d96:	300b      	adds	r0, #11
 8006d98:	1d23      	adds	r3, r4, #4
 8006d9a:	4390      	bics	r0, r2
 8006d9c:	1ac3      	subs	r3, r0, r3
 8006d9e:	d0e7      	beq.n	8006d70 <_malloc_r+0x58>
 8006da0:	425a      	negs	r2, r3
 8006da2:	50e2      	str	r2, [r4, r3]
 8006da4:	e7e4      	b.n	8006d70 <_malloc_r+0x58>
 8006da6:	6063      	str	r3, [r4, #4]
 8006da8:	000c      	movs	r4, r1
 8006daa:	e7ef      	b.n	8006d8c <_malloc_r+0x74>
 8006dac:	000c      	movs	r4, r1
 8006dae:	6849      	ldr	r1, [r1, #4]
 8006db0:	e7c3      	b.n	8006d3a <_malloc_r+0x22>
 8006db2:	2303      	movs	r3, #3
 8006db4:	1cc4      	adds	r4, r0, #3
 8006db6:	439c      	bics	r4, r3
 8006db8:	42a0      	cmp	r0, r4
 8006dba:	d0e1      	beq.n	8006d80 <_malloc_r+0x68>
 8006dbc:	1a21      	subs	r1, r4, r0
 8006dbe:	0030      	movs	r0, r6
 8006dc0:	f000 f836 	bl	8006e30 <_sbrk_r>
 8006dc4:	1c43      	adds	r3, r0, #1
 8006dc6:	d1db      	bne.n	8006d80 <_malloc_r+0x68>
 8006dc8:	e7c7      	b.n	8006d5a <_malloc_r+0x42>
 8006dca:	46c0      	nop			; (mov r8, r8)
 8006dcc:	200000dc 	.word	0x200000dc
 8006dd0:	200000e0 	.word	0x200000e0

08006dd4 <_open_r>:
 8006dd4:	b570      	push	{r4, r5, r6, lr}
 8006dd6:	0005      	movs	r5, r0
 8006dd8:	0008      	movs	r0, r1
 8006dda:	0011      	movs	r1, r2
 8006ddc:	2200      	movs	r2, #0
 8006dde:	4c06      	ldr	r4, [pc, #24]	; (8006df8 <_open_r+0x24>)
 8006de0:	6022      	str	r2, [r4, #0]
 8006de2:	001a      	movs	r2, r3
 8006de4:	f7f9 ff90 	bl	8000d08 <_open>
 8006de8:	1c43      	adds	r3, r0, #1
 8006dea:	d103      	bne.n	8006df4 <_open_r+0x20>
 8006dec:	6823      	ldr	r3, [r4, #0]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d000      	beq.n	8006df4 <_open_r+0x20>
 8006df2:	602b      	str	r3, [r5, #0]
 8006df4:	bd70      	pop	{r4, r5, r6, pc}
 8006df6:	46c0      	nop			; (mov r8, r8)
 8006df8:	200005b8 	.word	0x200005b8

08006dfc <iprintf>:
 8006dfc:	b40f      	push	{r0, r1, r2, r3}
 8006dfe:	4b0b      	ldr	r3, [pc, #44]	; (8006e2c <iprintf+0x30>)
 8006e00:	b513      	push	{r0, r1, r4, lr}
 8006e02:	681c      	ldr	r4, [r3, #0]
 8006e04:	2c00      	cmp	r4, #0
 8006e06:	d005      	beq.n	8006e14 <iprintf+0x18>
 8006e08:	69a3      	ldr	r3, [r4, #24]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d102      	bne.n	8006e14 <iprintf+0x18>
 8006e0e:	0020      	movs	r0, r4
 8006e10:	f7ff fcb0 	bl	8006774 <__sinit>
 8006e14:	ab05      	add	r3, sp, #20
 8006e16:	9a04      	ldr	r2, [sp, #16]
 8006e18:	68a1      	ldr	r1, [r4, #8]
 8006e1a:	0020      	movs	r0, r4
 8006e1c:	9301      	str	r3, [sp, #4]
 8006e1e:	f000 f927 	bl	8007070 <_vfiprintf_r>
 8006e22:	bc16      	pop	{r1, r2, r4}
 8006e24:	bc08      	pop	{r3}
 8006e26:	b004      	add	sp, #16
 8006e28:	4718      	bx	r3
 8006e2a:	46c0      	nop			; (mov r8, r8)
 8006e2c:	20000024 	.word	0x20000024

08006e30 <_sbrk_r>:
 8006e30:	2300      	movs	r3, #0
 8006e32:	b570      	push	{r4, r5, r6, lr}
 8006e34:	4c06      	ldr	r4, [pc, #24]	; (8006e50 <_sbrk_r+0x20>)
 8006e36:	0005      	movs	r5, r0
 8006e38:	0008      	movs	r0, r1
 8006e3a:	6023      	str	r3, [r4, #0]
 8006e3c:	f7f9 ff72 	bl	8000d24 <_sbrk>
 8006e40:	1c43      	adds	r3, r0, #1
 8006e42:	d103      	bne.n	8006e4c <_sbrk_r+0x1c>
 8006e44:	6823      	ldr	r3, [r4, #0]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d000      	beq.n	8006e4c <_sbrk_r+0x1c>
 8006e4a:	602b      	str	r3, [r5, #0]
 8006e4c:	bd70      	pop	{r4, r5, r6, pc}
 8006e4e:	46c0      	nop			; (mov r8, r8)
 8006e50:	200005b8 	.word	0x200005b8

08006e54 <__sread>:
 8006e54:	b570      	push	{r4, r5, r6, lr}
 8006e56:	000c      	movs	r4, r1
 8006e58:	250e      	movs	r5, #14
 8006e5a:	5f49      	ldrsh	r1, [r1, r5]
 8006e5c:	f000 fb94 	bl	8007588 <_read_r>
 8006e60:	2800      	cmp	r0, #0
 8006e62:	db03      	blt.n	8006e6c <__sread+0x18>
 8006e64:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006e66:	181b      	adds	r3, r3, r0
 8006e68:	6563      	str	r3, [r4, #84]	; 0x54
 8006e6a:	bd70      	pop	{r4, r5, r6, pc}
 8006e6c:	89a3      	ldrh	r3, [r4, #12]
 8006e6e:	4a02      	ldr	r2, [pc, #8]	; (8006e78 <__sread+0x24>)
 8006e70:	4013      	ands	r3, r2
 8006e72:	81a3      	strh	r3, [r4, #12]
 8006e74:	e7f9      	b.n	8006e6a <__sread+0x16>
 8006e76:	46c0      	nop			; (mov r8, r8)
 8006e78:	ffffefff 	.word	0xffffefff

08006e7c <__swrite>:
 8006e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e7e:	001f      	movs	r7, r3
 8006e80:	898b      	ldrh	r3, [r1, #12]
 8006e82:	0005      	movs	r5, r0
 8006e84:	000c      	movs	r4, r1
 8006e86:	0016      	movs	r6, r2
 8006e88:	05db      	lsls	r3, r3, #23
 8006e8a:	d505      	bpl.n	8006e98 <__swrite+0x1c>
 8006e8c:	230e      	movs	r3, #14
 8006e8e:	5ec9      	ldrsh	r1, [r1, r3]
 8006e90:	2200      	movs	r2, #0
 8006e92:	2302      	movs	r3, #2
 8006e94:	f000 f8ae 	bl	8006ff4 <_lseek_r>
 8006e98:	89a3      	ldrh	r3, [r4, #12]
 8006e9a:	4a05      	ldr	r2, [pc, #20]	; (8006eb0 <__swrite+0x34>)
 8006e9c:	0028      	movs	r0, r5
 8006e9e:	4013      	ands	r3, r2
 8006ea0:	81a3      	strh	r3, [r4, #12]
 8006ea2:	0032      	movs	r2, r6
 8006ea4:	230e      	movs	r3, #14
 8006ea6:	5ee1      	ldrsh	r1, [r4, r3]
 8006ea8:	003b      	movs	r3, r7
 8006eaa:	f000 f81f 	bl	8006eec <_write_r>
 8006eae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006eb0:	ffffefff 	.word	0xffffefff

08006eb4 <__sseek>:
 8006eb4:	b570      	push	{r4, r5, r6, lr}
 8006eb6:	000c      	movs	r4, r1
 8006eb8:	250e      	movs	r5, #14
 8006eba:	5f49      	ldrsh	r1, [r1, r5]
 8006ebc:	f000 f89a 	bl	8006ff4 <_lseek_r>
 8006ec0:	89a3      	ldrh	r3, [r4, #12]
 8006ec2:	1c42      	adds	r2, r0, #1
 8006ec4:	d103      	bne.n	8006ece <__sseek+0x1a>
 8006ec6:	4a05      	ldr	r2, [pc, #20]	; (8006edc <__sseek+0x28>)
 8006ec8:	4013      	ands	r3, r2
 8006eca:	81a3      	strh	r3, [r4, #12]
 8006ecc:	bd70      	pop	{r4, r5, r6, pc}
 8006ece:	2280      	movs	r2, #128	; 0x80
 8006ed0:	0152      	lsls	r2, r2, #5
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	81a3      	strh	r3, [r4, #12]
 8006ed6:	6560      	str	r0, [r4, #84]	; 0x54
 8006ed8:	e7f8      	b.n	8006ecc <__sseek+0x18>
 8006eda:	46c0      	nop			; (mov r8, r8)
 8006edc:	ffffefff 	.word	0xffffefff

08006ee0 <__sclose>:
 8006ee0:	b510      	push	{r4, lr}
 8006ee2:	230e      	movs	r3, #14
 8006ee4:	5ec9      	ldrsh	r1, [r1, r3]
 8006ee6:	f000 f815 	bl	8006f14 <_close_r>
 8006eea:	bd10      	pop	{r4, pc}

08006eec <_write_r>:
 8006eec:	b570      	push	{r4, r5, r6, lr}
 8006eee:	0005      	movs	r5, r0
 8006ef0:	0008      	movs	r0, r1
 8006ef2:	0011      	movs	r1, r2
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	4c06      	ldr	r4, [pc, #24]	; (8006f10 <_write_r+0x24>)
 8006ef8:	6022      	str	r2, [r4, #0]
 8006efa:	001a      	movs	r2, r3
 8006efc:	f7f9 febc 	bl	8000c78 <_write>
 8006f00:	1c43      	adds	r3, r0, #1
 8006f02:	d103      	bne.n	8006f0c <_write_r+0x20>
 8006f04:	6823      	ldr	r3, [r4, #0]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d000      	beq.n	8006f0c <_write_r+0x20>
 8006f0a:	602b      	str	r3, [r5, #0]
 8006f0c:	bd70      	pop	{r4, r5, r6, pc}
 8006f0e:	46c0      	nop			; (mov r8, r8)
 8006f10:	200005b8 	.word	0x200005b8

08006f14 <_close_r>:
 8006f14:	2300      	movs	r3, #0
 8006f16:	b570      	push	{r4, r5, r6, lr}
 8006f18:	4c06      	ldr	r4, [pc, #24]	; (8006f34 <_close_r+0x20>)
 8006f1a:	0005      	movs	r5, r0
 8006f1c:	0008      	movs	r0, r1
 8006f1e:	6023      	str	r3, [r4, #0]
 8006f20:	f7f9 fec6 	bl	8000cb0 <_close>
 8006f24:	1c43      	adds	r3, r0, #1
 8006f26:	d103      	bne.n	8006f30 <_close_r+0x1c>
 8006f28:	6823      	ldr	r3, [r4, #0]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d000      	beq.n	8006f30 <_close_r+0x1c>
 8006f2e:	602b      	str	r3, [r5, #0]
 8006f30:	bd70      	pop	{r4, r5, r6, pc}
 8006f32:	46c0      	nop			; (mov r8, r8)
 8006f34:	200005b8 	.word	0x200005b8

08006f38 <__sflags>:
 8006f38:	780b      	ldrb	r3, [r1, #0]
 8006f3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f3c:	2b72      	cmp	r3, #114	; 0x72
 8006f3e:	d030      	beq.n	8006fa2 <__sflags+0x6a>
 8006f40:	2b77      	cmp	r3, #119	; 0x77
 8006f42:	d007      	beq.n	8006f54 <__sflags+0x1c>
 8006f44:	2b61      	cmp	r3, #97	; 0x61
 8006f46:	d10f      	bne.n	8006f68 <__sflags+0x30>
 8006f48:	2482      	movs	r4, #130	; 0x82
 8006f4a:	2084      	movs	r0, #132	; 0x84
 8006f4c:	00a4      	lsls	r4, r4, #2
 8006f4e:	2301      	movs	r3, #1
 8006f50:	0040      	lsls	r0, r0, #1
 8006f52:	e003      	b.n	8006f5c <__sflags+0x24>
 8006f54:	24c0      	movs	r4, #192	; 0xc0
 8006f56:	2301      	movs	r3, #1
 8006f58:	2008      	movs	r0, #8
 8006f5a:	00e4      	lsls	r4, r4, #3
 8006f5c:	2680      	movs	r6, #128	; 0x80
 8006f5e:	2510      	movs	r5, #16
 8006f60:	0136      	lsls	r6, r6, #4
 8006f62:	271c      	movs	r7, #28
 8006f64:	46ac      	mov	ip, r5
 8006f66:	e010      	b.n	8006f8a <__sflags+0x52>
 8006f68:	2316      	movs	r3, #22
 8006f6a:	6003      	str	r3, [r0, #0]
 8006f6c:	2000      	movs	r0, #0
 8006f6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f70:	2d62      	cmp	r5, #98	; 0x62
 8006f72:	d011      	beq.n	8006f98 <__sflags+0x60>
 8006f74:	2d78      	cmp	r5, #120	; 0x78
 8006f76:	d012      	beq.n	8006f9e <__sflags+0x66>
 8006f78:	2d2b      	cmp	r5, #43	; 0x2b
 8006f7a:	d106      	bne.n	8006f8a <__sflags+0x52>
 8006f7c:	4665      	mov	r5, ip
 8006f7e:	43b8      	bics	r0, r7
 8006f80:	4328      	orrs	r0, r5
 8006f82:	2503      	movs	r5, #3
 8006f84:	43ab      	bics	r3, r5
 8006f86:	3d01      	subs	r5, #1
 8006f88:	432b      	orrs	r3, r5
 8006f8a:	3101      	adds	r1, #1
 8006f8c:	780d      	ldrb	r5, [r1, #0]
 8006f8e:	2d00      	cmp	r5, #0
 8006f90:	d1ee      	bne.n	8006f70 <__sflags+0x38>
 8006f92:	4323      	orrs	r3, r4
 8006f94:	6013      	str	r3, [r2, #0]
 8006f96:	e7ea      	b.n	8006f6e <__sflags+0x36>
 8006f98:	2580      	movs	r5, #128	; 0x80
 8006f9a:	026d      	lsls	r5, r5, #9
 8006f9c:	e7f4      	b.n	8006f88 <__sflags+0x50>
 8006f9e:	4333      	orrs	r3, r6
 8006fa0:	e7f3      	b.n	8006f8a <__sflags+0x52>
 8006fa2:	2400      	movs	r4, #0
 8006fa4:	2004      	movs	r0, #4
 8006fa6:	0023      	movs	r3, r4
 8006fa8:	e7d8      	b.n	8006f5c <__sflags+0x24>
	...

08006fac <_fstat_r>:
 8006fac:	2300      	movs	r3, #0
 8006fae:	b570      	push	{r4, r5, r6, lr}
 8006fb0:	4c06      	ldr	r4, [pc, #24]	; (8006fcc <_fstat_r+0x20>)
 8006fb2:	0005      	movs	r5, r0
 8006fb4:	0008      	movs	r0, r1
 8006fb6:	0011      	movs	r1, r2
 8006fb8:	6023      	str	r3, [r4, #0]
 8006fba:	f7f9 fe83 	bl	8000cc4 <_fstat>
 8006fbe:	1c43      	adds	r3, r0, #1
 8006fc0:	d103      	bne.n	8006fca <_fstat_r+0x1e>
 8006fc2:	6823      	ldr	r3, [r4, #0]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d000      	beq.n	8006fca <_fstat_r+0x1e>
 8006fc8:	602b      	str	r3, [r5, #0]
 8006fca:	bd70      	pop	{r4, r5, r6, pc}
 8006fcc:	200005b8 	.word	0x200005b8

08006fd0 <_isatty_r>:
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	b570      	push	{r4, r5, r6, lr}
 8006fd4:	4c06      	ldr	r4, [pc, #24]	; (8006ff0 <_isatty_r+0x20>)
 8006fd6:	0005      	movs	r5, r0
 8006fd8:	0008      	movs	r0, r1
 8006fda:	6023      	str	r3, [r4, #0]
 8006fdc:	f7f9 fe80 	bl	8000ce0 <_isatty>
 8006fe0:	1c43      	adds	r3, r0, #1
 8006fe2:	d103      	bne.n	8006fec <_isatty_r+0x1c>
 8006fe4:	6823      	ldr	r3, [r4, #0]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d000      	beq.n	8006fec <_isatty_r+0x1c>
 8006fea:	602b      	str	r3, [r5, #0]
 8006fec:	bd70      	pop	{r4, r5, r6, pc}
 8006fee:	46c0      	nop			; (mov r8, r8)
 8006ff0:	200005b8 	.word	0x200005b8

08006ff4 <_lseek_r>:
 8006ff4:	b570      	push	{r4, r5, r6, lr}
 8006ff6:	0005      	movs	r5, r0
 8006ff8:	0008      	movs	r0, r1
 8006ffa:	0011      	movs	r1, r2
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	4c06      	ldr	r4, [pc, #24]	; (8007018 <_lseek_r+0x24>)
 8007000:	6022      	str	r2, [r4, #0]
 8007002:	001a      	movs	r2, r3
 8007004:	f7f9 fe75 	bl	8000cf2 <_lseek>
 8007008:	1c43      	adds	r3, r0, #1
 800700a:	d103      	bne.n	8007014 <_lseek_r+0x20>
 800700c:	6823      	ldr	r3, [r4, #0]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d000      	beq.n	8007014 <_lseek_r+0x20>
 8007012:	602b      	str	r3, [r5, #0]
 8007014:	bd70      	pop	{r4, r5, r6, pc}
 8007016:	46c0      	nop			; (mov r8, r8)
 8007018:	200005b8 	.word	0x200005b8

0800701c <__malloc_lock>:
 800701c:	4770      	bx	lr

0800701e <__malloc_unlock>:
 800701e:	4770      	bx	lr

08007020 <__sfputc_r>:
 8007020:	6893      	ldr	r3, [r2, #8]
 8007022:	b510      	push	{r4, lr}
 8007024:	3b01      	subs	r3, #1
 8007026:	6093      	str	r3, [r2, #8]
 8007028:	2b00      	cmp	r3, #0
 800702a:	da04      	bge.n	8007036 <__sfputc_r+0x16>
 800702c:	6994      	ldr	r4, [r2, #24]
 800702e:	42a3      	cmp	r3, r4
 8007030:	db07      	blt.n	8007042 <__sfputc_r+0x22>
 8007032:	290a      	cmp	r1, #10
 8007034:	d005      	beq.n	8007042 <__sfputc_r+0x22>
 8007036:	6813      	ldr	r3, [r2, #0]
 8007038:	1c58      	adds	r0, r3, #1
 800703a:	6010      	str	r0, [r2, #0]
 800703c:	7019      	strb	r1, [r3, #0]
 800703e:	0008      	movs	r0, r1
 8007040:	bd10      	pop	{r4, pc}
 8007042:	f000 fab5 	bl	80075b0 <__swbuf_r>
 8007046:	0001      	movs	r1, r0
 8007048:	e7f9      	b.n	800703e <__sfputc_r+0x1e>

0800704a <__sfputs_r>:
 800704a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800704c:	0006      	movs	r6, r0
 800704e:	000f      	movs	r7, r1
 8007050:	0014      	movs	r4, r2
 8007052:	18d5      	adds	r5, r2, r3
 8007054:	42ac      	cmp	r4, r5
 8007056:	d101      	bne.n	800705c <__sfputs_r+0x12>
 8007058:	2000      	movs	r0, #0
 800705a:	e007      	b.n	800706c <__sfputs_r+0x22>
 800705c:	7821      	ldrb	r1, [r4, #0]
 800705e:	003a      	movs	r2, r7
 8007060:	0030      	movs	r0, r6
 8007062:	f7ff ffdd 	bl	8007020 <__sfputc_r>
 8007066:	3401      	adds	r4, #1
 8007068:	1c43      	adds	r3, r0, #1
 800706a:	d1f3      	bne.n	8007054 <__sfputs_r+0xa>
 800706c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007070 <_vfiprintf_r>:
 8007070:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007072:	b0a1      	sub	sp, #132	; 0x84
 8007074:	9003      	str	r0, [sp, #12]
 8007076:	000f      	movs	r7, r1
 8007078:	0016      	movs	r6, r2
 800707a:	001d      	movs	r5, r3
 800707c:	2800      	cmp	r0, #0
 800707e:	d005      	beq.n	800708c <_vfiprintf_r+0x1c>
 8007080:	6983      	ldr	r3, [r0, #24]
 8007082:	9305      	str	r3, [sp, #20]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d101      	bne.n	800708c <_vfiprintf_r+0x1c>
 8007088:	f7ff fb74 	bl	8006774 <__sinit>
 800708c:	4b7b      	ldr	r3, [pc, #492]	; (800727c <_vfiprintf_r+0x20c>)
 800708e:	429f      	cmp	r7, r3
 8007090:	d15c      	bne.n	800714c <_vfiprintf_r+0xdc>
 8007092:	9b03      	ldr	r3, [sp, #12]
 8007094:	685f      	ldr	r7, [r3, #4]
 8007096:	89bb      	ldrh	r3, [r7, #12]
 8007098:	071b      	lsls	r3, r3, #28
 800709a:	d563      	bpl.n	8007164 <_vfiprintf_r+0xf4>
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d060      	beq.n	8007164 <_vfiprintf_r+0xf4>
 80070a2:	2300      	movs	r3, #0
 80070a4:	ac08      	add	r4, sp, #32
 80070a6:	6163      	str	r3, [r4, #20]
 80070a8:	3320      	adds	r3, #32
 80070aa:	7663      	strb	r3, [r4, #25]
 80070ac:	3310      	adds	r3, #16
 80070ae:	76a3      	strb	r3, [r4, #26]
 80070b0:	9507      	str	r5, [sp, #28]
 80070b2:	0035      	movs	r5, r6
 80070b4:	782b      	ldrb	r3, [r5, #0]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d001      	beq.n	80070be <_vfiprintf_r+0x4e>
 80070ba:	2b25      	cmp	r3, #37	; 0x25
 80070bc:	d15c      	bne.n	8007178 <_vfiprintf_r+0x108>
 80070be:	1bab      	subs	r3, r5, r6
 80070c0:	9305      	str	r3, [sp, #20]
 80070c2:	d00c      	beq.n	80070de <_vfiprintf_r+0x6e>
 80070c4:	0032      	movs	r2, r6
 80070c6:	0039      	movs	r1, r7
 80070c8:	9803      	ldr	r0, [sp, #12]
 80070ca:	f7ff ffbe 	bl	800704a <__sfputs_r>
 80070ce:	1c43      	adds	r3, r0, #1
 80070d0:	d100      	bne.n	80070d4 <_vfiprintf_r+0x64>
 80070d2:	e0c4      	b.n	800725e <_vfiprintf_r+0x1ee>
 80070d4:	6962      	ldr	r2, [r4, #20]
 80070d6:	9b05      	ldr	r3, [sp, #20]
 80070d8:	4694      	mov	ip, r2
 80070da:	4463      	add	r3, ip
 80070dc:	6163      	str	r3, [r4, #20]
 80070de:	782b      	ldrb	r3, [r5, #0]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d100      	bne.n	80070e6 <_vfiprintf_r+0x76>
 80070e4:	e0bb      	b.n	800725e <_vfiprintf_r+0x1ee>
 80070e6:	2201      	movs	r2, #1
 80070e8:	2300      	movs	r3, #0
 80070ea:	4252      	negs	r2, r2
 80070ec:	6062      	str	r2, [r4, #4]
 80070ee:	a904      	add	r1, sp, #16
 80070f0:	3254      	adds	r2, #84	; 0x54
 80070f2:	1852      	adds	r2, r2, r1
 80070f4:	1c6e      	adds	r6, r5, #1
 80070f6:	6023      	str	r3, [r4, #0]
 80070f8:	60e3      	str	r3, [r4, #12]
 80070fa:	60a3      	str	r3, [r4, #8]
 80070fc:	7013      	strb	r3, [r2, #0]
 80070fe:	65a3      	str	r3, [r4, #88]	; 0x58
 8007100:	7831      	ldrb	r1, [r6, #0]
 8007102:	2205      	movs	r2, #5
 8007104:	485e      	ldr	r0, [pc, #376]	; (8007280 <_vfiprintf_r+0x210>)
 8007106:	f000 fb1f 	bl	8007748 <memchr>
 800710a:	1c75      	adds	r5, r6, #1
 800710c:	2800      	cmp	r0, #0
 800710e:	d135      	bne.n	800717c <_vfiprintf_r+0x10c>
 8007110:	6822      	ldr	r2, [r4, #0]
 8007112:	06d3      	lsls	r3, r2, #27
 8007114:	d504      	bpl.n	8007120 <_vfiprintf_r+0xb0>
 8007116:	2353      	movs	r3, #83	; 0x53
 8007118:	a904      	add	r1, sp, #16
 800711a:	185b      	adds	r3, r3, r1
 800711c:	2120      	movs	r1, #32
 800711e:	7019      	strb	r1, [r3, #0]
 8007120:	0713      	lsls	r3, r2, #28
 8007122:	d504      	bpl.n	800712e <_vfiprintf_r+0xbe>
 8007124:	2353      	movs	r3, #83	; 0x53
 8007126:	a904      	add	r1, sp, #16
 8007128:	185b      	adds	r3, r3, r1
 800712a:	212b      	movs	r1, #43	; 0x2b
 800712c:	7019      	strb	r1, [r3, #0]
 800712e:	7833      	ldrb	r3, [r6, #0]
 8007130:	2b2a      	cmp	r3, #42	; 0x2a
 8007132:	d02c      	beq.n	800718e <_vfiprintf_r+0x11e>
 8007134:	0035      	movs	r5, r6
 8007136:	2100      	movs	r1, #0
 8007138:	200a      	movs	r0, #10
 800713a:	68e3      	ldr	r3, [r4, #12]
 800713c:	782a      	ldrb	r2, [r5, #0]
 800713e:	1c6e      	adds	r6, r5, #1
 8007140:	3a30      	subs	r2, #48	; 0x30
 8007142:	2a09      	cmp	r2, #9
 8007144:	d964      	bls.n	8007210 <_vfiprintf_r+0x1a0>
 8007146:	2900      	cmp	r1, #0
 8007148:	d02e      	beq.n	80071a8 <_vfiprintf_r+0x138>
 800714a:	e026      	b.n	800719a <_vfiprintf_r+0x12a>
 800714c:	4b4d      	ldr	r3, [pc, #308]	; (8007284 <_vfiprintf_r+0x214>)
 800714e:	429f      	cmp	r7, r3
 8007150:	d102      	bne.n	8007158 <_vfiprintf_r+0xe8>
 8007152:	9b03      	ldr	r3, [sp, #12]
 8007154:	689f      	ldr	r7, [r3, #8]
 8007156:	e79e      	b.n	8007096 <_vfiprintf_r+0x26>
 8007158:	4b4b      	ldr	r3, [pc, #300]	; (8007288 <_vfiprintf_r+0x218>)
 800715a:	429f      	cmp	r7, r3
 800715c:	d19b      	bne.n	8007096 <_vfiprintf_r+0x26>
 800715e:	9b03      	ldr	r3, [sp, #12]
 8007160:	68df      	ldr	r7, [r3, #12]
 8007162:	e798      	b.n	8007096 <_vfiprintf_r+0x26>
 8007164:	0039      	movs	r1, r7
 8007166:	9803      	ldr	r0, [sp, #12]
 8007168:	f000 fa78 	bl	800765c <__swsetup_r>
 800716c:	2800      	cmp	r0, #0
 800716e:	d098      	beq.n	80070a2 <_vfiprintf_r+0x32>
 8007170:	2001      	movs	r0, #1
 8007172:	4240      	negs	r0, r0
 8007174:	b021      	add	sp, #132	; 0x84
 8007176:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007178:	3501      	adds	r5, #1
 800717a:	e79b      	b.n	80070b4 <_vfiprintf_r+0x44>
 800717c:	4b40      	ldr	r3, [pc, #256]	; (8007280 <_vfiprintf_r+0x210>)
 800717e:	6822      	ldr	r2, [r4, #0]
 8007180:	1ac0      	subs	r0, r0, r3
 8007182:	2301      	movs	r3, #1
 8007184:	4083      	lsls	r3, r0
 8007186:	4313      	orrs	r3, r2
 8007188:	6023      	str	r3, [r4, #0]
 800718a:	002e      	movs	r6, r5
 800718c:	e7b8      	b.n	8007100 <_vfiprintf_r+0x90>
 800718e:	9b07      	ldr	r3, [sp, #28]
 8007190:	1d19      	adds	r1, r3, #4
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	9107      	str	r1, [sp, #28]
 8007196:	2b00      	cmp	r3, #0
 8007198:	db01      	blt.n	800719e <_vfiprintf_r+0x12e>
 800719a:	930b      	str	r3, [sp, #44]	; 0x2c
 800719c:	e004      	b.n	80071a8 <_vfiprintf_r+0x138>
 800719e:	425b      	negs	r3, r3
 80071a0:	60e3      	str	r3, [r4, #12]
 80071a2:	2302      	movs	r3, #2
 80071a4:	4313      	orrs	r3, r2
 80071a6:	6023      	str	r3, [r4, #0]
 80071a8:	782b      	ldrb	r3, [r5, #0]
 80071aa:	2b2e      	cmp	r3, #46	; 0x2e
 80071ac:	d10a      	bne.n	80071c4 <_vfiprintf_r+0x154>
 80071ae:	786b      	ldrb	r3, [r5, #1]
 80071b0:	2b2a      	cmp	r3, #42	; 0x2a
 80071b2:	d135      	bne.n	8007220 <_vfiprintf_r+0x1b0>
 80071b4:	9b07      	ldr	r3, [sp, #28]
 80071b6:	3502      	adds	r5, #2
 80071b8:	1d1a      	adds	r2, r3, #4
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	9207      	str	r2, [sp, #28]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	db2b      	blt.n	800721a <_vfiprintf_r+0x1aa>
 80071c2:	9309      	str	r3, [sp, #36]	; 0x24
 80071c4:	4e31      	ldr	r6, [pc, #196]	; (800728c <_vfiprintf_r+0x21c>)
 80071c6:	7829      	ldrb	r1, [r5, #0]
 80071c8:	2203      	movs	r2, #3
 80071ca:	0030      	movs	r0, r6
 80071cc:	f000 fabc 	bl	8007748 <memchr>
 80071d0:	2800      	cmp	r0, #0
 80071d2:	d006      	beq.n	80071e2 <_vfiprintf_r+0x172>
 80071d4:	2340      	movs	r3, #64	; 0x40
 80071d6:	1b80      	subs	r0, r0, r6
 80071d8:	4083      	lsls	r3, r0
 80071da:	6822      	ldr	r2, [r4, #0]
 80071dc:	3501      	adds	r5, #1
 80071de:	4313      	orrs	r3, r2
 80071e0:	6023      	str	r3, [r4, #0]
 80071e2:	7829      	ldrb	r1, [r5, #0]
 80071e4:	2206      	movs	r2, #6
 80071e6:	482a      	ldr	r0, [pc, #168]	; (8007290 <_vfiprintf_r+0x220>)
 80071e8:	1c6e      	adds	r6, r5, #1
 80071ea:	7621      	strb	r1, [r4, #24]
 80071ec:	f000 faac 	bl	8007748 <memchr>
 80071f0:	2800      	cmp	r0, #0
 80071f2:	d03a      	beq.n	800726a <_vfiprintf_r+0x1fa>
 80071f4:	4b27      	ldr	r3, [pc, #156]	; (8007294 <_vfiprintf_r+0x224>)
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d125      	bne.n	8007246 <_vfiprintf_r+0x1d6>
 80071fa:	2207      	movs	r2, #7
 80071fc:	9b07      	ldr	r3, [sp, #28]
 80071fe:	3307      	adds	r3, #7
 8007200:	4393      	bics	r3, r2
 8007202:	3308      	adds	r3, #8
 8007204:	9307      	str	r3, [sp, #28]
 8007206:	6963      	ldr	r3, [r4, #20]
 8007208:	9a04      	ldr	r2, [sp, #16]
 800720a:	189b      	adds	r3, r3, r2
 800720c:	6163      	str	r3, [r4, #20]
 800720e:	e750      	b.n	80070b2 <_vfiprintf_r+0x42>
 8007210:	4343      	muls	r3, r0
 8007212:	2101      	movs	r1, #1
 8007214:	189b      	adds	r3, r3, r2
 8007216:	0035      	movs	r5, r6
 8007218:	e790      	b.n	800713c <_vfiprintf_r+0xcc>
 800721a:	2301      	movs	r3, #1
 800721c:	425b      	negs	r3, r3
 800721e:	e7d0      	b.n	80071c2 <_vfiprintf_r+0x152>
 8007220:	2300      	movs	r3, #0
 8007222:	200a      	movs	r0, #10
 8007224:	001a      	movs	r2, r3
 8007226:	3501      	adds	r5, #1
 8007228:	6063      	str	r3, [r4, #4]
 800722a:	7829      	ldrb	r1, [r5, #0]
 800722c:	1c6e      	adds	r6, r5, #1
 800722e:	3930      	subs	r1, #48	; 0x30
 8007230:	2909      	cmp	r1, #9
 8007232:	d903      	bls.n	800723c <_vfiprintf_r+0x1cc>
 8007234:	2b00      	cmp	r3, #0
 8007236:	d0c5      	beq.n	80071c4 <_vfiprintf_r+0x154>
 8007238:	9209      	str	r2, [sp, #36]	; 0x24
 800723a:	e7c3      	b.n	80071c4 <_vfiprintf_r+0x154>
 800723c:	4342      	muls	r2, r0
 800723e:	2301      	movs	r3, #1
 8007240:	1852      	adds	r2, r2, r1
 8007242:	0035      	movs	r5, r6
 8007244:	e7f1      	b.n	800722a <_vfiprintf_r+0x1ba>
 8007246:	ab07      	add	r3, sp, #28
 8007248:	9300      	str	r3, [sp, #0]
 800724a:	003a      	movs	r2, r7
 800724c:	4b12      	ldr	r3, [pc, #72]	; (8007298 <_vfiprintf_r+0x228>)
 800724e:	0021      	movs	r1, r4
 8007250:	9803      	ldr	r0, [sp, #12]
 8007252:	e000      	b.n	8007256 <_vfiprintf_r+0x1e6>
 8007254:	bf00      	nop
 8007256:	9004      	str	r0, [sp, #16]
 8007258:	9b04      	ldr	r3, [sp, #16]
 800725a:	3301      	adds	r3, #1
 800725c:	d1d3      	bne.n	8007206 <_vfiprintf_r+0x196>
 800725e:	89bb      	ldrh	r3, [r7, #12]
 8007260:	065b      	lsls	r3, r3, #25
 8007262:	d500      	bpl.n	8007266 <_vfiprintf_r+0x1f6>
 8007264:	e784      	b.n	8007170 <_vfiprintf_r+0x100>
 8007266:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007268:	e784      	b.n	8007174 <_vfiprintf_r+0x104>
 800726a:	ab07      	add	r3, sp, #28
 800726c:	9300      	str	r3, [sp, #0]
 800726e:	003a      	movs	r2, r7
 8007270:	4b09      	ldr	r3, [pc, #36]	; (8007298 <_vfiprintf_r+0x228>)
 8007272:	0021      	movs	r1, r4
 8007274:	9803      	ldr	r0, [sp, #12]
 8007276:	f000 f87f 	bl	8007378 <_printf_i>
 800727a:	e7ec      	b.n	8007256 <_vfiprintf_r+0x1e6>
 800727c:	080078d8 	.word	0x080078d8
 8007280:	0800791c 	.word	0x0800791c
 8007284:	080078f8 	.word	0x080078f8
 8007288:	080078b8 	.word	0x080078b8
 800728c:	08007922 	.word	0x08007922
 8007290:	08007926 	.word	0x08007926
 8007294:	00000000 	.word	0x00000000
 8007298:	0800704b 	.word	0x0800704b

0800729c <_printf_common>:
 800729c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800729e:	0015      	movs	r5, r2
 80072a0:	9301      	str	r3, [sp, #4]
 80072a2:	688a      	ldr	r2, [r1, #8]
 80072a4:	690b      	ldr	r3, [r1, #16]
 80072a6:	9000      	str	r0, [sp, #0]
 80072a8:	000c      	movs	r4, r1
 80072aa:	4293      	cmp	r3, r2
 80072ac:	da00      	bge.n	80072b0 <_printf_common+0x14>
 80072ae:	0013      	movs	r3, r2
 80072b0:	0022      	movs	r2, r4
 80072b2:	602b      	str	r3, [r5, #0]
 80072b4:	3243      	adds	r2, #67	; 0x43
 80072b6:	7812      	ldrb	r2, [r2, #0]
 80072b8:	2a00      	cmp	r2, #0
 80072ba:	d001      	beq.n	80072c0 <_printf_common+0x24>
 80072bc:	3301      	adds	r3, #1
 80072be:	602b      	str	r3, [r5, #0]
 80072c0:	6823      	ldr	r3, [r4, #0]
 80072c2:	069b      	lsls	r3, r3, #26
 80072c4:	d502      	bpl.n	80072cc <_printf_common+0x30>
 80072c6:	682b      	ldr	r3, [r5, #0]
 80072c8:	3302      	adds	r3, #2
 80072ca:	602b      	str	r3, [r5, #0]
 80072cc:	2706      	movs	r7, #6
 80072ce:	6823      	ldr	r3, [r4, #0]
 80072d0:	401f      	ands	r7, r3
 80072d2:	d027      	beq.n	8007324 <_printf_common+0x88>
 80072d4:	0023      	movs	r3, r4
 80072d6:	3343      	adds	r3, #67	; 0x43
 80072d8:	781b      	ldrb	r3, [r3, #0]
 80072da:	1e5a      	subs	r2, r3, #1
 80072dc:	4193      	sbcs	r3, r2
 80072de:	6822      	ldr	r2, [r4, #0]
 80072e0:	0692      	lsls	r2, r2, #26
 80072e2:	d430      	bmi.n	8007346 <_printf_common+0xaa>
 80072e4:	0022      	movs	r2, r4
 80072e6:	9901      	ldr	r1, [sp, #4]
 80072e8:	3243      	adds	r2, #67	; 0x43
 80072ea:	9800      	ldr	r0, [sp, #0]
 80072ec:	9e08      	ldr	r6, [sp, #32]
 80072ee:	47b0      	blx	r6
 80072f0:	1c43      	adds	r3, r0, #1
 80072f2:	d025      	beq.n	8007340 <_printf_common+0xa4>
 80072f4:	2306      	movs	r3, #6
 80072f6:	6820      	ldr	r0, [r4, #0]
 80072f8:	682a      	ldr	r2, [r5, #0]
 80072fa:	68e1      	ldr	r1, [r4, #12]
 80072fc:	4003      	ands	r3, r0
 80072fe:	2500      	movs	r5, #0
 8007300:	2b04      	cmp	r3, #4
 8007302:	d103      	bne.n	800730c <_printf_common+0x70>
 8007304:	1a8d      	subs	r5, r1, r2
 8007306:	43eb      	mvns	r3, r5
 8007308:	17db      	asrs	r3, r3, #31
 800730a:	401d      	ands	r5, r3
 800730c:	68a3      	ldr	r3, [r4, #8]
 800730e:	6922      	ldr	r2, [r4, #16]
 8007310:	4293      	cmp	r3, r2
 8007312:	dd01      	ble.n	8007318 <_printf_common+0x7c>
 8007314:	1a9b      	subs	r3, r3, r2
 8007316:	18ed      	adds	r5, r5, r3
 8007318:	2700      	movs	r7, #0
 800731a:	42bd      	cmp	r5, r7
 800731c:	d120      	bne.n	8007360 <_printf_common+0xc4>
 800731e:	2000      	movs	r0, #0
 8007320:	e010      	b.n	8007344 <_printf_common+0xa8>
 8007322:	3701      	adds	r7, #1
 8007324:	68e3      	ldr	r3, [r4, #12]
 8007326:	682a      	ldr	r2, [r5, #0]
 8007328:	1a9b      	subs	r3, r3, r2
 800732a:	42bb      	cmp	r3, r7
 800732c:	ddd2      	ble.n	80072d4 <_printf_common+0x38>
 800732e:	0022      	movs	r2, r4
 8007330:	2301      	movs	r3, #1
 8007332:	3219      	adds	r2, #25
 8007334:	9901      	ldr	r1, [sp, #4]
 8007336:	9800      	ldr	r0, [sp, #0]
 8007338:	9e08      	ldr	r6, [sp, #32]
 800733a:	47b0      	blx	r6
 800733c:	1c43      	adds	r3, r0, #1
 800733e:	d1f0      	bne.n	8007322 <_printf_common+0x86>
 8007340:	2001      	movs	r0, #1
 8007342:	4240      	negs	r0, r0
 8007344:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007346:	2030      	movs	r0, #48	; 0x30
 8007348:	18e1      	adds	r1, r4, r3
 800734a:	3143      	adds	r1, #67	; 0x43
 800734c:	7008      	strb	r0, [r1, #0]
 800734e:	0021      	movs	r1, r4
 8007350:	1c5a      	adds	r2, r3, #1
 8007352:	3145      	adds	r1, #69	; 0x45
 8007354:	7809      	ldrb	r1, [r1, #0]
 8007356:	18a2      	adds	r2, r4, r2
 8007358:	3243      	adds	r2, #67	; 0x43
 800735a:	3302      	adds	r3, #2
 800735c:	7011      	strb	r1, [r2, #0]
 800735e:	e7c1      	b.n	80072e4 <_printf_common+0x48>
 8007360:	0022      	movs	r2, r4
 8007362:	2301      	movs	r3, #1
 8007364:	321a      	adds	r2, #26
 8007366:	9901      	ldr	r1, [sp, #4]
 8007368:	9800      	ldr	r0, [sp, #0]
 800736a:	9e08      	ldr	r6, [sp, #32]
 800736c:	47b0      	blx	r6
 800736e:	1c43      	adds	r3, r0, #1
 8007370:	d0e6      	beq.n	8007340 <_printf_common+0xa4>
 8007372:	3701      	adds	r7, #1
 8007374:	e7d1      	b.n	800731a <_printf_common+0x7e>
	...

08007378 <_printf_i>:
 8007378:	b5f0      	push	{r4, r5, r6, r7, lr}
 800737a:	b089      	sub	sp, #36	; 0x24
 800737c:	9204      	str	r2, [sp, #16]
 800737e:	000a      	movs	r2, r1
 8007380:	3243      	adds	r2, #67	; 0x43
 8007382:	9305      	str	r3, [sp, #20]
 8007384:	9003      	str	r0, [sp, #12]
 8007386:	9202      	str	r2, [sp, #8]
 8007388:	7e0a      	ldrb	r2, [r1, #24]
 800738a:	000c      	movs	r4, r1
 800738c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800738e:	2a6e      	cmp	r2, #110	; 0x6e
 8007390:	d100      	bne.n	8007394 <_printf_i+0x1c>
 8007392:	e086      	b.n	80074a2 <_printf_i+0x12a>
 8007394:	d81f      	bhi.n	80073d6 <_printf_i+0x5e>
 8007396:	2a63      	cmp	r2, #99	; 0x63
 8007398:	d033      	beq.n	8007402 <_printf_i+0x8a>
 800739a:	d808      	bhi.n	80073ae <_printf_i+0x36>
 800739c:	2a00      	cmp	r2, #0
 800739e:	d100      	bne.n	80073a2 <_printf_i+0x2a>
 80073a0:	e08c      	b.n	80074bc <_printf_i+0x144>
 80073a2:	2a58      	cmp	r2, #88	; 0x58
 80073a4:	d04d      	beq.n	8007442 <_printf_i+0xca>
 80073a6:	0025      	movs	r5, r4
 80073a8:	3542      	adds	r5, #66	; 0x42
 80073aa:	702a      	strb	r2, [r5, #0]
 80073ac:	e030      	b.n	8007410 <_printf_i+0x98>
 80073ae:	2a64      	cmp	r2, #100	; 0x64
 80073b0:	d001      	beq.n	80073b6 <_printf_i+0x3e>
 80073b2:	2a69      	cmp	r2, #105	; 0x69
 80073b4:	d1f7      	bne.n	80073a6 <_printf_i+0x2e>
 80073b6:	6819      	ldr	r1, [r3, #0]
 80073b8:	6825      	ldr	r5, [r4, #0]
 80073ba:	1d0a      	adds	r2, r1, #4
 80073bc:	0628      	lsls	r0, r5, #24
 80073be:	d529      	bpl.n	8007414 <_printf_i+0x9c>
 80073c0:	6808      	ldr	r0, [r1, #0]
 80073c2:	601a      	str	r2, [r3, #0]
 80073c4:	2800      	cmp	r0, #0
 80073c6:	da03      	bge.n	80073d0 <_printf_i+0x58>
 80073c8:	232d      	movs	r3, #45	; 0x2d
 80073ca:	9a02      	ldr	r2, [sp, #8]
 80073cc:	4240      	negs	r0, r0
 80073ce:	7013      	strb	r3, [r2, #0]
 80073d0:	4e6b      	ldr	r6, [pc, #428]	; (8007580 <_printf_i+0x208>)
 80073d2:	270a      	movs	r7, #10
 80073d4:	e04f      	b.n	8007476 <_printf_i+0xfe>
 80073d6:	2a73      	cmp	r2, #115	; 0x73
 80073d8:	d074      	beq.n	80074c4 <_printf_i+0x14c>
 80073da:	d808      	bhi.n	80073ee <_printf_i+0x76>
 80073dc:	2a6f      	cmp	r2, #111	; 0x6f
 80073de:	d01f      	beq.n	8007420 <_printf_i+0xa8>
 80073e0:	2a70      	cmp	r2, #112	; 0x70
 80073e2:	d1e0      	bne.n	80073a6 <_printf_i+0x2e>
 80073e4:	2220      	movs	r2, #32
 80073e6:	6809      	ldr	r1, [r1, #0]
 80073e8:	430a      	orrs	r2, r1
 80073ea:	6022      	str	r2, [r4, #0]
 80073ec:	e003      	b.n	80073f6 <_printf_i+0x7e>
 80073ee:	2a75      	cmp	r2, #117	; 0x75
 80073f0:	d016      	beq.n	8007420 <_printf_i+0xa8>
 80073f2:	2a78      	cmp	r2, #120	; 0x78
 80073f4:	d1d7      	bne.n	80073a6 <_printf_i+0x2e>
 80073f6:	0022      	movs	r2, r4
 80073f8:	2178      	movs	r1, #120	; 0x78
 80073fa:	3245      	adds	r2, #69	; 0x45
 80073fc:	7011      	strb	r1, [r2, #0]
 80073fe:	4e61      	ldr	r6, [pc, #388]	; (8007584 <_printf_i+0x20c>)
 8007400:	e022      	b.n	8007448 <_printf_i+0xd0>
 8007402:	0025      	movs	r5, r4
 8007404:	681a      	ldr	r2, [r3, #0]
 8007406:	3542      	adds	r5, #66	; 0x42
 8007408:	1d11      	adds	r1, r2, #4
 800740a:	6019      	str	r1, [r3, #0]
 800740c:	6813      	ldr	r3, [r2, #0]
 800740e:	702b      	strb	r3, [r5, #0]
 8007410:	2301      	movs	r3, #1
 8007412:	e065      	b.n	80074e0 <_printf_i+0x168>
 8007414:	6808      	ldr	r0, [r1, #0]
 8007416:	601a      	str	r2, [r3, #0]
 8007418:	0669      	lsls	r1, r5, #25
 800741a:	d5d3      	bpl.n	80073c4 <_printf_i+0x4c>
 800741c:	b200      	sxth	r0, r0
 800741e:	e7d1      	b.n	80073c4 <_printf_i+0x4c>
 8007420:	6819      	ldr	r1, [r3, #0]
 8007422:	6825      	ldr	r5, [r4, #0]
 8007424:	1d08      	adds	r0, r1, #4
 8007426:	6018      	str	r0, [r3, #0]
 8007428:	6808      	ldr	r0, [r1, #0]
 800742a:	062e      	lsls	r6, r5, #24
 800742c:	d505      	bpl.n	800743a <_printf_i+0xc2>
 800742e:	4e54      	ldr	r6, [pc, #336]	; (8007580 <_printf_i+0x208>)
 8007430:	2708      	movs	r7, #8
 8007432:	2a6f      	cmp	r2, #111	; 0x6f
 8007434:	d01b      	beq.n	800746e <_printf_i+0xf6>
 8007436:	270a      	movs	r7, #10
 8007438:	e019      	b.n	800746e <_printf_i+0xf6>
 800743a:	066d      	lsls	r5, r5, #25
 800743c:	d5f7      	bpl.n	800742e <_printf_i+0xb6>
 800743e:	b280      	uxth	r0, r0
 8007440:	e7f5      	b.n	800742e <_printf_i+0xb6>
 8007442:	3145      	adds	r1, #69	; 0x45
 8007444:	4e4e      	ldr	r6, [pc, #312]	; (8007580 <_printf_i+0x208>)
 8007446:	700a      	strb	r2, [r1, #0]
 8007448:	6818      	ldr	r0, [r3, #0]
 800744a:	6822      	ldr	r2, [r4, #0]
 800744c:	1d01      	adds	r1, r0, #4
 800744e:	6800      	ldr	r0, [r0, #0]
 8007450:	6019      	str	r1, [r3, #0]
 8007452:	0615      	lsls	r5, r2, #24
 8007454:	d521      	bpl.n	800749a <_printf_i+0x122>
 8007456:	07d3      	lsls	r3, r2, #31
 8007458:	d502      	bpl.n	8007460 <_printf_i+0xe8>
 800745a:	2320      	movs	r3, #32
 800745c:	431a      	orrs	r2, r3
 800745e:	6022      	str	r2, [r4, #0]
 8007460:	2710      	movs	r7, #16
 8007462:	2800      	cmp	r0, #0
 8007464:	d103      	bne.n	800746e <_printf_i+0xf6>
 8007466:	2320      	movs	r3, #32
 8007468:	6822      	ldr	r2, [r4, #0]
 800746a:	439a      	bics	r2, r3
 800746c:	6022      	str	r2, [r4, #0]
 800746e:	0023      	movs	r3, r4
 8007470:	2200      	movs	r2, #0
 8007472:	3343      	adds	r3, #67	; 0x43
 8007474:	701a      	strb	r2, [r3, #0]
 8007476:	6863      	ldr	r3, [r4, #4]
 8007478:	60a3      	str	r3, [r4, #8]
 800747a:	2b00      	cmp	r3, #0
 800747c:	db58      	blt.n	8007530 <_printf_i+0x1b8>
 800747e:	2204      	movs	r2, #4
 8007480:	6821      	ldr	r1, [r4, #0]
 8007482:	4391      	bics	r1, r2
 8007484:	6021      	str	r1, [r4, #0]
 8007486:	2800      	cmp	r0, #0
 8007488:	d154      	bne.n	8007534 <_printf_i+0x1bc>
 800748a:	9d02      	ldr	r5, [sp, #8]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d05a      	beq.n	8007546 <_printf_i+0x1ce>
 8007490:	0025      	movs	r5, r4
 8007492:	7833      	ldrb	r3, [r6, #0]
 8007494:	3542      	adds	r5, #66	; 0x42
 8007496:	702b      	strb	r3, [r5, #0]
 8007498:	e055      	b.n	8007546 <_printf_i+0x1ce>
 800749a:	0655      	lsls	r5, r2, #25
 800749c:	d5db      	bpl.n	8007456 <_printf_i+0xde>
 800749e:	b280      	uxth	r0, r0
 80074a0:	e7d9      	b.n	8007456 <_printf_i+0xde>
 80074a2:	681a      	ldr	r2, [r3, #0]
 80074a4:	680d      	ldr	r5, [r1, #0]
 80074a6:	1d10      	adds	r0, r2, #4
 80074a8:	6949      	ldr	r1, [r1, #20]
 80074aa:	6018      	str	r0, [r3, #0]
 80074ac:	6813      	ldr	r3, [r2, #0]
 80074ae:	062e      	lsls	r6, r5, #24
 80074b0:	d501      	bpl.n	80074b6 <_printf_i+0x13e>
 80074b2:	6019      	str	r1, [r3, #0]
 80074b4:	e002      	b.n	80074bc <_printf_i+0x144>
 80074b6:	066d      	lsls	r5, r5, #25
 80074b8:	d5fb      	bpl.n	80074b2 <_printf_i+0x13a>
 80074ba:	8019      	strh	r1, [r3, #0]
 80074bc:	2300      	movs	r3, #0
 80074be:	9d02      	ldr	r5, [sp, #8]
 80074c0:	6123      	str	r3, [r4, #16]
 80074c2:	e04f      	b.n	8007564 <_printf_i+0x1ec>
 80074c4:	681a      	ldr	r2, [r3, #0]
 80074c6:	1d11      	adds	r1, r2, #4
 80074c8:	6019      	str	r1, [r3, #0]
 80074ca:	6815      	ldr	r5, [r2, #0]
 80074cc:	2100      	movs	r1, #0
 80074ce:	6862      	ldr	r2, [r4, #4]
 80074d0:	0028      	movs	r0, r5
 80074d2:	f000 f939 	bl	8007748 <memchr>
 80074d6:	2800      	cmp	r0, #0
 80074d8:	d001      	beq.n	80074de <_printf_i+0x166>
 80074da:	1b40      	subs	r0, r0, r5
 80074dc:	6060      	str	r0, [r4, #4]
 80074de:	6863      	ldr	r3, [r4, #4]
 80074e0:	6123      	str	r3, [r4, #16]
 80074e2:	2300      	movs	r3, #0
 80074e4:	9a02      	ldr	r2, [sp, #8]
 80074e6:	7013      	strb	r3, [r2, #0]
 80074e8:	e03c      	b.n	8007564 <_printf_i+0x1ec>
 80074ea:	6923      	ldr	r3, [r4, #16]
 80074ec:	002a      	movs	r2, r5
 80074ee:	9904      	ldr	r1, [sp, #16]
 80074f0:	9803      	ldr	r0, [sp, #12]
 80074f2:	9d05      	ldr	r5, [sp, #20]
 80074f4:	47a8      	blx	r5
 80074f6:	1c43      	adds	r3, r0, #1
 80074f8:	d03e      	beq.n	8007578 <_printf_i+0x200>
 80074fa:	6823      	ldr	r3, [r4, #0]
 80074fc:	079b      	lsls	r3, r3, #30
 80074fe:	d415      	bmi.n	800752c <_printf_i+0x1b4>
 8007500:	9b07      	ldr	r3, [sp, #28]
 8007502:	68e0      	ldr	r0, [r4, #12]
 8007504:	4298      	cmp	r0, r3
 8007506:	da39      	bge.n	800757c <_printf_i+0x204>
 8007508:	0018      	movs	r0, r3
 800750a:	e037      	b.n	800757c <_printf_i+0x204>
 800750c:	0022      	movs	r2, r4
 800750e:	2301      	movs	r3, #1
 8007510:	3219      	adds	r2, #25
 8007512:	9904      	ldr	r1, [sp, #16]
 8007514:	9803      	ldr	r0, [sp, #12]
 8007516:	9e05      	ldr	r6, [sp, #20]
 8007518:	47b0      	blx	r6
 800751a:	1c43      	adds	r3, r0, #1
 800751c:	d02c      	beq.n	8007578 <_printf_i+0x200>
 800751e:	3501      	adds	r5, #1
 8007520:	68e3      	ldr	r3, [r4, #12]
 8007522:	9a07      	ldr	r2, [sp, #28]
 8007524:	1a9b      	subs	r3, r3, r2
 8007526:	42ab      	cmp	r3, r5
 8007528:	dcf0      	bgt.n	800750c <_printf_i+0x194>
 800752a:	e7e9      	b.n	8007500 <_printf_i+0x188>
 800752c:	2500      	movs	r5, #0
 800752e:	e7f7      	b.n	8007520 <_printf_i+0x1a8>
 8007530:	2800      	cmp	r0, #0
 8007532:	d0ad      	beq.n	8007490 <_printf_i+0x118>
 8007534:	9d02      	ldr	r5, [sp, #8]
 8007536:	0039      	movs	r1, r7
 8007538:	f7f8 fe74 	bl	8000224 <__aeabi_uidivmod>
 800753c:	5c73      	ldrb	r3, [r6, r1]
 800753e:	3d01      	subs	r5, #1
 8007540:	702b      	strb	r3, [r5, #0]
 8007542:	2800      	cmp	r0, #0
 8007544:	d1f7      	bne.n	8007536 <_printf_i+0x1be>
 8007546:	2f08      	cmp	r7, #8
 8007548:	d109      	bne.n	800755e <_printf_i+0x1e6>
 800754a:	6823      	ldr	r3, [r4, #0]
 800754c:	07db      	lsls	r3, r3, #31
 800754e:	d506      	bpl.n	800755e <_printf_i+0x1e6>
 8007550:	6863      	ldr	r3, [r4, #4]
 8007552:	6922      	ldr	r2, [r4, #16]
 8007554:	4293      	cmp	r3, r2
 8007556:	dc02      	bgt.n	800755e <_printf_i+0x1e6>
 8007558:	2330      	movs	r3, #48	; 0x30
 800755a:	3d01      	subs	r5, #1
 800755c:	702b      	strb	r3, [r5, #0]
 800755e:	9b02      	ldr	r3, [sp, #8]
 8007560:	1b5b      	subs	r3, r3, r5
 8007562:	6123      	str	r3, [r4, #16]
 8007564:	9b05      	ldr	r3, [sp, #20]
 8007566:	aa07      	add	r2, sp, #28
 8007568:	9300      	str	r3, [sp, #0]
 800756a:	0021      	movs	r1, r4
 800756c:	9b04      	ldr	r3, [sp, #16]
 800756e:	9803      	ldr	r0, [sp, #12]
 8007570:	f7ff fe94 	bl	800729c <_printf_common>
 8007574:	1c43      	adds	r3, r0, #1
 8007576:	d1b8      	bne.n	80074ea <_printf_i+0x172>
 8007578:	2001      	movs	r0, #1
 800757a:	4240      	negs	r0, r0
 800757c:	b009      	add	sp, #36	; 0x24
 800757e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007580:	0800792d 	.word	0x0800792d
 8007584:	0800793e 	.word	0x0800793e

08007588 <_read_r>:
 8007588:	b570      	push	{r4, r5, r6, lr}
 800758a:	0005      	movs	r5, r0
 800758c:	0008      	movs	r0, r1
 800758e:	0011      	movs	r1, r2
 8007590:	2200      	movs	r2, #0
 8007592:	4c06      	ldr	r4, [pc, #24]	; (80075ac <_read_r+0x24>)
 8007594:	6022      	str	r2, [r4, #0]
 8007596:	001a      	movs	r2, r3
 8007598:	f7f9 fb51 	bl	8000c3e <_read>
 800759c:	1c43      	adds	r3, r0, #1
 800759e:	d103      	bne.n	80075a8 <_read_r+0x20>
 80075a0:	6823      	ldr	r3, [r4, #0]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d000      	beq.n	80075a8 <_read_r+0x20>
 80075a6:	602b      	str	r3, [r5, #0]
 80075a8:	bd70      	pop	{r4, r5, r6, pc}
 80075aa:	46c0      	nop			; (mov r8, r8)
 80075ac:	200005b8 	.word	0x200005b8

080075b0 <__swbuf_r>:
 80075b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075b2:	0005      	movs	r5, r0
 80075b4:	000e      	movs	r6, r1
 80075b6:	0014      	movs	r4, r2
 80075b8:	2800      	cmp	r0, #0
 80075ba:	d004      	beq.n	80075c6 <__swbuf_r+0x16>
 80075bc:	6983      	ldr	r3, [r0, #24]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d101      	bne.n	80075c6 <__swbuf_r+0x16>
 80075c2:	f7ff f8d7 	bl	8006774 <__sinit>
 80075c6:	4b22      	ldr	r3, [pc, #136]	; (8007650 <__swbuf_r+0xa0>)
 80075c8:	429c      	cmp	r4, r3
 80075ca:	d12d      	bne.n	8007628 <__swbuf_r+0x78>
 80075cc:	686c      	ldr	r4, [r5, #4]
 80075ce:	69a3      	ldr	r3, [r4, #24]
 80075d0:	60a3      	str	r3, [r4, #8]
 80075d2:	89a3      	ldrh	r3, [r4, #12]
 80075d4:	071b      	lsls	r3, r3, #28
 80075d6:	d531      	bpl.n	800763c <__swbuf_r+0x8c>
 80075d8:	6923      	ldr	r3, [r4, #16]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d02e      	beq.n	800763c <__swbuf_r+0x8c>
 80075de:	6823      	ldr	r3, [r4, #0]
 80075e0:	6922      	ldr	r2, [r4, #16]
 80075e2:	b2f7      	uxtb	r7, r6
 80075e4:	1a98      	subs	r0, r3, r2
 80075e6:	6963      	ldr	r3, [r4, #20]
 80075e8:	b2f6      	uxtb	r6, r6
 80075ea:	4283      	cmp	r3, r0
 80075ec:	dc05      	bgt.n	80075fa <__swbuf_r+0x4a>
 80075ee:	0021      	movs	r1, r4
 80075f0:	0028      	movs	r0, r5
 80075f2:	f7ff f851 	bl	8006698 <_fflush_r>
 80075f6:	2800      	cmp	r0, #0
 80075f8:	d126      	bne.n	8007648 <__swbuf_r+0x98>
 80075fa:	68a3      	ldr	r3, [r4, #8]
 80075fc:	3001      	adds	r0, #1
 80075fe:	3b01      	subs	r3, #1
 8007600:	60a3      	str	r3, [r4, #8]
 8007602:	6823      	ldr	r3, [r4, #0]
 8007604:	1c5a      	adds	r2, r3, #1
 8007606:	6022      	str	r2, [r4, #0]
 8007608:	701f      	strb	r7, [r3, #0]
 800760a:	6963      	ldr	r3, [r4, #20]
 800760c:	4283      	cmp	r3, r0
 800760e:	d004      	beq.n	800761a <__swbuf_r+0x6a>
 8007610:	89a3      	ldrh	r3, [r4, #12]
 8007612:	07db      	lsls	r3, r3, #31
 8007614:	d51a      	bpl.n	800764c <__swbuf_r+0x9c>
 8007616:	2e0a      	cmp	r6, #10
 8007618:	d118      	bne.n	800764c <__swbuf_r+0x9c>
 800761a:	0021      	movs	r1, r4
 800761c:	0028      	movs	r0, r5
 800761e:	f7ff f83b 	bl	8006698 <_fflush_r>
 8007622:	2800      	cmp	r0, #0
 8007624:	d012      	beq.n	800764c <__swbuf_r+0x9c>
 8007626:	e00f      	b.n	8007648 <__swbuf_r+0x98>
 8007628:	4b0a      	ldr	r3, [pc, #40]	; (8007654 <__swbuf_r+0xa4>)
 800762a:	429c      	cmp	r4, r3
 800762c:	d101      	bne.n	8007632 <__swbuf_r+0x82>
 800762e:	68ac      	ldr	r4, [r5, #8]
 8007630:	e7cd      	b.n	80075ce <__swbuf_r+0x1e>
 8007632:	4b09      	ldr	r3, [pc, #36]	; (8007658 <__swbuf_r+0xa8>)
 8007634:	429c      	cmp	r4, r3
 8007636:	d1ca      	bne.n	80075ce <__swbuf_r+0x1e>
 8007638:	68ec      	ldr	r4, [r5, #12]
 800763a:	e7c8      	b.n	80075ce <__swbuf_r+0x1e>
 800763c:	0021      	movs	r1, r4
 800763e:	0028      	movs	r0, r5
 8007640:	f000 f80c 	bl	800765c <__swsetup_r>
 8007644:	2800      	cmp	r0, #0
 8007646:	d0ca      	beq.n	80075de <__swbuf_r+0x2e>
 8007648:	2601      	movs	r6, #1
 800764a:	4276      	negs	r6, r6
 800764c:	0030      	movs	r0, r6
 800764e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007650:	080078d8 	.word	0x080078d8
 8007654:	080078f8 	.word	0x080078f8
 8007658:	080078b8 	.word	0x080078b8

0800765c <__swsetup_r>:
 800765c:	4b36      	ldr	r3, [pc, #216]	; (8007738 <__swsetup_r+0xdc>)
 800765e:	b570      	push	{r4, r5, r6, lr}
 8007660:	681d      	ldr	r5, [r3, #0]
 8007662:	0006      	movs	r6, r0
 8007664:	000c      	movs	r4, r1
 8007666:	2d00      	cmp	r5, #0
 8007668:	d005      	beq.n	8007676 <__swsetup_r+0x1a>
 800766a:	69ab      	ldr	r3, [r5, #24]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d102      	bne.n	8007676 <__swsetup_r+0x1a>
 8007670:	0028      	movs	r0, r5
 8007672:	f7ff f87f 	bl	8006774 <__sinit>
 8007676:	4b31      	ldr	r3, [pc, #196]	; (800773c <__swsetup_r+0xe0>)
 8007678:	429c      	cmp	r4, r3
 800767a:	d10f      	bne.n	800769c <__swsetup_r+0x40>
 800767c:	686c      	ldr	r4, [r5, #4]
 800767e:	230c      	movs	r3, #12
 8007680:	5ee2      	ldrsh	r2, [r4, r3]
 8007682:	b293      	uxth	r3, r2
 8007684:	0719      	lsls	r1, r3, #28
 8007686:	d42d      	bmi.n	80076e4 <__swsetup_r+0x88>
 8007688:	06d9      	lsls	r1, r3, #27
 800768a:	d411      	bmi.n	80076b0 <__swsetup_r+0x54>
 800768c:	2309      	movs	r3, #9
 800768e:	2001      	movs	r0, #1
 8007690:	6033      	str	r3, [r6, #0]
 8007692:	3337      	adds	r3, #55	; 0x37
 8007694:	4313      	orrs	r3, r2
 8007696:	81a3      	strh	r3, [r4, #12]
 8007698:	4240      	negs	r0, r0
 800769a:	bd70      	pop	{r4, r5, r6, pc}
 800769c:	4b28      	ldr	r3, [pc, #160]	; (8007740 <__swsetup_r+0xe4>)
 800769e:	429c      	cmp	r4, r3
 80076a0:	d101      	bne.n	80076a6 <__swsetup_r+0x4a>
 80076a2:	68ac      	ldr	r4, [r5, #8]
 80076a4:	e7eb      	b.n	800767e <__swsetup_r+0x22>
 80076a6:	4b27      	ldr	r3, [pc, #156]	; (8007744 <__swsetup_r+0xe8>)
 80076a8:	429c      	cmp	r4, r3
 80076aa:	d1e8      	bne.n	800767e <__swsetup_r+0x22>
 80076ac:	68ec      	ldr	r4, [r5, #12]
 80076ae:	e7e6      	b.n	800767e <__swsetup_r+0x22>
 80076b0:	075b      	lsls	r3, r3, #29
 80076b2:	d513      	bpl.n	80076dc <__swsetup_r+0x80>
 80076b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80076b6:	2900      	cmp	r1, #0
 80076b8:	d008      	beq.n	80076cc <__swsetup_r+0x70>
 80076ba:	0023      	movs	r3, r4
 80076bc:	3344      	adds	r3, #68	; 0x44
 80076be:	4299      	cmp	r1, r3
 80076c0:	d002      	beq.n	80076c8 <__swsetup_r+0x6c>
 80076c2:	0030      	movs	r0, r6
 80076c4:	f7ff fade 	bl	8006c84 <_free_r>
 80076c8:	2300      	movs	r3, #0
 80076ca:	6363      	str	r3, [r4, #52]	; 0x34
 80076cc:	2224      	movs	r2, #36	; 0x24
 80076ce:	89a3      	ldrh	r3, [r4, #12]
 80076d0:	4393      	bics	r3, r2
 80076d2:	81a3      	strh	r3, [r4, #12]
 80076d4:	2300      	movs	r3, #0
 80076d6:	6063      	str	r3, [r4, #4]
 80076d8:	6923      	ldr	r3, [r4, #16]
 80076da:	6023      	str	r3, [r4, #0]
 80076dc:	2308      	movs	r3, #8
 80076de:	89a2      	ldrh	r2, [r4, #12]
 80076e0:	4313      	orrs	r3, r2
 80076e2:	81a3      	strh	r3, [r4, #12]
 80076e4:	6923      	ldr	r3, [r4, #16]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d10b      	bne.n	8007702 <__swsetup_r+0xa6>
 80076ea:	21a0      	movs	r1, #160	; 0xa0
 80076ec:	2280      	movs	r2, #128	; 0x80
 80076ee:	89a3      	ldrh	r3, [r4, #12]
 80076f0:	0089      	lsls	r1, r1, #2
 80076f2:	0092      	lsls	r2, r2, #2
 80076f4:	400b      	ands	r3, r1
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d003      	beq.n	8007702 <__swsetup_r+0xa6>
 80076fa:	0021      	movs	r1, r4
 80076fc:	0030      	movs	r0, r6
 80076fe:	f7ff fa6b 	bl	8006bd8 <__smakebuf_r>
 8007702:	2301      	movs	r3, #1
 8007704:	89a2      	ldrh	r2, [r4, #12]
 8007706:	4013      	ands	r3, r2
 8007708:	d011      	beq.n	800772e <__swsetup_r+0xd2>
 800770a:	2300      	movs	r3, #0
 800770c:	60a3      	str	r3, [r4, #8]
 800770e:	6963      	ldr	r3, [r4, #20]
 8007710:	425b      	negs	r3, r3
 8007712:	61a3      	str	r3, [r4, #24]
 8007714:	2000      	movs	r0, #0
 8007716:	6923      	ldr	r3, [r4, #16]
 8007718:	4283      	cmp	r3, r0
 800771a:	d1be      	bne.n	800769a <__swsetup_r+0x3e>
 800771c:	230c      	movs	r3, #12
 800771e:	5ee2      	ldrsh	r2, [r4, r3]
 8007720:	0613      	lsls	r3, r2, #24
 8007722:	d5ba      	bpl.n	800769a <__swsetup_r+0x3e>
 8007724:	2340      	movs	r3, #64	; 0x40
 8007726:	4313      	orrs	r3, r2
 8007728:	81a3      	strh	r3, [r4, #12]
 800772a:	3801      	subs	r0, #1
 800772c:	e7b5      	b.n	800769a <__swsetup_r+0x3e>
 800772e:	0792      	lsls	r2, r2, #30
 8007730:	d400      	bmi.n	8007734 <__swsetup_r+0xd8>
 8007732:	6963      	ldr	r3, [r4, #20]
 8007734:	60a3      	str	r3, [r4, #8]
 8007736:	e7ed      	b.n	8007714 <__swsetup_r+0xb8>
 8007738:	20000024 	.word	0x20000024
 800773c:	080078d8 	.word	0x080078d8
 8007740:	080078f8 	.word	0x080078f8
 8007744:	080078b8 	.word	0x080078b8

08007748 <memchr>:
 8007748:	b2c9      	uxtb	r1, r1
 800774a:	1882      	adds	r2, r0, r2
 800774c:	4290      	cmp	r0, r2
 800774e:	d101      	bne.n	8007754 <memchr+0xc>
 8007750:	2000      	movs	r0, #0
 8007752:	4770      	bx	lr
 8007754:	7803      	ldrb	r3, [r0, #0]
 8007756:	428b      	cmp	r3, r1
 8007758:	d0fb      	beq.n	8007752 <memchr+0xa>
 800775a:	3001      	adds	r0, #1
 800775c:	e7f6      	b.n	800774c <memchr+0x4>
	...

08007760 <_init>:
 8007760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007762:	46c0      	nop			; (mov r8, r8)
 8007764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007766:	bc08      	pop	{r3}
 8007768:	469e      	mov	lr, r3
 800776a:	4770      	bx	lr

0800776c <_fini>:
 800776c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800776e:	46c0      	nop			; (mov r8, r8)
 8007770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007772:	bc08      	pop	{r3}
 8007774:	469e      	mov	lr, r3
 8007776:	4770      	bx	lr
